/*

WATTS CITY ROLEPLAY LIBERADO POR GONCHO28 EL 06/07/2016

*/

#include <a_samp>
#include <streamer>
#include <mSelection>
#include <YSI\y_timers>
#include <a_mysql>
#include <sscanf2>
#include <zcmd>
#include <CameraMover>
#include <G_ObjectsRot>
#include <progress>
#include <fader>
#include <RobosGR>
#include <Hash>
#include <senales>
#include <progress3>
#include <objetos>
#include <pause>

AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

#define MYSQL_HOST			"localhost"
#define MYSQL_USER 			"root"
#define MYSQL_PASS 			""
#define MYSQL_DB   			"wc"

#pragma unused Seifader_OnExit
#pragma unused StopLoopingAnim

#define VERSION_GM      	"WC v1.1.7"
#define SIN_PERMISOS    	"* No tienes los permisos necesarios para usar este comando."
#define NO_CONECTADO        "* El jugador indicado no está conectado."
#define MISMA_ID            "* No puedes introducir tu misma ID."
#define PAGINA_WEB      	"www.wattsrp.com"
#define PAGINA_PCU      	"www.wattsrp.com"
#define PAGINA_FORO     	"www.wattsrp.com/foro"
#define NOMBRE_COMUNIDAD 	"Watts City"
#define NOEXISTE            -1
#define SUBIR_NIVEL         4
#define MAX_DISTANCIA 		40 //no tocar
#define RANGO_PUNTERIA 		0.7 //no tocar
#define MAX_CAR_DATA 		100
#define FACCION_CIUDADANO 	0
#define FACCION_POLICIA 	1
#define ESPALDA 			6
#define TIEMPO              60000

#define PlayerToPoint       IsPlayerInRangeOfPoint

#define DIALOG_BG_COLOR 	0x4A5A6BBB
#define PREV_BG_COLOR 		0x88888899
#define PREV_BG_COLOR2 		0xFFFF00AA

#define strcat_format(%0,%1,%2) format(%0[strlen(%0)], %1 - strlen(%0), %2)

#define RELEASED(%0) \
 (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#undef  MAX_PLAYERS
#define MAX_PLAYERS         226

/* Máximos */
#define MAX_CASAS           900
#define MAX_GARAJES         800
#define MAX_OBJ             200
#define MAX_NEGOCIOS        400
#define MAX_MENUSNEG        150
#define MAX_FACCIONES       20
#define MAX_DELITOS         9999
#define MAX_OBJPOLICIA 		300
#define MAX_INCENDIOS       5
#define MAX_ESCALERAS       5
#define MAX_INFORMESFD      50
#define	MAX_RADARES 		100
#define MAX_TALLERES        5
#define MAX_CELDAS 			19
#define MAX_ALMACENES       30
#define MAX_PLANTACIONES    500
#define MAX_AGUJEROS        500
#define MAX_SENALES         600
#define MAX_ESPACIOSBASURA  40
#define MAX_BASURA          50
#define MAX_CIERVOS         10
#define MAX_CARNICERIAS     5
#define MAX_RADIOS          500
#define MAX_CBANCARIAS      5

/* Sistema de bolsillos */
#define LIVIANO 			0
#define PESADO 				1

/* Colores */
#define VERDECLARO          0x88dd88FF
#define AZUL                0x8D8DFF00
#define ROJO 				0xFF6347AA
#define ROSA 				0xC2A2DAAA
#define VERDE 				0x1eb032FF
#define MARRON              0x3B240BAA
#define CELESTE 			0x33CCFFAA
#define ROJO_OSCURO 		0xE60000FF
#define AMARILLO 			0xFFFF00AA
#define GRIS				0xAFAFAFAA
#define BLANCO2 			0xFFFFFF00
#define BLANCO 				0xFFFFFFAA
#define NARANJA 			0xff9c00FF
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_OOCA 			0x7bb7b7FF // chat OOC
#define COLOR_OOCB 			0x4c9e9eFF // chat OOC
#define COLOR_OOCC 			0x2e8787FF // chat OOC
#define COLOR_OOCD 			0x187373FF // chat OOC
#define COLOR_OOCE 			0x0a5555FF // chat OOC

/* Dialogs */
#define AvisoPCU        	0
#define Acceso              1
#define RentarVeh           2
#define BOLSILLO            3
#define MenuCompra1         4
#define MenuCompra2         5
#define MenuCompra3         6
#define MenuCompra4         7
#define MenuCompra5         8
#define MenuCompra6         9
#define MenuCompra7         10
#define MenuCompra8         11
#define MenuCompra9         12
#define MenuCompra10        13
#define MenuCompra11        14
#define MenuCompra12        15
#define MenuCompra13        16
#define MenuCompra14        17
#define MenuCompra15        18
#define MenuCompra16        19
#define MenuCompra17        20
#define MenuCompra18        21
#define MenuCompra19        22
#define MenuCompra20        23
#define MenuCompra21        24
#define MenuCompra22        25
#define MenuCompra23        26
#define MenuCompra24        27
#define MenuCompra25        28
#define MenuCompra26        29
#define Musica              30
#define RastrearPD          31
#define HistorialPD         32
#define BuscadosPD          33
#define DEPOSITAR           34
#define RETIRAR             35
#define TRANSFERIR          36
#define JUGADORID           37
#define LLAMADA             38
#define EquipoLSFD          39
#define CachearPD           40
#define GAS                 41
#define MALETERO            42
#define ARMARIO             43
#define T_Autobus           49
#define Ruta_Autobus        50
#define DIALOG_TUNNING      51
#define DIALOG_COMP         60
#define TraficarArmasD      90
#define CLicencias          91
#define CLicenciasCoche     92
#define CLicenciasMoto      93
#define CLicenciasCamion    94
#define CLicenciasNav       95
#define CLicenciasVuel      96
#define TeoricoCoche1       97
#define TeoricoCoche2       98
#define TeoricoCoche3       99
#define TeoricoCoche4       100
#define TeoricoCoche5       101
#define TeoricoCoche6       102
#define TeoricoCoche7       103
#define TeoricoCoche8       104
#define TeoricoCoche9       105
#define TeoricoCoche10      106
#define T_Licencias         107
#define T_Basurero          108
#define AscensorObras       109
#define VentaVeh            110
#define SelecSpawn          111
#define DCCB_Descripcion    112
#define DCCB_PIN            113
#define DCCB_Crear          114
#define DCCB_VerInfo        115
#define DCCB_Eliminar       116
#define DCCB_Confirmar      117
#define DCCB_Opciones       118
#define DCCB_Cuentas        119
#define DCCB_Password       120
#define DCCB_Informacion    121
#define DCCB_Retirar        122
#define DCCB_Ingresar       123
#define DCCB_TransferirC    124
#define DCCB_TransferirD    125
#define DCCB_CambiarPIN     127
#define DCCB_CambiarDesc    128
#define Cajero_Cuentas      129
#define Cajero_Pin          130
#define Cajero_Opciones     131
#define Cajero_Info         132
#define Cajero_Retirar      133
#define Cajero_Ingresar     134
#define Cajero_TransferirC  135
#define Cajero_TransferirD  136
#define MusicaRadio         137
#define GUIA    			138
#define T_Abogado           139
#define T_Moviles           140
#define T_Mecanico          141
#define T_Barrendero        142
#define T_Ladron            143
#define EquipoPD            144
#define D_MOSTRARCUENTA		145
#define DIALOG_TUCUENTA     146
#define DIALOG_PROPIEDADES  147
#define DIALOG_DATOSGENERAL 148
#define dSpecReport			149
#define dSolicitarADM       150
#define T_Camionero         151
#define Cargar_Camion       152
#define Mostrar_Talleres    153
#define DIALOG_COLORES      154

/* Base de datos */

 static database;

/* News */
new EstaAFK[MAX_PLAYERS];
new PlayerBar:barrita;
new CargaCamionero;
new Chaleco[MAX_PLAYERS];
new GuardoArmaSegura[MAX_PLAYERS];
new bool:CanalDuda[MAX_PLAYERS];
new Muteduda[MAX_PLAYERS];
new EnvioDuda[MAX_PLAYERS];
new TFuera[MAX_PLAYERS];
new NoAparecerAdmins[MAX_PLAYERS];
new EstaEstudiando[MAX_PLAYERS];
new ViendoNombres[MAX_PLAYERS];
new EstaFumando[MAX_PLAYERS];
new Float:tempX[MAX_PLAYERS], Float:tempY[MAX_PLAYERS], Float:tempZ[MAX_PLAYERS];
new TimerConce = 0;
new EnCatalogoVeh[MAX_PLAYERS]; // modelo consultado por jugador en catálogo de coches
new VehCatalogo[MAX_PLAYERS]; // vehicle id generado por samp
new Text:Nombre[MAX_CAR_DATA];
new Text:Costo[MAX_CAR_DATA];
new Text:Id[MAX_CAR_DATA];
new PConcesionario[MAX_PLAYERS];
new CuentaATransferir[MAX_PLAYERS];
new CuentaElegida[MAX_PLAYERS];
new TotalRadios = 0;
new intLSPD[6];
new celdaLSPD[8];
new intGob[2];
new TiempoPesca[MAX_PLAYERS];
new HaLanzadoCana[MAX_PLAYERS];
new Pescando[MAX_PLAYERS];
new HaPescado[MAX_PLAYERS][5];
new CantidadHaPescado[MAX_PLAYERS][5];
new CarneObtenida[MAX_PLAYERS];
new EstaCazando[MAX_PLAYERS];
new ZonaCaza;
new Contador_Caza[MAX_PLAYERS]; //el timer para players por si se desconectan
new Contador2_Caza[MAX_CIERVOS];//el timer para pararlo en caida del server
new CiervosYaEstanCreados = 0;  //muy importante hace que en tiempo de un minuto no cree ciervos!
new seg_Caza[MAX_PLAYERS]=0;
new BarValue_Caza[MAX_PLAYERS]=0;
new MaxX_Caza = -572;// -2175.3135 (SISTEMA DE CAZA)
new MaxY_Caza = 256;// 2659.0137 (SISTEMA DE CAZA)
new MinX_Caza = -350;// -2069.8533 (SISTEMA DE CAZA)
new MinY_Caza = 11;// 2659.0137 (SISTEMA DE CAZA)
new Float: POSICIONPLAYER_X[MAX_PLAYERS]; // (SISTEMA DE CAZA)
new Float: POSICIONPLAYER_Y[MAX_PLAYERS]; // (SISTEMA DE CAZA)
new Float: POSICIONPLAYER_Z[MAX_PLAYERS]; // (SISTEMA DE CAZA)
new Float: POSICIONPLAYERANGULO[MAX_PLAYERS]; // (SISTEMA DE CAZA)
new ascensorunity;
new TimerComa[MAX_PLAYERS];
new CargaDelCamion[MAX_VEHICLES];
new Barriendo[MAX_PLAYERS];
new nuevoLSPD[4];
new SolicitandoRef[MAX_PLAYERS];
new TemporizadorBasura[MAX_PLAYERS];
new Basurero[MAX_PLAYERS];
new Camionero[MAX_PLAYERS];
new Transportando[MAX_PLAYERS];
new recluitGN[2];
new timeshift = -1;
new shifthour;
new Float:PosRobo[MAX_PLAYERS][3];
new RobandoDinero[MAX_PLAYERS];
new RobandoNegocio[MAX_PLAYERS];
new EstaRobando[MAX_PLAYERS];
new Robos[MAX_PLAYERS][4];
new rejaGN[14];
new rejacam1;
new rejacam2;
new AdminServicio[MAX_PLAYERS];
new LeerMPS[MAX_PLAYERS];
new NoEquipo = 0;
new NoAdmin = 0;
new NoMps[MAX_PLAYERS];
new OcultarChatEquipo[MAX_PLAYERS];
new OcultarChatAdmin[MAX_PLAYERS];
new Hablando[MAX_PLAYERS];
new SolicitaAbogado[MAX_PLAYERS];
new IntentosLicencia[MAX_PLAYERS];
new ExamenAutoescuela[MAX_PLAYERS];
new EstadoPractico[MAX_PLAYERS];
new TipoLicenciaAutoescuela[MAX_PLAYERS];
new TimerDrogado[MAX_PLAYERS];
new CamaraCocaina;
new CajasTrafis[1];
new EncargoTrafis = 0;
new PuntoDeEntregaTraficantes = 0;
new LlamandoTraficantes[MAX_PLAYERS];
new PlantacionIncautadaID[MAX_PLAYERS];
new TotalAgujeros = 0;
new TotalSenales = 0;
new TotalPlantaciones = 0;
new musicaglenpark[MAX_PLAYERS];
new TraficandoArmasRecogio[MAX_PLAYERS];
new TraficandoArmas[MAX_PLAYERS];
new TimerTraficandoArmas[MAX_PLAYERS];
new rejaaero[2];
new puertaCarcel1, puertaCarcel2, puertaCarcel3, puertaCarcel4;
new puertaCelda[MAX_CELDAS];
new puertaAI[8];
new FrenodeMano[MAX_VEHICLES] = 0;
new Float:VehFrenoPOS[MAX_VEHICLES][4];
new Float:VehComprobar[MAX_VEHICLES][4];
new Policias911 = 0, Medicos911 = 0, Bomberos911 = 0, MEDICO, POLICIA, BOMBERO;
new LlamadaMovil[MAX_PLAYERS];
new VehExploto[MAX_VEHICLES];
new Remolcado[MAX_VEHICLES];
static pmodelid[MAX_PLAYERS];
static pvehicle[MAX_PLAYERS];
new TallerEast = 0;
new TotalTalleres = 0;
new Trabajando[MAX_PLAYERS];
new RutaAutobus[MAX_PLAYERS];
new rejaJuzgado;
new peaje[14];
new BloqueoPeajes = 0;
new TieneCinturon[MAX_PLAYERS];
new consultandomal[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new TimerVelocimetro[MAX_PLAYERS];
new PlayerText:Velocimetro0[MAX_PLAYERS];
new PlayerText:Velocimetro1[MAX_PLAYERS];
new diesel[31];
new gasolina[31];
new gasolineras = 0;
new Float:EstacionGasX[31];
new Float:EstacionGasY[31];
new Float:EstacionGasZ[31];
new CualGas[MAX_PLAYERS];
new EscuchandoSonido[MAX_PLAYERS];
new RadaresCargados = 0;
new BolasDeGoma[MAX_PLAYERS];
new TieneSirena[MAX_VEHICLES];
new SirenaEncendida[MAX_VEHICLES];
new Paralizado[MAX_PLAYERS];
new EnInforme[MAX_PLAYERS];
new BomberosOnline = 0;
new EditandoTipoObjeto[MAX_PLAYERS];
new TotalEscaleras = 0;
new DebilitoIncendio[MAX_PLAYERS];
new LSFD[20];
new xejercicio[MAX_PLAYERS] = 0;
new Timer:Pressbanca[MAX_PLAYERS];
new Timer:BajarBarra[MAX_PLAYERS];
new Timer:Mancuernas[MAX_PLAYERS];
new Bar:BarraEjercicios[MAX_PLAYERS];
new PlayerText:TDGYM0[MAX_PLAYERS];
new PlayerText:TDGYM1[MAX_PLAYERS];
new PlayerText:TDGYM2[MAX_PLAYERS];
new PlayerText:TDGYM3[MAX_PLAYERS];
new HaciendoPress[MAX_PLAYERS];
new HaciendoBicicleta[MAX_PLAYERS];
new HaciendoMancuerna[MAX_PLAYERS];
new HaciendoEliptica[MAX_PLAYERS];
new HaciendoEjercicio[MAX_PLAYERS];
new Timer:Eliptica[MAX_PLAYERS];
new Timer:Bicicleta[MAX_PLAYERS];
new TimerHack[MAX_PLAYERS];
new CantidadTransf[MAX_PLAYERS];
new Menu: ArmeriaSAPD, Menu:ArmasSAPD, Menu:MunicionSAPD;
new Menu:TiendaArmeriaAE, Menu:TiendaArmeriaD, Menu:TiendaArmeriaC, Menu:TiendaArmeriaB, Menu:TiendaBar, Menu:TiendaBurger, Menu:TiendaClukin, Menu:TiendaPizzeria, Menu:Tienda247, Menu:TiendaElectronica, Menu:TiendaFerreteria, Menu:TiendaSubUrban, Menu:TiendaZIP, Menu:TiendaDS, Menu: TiendaVictim, Menu:TiendaBinco, Menu:TiendaDeportes, Menu:TiendaEstanco, Menu:TiendaGasolinera, Menu:TiendaFarmacia, Menu:TiendaItaliano, Menu:TiendaChino, Menu:TiendaJapones, Menu:TiendaMexicano, Menu:TiendaSexShop;
new SinSonido[MAX_VEHICLES];
new LuzSS[4][MAX_VEHICLES];
new AlternandoLuces2[MAX_VEHICLES];
new LucesAlternes[MAX_VEHICLES];
new rejaSAPD, barreraSAPD;
new Text3D:infoAnuncio;
new TiempoAnuncio;
new PrecioAnuncio = 75;
new luzlanewestado[MAX_VEHICLES];
new luzlanews1[MAX_VEHICLES];
new luzlanews2[MAX_VEHICLES];
new luzlanews3[MAX_VEHICLES];
new luzlanews4[MAX_VEHICLES];
new Entrevistando[MAX_PLAYERS];
new EmitiendoCNN[MAX_PLAYERS];
new CajasFuerte[3]; // 0 - Gobierno | 1 - LSRTV | 3 - LSPD
new Impuestos[3]; // 0 - Casa | 1 - Negocio | 2 - Coche
new EstaEnCheckpoint[MAX_PLAYERS];
new TimerMuerto[MAX_PLAYERS];
new puertaLSMD;
new EnQuimioterapia[MAX_PLAYERS];
new animation[MAX_PLAYERS];
new rejaDeposito[4];
new Text:Textdraw9;
new Text:Textdraw10;
new Text:Textdraw12;
new Text:pcpd0;
new Text:pcpd1;
new Text:pcpd2;
new Text:pcpd3;
new Text:pcpd4;
new Text:pcpd5;
new Text:pcpd6;
new Text:pcpd7;
new Text:pcpd8;
new Text:pcpd9;
//new Text:pcpd10[MAX_PLAYERS];
new Text:pcpd11;
new MostrandoPCPD[MAX_PLAYERS];
new Esposado[MAX_PLAYERS];
new uniformemeca = mS_INVALID_LISTID;
new uniformesapd = mS_INVALID_LISTID;
new ropagym = mS_INVALID_LISTID;
new uniformegn = mS_INVALID_LISTID;
new uniformelsmd = mS_INVALID_LISTID;
new uniformelsrtv = mS_INVALID_LISTID;
new uniformelsfd = mS_INVALID_LISTID;
new uniformegob = mS_INVALID_LISTID;
new ropa_binco = mS_INVALID_LISTID;
new ropa_prolaps = mS_INVALID_LISTID;
new ropa_zip = mS_INVALID_LISTID;
new ropa_ds = mS_INVALID_LISTID;
new ropa_victim = mS_INVALID_LISTID;
new ropa_suburban = mS_INVALID_LISTID;
new OfertaCreador[MAX_PLAYERS];
new Oferta[MAX_PLAYERS];
new OfertaPrecio[MAX_PLAYERS];
new OfertaCantidad[MAX_PLAYERS];
new EstaEnNegocio[MAX_PLAYERS];
new TotalMenus = 0;
new TotalNegocios = 0;
new object[MAX_OBJ];
new Float:ObjCoords[MAX_OBJ][3];
new ObjectID2[MAX_OBJ][3];
new TimerArmas[MAX_PLAYERS];
new BolsilloID[MAX_PLAYERS][13];
new BolsilloTipo[MAX_PLAYERS][13];
new BolsilloCantidad[MAX_PLAYERS][13];
new IndicadoresEncendidos[MAX_VEHICLES];
new IndicadoresEncendidos2[MAX_VEHICLES];
new VehRentado[MAX_PLAYERS];
new VehAlquilado[MAX_VEHICLES];
new MirandoMirilla[MAX_PLAYERS];
new TimerVCasa[MAX_PLAYERS];
new EstaEnCasa[MAX_PLAYERS];
new TotalGarajes = 0;
new TotalBasuras = 0;
new TotalCasas = 0;
new TotalAlmacenes = 0;
new TotalFacciones = 0;
new TotalDelitos = 0;
new TimerPos[MAX_PLAYERS];
new IntentoDeLogear[MAX_PLAYERS];
new CamaraInicio[4];
new ckick[MAX_PLAYERS];
new Registrado[MAX_PLAYERS];
new CCB_Descripcion[MAX_PLAYERS];
new CCB_PIN[MAX_PLAYERS];
new p_CarWarpTime[MAX_PLAYERS];
new p_CarWarpVehicleID[MAX_PLAYERS];

				/*ARRAYS*/
				
new Float:RecogerTraficarArmas[4][3] =
{
	{1549.7952,-32.1761,21.3304},
	{873.4899,-15.6692,63.1953},
	{1024.4100,-282.3583,73.9922},
	{2163.9185,-103.4200,2.7500}
};

new Float:TraficarArmas[9][3] =
{
	{678.0814,-901.3887,71.0689},
	{-641.1343,-260.7343,64.6516},
	{-724.5823,-121.3364,68.2239},
	{1236.9146,545.6656,19.2431},
	{2111.8672,101.6393,35.5709},
	{2381.6240,285.2155,19.5376},
	{2737.2432,-287.3335,17.4780},
	{2867.2676,-2056.9541,11.1021},
	{1213.7595,-2309.1733,14.2504}
};

new
    ColorList[] = {
        0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
        0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
        0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
        0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
        0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
        0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
        0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
        0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
        0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
        0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
        0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
        0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
        0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
        0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
        0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
        0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
        0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
        0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
        0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
        0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
        0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
        0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
        0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
        0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
        0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
        0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
    };

/* Enums */

enum ConceInfo
{
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:ctX,
	Float:ctY,
	Float:ctZ,
	cNombre[128],
}
new Concesionarios[7][ConceInfo] = {
	{1280.0261,-1259.1881,16.7959, 1289.6953,-1247.4316,13.5469, "Schutz"},
	{1670.7625,-1565.1042,16.0459, 1699.7924,-1551.6305,13.3828, "Camiones y más"},
	{2131.8774,-1150.4095,24.1612, 2121.3306,-1146.0088,24.5486, "Coches elegantes"},
	{953.8035,-1035.6334,30.2422, 955.1144,-1041.2717,30.2422, "Coches importados"},
	{560.0290,-1299.9962,20.5759, 524.8896,-1289.9601,17.2434, "Autos de lujo"},
	{1120.6688,-3491.6499,7.8506, 1105.7157,-3529.6929,8.2439, "Aviones"},
	{523.2498,-1818.8574,6.5859, 507.9155,-1908.5966,3.1957, "Botes"}
};

enum datos_del_coche
{
	dcCategoria,
	dcNombre[30],
	dcIDModel,
	dcPrecio,
	dcMember, // código de facción para uso
	dcComprador, // código del comprador
	dcConcesionario, // Concesionario
	dcNivel,
}

new datacar[MAX_CAR_DATA][datos_del_coche] = {
      /* TARTANAS GAMA CHUNGA */

      {0, "Glendale", 466, 15000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Oceanic", 467, 13000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Clover", 542, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Tampa", 549, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Walton", 478, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Sadler", 543, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Esperanto", 419, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Buccaneer", 518, 14000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Blista", 496, 22000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Perennial", 404, 18500, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Regina", 479, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},

      /* LOWRIDERS / OTROS */

      {0, "Voodoo", 412, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Remington", 534, 18000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Tahoma", 566, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Majestic", 517, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Tornado", 576, 22000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Broadway", 575, 22000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Savanna", 567, 31000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Slamvan", 535, 46000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Blade", 536, 32000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Stallion", 439, 26000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Phoenix", 603, 75000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Hermes", 474, 12000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},
      {0, "Sabre", 475, 18000, FACCION_CIUDADANO, FACCION_CIUDADANO, 1,1},

      /* FRAGONETAS Y CURROS */

      {0, "Tractor", 531, 6500, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Benson", 499, 39500, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Moonbeam", 418, 29500, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Bobcat", 422, 26000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Pony", 413, 33500, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Rumpo", 440, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Picador", 600, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Burrito", 482, 28000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Yosemite", 554, 32000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Camper", 483, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
	  {0, "Quad", 471, 55000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},

      /* 4x4 */

      {0, "Rancher", 489, 55000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Landstalker", 400, 48000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Huntley", 579, 76000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Towtruck", 525, 30000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},
      {0, "Mesa", 500, 12000, FACCION_CIUDADANO, FACCION_CIUDADANO, 2,1},


      /* BERLINAS */

      {0, "Greenwood", 492, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Virgo", 491, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Willard", 529, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Manana", 410, 12000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Bravura", 401, 15000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Previon", 436, 13500, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Primo", 547, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Emperor", 585, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Nebula", 516, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Sunrise", 550, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Intruder", 546, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Vincent", 540, 16000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Fortune", 526, 13000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Cadrona", 527, 12000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Premier", 426, 26000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Merit", 551, 27000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Sentinel", 405, 33000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Washington", 421, 62000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Admiral", 445, 21000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},
      {0, "Elegant", 507, 26000, FACCION_CIUDADANO, FACCION_CIUDADANO, 3,1},

      /* STREET RACERS */

      {0, "Flash", 565, 45000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Club", 589, 17000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Stratum", 561, 50000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Alpha", 602, 50000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Uranus", 558, 45000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Euros", 587, 70000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Jester", 559, 75000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "ZR-350", 477, 80000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Buffalo", 402, 140000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Elegy", 562, 75000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Sultan", 560, 110000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "SuperGT", 506, 300000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},
      {0, "Infernus", 411, 600000, FACCION_CIUDADANO, FACCION_CIUDADANO, 4,1},

      /* COSTE ELEVADO */

      {0, "Journey", 508, 50000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Hustler", 545, 60000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Windsor", 555, 135000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Feltzer", 533, 32000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Stafford", 580, 52000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Stretch", 409, 120000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},

      /* MOTOS */

      {1, "Freeway", 463, 22000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {1, "Wayfarer", 586, 22000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {1, "Sanchez", 468, 35000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {1, "BF-400", 581, 55000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {1, "FCR-900", 521, 80000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},

      /* SUPERCARS */

      {0, "Comet", 480, 180000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Banshee", 429, 400000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Bullet", 541, 500000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Cheetah", 415, 350000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},
      {0, "Turismo", 451, 500000, FACCION_CIUDADANO, FACCION_CIUDADANO, 5,1},

      /* AERONAVES */

      {2, "Maverick", 487, 1000000, FACCION_CIUDADANO, FACCION_CIUDADANO, 6,1},
      {2, "Dodo", 593, 700000, FACCION_CIUDADANO, FACCION_CIUDADANO, 6,1},
      {2, "Shamal", 519, 2000000, FACCION_CIUDADANO, FACCION_CIUDADANO, 6,1},
      {2, "Skimmer", 460, 750000, FACCION_CIUDADANO, FACCION_CIUDADANO, 6,1},
      {2, "Beagle", 511, 1000000, FACCION_CIUDADANO, FACCION_CIUDADANO, 6,1},

      /* BARCOS */

      {3, "Reefer", 453, 200000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1},
      {3, "Tropic", 454, 380000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1},
      {3, "Squalo", 446, 410000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1},
      {3, "Speeder", 452, 400000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1},
      {3, "Jetmax", 493, 425000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1},
      {3, "Marquis", 484, 375000, FACCION_CIUDADANO, FACCION_CIUDADANO, 7,1}
};

enum radInfo
{
	radID,
	Float:radx,
	Float:rady,
	Float:radz,
	Float:rada,
	rademisora,
	Text3D:radtexto,
	radobjeto,
	radint,
	radvw,
	radarea,
	radestado
}
new RadioInfo[MAX_RADIOS][radInfo];

enum carneInfo
{
	carneid,
	Float:carnex,
	Float:carney,
	Float:carnez
}
new CarniceriaInfo[MAX_CARNICERIAS][carneInfo];

enum NUM_Ciervos
{
	Float: Ciervos_PosX,
	Float: Ciervos_PosY,
	Float: Ciervos_PosZ,
	Float: Ciervos_RotX,
	Ciervos_Muertos,
	Ciervos_Moviendose,
	Ciervos_CarneRecogida,
	Ciervos_RecogiendoCarne,
	Ciervos_Minuto_Respawn,
	Ciervos_Empieza_Respawn,
	Id_Ciervos, s

}
new NumeroCiervosInfo[MAX_CIERVOS][NUM_Ciervos];

enum jInfo
{
	jPass[128],
	jSQLID,
	jApodo[128],
	Float:jPos_X,
	Float:jPos_Y,
	Float:jPos_Z,
	Float:jPos_A,
	Float:jTPos_X,
	Float:jTPos_Y,
	Float:jTPos_Z,
	jInt,
	jVw,
	jTInt,
	jTVw,
	jEdad,
	jAdmin, // 1 - Tester | 2 - Moderador | 3 - Operador | 4 - Administrador | 5 - Programador
	jDinero,
	jCuentasBancarias[5],
	jCuentaPrincipal,
	jCasa,
	jCasaPrestada,
	jCasaAlq,
	jCoches[3],
	jCochesPrestado[3],
	jNegocio,
	jLider,
	jMiembro,
	jRango,
	jEncarcelado,
	jTiempoEncarcelado,
	jHerido,
	jEnfermedad, // 1 - Gripe | 2 - Fiebre | 3 - Alergia | 4 - Sida | 5 - Asma | 6 - Cáncer
	jReceta, // 1 - Parazetamol | 2 - Gelocatil | 3 - Ventolín
	jEnergia,
	jAlcohol,
	jHambre,
	jBaneado,
	jRopa,
	jShotingWater,
	jWaterTimer,
	Float:jVida,
	Float:jChaleco,
	jPlaca,
	jDNI,
	jTiempoDNI,
	jSexo,
	jTrabajo, // 1 - Autobuses v | 2 - Mecánico v | 3 - Abogado v | 4 - Traficante de armas v | 5 - Cultivador de drogas | 6 - Licencias ilegales v | 7 - Taxista | 8 - Ladrón | 9 - Ladrón de coches | 10 - Basurero | 11 - Barrendero | 12 - Vendedor de moviles
	jTiempoTrabajo,
	jUltimoTrabajo,
	jTaller,
	jAlmacen,
	jServicio,
	jUniforme,
	jJugando,
	jLicencias[8], // 0 - Conducción | 1 - Navegación | 2 - Vuelo | 3 - Pesca | 4 - Caza | 5 - Armas | 6 - Camiones | 7 - Motos
    jDNIFalso,
	jNombreFalso[35],
	jFLicencia[8], // 0 - Conducción | 1 - Navegación | 2 - Vuelo | 3 - Pesca | 4 - Caza | 5 - Armas | 6 - Camiones | 7 - Motos
    jBiblio,
    jIdiomas[7], // 0 - Japonés | 1 - Italiano | 2 - Ruso | 3 - Alemán | 4 - Francés | 5 - Chino
    jEIdiomas[7],
    jPremium,
    jTiempoPremium,
    jAdvertencias,
    jPuntosRol[2], // 0 - Positivos | 2 - Negativos
    jNivel,
	jRespeto,
	jHorasJugadas,
	jTBan,
	jPayDay,
	jHabilidad[10], // 0 - Ladrón | 1 - Ladrón de coches | 2 - Basurero | 3 - Barrendero | 4 - Pescador | 5 - Camionero
	jFuerza,
	jResistencia,
	jHeridas[7], // 0 - Pierna derecha | 1 - Pierna izquierda | 2 - Ingle | 3 - Torso | 4 - Brazo izquierdo | 5 - Brazo derecho | 6 - Cabeza
	jEntrenado
}
new JugadorInfo[MAX_PLAYERS][jInfo];

enum aguInfo
{
	aguID,
	Float:aguX,
	Float:aguY,
	Float:aguZ,
	Text3D:aguTexto
}
new AgujeroInfo[MAX_AGUJEROS][aguInfo];

enum plantInfo
{
	plantID,
	Float:plantX,
	Float:plantY,
	Float:plantZ,
	plantObjeto,
	plantTiempo,
	Text3D:plantTexto,
	plantObjeto2,
	plantNombre[50]
}
new PlantaInfo[MAX_PLANTACIONES][plantInfo];

enum alInfo
{
	alID,
	Float:alx,
	Float:aly,
	Float:alz,
	Float:alxx,
	Float:alyy,
	Float:alzz,
	Float:alxxx, // Posición X caja
	Float:alyyy, // Posición Y caja
	Float:alzzz, // Posición Z caja
	alInt,
	alVW,
	alOID[30],
	alOCA[30],
	alOTI[30],
	alOIDs[350],
	alOCAs[350],
	alOTIs[350],
	alEstado,
	alPickup,
	Text3D:alTexto,
	alPrecio,
	alComprado,
	alComprador[50]
}
new AlmacenInfo[MAX_ALMACENES][alInfo];

enum celInfo
{
	Float:celPosX,
	Float:celPosY,
	Float:celPosZ,
	celEstado,
	celLlena
}
new Celda[MAX_CELDAS][celInfo];

enum tInfo
{
	tID,
	tNombre[50],
	tNegocio,
	Float:tx,
	Float:ty,
	Float:tz,
	Float:txx,
	Float:tyy,
	Float:tzz,
	tInt,
	tVw,
	Text3D:tTexto,
	tPickup
}
new TallerInfo[MAX_TALLERES][tInfo];

enum rRadar
{
	Float: rRadarX,
	Float: rRadarY,
	Float: rRadarZ,
	Float: rRadarA,
	rRango,
	rLimite,
	rPrecio,
	rVehID,
	rObjetoID,
	bool:rActivo
};
new Radar[MAX_RADARES][rRadar];

enum ifdInfo
{
	ifdPaciente,
	ifdEstado,
	Float:ifdX,
	Float:ifdY,
	Float:ifdZ,
	ifdTimer,
	ifdMedico,
}
new InformesFD[MAX_INFORMESFD][ifdInfo];

new ComponentesLegales[48][22] = {
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

enum escaInfo
{
	escaID,
	Float:escaX,
	Float:escaY,
	Float:escaZ,
	Float:escaXX,
	Float:escaYY,
	Float:escaZZ,
	escaObjeto
}
new EscaleraInfo[MAX_ESCALERAS][escaInfo];

enum inInfo
{
	inDanio,
	inCasaID,
	inObjetosExt[15],
	inObjetosInt[15]
}
new Incendios[MAX_INCENDIOS][inInfo];

enum cpInfo
{
	cpType,
	cpCreated,
    Float:cpX,
    Float:cpY,
    Float:cpZ,
    cpObject,
	cpDepartament,
};
new ObjectsInfo[MAX_OBJPOLICIA][cpInfo];

enum dInfo
{
	dID,
	dNombre[35],
	dInformacion[256],
	dFecha[35],
	dResuelto,
	dReportador[35]
}
new DelitoInfo[MAX_DELITOS][dInfo];

enum fInfo
{
	fID,
	fNombre[50],
	fRango1[50],
	fRango2[50],
	fRango3[50],
	fRango4[50],
	fRango5[50],
	fRango6[50],
	fRango7[50],
	fRango8[50],
	fSueldo1[50],
	fSueldo2[50],
	fSueldo3[50],
	fSueldo4[50],
	fSueldo5[50],
	fSueldo6[50],
	fSueldo7[50],
	fSueldo8[50],
	fLider[35]
}
new FaccionInfo[MAX_FACCIONES][fInfo];

enum mInfo
{
	mID,
	Float:mx,
	Float:my,
	Float:mz,
	mint,
	mvw,
	mTipo,
	mNegocio,
	mDesc[75],
	mPickup,
	Text3D:mTexto
}
new MenuInfo[MAX_MENUSNEG][mInfo];

enum nInfo
{
	nID,
	Float:nEX,
	Float:nEY,
	Float:nEZ,
	Float:nIX,
	Float:nIY,
	Float:nIZ,
	nInterior,
    nIntExt,
    nVW,
    nComprada,
    nComprador[MAX_PLAYER_NAME],
    nPrecio,
    nCerrada,
    nDinero,
    nPickup,
    nNombre[128],
    nProdSolidos,
    nProdLiquidos,
    nTipo,
	Text3D:nTexto,
	nCerradura, // 0 - Básica | 1 - Reforzada
	nAlarma, // 0 - No tiene | 1 - Básica (Suena a los vecinos y avisa al dueño) | 2 - Todos lo básico + LSPD
	nCamara // 0 - No tiene | 1 - Instaladas
}
new NegocioInfo[MAX_NEGOCIOS][nInfo];

enum aInfo
{
	aID,
	aModelo,
	Float:ax,
	Float:ay,
	Float:az,
	Float:aa,
	aColor1,
	aColor2,
	aFaccionID, // 999 - Privado | 998 - Admin | 997 - Renta | 996 - Autoescuela
	aInteriorID,
	aVirtualID,
	aOwner[32],
	aGasolina,
	aMotor,
	aCerrado,
	aRoto,
	aMal,
	aMalID[10],
	aMalCantidad[10],
	aMalTipo[10],
	aMulta,
	aBloqueado,
	Float:aDano,
	aDescripcion[50],
	aInhibidor,
	aLunasTintadas,
	aAlarma,
	aEquipo,
	aMalIDs[128],
	aMalCantidads[128],
	aMalTipos[128]
};
new AutoInfo[MAX_VEHICLES][aInfo];

enum baInfo
{
	baID,
	Float:bax,
	Float:bay,
	Float:baz,
	baid[MAX_ESPACIOSBASURA],
	bacantidad[MAX_ESPACIOSBASURA],
	batipo[MAX_ESPACIOSBASURA],
	Text3D:batexto,
	bapickup
}
new BasuraInfo[MAX_BASURA][baInfo];

enum senInfo
{
	senID,
	Float:senx,
	Float:seny,
	Float:senz,
	Float:senrz,
	sentexto[35],
	senTipo
};
new SenalInfo[MAX_SENALES][senInfo];

enum cInfo
{
	cID,
	Float:cx,
	Float:cy,
	Float:cz,
	Float:cxx,
	Float:cyy,
	Float:czz,
	Float:cmx,
	Float:cmy,
	Float:cmz,
	Float:cma,
	cint, //Interior de la entrada
	cint2, // Interior de la casa
	cvw, // VW de la entrada
	cvw2, // VW de la casa
	cAbierta, // 0 - Cerrada | 1 - Abierta
	cComprada,
	cComprador[MAX_PLAYER_NAME],
	cAlquilable,
	cPAlquiler,
	cInquilinos,
	cPrecio,
	cPickup,
	Text3D:cTexto,
	cArmIDs[128],
	cArmID[5],
	cArmTipos[128],
	cArmTipo[5],
	cArmCantidads[128],
	cArmCantidad[5],
	cArm,
	cCerradura, // 0 - Básica | 1 - Reforzada
	cAlarma // 0 - No tiene | 1 - Básica (Suena a los vecinos y avisa al dueño) | 2 - Todos lo básico + LSPD
}
new CasaInfo[MAX_CASAS][cInfo];

enum gInfo
{
	gID,
	gCasa,
	Float:gx,
	Float:gy,
	Float:gz,
	Float:ga,
	gVW,
	gAbierto, // 0 - Cerrado | 1 - Abierto
	gPickup,
	Text3D:gTexto
}
new GarajeInfo[MAX_GARAJES][gInfo];

new BolObjeto[104][0] = {
	{0}, //0
	{331}, //1
	{333}, //2
	{334}, //3
	{335}, //4
	{336}, //5
	{337}, //6
	{338}, //7
	{339}, //8
	{341}, //9
	{321}, //10
	{322}, //11
	{323}, //12
	{324}, //13
	{325}, //14
	{326}, //15
	{342}, //16
	{343}, //17
	{344}, //18
	{1239},//19
	{1239},//20
	{1239},//21
	{346}, //22
	{347}, //23
	{348}, //24
	{349}, //25
	{350}, //26
	{351}, //27
	{352}, //28
	{353}, //29
	{355}, //30
	{356}, //31
	{372}, //32
	{357}, //33
	{358}, //34
	{359}, //35
	{360}, //36
	{361}, //37
	{362}, //38
	{363}, //39
	{364}, //40
	{365}, //41
	{366}, //42
	{367}, //43
	{2039}, //44
	{2039}, //45
	{2039}, //46
	{2039}, //47
	{2039}, //48
	{2039}, //49
	{2039}, //50
	{2039}, //51
	{2039}, //52
	{2039}, //53
	{2039}, //54
	{2039}, //55
	{2039}, //56
	{1242}, //57
	{2702}, //58
	{1239}, //59
	{1239}, //60
	{1239}, //61
	{1239}, //62
	{1239}, //63
	{1239}, //64
	{1239}, //65
	{1239}, //66
	{1239}, //67
	{1239}, //68
	{327}, //69
	{1239}, //70
	{2039}, //71
	{1239}, //72
	{1239}, //73
	{1239}, //74
	{1239}, //75
	{1239}, //76
	{1546}, //77
	{1544}, //78
	{1239}, //79
	{1546}, //80
	{1546}, //81
	{1544}, //82
	{1546}, //83
	{1546}, //84
	{1546}, //85
	{1546}, //86
	{1546}, //87
	{2102}, //88
	{2226}, //89
	{1239}, //90
	{1239}, //91
	{2358}, //92
	{2358}, //93
	{2358}, //94
	{2358}, //95
	{2358}, //96
	{2358}, //97
	{2358}, //98
	{2358}, //99
	{2358}, //100
	{2358}, //101
	{2358}, //102
	{2358} //103
};

main()
{
	print("Watts City por Goncho28 totalmente desde 0");
	return 1;
}

enum SAZONE_MAIN {
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};
static const gSAZones[][SAZONE_MAIN] = {
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Angeles",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Angeles",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Angeles",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Angeles",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Angeles",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Angeles",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Angeles",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Angeles",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Angeles",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Angeles",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Angeles",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Angeles",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Angeles",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Angeles",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Angeles",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Angeles",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Vegas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Vegas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Vegas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Vegas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Angeles International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Angeles International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Angeles International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Angeles International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Angeles International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Angeles International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"California Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Angeles",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Vegas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Francisco",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

native IsValidVehicle(vehicleid);
/* Forwards */
forward EstaEbrio(playerid);
//forward ComprobarEnergia(playerid);
//forward ComprobarHambre(playerid);
forward ComprobarAlcohol(playerid);
forward PreparandoHachis(playerid);
//forward PlantacionIncautada(playerid, id);
//forward ActualizarPlantacion();
forward LlegarTraficandoArmas(playerid);
forward QuitarGasolina();
forward QuitarDiesel();
forward Comprobaciones();
forward ObtenerSiguienteIncendio();
forward CrearMenu();
forward AlternarLuces();
forward encode_lights(light1, light2, light3, light4);
forward TimerDeUnSegundo();
forward MensajeDeFaccionOOC(faccion, color, string[]);
forward MensajeDeFaccion(faccion, color, string[]);
forward TimerDeUnMinuto();
forward VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z);
forward JugadorCercaVehiculo(playerid);
forward Intermitentes();
forward CargarPickups();
forward CargarMapIcons();
forward CargarLabels();
forward ABroadCast(color,const string[],level);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward LimpiarConsola(playerid, lines);
forward LimpiarConsolaATodos(lines);
forward GetValueFromName(playerid, campo[]);
forward SaveValue(playerid, cadena[], valor);
forward SaveFloat(playerid, cadena[], Float:valor);
forward Float:GetFloatFromName(playerid, campo[]);
forward EsValido(playerid, campo[], cadena[]);

stock Float:IfPlayerLockingAtCiervo(Float:PosicionX, Float:PosicionY, Float:X2, Float:Y2)
{
	new Float:AnguloResultado;
	new Float:dX, Float:dY;

	dX = X2 - PosicionX;
	dY = Y2 - PosicionY;

	new Float: DiviXY = floatdiv(dX,dY);
	new Float: DiviYX = floatdiv(dY,dX);
	new Float: AnguloFinal;

	if((dY > 0) && (dX > 0)) //primer cuadrante
	{
		new Float: NuevaDiviYX = floatabs(DiviYX);
		AnguloResultado = atan(NuevaDiviYX);
		AnguloFinal = 270 + AnguloResultado;
	}
	else if((dY > 0) && (dX < 0)) //segundo cuadrante
	{
		new Float: NuevaDiviXY = floatabs(DiviXY);
		AnguloResultado = atan(NuevaDiviXY);
		AnguloFinal = AnguloResultado;
	}
	else if((dY < 0) && (dX < 0)) //tercer cuadrante
	{
		new Float: NuevaDiviYX = floatabs(DiviYX);
		AnguloResultado = atan(NuevaDiviYX);
		AnguloFinal = 90 + AnguloResultado;
	}
	else if((dY < 0) && (dX > 0)) //cuarto cuadrante
	{
		new Float: NuevaDiviXY = floatabs(DiviXY);
		AnguloResultado = atan(NuevaDiviXY);
		AnguloFinal = 180 + AnguloResultado;
	}
	return AnguloFinal;
}

public OnGameModeInit()
{
    AntiDeAMX();
    UsePlayerPedAnims();
    SetTimer("MuteDudaUpdate", 1000, true);
    Objetos_OnGameModeInit();

    /* Conexión base de datos */
    MySQLConectar(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DB);

    /* Cargado de sistemas */
	CargarBasuras();
	CargarSenales();
    CargarPickups();
    CargarMapIcons();
    CargarLabels();
	CargarCasas();
	CargarAlmacenes();
	CargarTalleres();
	CargarVarios();
	CargarDelitos();
    CargarFacciones();
    CargarGarajes();
    CargarVehiculos();
    CargarNegocios();
    CargarMenus();
    CrearMenu();
    //CargarPlantaciones();
    CargarTDs();

    /* Cargado de carnicerías */
    CrearCarniceria(0, 2151.7163,-1013.7932,62.7811);
    CrearCarniceria(1, 2068.6726,-1773.7714,13.5604);
    CrearCarniceria(2, 950.0682,-987.1570,38.7274);
    CrearCarniceria(3, 859.8813,-1578.0198,13.5497);

    /* Gasolineras */
    CrearGasolinera(1944.4083,-1769.6210,13.3906, 2, 3); // Unity
    CrearGasolinera(1944.4474,-1776.3995,13.3906, 2, 3); // Unity
    CrearGasolinera(1938.7723,-1776.5197,13.3828, 2, 3); // Unity
    CrearGasolinera(1938.8740,-1769.0171,13.3828, 2, 3); // Unity
    CrearGasolinera(1008.4925,-938.8715,41.8846, 2, 3); // Vinewood
    CrearGasolinera(1001.2657,-939.7946,41.8849, 2, 3); // Vinewood
    CrearGasolinera(999.7821,-935.1365,41.8846, 2, 3); // Vinewood
    CrearGasolinera(1007.3747,-934.0314,41.8850, 2, 3); // Vinewood
    CrearGasolinera(653.3818,-570.5013,16.0412, 1, 2); // Dillimore
    CrearGasolinera(653.2642,-560.0927,16.0412, 1, 2); // Dillimore
    CrearGasolinera(657.9464,-559.6023,16.0412, 1, 2); // Dillimore
    CrearGasolinera(658.0479,-570.0810,16.0412, 1, 2); // Dillimore
    CrearGasolinera(1381.3538,457.3997,19.6405, 1, 2); // Montgomery
    CrearGasolinera(1382.7949,461.8068,19.8207, 1, 2); // Montgomery
    CrearGasolinera(204.3188,-252.0818,1.2903, 1, 2); // BlueBerry
    CrearGasolinera(204.1272,-241.6518,1.2903, 1, 2); // BlueBerry
    CrearGasolinera(209.3864,-252.0697,1.2903, 1, 2); // BlueBerry
    CrearGasolinera(209.4113,-242.2706,1.2903, 1, 2); // BlueBerry
    CrearGasolinera(-99.1821,-1172.4006,2.1810, 1, 2); // Flint county
    CrearGasolinera(-94.5531,-1161.6042,1.9677, 1, 2); // Flint county
    CrearGasolinera(-92.1892,-1175.3953,1.9581, 1, 2); // Flint county
    CrearGasolinera(-88.0080,-1165.0280,2.0261, 1, 2); // Flint county
    CrearGasolinera(-1609.7030,-2718.1248,48.2661, 1, 2); // whetstone
    CrearGasolinera(-1606.3540,-2713.9470,48.2633, 1, 2); // whetstone
    CrearGasolinera(-1603.1362,-2709.3997,48.2633, 1, 2); // whetstone
    CrearGasolinera(2660.6382,-2441.6780,13.6328, 1, 2); // US Army
    CrearGasolinera(2660.5332,-2431.4844,13.6328, 1, 2); // US Army
    CrearGasolinera(2654.0437,-2431.2236,13.6328, 1, 2); // US Army
    CrearGasolinera(2653.9307,-2441.1965,13.6328, 1, 2); // US Army
    CrearGasolinera(2542.3335,-2429.2346,73.9278, 1, 2); // US Army - Helicoptero

    /* Guías */
    CrearGuia(403.5463,-1786.1631,5.7422);
	CrearGuia(1455.0762,-1743.6786,13.5469);
	CrearGuia(1423.1974,-1670.1842,13.5469);
	CrearGuia(1809.9399,-1866.5894,13.5469);
	CrearGuia(1590.2094,-2334.5635,13.5469);
	CrearGuia(1997.3099,-1450.6107,13.5590);
	CrearGuia(1185.9281,-1290.4716,13.5541);
	CrearGuia(1108.6067,-1411.9724,13.5469);
	CrearGuia(605.5453,-1231.9332,18.2459);

    /* Cargado de uniformes */
    uniformemeca = LoadModelSelectionMenu("Ropa/Mecanicos.txt");
    uniformesapd = LoadModelSelectionMenu("Ropa/sapd.txt");
    uniformegn = LoadModelSelectionMenu("Ropa/gn.txt");
    uniformelsmd = LoadModelSelectionMenu("Ropa/lsmd.txt");
    uniformelsrtv = LoadModelSelectionMenu("Ropa/lsrtv.txt");
    uniformelsfd = LoadModelSelectionMenu("Ropa/lsfd.txt");
    uniformegob = LoadModelSelectionMenu("Ropa/gobierno.txt");
    ropagym = LoadModelSelectionMenu("Ropa/gym.txt");
    ropa_binco = LoadModelSelectionMenu("Ropa/binco.txt");
    ropa_prolaps = LoadModelSelectionMenu("Ropa/prolaps.txt");
    ropa_zip = LoadModelSelectionMenu("Ropa/zip.txt");
    ropa_ds = LoadModelSelectionMenu("Ropa/ds.txt");
    ropa_victim = LoadModelSelectionMenu("Ropa/victim.txt");
    ropa_suburban = LoadModelSelectionMenu("Ropa/suburban.txt");

    /* Cargado de objetos*/

	/* Camaras del inicio */
	CamaraInicio[0] = LoadCameraMover("CameraOne");
    CamaraInicio[1] = LoadCameraMover("CameraTwo");
    CamaraInicio[2] = LoadCameraMover("CameraThree");
    CamaraInicio[3] = LoadCameraMover("CameraFour");

    /* Sistema de drogas */
    CamaraCocaina = LoadCameraMover("DRUG");

    /* Cargado de celdas */
    CargarPosicionesCeldas();

    /* Timers */
    //SetTimer("EstaEbrio", 500, 1);
    //SetTimer("ComprobarEnergia", 80000, 1);
    //SetTimer("ComprobarHambre", 120000, 1);
    SetTimer("ComprobarAlcohol", 120000, 1);
    SetTimer("AlternarLuces", 100, 1);
    SetTimer("Intermitentes", 420, 1);
    SetTimer("TimerDeUnMinuto", 60000, 1);
    SetTimer("TimerDeUnSegundo", 1000, 1);
    //SetTimer("IncendioAleatorio", (60000 * 150), 1);
    SetTimer("ComprobarAccidentes", 5000, 1);
    SetTimer("Comprobaciones", 5000, 1);
    SetTimer("ActualizarRadar",750,1);
    SetTimer("QuitarGasolina", 120000, 1);
    SetTimer("QuitarDiesel", 180000, 1);
    SetTimer("ComprobarActualizacion", 60000, 1);
    //SetTimer("ActualizarPlantacion", 20000, 1);
    //SetTimerEx("ConectarBots", 500, 0, "d", 1);

	SetGameModeText(VERSION_GM);
	AllowInteriorWeapons(1);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	ManualVehicleEngineAndLights();
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	/* Reinicio de variables */
	for(new i; i < MAX_INFORMESFD; i++)
	{
		InformesFD[i][ifdPaciente] = -1;
		InformesFD[i][ifdMedico] = -1;
	}

	for(new c = 0; c < MAX_CELDAS; c++)
	{
		Celda[c][celEstado] = 0;
		Celda[c][celLlena] = 0;
	}

	/* Zona de caza */
	ZonaCaza = GangZoneCreate( MinX_Caza, MinY_Caza, MaxX_Caza, MaxY_Caza);
	for(new i = 0; i < MAX_CIERVOS; i++)
	{
		CrearCiervo(i);
	}
	CiervosYaEstanCreados = 1;

	/* Textos */
	LSFD[0] = CreateDynamicObject(19353, 1493.5177, -1567.8818, 19.2783, 0.7999, -0.0000, 0.0166);
 	SetDynamicObjectMaterialText(LSFD[0], 0, "LSFD", 50, "Arial", 60, 1, -65536, 0, 1);
	LSFD[1] = CreateDynamicObject(19353, 1450.9532, -1565.8184, 24.3268, 0.0000, 0.0000, -179.8794);
	SetDynamicObjectMaterialText(LSFD[1], 0, "LSFD", 50, "Arial", 60, 1, -65536, 0, 1);
	LSFD[2] = CreateDynamicObject(19353, 1522.90, -1563.6743, 19.0817, 0.0000, 0.0000, 181.8535);
	SetDynamicObjectMaterialText(LSFD[2], 0, "R-02 / R-01", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[3] = CreateDynamicObject(19353, 1522.90, -1553.4169, 19.0817, 0.0000, 0.0000, 181.8535);
	SetDynamicObjectMaterialText(LSFD[3], 0, "R-04 / R-03", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[4] = CreateDynamicObject(19353, 1522.90, -1542.9708, 19.0817, 0.0000, 0.0000, 181.8535);
	SetDynamicObjectMaterialText(LSFD[4], 0, "R-06 / R-05", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[5] = CreateDynamicObject(19353, 1522.90, -1532.7306, 19.0817, 0.0000, 0.0000, 181.8535);
	SetDynamicObjectMaterialText(LSFD[5], 0, "G-02 / G-01", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[6] = CreateDynamicObject(19353, 1510.2528, -1509.9354, 19.0817, 0.0000, 0.0000, -90.1764);
	SetDynamicObjectMaterialText(LSFD[6], 0, "P-01 / P-02", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[7] = CreateDynamicObject(19353, 1520.8441, -1509.9354, 19.0817, 0.0000, 0.0000, -90.1764);
	SetDynamicObjectMaterialText(LSFD[7], 0, "P-03 / P-04", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[8] = CreateDynamicObject(19353, 1531.0461, -1509.9354, 19.0817, 0.0000, 0.0000, -90.1764);
	SetDynamicObjectMaterialText(LSFD[8], 0, "A-01 / A-02", 50, "Arial", 26, 1, -65536, 0, 1);
	LSFD[9] = CreateDynamicObject(19353, 1541.6811, -1510.0112, 19.0498, 0.0000, 0.0000, -90.1764);
	SetDynamicObjectMaterialText(LSFD[9], 0, "U-01 / U-02", 50, "Arial", 26, 1, -65536, 0, 1);

    //LSPD - Patrullas

	new m01 = CreateObject(19353, 1391.5444, -1642.7556, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m01, "M - 01", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m02 = CreateObject(19353, 1391.5444, -1647.6302, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m02, "M - 02", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m03 = CreateObject(19353, 1391.5444, -1651.7883, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m03, "M - 03", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m04 = CreateObject(19353, 1391.5444, -1656.2952, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m04, "M - 04", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m05 = CreateObject(19353, 1391.5444, -1660.7480, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m05, "M - 05", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m06 = CreateObject(19353, 1391.5444, -1665.1093, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m06, "M - 06", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m07 = CreateObject(19353, 1391.5444, -1669.4934, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m07, "M - 07", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m08 = CreateObject(19353, 1391.5444, -1673.7529, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m08, "M - 08", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m09 = CreateObject(19353, 1391.5444, -1682.5826, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m09, "M - 09", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m10 = CreateObject(19353, 1391.5444, -1687.0173, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m10, "M - 10", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m11 = CreateObject(19353, 1391.5444, -1691.4564, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m11, "M - 11", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new m12 = CreateObject(19353, 1391.5444, -1695.7164, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m12, "M - 12", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m13 = CreateObject(19353, 1391.5444, -1700.2041, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m13, "M - 13", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m14 = CreateObject(19353, 1391.5444, -1704.4636, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m14, "M - 14", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m15 = CreateObject(19353, 1391.5444, -1708.8602, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m15, "M - 15", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m16 = CreateObject(19353, 1391.5444, -1713.1822, 4.8924, 0.0000, -86.6999, 179.2442);
	SetObjectMaterialText(m16, "M - 16", 0, 50, "Arial", 24, 0, -47, 0, 1);

	// PARED 2

	new m17 = CreateObject(19353, 1388.5180, -1716.3836, 4.8844, 0.0000, -92.2999, 87.9039);
	SetObjectMaterialText(m17, "M - 17", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m18 = CreateObject(19353, 1383.7365, -1716.3836, 4.8844, 0.0000, -92.2999, 87.9039);
	SetObjectMaterialText(m18, "M - 18", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m19 = CreateObject(19353, 1378.7755, -1716.3836, 4.8844, 0.0000, -92.2999, 87.9039);
	SetObjectMaterialText(m19, "M - 19", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new m20 = CreateObject(19353, 1374.0935, -1716.4356, 4.8844, 0.0000, -92.2999, 87.9039);
	SetObjectMaterialText(m20, "M - 20", 0, 50, "Arial", 24, 0, -47, 0, 1);

	//Motos

	new mo01 = CreateObject(19353, 1359.9465, -1673.7227, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo01, "MO - 01", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new mo02 = CreateObject(19353, 1359.9465, -1678.2708, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo02, "MO - 02", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new mo03  = CreateObject(19353, 1359.9465, -1682.6954, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo03, "MO - 03", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new mo04 = CreateObject(19353, 1359.9465, -1687.1694, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo04, "MO - 04", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new mo05 = CreateObject(19353, 1359.9465, -1691.4281, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo05, "MO - 05", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new mo06 = CreateObject(19353, 1359.9465, -1695.7972, 8.4137, 0.0000, 0.0000, 182.1947);
	SetObjectMaterialText(mo06, "MO - 06", 0, 50, "Arial", 24, 0, -47, 0, 1);

	//Grúas

	new g01 = CreateObject(19353, 1355.8597, -1640.0474, 9.0737, 0.0000, 0.0000, -89.4910);
	SetObjectMaterialText(g01, "G - 01", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new g02 = CreateObject(19353, 1360.7640, -1640.0474, 9.0737, 0.0000, 0.0000, -89.4910);
	SetObjectMaterialText(g02, "G - 02", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new g03 = CreateObject(19353, 1365.7062, -1640.0474, 9.0737, 0.0000, 0.0000, -89.4910);
	SetObjectMaterialText(g03, "G - 03", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new g04 = CreateObject(19353, 1370.4924, -1640.0474, 9.0737, 0.0000, 0.0000, -89.4910);
	SetObjectMaterialText(g04, "G - 04", 0, 50, "Arial", 24, 0, -47, 0, 1);

	//UNOE
	new geo01 = CreateObject(19353, 1359.9533, -1673.8869, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo01, "UNOE - 01", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new geo02 = CreateObject(19353, 1359.9533, -1678.3062, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo02, "UNOE - 02", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new geo03 = CreateObject(19353, 1359.9533, -1682.5954, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo03, "UNOE - 03", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new geo04 = CreateObject(19353, 1359.9533, -1687.1719, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo04, "UNOE - 04", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new geo05 = CreateObject(19353, 1359.9533, -1691.4748, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo05, "UNOE - 05", 0, 50, "Arial", 24, 0, -47, 0, 1);
	new geo06 = CreateObject(19353, 1359.9533, -1695.8218, -1.7828, 0.0000, 0.0000, 181.5212);
	SetObjectMaterialText(geo06, "UNOE - 06", 0, 50, "Arial", 24, 0, -47, 0, 1);

 	// Sala de sanción

	new reportars = CreateObject(19353, 320.1233, 306.6278, 1001.6689, 0.0000, 0.0000, 0.0232);
	SetObjectMaterialText(reportars, "Usa /solicitar si", 0, 50, "Arial", 16, 1, -32256, 0, 1);

	new crees_que_fue = CreateObject(19353, 320.1488, 306.9576, 1000.7682, 0.0000, 0.0000, -0.6532);
	SetObjectMaterialText(crees_que_fue, "crees que fue", 0, 50, "Arial", 16, 1, -32256, 0, 1);

	new un_error = CreateObject(19353, 320.1488, 306.9576, 999.8285, 0.0000, 0.0000, -3.0998);
	SetObjectMaterialText(un_error, "un error", 0, 50, "Arial", 16, 1, -65536, 0, 1);

	new reglas = CreateObject(19353, 322.5809, 301.9250, 1001.3085, 0.0000, 0.0000, 90.3004);
	SetObjectMaterialText(reglas, "Usa /reglas", 0, 50, "Arial", 24, 0, -32256, 0, 1);

	new tiempos = CreateObject(19353, 323.5140, 313.1232, 1000.7286, 0.0000, 0.0000, -179.3665);
	SetObjectMaterialText(tiempos, "Usa /tiempo para ver", 0, 50, "Arial", 16, 1, -16468988, 0, 1);

	new condena = CreateObject(19353, 323.5432, 312.4574, 1000.0283, 0.0000, 0.0000, 179.9536);
	SetObjectMaterialText(condena, "tu condena", 0, 50, "Arial", 16, 1, -16468988, 0, 1);


	/* Puertas */
	intLSPD[0] = CreateDynamicObject(1536, 228.23, 150.50, 1001.84,   0.00, 0.00, 90.00);
	intLSPD[1] = CreateDynamicObject(1536, 228.29, 160.47, 1001.84,   0.00, 0.00, 90.00);
	intLSPD[2] = CreateDynamicObject(1536, 230.70, 169.80, 1001.84,   0.00, 0.00, 0.00);
	intLSPD[3] = CreateDynamicObject(1536, 237.96, 183.32, 1001.84,   0.00, 0.00, 0.00);
	intLSPD[4] = CreateDynamicObject(1536, 274.83, 189.33, 1006.14,   0.00, 0.00, 0.00);
	intLSPD[5] = CreateDynamicObject(1536, 295.87, 189.28, 1006.14,   0.00, 0.00, 0.00);
	celdaLSPD[0] = CreateDynamicObject(19302, 209.04, 159.11, 1003.25,   0.00, 0.00, -90.00);
	celdaLSPD[1] = CreateDynamicObject(19302, 208.77, 178.26, 1003.25,   0.00, 0.00, 90.00);
	celdaLSPD[2] = CreateDynamicObject(19302, 197.20, 177.04, 1003.25,   0.00, 0.00, 0.00);
	celdaLSPD[3] = CreateDynamicObject(19302, 192.96, 177.04, 1003.25,   0.00, 0.00, 0.00);
	celdaLSPD[4] = CreateDynamicObject(19302, 188.73, 177.07, 1003.25,   0.00, 0.00, 0.00);
	celdaLSPD[5] = CreateDynamicObject(19302, 190.44, 160.26, 1003.25,   0.00, 0.00, 180.00);
	celdaLSPD[6] = CreateDynamicObject(19302, 194.69, 160.26, 1003.25,   0.00, 0.00, 180.00);
	celdaLSPD[7] = CreateDynamicObject(19302, 198.96, 160.27, 1003.25,   0.00, 0.00, 180.00);
	intGob[0] = CreateObject(1536, 365.68, 168.85, 1007.39,   0.00, 0.00, 0.00);
	intGob[1] = CreateObject(1536, 371.25, 166.62, 1007.39,   0.00, 0.00, 0.00);
	ascensorunity = CreateDynamicObject(2669, 1777.37927, -1777.52820, 14.01590,   0.00000, 0.00000, 179.62450);
	nuevoLSPD[0] = CreateDynamicObject(3037, 1327.5699, -1665.8199, 6.9186, 0.0000, 0.0000, 90.0000);
	nuevoLSPD[1] = CreateDynamicObject(3037, 1381.3000, -1623.9900, 9.6542, 0.0000, 0.0000, 59.9900);
	nuevoLSPD[2] = CreateObject(968, 1419.4600, -1644.9601, 12.9600, 0.0000, -90.0000, 90.0000);
	nuevoLSPD[3] = CreateObject(968, 1375.5800, -1721.4900, 13.1600, 0.0000, -90.0000, 0.0000);
	recluitGN[0] = CreateDynamicObject(2909,1761.3000000,-1700.5000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(kmb_frontgate) (1)
	recluitGN[1] = CreateDynamicObject(2909,1761.3000000,-1691.8000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(kmb_frontgate) (2)
	rejaGN[0] = CreateDynamicObject(3095,2814.2000000,-2386.7000000,14.94,0.0000000,0.0000000,0.0000000); //object(a51_jetdoor) (1)
	rejaGN[1] = CreateDynamicObject(2909,2720.6000000,-2405.4000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(kmb_frontgate) (1)
	rejaGN[2] = CreateDynamicObject(2909,2720.6000000,-2504.0000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(kmb_frontgate) (2)
	rejaGN[6] = CreateObject(968,2484.9000000,-2282.4000000,24.7000000,0.0000000,270.0000000,44.9950000); //object(barrierturn) (1)
	rejaGN[7] = CreateObject(968,2382.5000000,-2397.5000000,13.2000000,0.0000000,270.0000000,224.9890000); //object(barrierturn) (2)
	rejaGN[8] = CreateObject(968,2324.9000000,-2663.5000000,13.3000000,0.0000000,270.0000000,91.7450000); //object(barrierturn) (3)
	rejaGN[9] = CreateObject(968,2322.7000000,-2662.8000000,13.3000000,0.0000000,270.0000000,269.4910000); //object(barrierturn) (4)
	rejaGN[10] = CreateObject(968,2384.0000000,-2399.8000000,13.2000000,0.0000000,270.0000000,44.9950000); //object(barrierturn) (5)
	rejaGN[11] = CreateObject(968,2483.6000000,-2280.2000000,24.7000000,0.0000000,270.0000000,224.9890000); //object(barrierturn) (6)
	rejaGN[12] = CreateObject(3115, 2831.40552, -2350.08203, 15.20700,   0.00000, 0.00000, 90.00000);
	rejaGN[13] = CreateObject(3114, 2846.49976, -2392.32495, 14.95150,   0.00000, 0.00000, 270.00000);
	rejaaero[0] = CreateDynamicObject(989,1964.19995117,-2189.80004883,14.39999962,0.00000000,0.00000000,107.75000000); //object(ac_apgate) (1)
	rejaaero[1] = CreateDynamicObject(989,1958.69995117,-2189.89990234,14.39999962,0.00000000,0.00000000,107.74560547); //object(ac_apgate) (2)
	CrearPuertasCeldas(); // Puertas de celdas
	puertaCarcel1 = CreateDynamicObject(1495, 231.62, -1074.88, -95.06, 0.00, 0.00, 270.00);
	puertaCarcel2 = CreateDynamicObject(1495, 231.65, -1082.79, -95.06, 0.00, 0.00, 90.00);
	puertaCarcel3 = CreateDynamicObject(1495, 224.04, -1088.50, -95.06, 0.00, 0.00, 0.00);
	puertaCarcel4 = CreateDynamicObject(1495, 228.22, -1093.38, -95.06, 0.00, 0.00, 0.00);
	puertaAI[0] = CreateDynamicObject(1500, 1252.3525, -1693.3054, -18.7675, 0.0000, 0.0000, 90.0000); // Derecha
	puertaAI[1] = CreateDynamicObject(1500, 1252.4016, -1685.9569, -18.7585, 0.0000, 0.0000, 90.0000); // Medio
	puertaAI[2] = CreateDynamicObject(1500, 1252.3931, -1677.6332, -18.7585, 0.0000, 0.0000, 90.0000); // Izquierda
	puertaAI[3] = CreateDynamicObject(1569, 1268.9409, -1690.1349, -17.0871, 0.0000, 0.0000, 90.0000); // Vice-Presidente
	puertaAI[4] = CreateDynamicObject(1569, 1268.8901, -1680.3573, -17.0871, 0.0000, 0.0000, 90.0000); // Presidente
	puertaAI[5] = CreateDynamicObject(1569, 1265.4742, -1674.6713, -17.0871, 0.0000, 0.0000, 180.0000); // Reunion
	puertaAI[6] = CreateDynamicObject(1536, 1252.3202, -1669.5604, -18.7155, 0.0000, 0.0000, -90.0000); // Interrogacion
	puertaAI[7] = CreateDynamicObject(1536, 1255.3097, -1664.9620, -18.7240, 0.0000, 0.0000, 0.0000); // Carcel
	rejaJuzgado = CreateObject(1495, -717.16528, 2341.62134, 90.77750, 0.00000, 0.00000, 90.00000);
	LSFD[14] = CreateDynamicObject(8957, 1523.0879, -1563.6947, 13.8786, 0.0000, 0.0000, 0.0000); //
	LSFD[15] = CreateDynamicObject(8957, 1523.0659, -1553.3491, 13.8786, 0.0000, 0.0000, 0.0000); //
	LSFD[16] = CreateDynamicObject(8957, 1523.0540, -1542.9813, 13.8786, 0.0000, 0.0000, 0.0000); //
	LSFD[17] = CreateDynamicObject(8957, 1523.0459, -1532.6880, 13.8786, 0.0000, 0.0000, 0.0000); //
	LSFD[10] = CreateDynamicObject(8957, 1541.0642, -1509.9301, 13.8786, 0.0000, 0.0000, 89.9800); //
	LSFD[11] = CreateDynamicObject(8957, 1530.9006, -1509.9221, 13.8786, 0.0000, 0.0000, 89.9800); //
	LSFD[12] = CreateDynamicObject(8957, 1520.5536, -1509.9301, 13.8786, 0.0000, 0.0000, 89.9800); //
	LSFD[13] = CreateDynamicObject(8957, 1510.2494, -1509.9301, 13.8786, 0.0000, 0.0000, 89.9800); //
	LSFD[18] = CreateDynamicObject(989,1511.01000000,-1582.29000000,14.38000000,0.00000000,0.00000000,287.46000000); //
	LSFD[19] = CreateDynamicObject(989,1516.52000000,-1582.24000000,14.38000000,0.00000000,0.00000000,287.46000000); //
	rejaDeposito[0] = CreateObject(968, 942.26, -1385.74, 13.22,   0.00, 90.00, 0.00);
	rejaDeposito[1] = CreateObject(968, 934.51, -1386.03, 13.22,   0.00, -90.00, 0.00);
	rejaDeposito[2] = CreateDynamicObject(3037, 945.60, -1326.31, 5.01,   0.00, 0.00, 90.00);
	rejaDeposito[3] = CreateDynamicObject(3037, 931.09, -1326.27, 4.88,   0.00, 0.00, 90.00);
    puertaLSMD = CreateDynamicObject(2909,1136.5999800,-1292.4000200,13.9000000,0.0000000,0.0000000,90.0000000); //object(kmb_frontgate) (3)
	barreraSAPD = CreateObject(968,1544.69921875,-1630.79980469,13.10000038,0.00000000,269.49993896,270.99969482); //object(barrierturn) (2)
	rejaSAPD = CreateDynamicObject(10558,1588.89941406,-1638.19921875,14.50000000,0.00000000,0.00000000,90.00000000); //object(tbnsfs) (1)
    peaje[0] = CreateObject(968, 66.40000, -1537.00000, 4.80000,   0.00000, 90.24200, 269.24200);
	peaje[1] = CreateObject(968, 35.90000, -1525.90002, 5.00000,   0.00000, 90.24200, 87.74200);
	peaje[2] = CreateObject(968, -168.70000, 364.20001, 11.90000,   0.00000, 90.00000, 345.00000);
	peaje[3] = CreateObject(968, 525.59998, 465.39999, 18.60000,   0.00000, 270.50000, 35.24700);
	peaje[4] = CreateObject(968, 517.59961, 477.09961, 18.60000,   0.00000, 89.49400, 36.00000);
	peaje[5] = CreateObject(968, -172.50000, 350.70001, 11.90000,   0.00000, 90.00000, 163.99600);
	peaje[6] = CreateObject(968, 18.60000, -1340.19995, 9.70000,   0.00000, 89.75000, 308.24701);
	peaje[7] = CreateObject(968, 619.29980, -1180.00000, 19.80000,   0.00000, 89.74700, 29.24000);
	peaje[8] = CreateObject(968, 1643.50000, -19.00000, 36.30000,   0.00000, 90.24700, 22.48600);
	peaje[9] = CreateObject(968, 1627.29980, 2.69922, 36.50000,   359.98901, 89.24200, 200.49001);
	peaje[10] = CreateObject(968, 2894.30005, -680.00000, 10.80000,   359.99500, 89.74200, 178.98900);
	peaje[11] = CreateObject(968, 2895.39990, -680.09998, 10.80000,   0.02100, 269.50000, 179.37199);
	peaje[12] = CreateObject(968, 2877.50000, -654.79999, 10.80000,   0.01600, 269.50000, 179.86800);
	peaje[13] = CreateObject(968, 2875.89990, -654.79999, 10.80000,   359.99600, 89.74200, 178.48900);
	rejacam1 = CreateObject(968, 922.23199, -1230.40210, 16.59560,   0.00000, -90.00000, -90.08000);
	rejacam2 = CreateObject(968, 922.39178, -1212.01697, 16.59560,   0.00000, -90.00000, 89.96000);

	for(new i = 0; i < 7; i++)
	{
	    CreateDynamic3DTextLabel("{21D121}Concesionario{FFFFFF}\nUsa {21D121}/catalogo{FFFFFF} para ver los vehículos en venta.\nUsa {21D121}/comprarveh{FFFFFF} para comprarlo.", 0xFFFFFFFF, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ], 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	}

	for(new i=0; i < MAX_CAR_DATA; i++)
	{
	    new string[128];
		format(string, sizeof(string), "Vehiculo: %s", datacar[i][dcNombre]);
		Nombre[i] = TextDrawCreate(151.000000,342.000000,string);
    	format(string, sizeof(string), "Precio: $%d", datacar[i][dcPrecio]);
		Costo[i] = TextDrawCreate(152.000000,356.000000,string);
		format(string, sizeof(string), "Id: %d Nivel: %d", i, datacar[i][dcNivel]);
		Id[i] = TextDrawCreate(151.000000,369.000000,string);
		TextDrawAlignment(Nombre[i],0);
		TextDrawAlignment(Costo[i],0);
		TextDrawAlignment(Id[i],0);
		TextDrawBackgroundColor(Nombre[i],0x000000ff);
		TextDrawBackgroundColor(Costo[i],0x000000ff);
		TextDrawBackgroundColor(Id[i],0x000000ff);
		TextDrawFont(Nombre[i],2);
		TextDrawLetterSize(Nombre[i],0.499999,1.100000);
		TextDrawFont(Costo[i],2);
		TextDrawLetterSize(Costo[i],0.499999,1.100000);
		TextDrawFont(Id[i],2);
		TextDrawLetterSize(Id[i],0.499999,1.300000);
		TextDrawColor(Nombre[i],0xffffffff);
		TextDrawColor(Costo[i],0x00ff0066);
		TextDrawColor(Id[i],0xffffffff);
		TextDrawSetOutline(Nombre[i],1);
		TextDrawSetOutline(Costo[i],1);
		TextDrawSetOutline(Id[i],1);
		TextDrawSetProportional(Nombre[i],1);
		TextDrawSetProportional(Costo[i],1);
		TextDrawSetProportional(Id[i],1);
		TextDrawSetShadow(Nombre[i],1);
		TextDrawSetShadow(Costo[i],1);
		TextDrawSetShadow(Id[i],1);
	}

	return 1;
}

public OnGameModeExit()
{
	for(new i=0; i < MAX_PLAYERS; i++)
 	{
        	if(JugadorInfo[i][jJugando] == 1)
			{
	    		GuardarCuenta(i);
			}
			return 1;
	}

    TextDrawDestroy(pcpd0);
	TextDrawDestroy(pcpd1);
	TextDrawDestroy(pcpd2);
	TextDrawDestroy(pcpd3);
	TextDrawDestroy(pcpd4);
	TextDrawDestroy(pcpd5);
	TextDrawDestroy(pcpd6);
	TextDrawDestroy(pcpd7);
	TextDrawDestroy(pcpd8);
	TextDrawDestroy(pcpd9);
	TextDrawDestroy(pcpd11);
    DestroyMenu(ArmeriaSAPD);
    DestroyMenu(ArmasSAPD);
    DestroyMenu(MunicionSAPD);
    DestroyMenu(TiendaDeportes);
    QuitarRadares();
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		ActualizarVeh(i);
	}
	for(new j; j < MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
	        SavePos(j);
	    }
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    TextDrawShowForPlayer(playerid, Textdraw9);
	TextDrawShowForPlayer(playerid, Textdraw10);
	TextDrawShowForPlayer(playerid, Textdraw12);
    SetPlayerHealth(playerid, 99);
    if(IsPlayerNPC(playerid)) return 1;
	new lugar = random(4);
	CamaraAlAzar(playerid, lugar);
	PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/42457537/M%C3%BAsica%20para%20samp/CJ%20Rap%20-%20Young%20Maylay%20%28Subtitulado%20en%20Espa%C3%83%C2%B1ol%29.mp3");
	LimpiarConsola(playerid, 25);

 if(Registrado[playerid] == 0)
	{
	    new Mensaje[350];
	    format(Mensaje, sizeof(Mensaje), "{FFFFFF}Bienvenido {00FFFF}%s{FFFFFF}, se ha producido un error.\n\nSu nombre no aparece en la base de datos del servidor, si\ncree que es un error, abra un ticket en el foro, de lo contrario, deberá\ncrearse una cuenta en el PCU de "NOMBRE_COMUNIDAD". ( "PAGINA_PCU" )", NombreJugador(playerid));
		ShowPlayerDialog(playerid, AvisoPCU, DIALOG_STYLE_MSGBOX, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Error", Mensaje, "Salir", "");
		return 1;
	}
	else
	{
	    new string[250];
	    format(string, sizeof(string), "{FFFFFF}Bienvenido nuevamente {00FFFF}%s{FFFFFF}, gracias nuevamente por visitar "NOMBRE_COMUNIDAD".\n\nIntroduce tu contraseña a continuación para acceder al servidor.",NombreJugador(playerid));
	    ShowPlayerDialog(playerid, Acceso, DIALOG_STYLE_PASSWORD, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Contraseña", string, "Entrar", "Cancelar");
		return 1;
	}
}

public OnPlayerConnect(playerid)
{
	SendClientMessage(playerid, GRIS, "Un momento por favor...");
	Objetos_OnPlayerConnect(playerid);
	barrita = CreatePlayerProgressBar(playerid ,209.00, 419.00, 217.50, 3.20, 0xA04907AA, 100.0);
    Contador_Caza[playerid]=-1;

    SetPlayerHealth(playerid, 99);
    SetPlayerColor(playerid,0xFFFFFF00);
    SetPlayerTeam(playerid, 1);

    TextDraws(playerid);
    ReiniciarVariables(playerid);

    new query[128];
	new escstr[MAX_PLAYER_NAME];
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));

	mysql_real_escape_string(pNameEx(playerid), escstr);

	/*if(mysql_num_rows() >= 1)
	{
	    new msg[700], row[60];
	    mysql_fetch_row_format(row);
	    format(msg, sizeof(msg), "{FFFFFF}Bienvenido {00A5FF}%s{FFFFFF}, usted se encuentra baneado del servidor a razón de {FF0000}%s{FFFFFF}.\n\nSi usted cree que es un error por favor ingrese a nuestro foro y vé a Soporte.", NombreJugador(playerid), row);
		ShowPlayerDialog(playerid, AvisoPCU, DIALOG_STYLE_MSGBOX, "{00A5FF}¡Aviso!{FFFFFF} - Lea atentamente...", msg, "Aceptar", "Cancelar");
		Registrado[playerid] = 0;
		KickRetrasado(playerid);
		return 1;
	}*/

	format(query, sizeof(query), "SELECT * FROM usuarios WHERE Nombre = '%s' LIMIT 1", escstr);
	mysql_query(database, query, true);

	if(cache_get_row_count(database))
	{
		Registrado[playerid] = 1;
	}
	else
	{
	    new msg[500];
	    format(msg, sizeof(msg), "{FFFFFF}Bienvenido {00A5FF}%s{FFFFFF}, su nombre no aparece en nuestra base de datos.\n\nPara poder entrar en nuestro servidor deberás registrarte en www.wattsrp.com/pcu (No requiere certificación).", NombreJugador(playerid));
		ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{00A5FF}¡Aviso!{FFFFFF} - Lea atentamente...", msg, "Aceptar", "Cancelar");
		Registrado[playerid] = 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success){
	//if(!success) return SendClientMessage(playerid, ROJO_OSCURO, "[Error] {FFFFFF}Comando desconocido. Use {33CCFF}/informacion {FFFFFF}o {33CCFF}/ayuda{FFFFFF} para ver los comandos.");
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	JugadorInfo[playerid][jJugando] = 0;

	GuardarCuenta(playerid);

	KillTimer(TFuera[playerid]);

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
	    new string[128];
		switch (reason)
		{
			case 0:
			{
				format(string, sizeof(string), "(( %s (ID:%d) se ha desconectado. Se perdió la conexión con el jugador (Timeout/Crash) ))", NombreJugador(playerid), playerid);
			}
			case 1:
			{
				format(string, sizeof(string), "(( %s (ID:%d) se ha desconectado. El jugador ha cerrado el juego voluntariamente. ))", NombreJugador(playerid), playerid);
			}
			case 2:
			{
				format(string, sizeof(string), "(( %s (ID:%d) se ha desconectado. El jugador ha sido expulsado del servidor. ))", NombreJugador(playerid), playerid);
			}
		}
		ProxDetector(20.0, playerid, string, GRIS,GRIS,GRIS,GRIS,GRIS);
	}

	EnCatalogoVeh[playerid] = NOEXISTE;
	if (VehCatalogo[playerid] != NOEXISTE)
	{
		DestroyVehicle(VehCatalogo[playerid]);
		VehCatalogo[playerid] = NOEXISTE;
	}

	if(ExamenAutoescuela[playerid] > 0 && TipoLicenciaAutoescuela[playerid] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}

	TraficandoArmas[playerid] = 0;
    KillTimer(TimerTraficandoArmas[playerid]);
    KillTimer(TimerHack[playerid]);
    KillTimer(TimerArmas[playerid]);
    KillTimer(TimerVCasa[playerid]);
    KillTimer(TimerPos[playerid]);
    KillTimer(TimerMuerto[playerid]);
    KillTimer(TimerVelocimetro[playerid]);
    KillTimer(TimerDrogado[playerid]);
    KillTimer(TimerComa[playerid]);
    KillTimer(Contador_Caza[playerid]);

    PlayerTextDrawDestroy(playerid, Velocimetro0[playerid]);
	PlayerTextDrawDestroy(playerid, Velocimetro1[playerid]);
	PlayerTextDrawDestroy(playerid, TDGYM0[playerid]);
	PlayerTextDrawDestroy(playerid, TDGYM1[playerid]);
	PlayerTextDrawDestroy(playerid, TDGYM2[playerid]);
	PlayerTextDrawDestroy(playerid, TDGYM3[playerid]);

	if(HaciendoEjercicio[playerid] != 0)
	{
	    HaciendoBicicleta[playerid] = 0;
	    HaciendoPress[playerid] = 0;
	    HaciendoMancuerna[playerid] = 0;
	    HaciendoEliptica[playerid] = 0;
	    xejercicio[playerid] = 0;
	    PlayerTextDrawHide(playerid, TDGYM1[playerid]);
	    PlayerTextDrawHide(playerid, TDGYM0[playerid]);
	    PlayerTextDrawHide(playerid, TDGYM2[playerid]);
	    HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
	    stop Pressbanca[playerid];
	    stop Bicicleta[playerid];
	    stop BajarBarra[playerid];
	    stop Mancuernas[playerid];
	    stop Eliptica[playerid];
	    ClearAnimations(playerid);
	    RemovePlayerAttachedObject(playerid, 0);
	    RemovePlayerAttachedObject(playerid, 1);
	    HaciendoEjercicio[playerid] = 0;
	}


	for(new i; i < MAX_INFORMESFD; i++)
	{
		if(InformesFD[i][ifdMedico] == playerid)
		{
		    InformesFD[i][ifdEstado] = 1;
		}
	}

    for(new i = 0; i < 10; i ++)
    {
        RemovePlayerAttachedObject(playerid, i);
    }

    if(JugadorInfo[playerid][jWaterTimer] != -1) // Para prevenir posibles bugs
	{
		KillTimer(JugadorInfo[playerid][jWaterTimer]);
		JugadorInfo[playerid][jWaterTimer] = -1;
	}

	for(new i; i < MAX_INFORMESFD; i++)
	{
		if(InformesFD[i][ifdPaciente] == playerid && InformesFD[i][ifdEstado] == 1)
		{
			KillTimer(InformesFD[i][ifdTimer]);
			InformesFD[i][ifdEstado] = 0;
			break;
		}
		else if(InformesFD[i][ifdPaciente] == playerid && InformesFD[i][ifdEstado] == 2)
		{
			KillTimer(InformesFD[i][ifdTimer]);
			DisablePlayerCheckpoint(InformesFD[i][ifdMedico]);
			SendClientMessage(InformesFD[i][ifdMedico], CELESTE, "(( El jugador se desconectó. Misión abortada. ))");
			InformesFD[i][ifdEstado] = 0;
			InformesFD[i][ifdMedico] = NOEXISTE;
			break;
		}
	}

	if(VehRentado[playerid] != NOEXISTE)
	{
	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(AutoInfo[i][aID] == VehRentado[playerid])
	        {
	            SetVehicleToRespawn(i);
	            AutoInfo[i][aCerrado] = 0;
	            VehAlquilado[i] = 0;
	        }
	    }
	}

	if(JugadorInfo[playerid][jServicio] == 1 && JugadorInfo[playerid][jMiembro] == 3) BomberosOnline --;
	return 1;
}

public OnPlayerSpawn(playerid)
{
    /*if(JugadorInfo[playerid][jMiembro] == 1 || JugadorInfo[playerid][jMiembro] == 4 || JugadorInfo[playerid][jMiembro] == 6)
	{
		EnableAntiCheatForPlayer(playerid, 15, 0);
		EnableAntiCheatForPlayer(playerid, 11, 0);
		return 1;
	}*/
    new Pertenencias[3];
	if(EsArma(BolsilloID[playerid][11]))
	{
	    RemoverArmas(playerid);
	}
	Pertenencias[0] = BolsilloID[playerid][11];
	Pertenencias[1] = BolsilloCantidad[playerid][11];
	Pertenencias[2] = BolsilloTipo[playerid][11];
	BolsilloID[playerid][11] = BolsilloID[playerid][12];
	BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][12];
	BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	BolsilloID[playerid][12] = Pertenencias[0];
	BolsilloCantidad[playerid][12] = Pertenencias[1];
	BolsilloTipo[playerid][12] = Pertenencias[2];
	Pertenencias[0] = BolsilloID[playerid][11];
	Pertenencias[1] = BolsilloCantidad[playerid][11];
	Pertenencias[2] = BolsilloTipo[playerid][11];
	BolsilloID[playerid][11] = BolsilloID[playerid][12];
	BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][12];
	BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	BolsilloID[playerid][12] = Pertenencias[0];
	BolsilloCantidad[playerid][12] = Pertenencias[1];
	BolsilloTipo[playerid][12] = Pertenencias[2];

	if(EsArma(BolsilloID[playerid][11]))
	{
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	}

	UpdateAttach(playerid);

	if(BolsilloID[playerid][10] >= 0 && BolsilloID[playerid][10] <= 103)
	{
		SetPlayerAttachedObject(playerid,ESPALDA,BolObjeto[BolsilloID[playerid][10]][0],1,-0.305999,-0.203000,0.097999,-170.500030,0.000000,0.000000,1.000000,1.000000,1.000000);
	}
	else
	{
		SendClientMessage(playerid, 0x0000FF00, "Oops, se produjo un error! El objeto que se quiere agregar es invalido.");
	}

	GuardarBolsillos(playerid);

    AntiSobeit(playerid);
    Streamer_Update(playerid);
    PreloadAnimLib(playerid,"freeweights");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"SWORD");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"BOMBER");
   	PreloadAnimLib(playerid,"RAPPING");
    PreloadAnimLib(playerid,"SHOP");
   	PreloadAnimLib(playerid,"BEACH");
   	PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"GYMNASIUM");
    PreloadAnimLib(playerid,"benchpress");
    PreloadAnimLib(playerid,"MEDIC");
    UpdateAttach(playerid);

	if(JugadorInfo[playerid][jHerido] == 1)
	{
	    SetPlayerPos(playerid, 1149.6624,-1330.8489,19.3687);
		SetPlayerCameraPos(playerid, 1201.52, -1294.52, 26.23);
		SetPlayerCameraLookAt(playerid, 1197.50, -1298.69, 24.66);
		SetPlayerInterior(playerid,0);
		TimerComa[playerid] = GameTextForPlayer(playerid, "~g~~h~~h~~h~Ests en coma por 15 segundos.",15000, 3);
		TogglePlayerControllable(playerid, false);
		SetPlayerHealthEx(playerid, 99);
		SetPlayerVirtualWorld(playerid, 2);
		ClearAnimations(playerid);
		LoopingAnim(playerid, "CRACK", "crckdeth1", 4.1, 0, 1, 1, 1, 1);
		return 1;
	}

    if(JugadorInfo[playerid][jTiempoEncarcelado] > 0)
    {
        TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
        SetPlayerInterior(playerid, 3);
        SetPlayerVirtualWorld(playerid, 1);
        new celda = JugadorInfo[playerid][jEncarcelado];
        if(celda == 1) SetPlayerPos(playerid, 197.6745,175.0370,1003.0359);
        else if(celda == 2) SetPlayerPos(playerid, 193.7313,174.5405,1003.0359);
        else if(celda == 3) SetPlayerPos(playerid, 189.5144,174.9177,1003.0359);
        else if(celda == 4) SetPlayerPos(playerid, 198.4590,162.0434,1003.0359);
        else if(celda == 5) SetPlayerPos(playerid, 194.0714,162.0025,1003.0359);
        else if(celda == 6) SetPlayerPos(playerid, 189.8339,162.1722,1003.0359);
        else if(celda == 9) EncarcelarJugador(playerid);

        if(JugadorInfo[playerid][jEncarcelado] == 25)
        {
			SetPlayerVirtualWorld(playerid, playerid);
			SetPlayerInterior(playerid, 5);
			SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
    	}
    }

    if(IsPlayerNPC(playerid))
    {
        new npcname[MAX_PLAYER_NAME];
        GetPlayerName(playerid, npcname, sizeof(npcname));
        if(!strcmp(npcname, "Bot_1", true)) // Abogado 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 76);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_2", true)) // Abogado 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 280);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_3", true)) // Aeropuerto
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 280);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_4", true)) // Armería PD
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 280);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_5", true)) // Autoescuela 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 91);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_6", true)) // Autoescuela 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 98);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_7", true)) // Ayunta 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 163);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_8", true)) // Ayunta 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 165);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_9", true)) // Camioneros
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 163);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_10", true)) // C. Gobierno 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 163);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_11", true)) // C. Gobierno 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 164);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_12", true)) // C. Gobierno 3
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 165);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_13", true)) // C. Gobierno 4
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 166);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_14", true)) // Centro comercial
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 165);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_15", true)) // Depósito municipal
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 281);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_16", true)) // Entrada al garaje PD
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 280);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_17", true)) // Garaje MD
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 164);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_27", true)) // LSRTV
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 188);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_28", true)) // Peaje 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 188);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_29", true)) // Peaje 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 214);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_30", true)) // Peaje 3
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 184);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_31", true)) // Peaje 4
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 214);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_32", true)) // Prisión 1
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 71);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_33", true)) // Prisión 2
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 71);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_34", true)) // Prisión 3
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 71);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_35", true)) // Barrera principal comisaría
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 280);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_36", true)) // Barrera secundaria comisaría
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 281);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
        if(!strcmp(npcname, "Bot_37", true)) // Taxis
        {
            SetPlayerPos(playerid, 0, 0, 0);
            SetPlayerSkin(playerid, 172);
            SetPlayerColor(playerid, BLANCO2);
            Attach3DTextLabelToPlayer(Create3DTextLabel("((BOT))",0x81BEF7FF,0.0,0.0,-10.0,8,1), playerid, 0.0, 0.0, 0.25);
        }
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    KillTimer(TimerTraficandoArmas[playerid]);
    TraficandoArmas[playerid] = 0;
    Paralizado[playerid] = 0;
    GetPlayerPos(playerid, JugadorInfo[playerid][jTPos_X], JugadorInfo[playerid][jTPos_Y], JugadorInfo[playerid][jTPos_Z]);
	JugadorInfo[playerid][jTInt] = GetPlayerInterior(playerid);
	JugadorInfo[playerid][jTVw] = GetPlayerVirtualWorld(playerid);
	JugadorInfo[playerid][jHerido] = 1;

	SetTimerEx("Coma", 3500, 0, "i", playerid);
	TimerMuerto[playerid] = SetTimerEx("TrasladarHospital", (15000), 0, "d", playerid);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 528) //FBI TRUCK UNOE
    {
		SetVehicleHealthEx(vehicleid, 2000);
    }
    CargaDelCamion[vehicleid] = 0;
    luzlanewestado[vehicleid] = 0;
	luzlanews1[vehicleid] = 0;
	luzlanews2[vehicleid] = 0;
	luzlanews3[vehicleid] = 0;
	luzlanews4[vehicleid] = 0;
	DestroyObject(luzlanews1[vehicleid]);
	DestroyObject(luzlanews2[vehicleid]);
	DestroyObject(luzlanews3[vehicleid]);
	DestroyObject(luzlanews4[vehicleid]);
	DestroyDynamicObject(LuzSS[0][vehicleid]);
	DestroyDynamicObject(LuzSS[1][vehicleid]);
	DestroyDynamicObject(LuzSS[2][vehicleid]);
	DestroyDynamicObject(LuzSS[3][vehicleid]);
	SinSonido[vehicleid] = 0;
    VehAlquilado[vehicleid] = 0;
    AutoInfo[vehicleid][aMotor] = 0;

    if(VehExploto[vehicleid] == 1)
	{
	    SetVehicleHealthEx(vehicleid, 350.0);
		AutoInfo[vehicleid][aRoto] = 1;
		UpdateVehicleDamageStatus(vehicleid, 3565161, 33554946, 4, 0);
	}
	SetVehiclePos(vehicleid, AutoInfo[vehicleid][ax], AutoInfo[vehicleid][ay], AutoInfo[vehicleid][az]);
	SetVehicleZAngle(vehicleid, AutoInfo[vehicleid][aa]);
	LinkVehicleToInterior(vehicleid, AutoInfo[vehicleid][aInteriorID]);
	new matricula[40];
	format(matricula, sizeof(matricula), "LS-%d", AutoInfo[vehicleid][aID]);
	SetVehicleNumberPlate(vehicleid, matricula);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    new index = AutoInfo[vehicleid][aID];
	UpdateVehString(index, "Componentes", "");
	VehExploto[vehicleid] = 1;
	DestroyDynamicObject(LuzSS[0][vehicleid]);
	DestroyDynamicObject(LuzSS[1][vehicleid]);
	DestroyDynamicObject(LuzSS[2][vehicleid]);
	DestroyDynamicObject(LuzSS[3][vehicleid]);
	SinSonido[vehicleid] = 0;
	SetVehicleToRespawn(vehicleid);
	SetVehicleHealth(vehicleid, 999);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[256];

    if(LlamadaMovil[playerid] != NOEXISTE)
	{
	    new idx, tmp[128];
		tmp = strtokex(text, idx);
  		format(string, sizeof(string), "(Teléfono): %s", text);
		ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    if(LlamadaMovil[playerid] == 911)
	    {
		    if(!strcmp(text, "policia", true))
			{
                SendClientMessage(playerid, ROJO, "[Operadora 911] Estamos transfiriendo su llamada a la policía, por favor espere...");
				LlamadaMovil[playerid] = POLICIA;
				new Policias=0;
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(JugadorInfo[i][jMiembro] == 1)
					{
						SendClientMessage(i, AZUL, "[Operadora 911] Una llamada esta siendo transferida al departamento de policía. (( /responder para atender el teléfono ))");
						Policias++;
						Policias911++;
					}
				}
				if(Policias < 1){SendClientMessage(playerid, ROJO, "[Operadora 911] Las líneas están colapsadas en estos momentos, llame más tarde."); Policias=0; Policias911--;}
				return 0;
		    }
		    else if ((strcmp("medico", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("medico")))
			{
				SendClientMessage(playerid, ROJO, "[Operadora 911] Estamos transfiriendo su llamada al hospital, por favor espere...");
				LlamadaMovil[playerid] = MEDICO;
    			new Medicos=0;
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(JugadorInfo[i][jMiembro] == 2)
					{
						SendClientMessage(i, AZUL, "[Operadora 911] Una llamada esta siendo transferida al hospital. (( /responder para atender el teléfono ))");
						Medicos++;
						Medicos911++;
					}
				}
				if(Medicos < 1){SendClientMessage(playerid, ROJO, "[Operadora 911] Las líneas están colapsadas en estos momentos, llame más tarde.");Medicos=0;Medicos911--;}
				return 0;
			}
			else if ((strcmp("bombero", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("bombero")))
			{
				SendClientMessage(playerid, ROJO, "[Operadora 911] Estamos transfiriendo su llamada al departamento de bomberos, por favor espere...");
				LlamadaMovil[playerid] = BOMBERO;
    			new Bomberos=0;
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(JugadorInfo[i][jMiembro] == 3)
					{
						SendClientMessage(i, AZUL, "[Operadora 911] Una llamada esta siendo transferida al departamento de bomberos. (( /responder para atender el teléfono ))");
						Bomberos++;
						Bomberos911++;
					}
				}
				if(Bomberos < 1){SendClientMessage(playerid, ROJO, "[Operadora 911] Las líneas están colapsadas en estos momentos, llame más tarde.");Bomberos=0;Bomberos911--;}
				return 0;
			}
			else
			{
				SendClientMessage(playerid, ROJO, "[Operadora 911] No le entendí, ¿policia, médico o bombero?");
				return 0;
			}
		}
		if(IsPlayerConnected(LlamadaMovil[playerid]))
		{
		    if(LlamadaMovil[LlamadaMovil[playerid]] == playerid)
		    {
				SendClientMessage(LlamadaMovil[playerid], AMARILLO, string);
			}
		}
		else
		{
			SendClientMessage(playerid, AMARILLO,"No hay nadie...");
		}
		return 0;
	}
	if(LlamandoTraficantes[playerid] > 0)
	{
	    if(LlamandoTraficantes[playerid] == 2)
	    {
	        if(strcmp("cocaina", text, true) == 0 || strcmp("cocaína", text, true) == 0)
			{
                SetTimerEx("LaLlamadaTrafis",3000,0,"d",playerid);
                return 1;
			}
			if(strcmp("semillas", text, true) == 0)
			{
			    LlamandoTraficantes[playerid] = 3;
                SetTimerEx("LaLlamadaTrafis",3000,0,"d",playerid);
                return 1;
			}
			else
			{
			    SendClientMessage(playerid, AMARILLO, "[Voz grave] ¿Qué has dicho?");
			}
	    }
	}
    if(EmitiendoCNN[playerid] == 1)
    {
    	if(strlen(text) > 75){
			new string2[128];
			format(string2,256,"... %s",text[75]);
			strdel(text,75,strlen(text));
			format(string, sizeof(string), "Reportero de LSRTV dice: %s", text);
			SendClientMessageToAll(0x01B59AFF, string);
			SendClientMessageToAll(0x01B59AFF, string2);
		}
		if(strlen(text) < 75){
			format(string, sizeof(string), "Reportero de LSRTV dice: %s", text);
			SendClientMessageToAll(0x01B59AFF, string);
		}
	}
	else if(Entrevistando[playerid] != NOEXISTE)
	{
	    if(JugadorInfo[playerid][jMiembro] == 5)
	    {
	        if(strlen(text) > 75){
				new string2[128];
				format(string2,256,"... %s",text[75]);
				strdel(text,75,strlen(text));
				format(string, sizeof(string), "Reportero de LSRTV dice: %s", text);
				SendClientMessageToAll(0x01B59AFF, string);
				SendClientMessageToAll(0x01B59AFF, string2);
			}
			if(strlen(text) < 75){
				format(string, sizeof(string), "Reportero de LSRTV dice: %s", text);
				SendClientMessageToAll(0x01B59AFF, string);
			}
	    }
	    else
	    {
	        if(strlen(text) > 75){
				new string2[128];
				format(string2,256,"... %s",text[75]);
				strdel(text,75,strlen(text));
				format(string, sizeof(string), "Invitado en LSRTV dice: %s", text);
				SendClientMessageToAll(0x01B59AFF, string);
				SendClientMessageToAll(0x01B59AFF, string2);
			}
			if(strlen(text) < 75){
				format(string, sizeof(string), "Invitado en LSRTV dice: %s", text);
				SendClientMessageToAll(0x01B59AFF, string);
			}
	    }
	}

	if(Hablando[playerid] == NOEXISTE)
	{
		if(strlen(text) > 75){
			new string2[128];
			format(string2,256,"... %s",text[75]);
			strdel(text,75,strlen(text));
			format(string, sizeof(string), "%s dice: %s", NombreJugador(playerid), text);
			ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			ProxDetector(15.0, playerid, string2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		if(strlen(text) < 75){
			format(string, sizeof(string), "%s dice: %s", NombreJugador(playerid), text);
			ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
	}
	else if(Hablando[playerid] == 0)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][0] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[JAP] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][0] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[JAP] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[JAP] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
			            format(string, sizeof(string), "[JAP] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	else if(Hablando[playerid] == 1)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][1] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[ITA] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][1] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[ITA] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[ITA] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
						format(string, sizeof(string), "[ITA] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	else if(Hablando[playerid] == 2)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][2] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[RUS] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][2] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[RUS] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[RUS] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
			            format(string, sizeof(string), "[RUS] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	else if(Hablando[playerid] == 3)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][3] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[ALE] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][3] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[ALE] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[ALE] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
			            format(string, sizeof(string), "[ALE] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	else if(Hablando[playerid] == 4)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][4] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[FRA] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][4] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[FRA] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[FRA] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
			            format(string, sizeof(string), "[FRA] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	else if(Hablando[playerid] == 5)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerToPoint(i, 15.0, Pos[0], Pos[1], Pos[2]))
			    {
			        if(JugadorInfo[i][jIdiomas][5] == 1)
			        {
			            new texto[64];
						format(texto, sizeof(texto), "[CHINO] %s dice: %s", NombreJugador(playerid), text);
    			 		SendClientMessage(i, COLOR_FADE2, texto);
			        }
			        else if(JugadorInfo[i][jIdiomas][5] == 2)
			        {
			            if(strlen(text) > 75){
							new string2[128];
							format(string2,256,"... %s",text[75]);
							strdel(text,75,strlen(text));
							format(string, sizeof(string), "[CHINO] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
							SendClientMessage(i, COLOR_FADE2, string2);
						}
						if(strlen(text) < 75){
							format(string, sizeof(string), "[CHINO] %s dice: %s", NombreJugador(playerid), text);
							SendClientMessage(i, COLOR_FADE2, string);
						}
			        }
			        else
			        {
			            format(string, sizeof(string), "[CHINO] %s está hablando en un idioma que desconoces.", NombreJugador(playerid));
			            SendClientMessage(i, COLOR_FADE2, string);
			        }
				}
			}
		}
	}
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(ispassenger == 0 && !BICI(vehicleid) && AutoInfo[vehicleid][aMotor]==0)
	{
		SendClientMessage(playerid, BLANCO, "Usa {00FFFF}/motor{FFFFFF} o presiona {00FFFF}CTRL Izquierdo{FFFFFF} para prender el motor");
        if(AutoInfo[vehicleid][aFaccionID] == 114)
		{
		    if(JugadorInfo[playerid][jTrabajo] != 14)
			{
		    	SendClientMessage(playerid, ROJO_OSCURO, "No eres camionero.");
		    	RemovePlayerFromVehicle(playerid);
		    }
		    else
		    {
			SendClientMessage(playerid, BLANCO, "Usa {00FFFF}/cargar {FFFFFF}para cargar el camión.");
			GameTextForPlayer(playerid, "~w~Usa ~g~/cargar.",5000, 3);
			return 1;
			}
		}
		return 1;
	}
	/*if(!ispassenger(playerid)){
		SendClientMessage(playerid, BLANCO, "Usa {00FFFF}/motor{FFFFFF} o presiona {00FFFF}CTRL Izquierdo{FFFFFF} para prender el motor");
		return 1;
	}*/
	return 1;
}

BICI(carid)
{
	if(GetVehicleModel(carid) == 481 ||GetVehicleModel(carid) == 509||GetVehicleModel(carid) == 510)
	{
	return 1;
	}
return 0;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    KillTimer(TimerVelocimetro[playerid]);
    PlayerTextDrawHide(playerid, Velocimetro0[playerid]);
	PlayerTextDrawHide(playerid, Velocimetro1[playerid]);
	if(TieneCinturon[playerid] == 1)
	{
	    new string[128];
	    format(string, sizeof(string), "* %s toma su cinturón con la diestra y se lo quita.", NombreJugador(playerid));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        TieneCinturon[playerid] = 0;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new coche = GetPlayerVehicleID(playerid);
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    TimerVelocimetro[playerid] = SetTimerEx("AtualizarVelocimetro", 100, true, "n", playerid);
	    if(AutoInfo[coche][aFaccionID] == 997 && VehAlquilado[coche] == 0) // Vehículo de renta
	    {
	        ShowPlayerDialog(playerid, RentarVeh, DIALOG_STYLE_MSGBOX, "{00FFFF}Alquiler de vehículos", "{FFFFFF}Este vehículo está disponible para alquilar.\n\nEl precio del vehículo es de {00FFFF}75{FFFFFF} dólares por hora, además, también\nha de bonificar {00FFFF}200{FFFFFF} dólares en concepto de fianza que les\nserán devueltos si entrega el vehículo en perfecto estado.", "Alquilar", "Cancelar");
	    }
	    if(AutoInfo[coche][aLunasTintadas] == 1)
		{
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				ShowPlayerNameTagForPlayer(p, playerid, 0);
			}
		}
		if(ExamenAutoescuela[playerid] == 2)
	    {
	        SendClientMessage(playerid, BLANCO, "Examinador dice: Bien, cuando usted quiera podemos comenzar, deberá realizar la siguiente ruta...");
	        SetPlayerCheckpoint(playerid, 2063.4246,-1914.8269,13.5582, 5.0);
	    }
	    if(GetPlayerVehicleID(playerid) != p_CarWarpVehicleID[playerid] && JugadorInfo[playerid][jAdmin] == 0)
        {
            if(p_CarWarpTime[playerid] > gettime())
            {
                //SendClientMessage(playerid, BLANCO, "[ANTI-CHEAT]{FFFFFF} fue kickeado por Car Warp.");
                //BanEx( playerid, "Car Warp" );
                return 1;
            }
            p_CarWarpTime[playerid] = gettime() + 1;
            p_CarWarpVehicleID[playerid] = GetPlayerVehicleID(playerid);
        }
	}
	else if(newstate == PLAYER_STATE_ONFOOT)
	{
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			ShowPlayerNameTagForPlayer(p, playerid, 1);
		}
	}
	return 1;
} //

public OnPlayerEnterCheckpoint(playerid)
{
	new coche = GetPlayerVehicleID(playerid);
    DisablePlayerCheckpoint(playerid);

	//Entregar veh alquilado
	if(PlayerToPoint(playerid, 10, 1556.8524,-2300.9736,13.5554) || PlayerToPoint(playerid, 10, 1836.6875,-1853.2415,13.3897)) {
    if(VehRentado[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún coche alquilado.");
    if(VehRentado[playerid] != AutoInfo[coche][aID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Este no es el coche que alquilaste.");
   	new Float: VidaVeh;
		GetVehicleHealth(coche, VidaVeh);
		if(VidaVeh > 950)
		{
			SendClientMessage(playerid, BLANCO, "Dependiente: Gracias por entregarnos el vehículo nuevamente en buen estado, ahí tienes tu fianza.");
			JugadorInfo[playerid][jDinero] += 200;
			for(new i = 0; i < MAX_VEHICLES; i++)
		    {
		        if(AutoInfo[i][aID] == VehRentado[playerid])
		        {
		            SetVehicleToRespawn(i);
		            AutoInfo[i][aCerrado] = 0;
		            VehAlquilado[i] = 0;
		        }
		    }
		    VehRentado[playerid] = NOEXISTE;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, BLANCO, "Dependiente: Gracias por entregarnos el vehículo pero este estado no es digno de ello, por lo que no te devolveremos la fianza.");
			for(new i = 0; i < MAX_VEHICLES; i++)
		    {
		        if(AutoInfo[i][aID] == VehRentado[playerid])
		        {
		            SetVehicleToRespawn(i);
		            AutoInfo[i][aCerrado] = 0;
		            VehAlquilado[i] = 0;
		        }
		    }
		    VehRentado[playerid] = NOEXISTE;
		    return 1;
		}
	}

	/*Cargar camioner */
 	if(AutoInfo[coche][aFaccionID] == 114 && IsPlayerInRangeOfPoint(playerid,10.0,849.4312,-1291.9653,13.6856))
    {
        TogglePlayerControllable(playerid, false);
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 114) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un camión.");
        if(JugadorInfo[playerid][jHabilidad][5] > 30){
        ShowPlayerDialog(playerid, Cargar_Camion, DIALOG_STYLE_LIST, "{00FFFF}Selecciona la mercancía", "{00FFFF}1) {FFFFFF}Artículos Metalúrgicos ($900)\n{00FFFF}2) {FFFFFF}Ropa ($750)\n{00FFFF}3) {FFFFFF}Pollo($650)\n{00FFFF}4) {FFFFFF}Periódico ($1100)", "Siguiente", "Cancelar");
		return 1;
		}
		else
		{
		ShowPlayerDialog(playerid, Cargar_Camion, DIALOG_STYLE_LIST, "{00FFFF}Selecciona la mercancía", "{00FFFF}1) {FFFFFF}Artículos Metalúrgicos ($650)\n{00FFFF}2) {FFFFFF}Ropa ($400)\n{00FFFF}3) {FFFFFF}Pollo($320)\n{00FFFF}4) {FFFFFF}Periódico ($750)", "Siguiente", "Cancelar");
		return 1;
		}
    }
    //Recorridos
    if(AutoInfo[coche][aFaccionID] == 114 && !IsPlayerInRangeOfPoint(playerid,10.0,849.4312,-1291.9653,13.6856) && Camionero[playerid] == 1)
    {
        TogglePlayerControllable(playerid, false);
 		GameTextForPlayer(playerid, "~w~~d~ ~g~Descargando camion ~w~~d~",5000, 3);
		SetTimerEx("Descargar", 5000, false, "i", playerid);
		return 1;
	}
	if(AutoInfo[coche][aFaccionID] == 114 && Camionero[playerid] == 2)
    {
        SendClientMessage(playerid, BLANCO, "Bien hecho, has {33CCFF}completado {FFFFFF}la entrega.");
        SendClientMessage(playerid, BLANCO, "Obtienes {33CCFF}un punto {FFFFFF}de habilidad.");
        Camionero[playerid] = 0;
        JugadorInfo[playerid][jHabilidad][5] ++;
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    if(CargaCamionero == 1){
	        if(JugadorInfo[playerid][jHabilidad][5] > 30)
	        {
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}900{FFFFFF} por completar esta ruta.");
			 	JugadorInfo[playerid][jDinero] += 900;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}650{FFFFFF} por completar esta ruta.");
			 	JugadorInfo[playerid][jDinero] += 650;
				return 1;
			}
		}
	    else if(CargaCamionero == 2){
	        if(JugadorInfo[playerid][jHabilidad][5] > 30)
	        {
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}750{FFFFFF} por completar esta ruta.");
			 	JugadorInfo[playerid][jDinero] += 750;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}400{FFFFFF} por completar esta ruta.");
				JugadorInfo[playerid][jDinero] += 400;
				return 1;
			}
		}
		else if(CargaCamionero == 3){
		    if(JugadorInfo[playerid][jHabilidad][5] > 30)
	        {
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}650{FFFFFF} por completar esta ruta.");
			 	JugadorInfo[playerid][jDinero] += 650;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}320{FFFFFF} por completar esta ruta.");
				JugadorInfo[playerid][jDinero] += 320;
				return 1;
			}
		}
		else if(CargaCamionero == 4){
		    if(JugadorInfo[playerid][jHabilidad][5] > 30)
	        {
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}1100{FFFFFF} por completar esta ruta.");
			 	JugadorInfo[playerid][jDinero] += 1100;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BLANCO, "Ganaste ${33CCFF}750{FFFFFF} por completar esta ruta.");
				JugadorInfo[playerid][jDinero] += 750;
				return 1;
			}
		}
		return 1;
	}
    /* Productos camioneros */
    if(Transportando[playerid] == 1)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 113) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo de transporte.");
		new neg = random(30), string[128];
		SetPlayerCheckpoint(playerid, NegocioInfo[neg][nEX], NegocioInfo[neg][nEY], NegocioInfo[neg][nEZ], 5);
		format(string, sizeof(string), "Encargado: Bien %s, lleve estos productos al negocio %s.", NombreJugador(playerid), NegocioInfo[neg][nNombre]);
		ProxDetector(10, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		Transportando[playerid] = 2;
		return 1;
    }
    /* RUTA NORTE BARRENDERO */
    if(Barriendo[playerid] == 40)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 41;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1937.9546,-1611.2130,13.0872, 5);
    }
    if(Barriendo[playerid] == 41)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 42;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1854.6179,-1482.7820,13.0904, 5);
    }
    if(Barriendo[playerid] == 42)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 43;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1870.4540,-1155.0057,23.4073, 5);
    }
    if(Barriendo[playerid] == 43)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 44;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2149.2026,-1004.9147,62.0577, 5);
    }
    if(Barriendo[playerid] == 44)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 45;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2006.7841,-1024.5677,35.0308, 5);
    }
    if(Barriendo[playerid] == 45)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 46;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1312.8788,-920.0820,37.9395, 5);
    }
    if(Barriendo[playerid] == 46)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 47;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1238.7760,-1035.3892,31.4489, 5);
    }
    if(Barriendo[playerid] == 47)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 48;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 863.6926,-1137.2462,23.3601, 5);
    }
    if(Barriendo[playerid] == 48)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 49;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 532.0854,-1244.1589,16.1537, 5);
    }
    else if(Barriendo[playerid] == 49)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 50;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, AutoInfo[GetPlayerVehicleID(playerid)][ax], AutoInfo[GetPlayerVehicleID(playerid)][ay], AutoInfo[GetPlayerVehicleID(playerid)][az], 5);
    }
    else if(Barriendo[playerid] == 50)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        new Float:vidaveh;
        Barriendo[playerid] = 0;
	    GetVehicleHealth(coche, vidaveh);
	    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][3] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de respeto por entregar la barredora en mal estado."); }
	    if(JugadorInfo[playerid][jHabilidad][3] <= 50)
	    {
	        JugadorInfo[playerid][jDinero] += 150;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 150 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
	    {
	        JugadorInfo[playerid][jDinero] += 175;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 175 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
	    {
	        JugadorInfo[playerid][jDinero] += 200;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 200 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 200)
	    {
	        JugadorInfo[playerid][jDinero] += 225;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 225 dólares por hacer esta ruta.");
	    }
		RemovePlayerFromVehicle(playerid);
		SetVehicleToRespawn(coche);
		return 1;
    }
    /* RUTA OESTE BARRENDERO */
    if(Barriendo[playerid] == 20)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 21;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1859.9464,-1928.9543,13.0901, 5);
    }
    else if(Barriendo[playerid] == 21)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 22;
		SetPlayerCheckpoint(playerid, 1728.0635,-1811.5092,13.0672, 5);
    }
    else if(Barriendo[playerid] == 22)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 23;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1509.8411,-1868.9514,13.0876, 5);
    }
    else if(Barriendo[playerid] == 23)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 24;
		SetPlayerCheckpoint(playerid, 1392.3726,-1748.1700,13.0866, 5);
    }
    else if(Barriendo[playerid] == 24)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 25;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 1457.5400,-1454.9211,13.0703, 5);
    }
    else if(Barriendo[playerid] == 25)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 26;
		SetPlayerCheckpoint(playerid, 1209.3961,-1347.4944,13.1054, 5);
    }
    else if(Barriendo[playerid] == 26)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 27;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 980.9897,-1316.7253,13.0806, 5);
    }
    else if(Barriendo[playerid] == 27)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 28;
		SetPlayerCheckpoint(playerid, 624.3617,-1376.1085,13.2157, 5);
    }
    else if(Barriendo[playerid] == 28)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 29;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 481.6747,-1515.9141,19.9558, 5);
    }
    else if(Barriendo[playerid] == 29)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 30;
		SetPlayerCheckpoint(playerid, 481.6747,-1515.9141,19.9558, 5);
    }
    else if(Barriendo[playerid] == 30)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 31;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, AutoInfo[GetPlayerVehicleID(playerid)][ax], AutoInfo[GetPlayerVehicleID(playerid)][ay], AutoInfo[GetPlayerVehicleID(playerid)][az], 5);
    }
    else if(Barriendo[playerid] == 31)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        new Float:vidaveh;
        Barriendo[playerid] = 0;
	    GetVehicleHealth(coche, vidaveh);
	    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][3] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de respeto por entregar la barredora en mal estado."); }
	    if(JugadorInfo[playerid][jHabilidad][3] <= 50)
	    {
	        JugadorInfo[playerid][jDinero] += 150;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 150 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
	    {
	        JugadorInfo[playerid][jDinero] += 175;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 175 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
	    {
	        JugadorInfo[playerid][jDinero] += 200;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 200 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 200)
	    {
	        JugadorInfo[playerid][jDinero] += 225;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 225 dólares por hacer esta ruta.");
	    }
		RemovePlayerFromVehicle(playerid);
		SetVehicleToRespawn(coche);
		return 1;
    }
	/* RUTA ESTE BARRENDERO */
    if(Barriendo[playerid] == 1)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 2;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2652.5684,-2174.0874,10.6344, 5);
    }
    else if(Barriendo[playerid] == 2)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 3;
		SetPlayerCheckpoint(playerid, 2717.2576,-1950.1528,13.0183, 5);
    }
    else if(Barriendo[playerid] == 3)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 4;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2427.1074,-1929.0732,13.0773, 5);
    }
    else if(Barriendo[playerid] == 4)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 5;
		SetPlayerCheckpoint(playerid, 2417.0164,-1746.3010,13.0875, 5);
    }
    else if(Barriendo[playerid] == 5)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 6;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2475.8188,-1507.8470,23.5326, 5);
    }
    else if(Barriendo[playerid] == 6)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 7;
		SetPlayerCheckpoint(playerid, 2574.4658,-1271.1337,45.6934, 5);
    }
    else if(Barriendo[playerid] == 7)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 8;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2417.1912,-1253.0267,23.5262, 5);
    }
    else if(Barriendo[playerid] == 8)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 9;
		SetPlayerCheckpoint(playerid, 2316.7041,-1297.8130,23.7569, 5);
    }
    else if(Barriendo[playerid] == 9)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 10;
        JugadorInfo[playerid][jHabilidad][3] ++;
		SetPlayerCheckpoint(playerid, 2172.3572,-1182.7531,23.9639, 5);
    }
    else if(Barriendo[playerid] == 10)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        Barriendo[playerid] = 11;
		SetPlayerCheckpoint(playerid, AutoInfo[GetPlayerVehicleID(playerid)][ax], AutoInfo[GetPlayerVehicleID(playerid)][ay], AutoInfo[GetPlayerVehicleID(playerid)][az], 5);
    }
    else if(Barriendo[playerid] == 11)
    {
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
        new Float:vidaveh;
        Barriendo[playerid] = 0;
	    GetVehicleHealth(coche, vidaveh);
	    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][3] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de respeto por entregar la barredora en mal estado."); }
	    if(JugadorInfo[playerid][jHabilidad][3] <= 50)
	    {
	        JugadorInfo[playerid][jDinero] += 150;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 150 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
	    {
	        JugadorInfo[playerid][jDinero] += 175;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 175 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
	    {
	        JugadorInfo[playerid][jDinero] += 200;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 200 dólares por hacer esta ruta.");
	    }
	    if(JugadorInfo[playerid][jHabilidad][3] > 200)
	    {
	        JugadorInfo[playerid][jDinero] += 225;
	        SendClientMessage(playerid, CELESTE, "* Has ganado 225 dólares por hacer esta ruta.");
	    }
		RemovePlayerFromVehicle(playerid);
		SetVehicleToRespawn(coche);
		return 1;
    }
    if(EnInforme[playerid] == 16)
	{
		SendClientMessage(playerid, VERDE, "* Has llegado a tiempo al lugar de la emergencia.");
		if(JugadorInfo[playerid][jMiembro] == 3)
		{
		    for(new i; i < MAX_INFORMESFD; i++)
			{
				if(InformesFD[i][ifdMedico] == playerid)
				{
					KillTimer(InformesFD[i][ifdTimer]);
					InformesFD[i][ifdEstado] = 0;
					InformesFD[i][ifdPaciente] = -1;
					InformesFD[i][ifdMedico] = -1;
					break;
				}
			}
		}
		return 1;
	}
	if(ExamenAutoescuela[playerid] == 1 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        ShowPlayerDialog(playerid, TeoricoCoche1, DIALOG_STYLE_LIST, "{00FFFF}¿En que tipo de vías es obligatorio el cinturón de seguridad?", "{FFFFFF}A) Unicamente en vías fuera de poblado.\nB) Unicamente dentro del poblado.\nC) En ambos tipos de vías", "Siguiente", "Cancelar");
    }
    else if(ExamenAutoescuela[playerid] == 2 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 1984.3956,-1930.2896,13.0875, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 3 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 1959.1824,-1946.4232,13.2677, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 4 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 1959.3912,-2090.3032,13.0957, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 5 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 1998.7150,-2112.3616,13.0623, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 6 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 2177.6602,-2147.8552,13.0748, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 7 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 2271.3098,-2095.9375,13.2893, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 8 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 2216.4373,-1989.6461,13.0375, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 9 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 2218.4392,-1764.6302,13.0633, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    if(ExamenAutoescuela[playerid] == 10 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 2229.3442,-1663.5137,14.9306, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 11 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 2118.1699,-1614.1877,13.0932, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 12 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1999.5167,-1627.3690,13.0875, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 13 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1999.1765,-1741.9591,13.0869, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 14 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1957.6597,-1749.8917,13.0875, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 15 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1839.8296,-1749.8917,13.0883, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 16 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1819.1552,-1771.9780,13.0875, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 17 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //if(TieneCinturon[playerid] == 0){ EstadoPractico[playerid] = 1; }
        SetPlayerCheckpoint(playerid, 1818.9238,-1925.3191,13.0878, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 18 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 1994.5044,-1934.5529,13.0719, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 19 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        SetPlayerCheckpoint(playerid, 2067.9888,-1917.0067,13.5581, 5.0);
        ExamenAutoescuela[playerid] ++;
    }
    else if(ExamenAutoescuela[playerid] == 20 && TipoLicenciaAutoescuela[playerid] == 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        if(AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] != 888) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
        //SetPlayerCheckpoint(playerid, AutoInfo[GetPlayerVehicleID(playerid)][ax], AutoInfo[GetPlayerVehicleID(playerid)][ay], AutoInfo[GetPlayerVehicleID(playerid)][az], 5.0);
        JugadorInfo[playerid][jLicencias][0] = 1;
        SetVehicleToRespawn(coche);
        SendClientMessage(playerid, CELESTE, "Felicidades, has aprobado el exámen de conducción");
    }
	if(TraficandoArmas[playerid] >= 2 && TraficandoArmas[playerid] <= 7)
    {
        KillTimer(TimerTraficandoArmas[playerid]);
        SendClientMessage(playerid, CELESTE, "* Usa '/coger pedidoarmas' para coger tus armas. Recuerda tener ambas manos vacias.");
        TraficandoArmasRecogio[playerid] = 1;
    }
    if(TraficandoArmas[playerid] == 1 && JugadorInfo[playerid][jTrabajo] == 4)
    {
		new string[128];
		format(string, sizeof(string), "* %s coge una nota del suelo y la lee.", NombreJugador(playerid));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        KillTimer(TimerTraficandoArmas[playerid]);
        LimpiarConsola(playerid, 10);
		SendClientMessage(playerid, CELESTE, "* Escoja el paquete que desea comprar.");
		ShowPlayerDialog(playerid, TraficarArmasD, DIALOG_STYLE_LIST,
		"{FFFFFF}Escoja el pack de armas que desee comprar", "{00FFFF}Caja de 5 Glock + 5 cargadores de Glock{FFFFFF}\t\t\t$2000\n{00FFFF}Caja de 5 Eagle + 5 cargadores de Eagle{FFFFFF}\t\t\t$4000\n{00FFFF}Caja de 5 AK-47 + 5 cargadores de AK-47{FFFFFF}\t\t\t$11000\n{00FFFF}Caja de 5 Uzi + 5 cargadores de uzi{FFFFFF}\t\t\t\t$9000\n{00FFFF}Caja de 5 escopetas + 5 cargadores de escopeta{FFFFFF}\t\t$8000\n{00FFFF}Caja de 2 sniper + 4 cargadores de sniper{FFFFFF}\t\t\t$15000", "Escojer", "Cancelar");
    }
	/* Ruta central autobuses */
	if(RutaAutobus[playerid] == 1){
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1535.7529, -1672.6752, 13.5159, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Alhambra, Idlewood.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Comisaría, Pershing Square.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 2){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1582.4407, -1295.0052, 17.4731, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Comisaría, Pershing Square.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Park Avenue, Downtown Los Santos.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 3){
		TogglePlayerControllable(playerid, false);
	  	SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1339.1768, -1336.0435, 13.5200, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Park Avenue, Downtown Los Santos.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Saint Lawrence Blvd. Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 4){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1102.4253, -1391.9415, 13.6311, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Saint Lawrence Blvd. Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Centro Comercial, Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 5){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1066.0614, -1252.4962, 15.0013, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Centro Comercial, Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Ave. Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 6){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1208.4437, -949.1952, 42.8350, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beverly Ave. Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}W. Broadway, Temple.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 7){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1214.3933, -1035.5621, 31.8625, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}W. Broadway, Temple.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Downtown Blvd. Temple");
		return 1;
	}
	else if(RutaAutobus[playerid] == 8){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1050.3295, -1286.7094, 13.6125, 3.0); //
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Downtown Blvd. Temple{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Avenue, Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 9){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1147.0253, -1409.4043, 13.6620, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beverly Avenue, Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Centro comercial, Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 10){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1361.1440, -1321.8279, 13.5240, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Centro comercial, Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Ammu-Nation, Market.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 11){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1635.1512, -1164.2749, 24.0288, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Ammu-Nation, Market.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Mullholland Intersection, Downtown Los Santos.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 12){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1426.0323, -1673.7611, 13.5162, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Mullholland Intersection, Downtown Los Santos.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Central Avenue, Commerce.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 13){
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, 1753.0880, -1666.2539, 13.5157, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Central Avenue, Commerce.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}White Street, Commerce.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 14){
	    new vehicleid = GetPlayerVehicleID(playerid);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, AutoInfo[vehicleid][ax], AutoInfo[vehicleid][ay], AutoInfo[vehicleid][az], 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}White Street, Commerce.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Estación de autobuses.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 15){
	    new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vidaveh;
		new paga = 0, string[128];
    	GetVehicleHealth(vehicleid, vidaveh);
    	SetVehicleToRespawn(vehicleid);
    	if(vidaveh >= 800)
		{
			paga = 100;
			format(string, sizeof(string), "* Has ganado %d dólares por la ruta realizada, buen trabajo.", paga);
		}
    	else
		{
			paga = 70;
			format(string, sizeof(string), "* Has ganado %d dólares, pero se te descontaron 30 dólares por entregar el autobus en mal estado.", (paga+30));
    	}
		JugadorInfo[playerid][jDinero] += paga;
    	SendClientMessage(playerid, CELESTE, string);
	    RutaAutobus[playerid] = 0;
	    JugadorInfo[playerid][jUltimoTrabajo] = 5;
	    return 1;
	}
	/* Ruta oeste autobuses */
 	else if(RutaAutobus[playerid] == 17){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1249.0647, -1848.6881, 13.5137, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Wells Street, Commerce.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Metropolitan Ave, Verdant Bluffs.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 18){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1040.9070, -1621.6569, 13.5161, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Metropolitan Ave, Verdant Bluffs.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Ave, Verona Beach.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 19){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 806.6314, -1587.2677, 13.5142, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beverly Ave, Verona Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Olympic Blvd, Marina.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 20){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 764.6159, -1316.1461, 13.5202, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Olympic Blvd, Marina.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Rodeo Drive con LS RTV, Vinewood.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 21){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 623.8796, -1483.1903, 14.6579, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Rodeo Drive - LSrTV, Vinewood.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Western Ave, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 22){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 284.1842, -1576.7634, 33.0384, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Western Ave, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Olympic Blvd, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 23){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 440.1047, -1315.1804, 15.1155, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Olympic Blvd, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}W. Broadway, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 24){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 278.8874, -1738.3197, 4.1414, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}W. Broadway, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beach Street, Santa María Beach.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 25){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1662.5947, -2322.8416, -2.7123, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beach Street, Santa María Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Truman Street, Los Santos International.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 26){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 406.3696, -1357.4292, 14.8604, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Truman Street, Los Santos International.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}W. Broadway, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 27){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 254.7024, -1532.0077, 32.3931, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}W. Broadway, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Rodeo Drive, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 28){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 641.0058, -1535.7374, 15.2215, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Rodeo Drive, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Western Ave, Rodeo.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 29){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 753.5839, -1409.2798, 13.5061, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Western Ave, Rodeo.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Pasadena Blvd, Vinewood.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 30){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 771.2225, -1555.4368, 13.5150, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Pasadena Blvd, Vinewood.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Giggles Street, Marina.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 31){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1033.8711, -1653.4810, 13.5161, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Giggles Street, Marina.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Ave, Verona Beach.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 32){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1218.0897, -1855.9191, 13.5170, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beverly Ave, Verona Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Metropolitan Ave, Verdant Bluffs.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 33){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1484.1586, -1875.9089, 13.5131, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Metropolitan Ave, Verdant Bluffs.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Metropolitan Ave, Verdant Bluffs.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 31){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1033.8711, -1653.4810, 13.5161, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Giggles Street, Marina.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Ave, Verona Beach.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 31){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1033.8711, -1653.4810, 13.5161, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Giggles Street, Marina.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Beverly Ave, Verona Beach.");
  		return 1;
	}
	else if(RutaAutobus[playerid] == 32){
	    new vehicleid = GetPlayerVehicleID(playerid);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    RutaAutobus[playerid] ++;
	    SetPlayerCheckpoint(playerid, AutoInfo[vehicleid][ax], AutoInfo[vehicleid][ay], AutoInfo[vehicleid][az], 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Beverly Ave, Verona Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Estación de autobuses.");
		return 1;
	}
	else if(RutaAutobus[playerid] == 33){
	    new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vidaveh;
		new paga = 0, string[128];
    	GetVehicleHealth(vehicleid, vidaveh);
    	SetVehicleToRespawn(vehicleid);
    	if(vidaveh >= 800)
		{
			paga = 120;
			format(string, sizeof(string), "* Has ganado %d dólares por la ruta realizada, buen trabajo.", paga);
		}
    	else
		{
			paga = 80;
			format(string, sizeof(string), "* Has ganado %d dólares, pero se te descontaron 30 dólares por entregar el autobus en mal estado.", (paga+30));
    	}
		JugadorInfo[playerid][jDinero] += paga;
    	SendClientMessage(playerid, CELESTE, string);
	    RutaAutobus[playerid] = 0;
	    JugadorInfo[playerid][jUltimoTrabajo] = 5;
	    return 1;
	}
	/* Ruta este autobuses (TIENE UNA LLAVE DE MÁS) */
 	if(RutaAutobus[playerid] == 36){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2263.5999, -1737.0251, 12.9464, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Washington Street, Idlewood.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Liverpool Road, Ganton.");
  		return 1;
	}
	if(RutaAutobus[playerid] == 37){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2479.9272, -1737.1036, 12.9592, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Liverpool Road, Ganton.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Ganton.");
  		return 1;
	}
	if(RutaAutobus[playerid] == 38){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2717.7058, -1662.1132, 12.6422, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Ganton.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Street Anthony, East Beach.");
  		return 1;
	}
	if(RutaAutobus[playerid] == 39){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2879.6848, -1464.2443, 10.3589, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Street Anthony, East Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Santa Monica Blvd, East Beach.");
  		return 1;
   }
	if(RutaAutobus[playerid] == 40){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2842.7322, -1073.1093, 22.9032, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Santa Monica Blvd, East Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Las Colinas, East Beach.");
  		return 1;
 	}
	if(RutaAutobus[playerid] == 41){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2674.9302, -1043.2280, 68.9505, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Las Colinas, East Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}San Pedro Avenue, Las Colinas.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 42){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2638.2363, -1471.1603, 29.7888, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}San Pedro Avenue, Las Colinas.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Forum Street, East Beach.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 43){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2764.8428, -1965.4473, 12.8779, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Forum Street, East Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Sand Street, Playa de Seville.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 44){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2467.2998, -1927.6213, 12.8596, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Sand Street, Playa de Seville.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Saint Francis Street, Willowfield.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 45){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2456.0005, -1361.7233, 23.4098, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Saint Francis Street, Willowfield.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Saint Catherine Street, East Los Santos.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 46){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2456.0005, -1361.7233, 23.4098, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Saint Catherine Street, East Los Santos.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Coutt & Schutz, Glen Park.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 47){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1964.8721, -1189.6257, 25.3511, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Coutt & Schutz, Glen Park.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Green Street, Glen Park.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 48){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2006.8429, -1456.3796, 12.9617, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Green Street, Glen Park.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Pasadena Blvd, Country Central.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 49){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1991.6809, -1373.2465, 23.2809, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Pasadena Blvd, Country Central.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Health Street, Country Central.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 50){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 1871.4413, -1103.4330, 23.2292, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Health Street, Country Central.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}East Vinewood, Glen Park.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 51){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2366.3860, -1362.4596, 23.4083, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}East Vinewood, Glen Park.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Jefferson Motel, Glen Park.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 52){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2450.8118, -1936.9686, 12.8560, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Jefferson Motel, Glen Park.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Saint Francis Street, Willowfield.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 53){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2774.1560, -1932.8198, 12.8536, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Saint Francis Street, Willowfield.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Sand Street, Playa de Seville.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 54){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2647.1533, -1427.0822, 29.8521, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Sand Street, Playa de Seville.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}San Pedro Avenue, Las Colinas.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 55){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2670.3296, -1052.4137, 68.9879, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}San Pedro Avenue, Las Colinas.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Las Colinas.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 56){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2833.2268, -1110.3263, 23.8942, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Las Colinas.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Santa Mónica Bldv, East Beach.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 57){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2865.0669, -1504.9801, 10.4098, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Santa Mónica Bldv, East Beach.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Street Anthony, East Los Santos.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 58){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2681.3386, -1652.7922, 10.7067, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Street Anthony, East Los Santos.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Ganton.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 59){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2471.3975, -1727.6982, 12.9482, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Ganton.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Liverpool Road, Ganton.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 60){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2252.3066, -1727.5482, 12.9472, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Liverpool Road, Ganton.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Washington Street, Idlewood.");
  		return 1;
  	}
	if(RutaAutobus[playerid] == 61){
     	TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	 	RutaAutobus[playerid] ++;
     	SetPlayerCheckpoint(playerid, 2471.3975, -1727.6982, 12.9482, 3.0);
        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Washington Street, Idlewood.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}...");
  		return 1;
  	}
  	/* Ruta basurero */
  	if(Basurero[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 2;
			    SetPlayerCheckpoint(playerid, 2242.1199,-1756.3590,13.5455, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 3)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 4;
			    SetPlayerCheckpoint(playerid, 2438.9653,-1470.3248,24.0000, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 5)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 6;
			    SetPlayerCheckpoint(playerid, 2458.2861,-1279.5405,24.0000, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 7)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 8;
			    SetPlayerCheckpoint(playerid, 2110.9761,-1099.0762,25.2322, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 9)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 10;
			    SetPlayerCheckpoint(playerid, 1839.2401,-1311.2891,13.5478, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 11)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 12;
			    SetPlayerCheckpoint(playerid, 1816.9336,-1558.0879,13.5212, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 13)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 14;
			    SetPlayerCheckpoint(playerid, 1813.7947,-1904.1361,13.5707, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 15)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    Basurero[playerid] = 16;
			    SetPlayerCheckpoint(playerid, AutoInfo[coche][ax], AutoInfo[coche][ay], AutoInfo[coche][az], 5);
			    SendClientMessage(playerid, CELESTE, "* Buen trabajo, estacione su camión en el aparcamiento correcto.");
			}
		}
	}
	else if(Basurero[playerid] == 16)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    Basurero[playerid] = 0;
			    new Float:vidaveh;
			    GetVehicleHealth(coche, vidaveh);
			    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][2] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de respeto por entregar el camión en mal estado."); }
			    if(JugadorInfo[playerid][jHabilidad][2] <= 50)
			    {
			        JugadorInfo[playerid][jDinero] += 350;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 350 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
			    {
			        JugadorInfo[playerid][jDinero] += 400;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 400 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
			    {
			        JugadorInfo[playerid][jDinero] += 450;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 450 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 200)
			    {
			        JugadorInfo[playerid][jDinero] += 500;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 500 dólares por hacer esta ruta.");
			    }
				RemovePlayerFromVehicle(playerid);
				SetVehicleToRespawn(coche);
			}
		}
	}
	/* Ruta basurero centro */
	else if(Basurero[playerid] == 20)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 21;
			    SetPlayerCheckpoint(playerid, 1461.5865,-1487.7188,13.5469, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 22)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 23;
			    SetPlayerCheckpoint(playerid, 1383.1660,-1132.6079,23.8281, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 24)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 25;
			    SetPlayerCheckpoint(playerid, 1293.0375,-1030.1757,31.2339, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 26)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 27;
			    SetPlayerCheckpoint(playerid, 1033.3312,-1031.2925,31.9929, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 28)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 29;
			    SetPlayerCheckpoint(playerid, 934.3425,-1240.8853,16.4387, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 30)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 31;
			    SetPlayerCheckpoint(playerid, 1023.3083,-1334.8911,13.5432, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 32)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 33;
			    SetPlayerCheckpoint(playerid, 1160.5409,-1414.1307,13.5759, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 34)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    Basurero[playerid] = 0;
			    new Float:vidaveh;
			    GetVehicleHealth(coche, vidaveh);
			    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][2] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de habilidad por entregar el camión en mal estado."); }
			    if(JugadorInfo[playerid][jHabilidad][2] <= 50)
			    {
			        JugadorInfo[playerid][jDinero] += 350;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 350 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
			    {
			        JugadorInfo[playerid][jDinero] += 400;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 400 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
			    {
			        JugadorInfo[playerid][jDinero] += 450;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 450 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 200)
			    {
			        JugadorInfo[playerid][jDinero] += 500;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 500 dólares por hacer esta ruta.");
			    }
				RemovePlayerFromVehicle(playerid);
				SetVehicleToRespawn(coche);
			}
		}
	}
	/* Ruta basurero oeste */
	else if(Basurero[playerid] == 40)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 41;
			    SetPlayerCheckpoint(playerid, 1647.8319,-1869.5106,12.9535, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 42)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 43;
			    SetPlayerCheckpoint(playerid, 1142.0361,-1849.9016,12.9523, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 44)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 45;
			    SetPlayerCheckpoint(playerid, 666.1183,-1736.2782,13.0786, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 46)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 47;
			    SetPlayerCheckpoint(playerid, 735.7942,-1083.3600,21.2683, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 48)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 49;
			    SetPlayerCheckpoint(playerid, 790.1992,-1481.5485,12.9541, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 50)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 51;
			    SetPlayerCheckpoint(playerid, 982.2037,-1574.6221,12.9465, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 52)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    JugadorInfo[playerid][jHabilidad][2] ++;
			    Basurero[playerid] = 53;
			    SetPlayerCheckpoint(playerid, 1352.5239,-1582.1696,12.9424, 5);
			    SendClientMessage(playerid, CELESTE, "* Vé al contenedor de basura y usa '/explorar' o '/cogerbasura'.");
			}
		}
	}
	else if(Basurero[playerid] == 54)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(AutoInfo[coche][aFaccionID] == 110)
			{
			    Basurero[playerid] = 0;
			    new Float:vidaveh;
			    GetVehicleHealth(coche, vidaveh);
			    if(vidaveh <= 750) { JugadorInfo[playerid][jHabilidad][2] -= 3; SendClientMessage(playerid, CELESTE, "* Has perdido dos puntos de respeto por entregar el camión en mal estado."); }
			    if(JugadorInfo[playerid][jHabilidad][2] <= 50)
			    {
			        JugadorInfo[playerid][jDinero] += 350;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 350 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 50 && JugadorInfo[playerid][jHabilidad][2] <= 100)
			    {
			        JugadorInfo[playerid][jDinero] += 400;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 400 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 100 && JugadorInfo[playerid][jHabilidad][2] <= 200)
			    {
			        JugadorInfo[playerid][jDinero] += 450;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 450 dólares por hacer esta ruta.");
			    }
			    if(JugadorInfo[playerid][jHabilidad][2] > 200)
			    {
			        JugadorInfo[playerid][jDinero] += 500;
			        SendClientMessage(playerid, CELESTE, "* Has ganado 500 dólares por hacer esta ruta.");
			    }
				RemovePlayerFromVehicle(playerid);
				SetVehicleToRespawn(coche);
			}
		}
	}
	return 1;
}

public OnObjectMoved(objectid)
{
    ActivarParadoCiervo_Cazadores(objectid);
	return 1;
}

forward VerHack(playerid);
public VerHack(playerid)
{
	new Float:vida, Float:armadura, Float:hpauto;
	new coche = GetPlayerVehicleID(playerid);
	GetPlayerHealth(playerid, vida); GetPlayerArmour(playerid, armadura); GetVehicleHealth(coche, hpauto);
	new string[256];
	//________ HACK VIDA
	if(vida > 150 && GetPlayerState(playerid) == PLAYER_STATE_SPAWNED && JugadorInfo[playerid][jAdmin] == 0)
	{
		format(string, sizeof(string), "[Anticheat] %s ha sido baneado. Razón: Hack de vida.", NombreJugador(playerid));
		SendClientMessageToAll(ROJO, string);
		JugadorInfo[playerid][jBaneado] = 1;
		Expulsar(playerid, "ANTICHEAT", "Hack de vida");
	}
	//________ HACK ARMADURA
	if(armadura > 100 && JugadorInfo[playerid][jAdmin] == 0)
	{
		format(string, sizeof(string), "[Anticheat] %s ha sido baneado. Razón: Hack de armadura.", NombreJugador(playerid));
		SendClientMessageToAll(ROJO, string);
		JugadorInfo[playerid][jBaneado] = 1;
		Expulsar(playerid, "ANTICHEAT", "Hack de chaleco");
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:Current = GetPlayerMenu(playerid);
    if(Current == ArmeriaSAPD)
	{
	    if(row == 0)
	    {
	        ShowMenuForPlayer(ArmasSAPD, playerid);
	    }
	    if(row == 1)
	    {
	        ShowMenuForPlayer(MunicionSAPD, playerid);
	    }
	}
    if(Current == ArmasSAPD)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
	        format(string, sizeof(string), "* %s coge una Desert Eagle de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        new iden = random(99999);
	        DarObjeto(playerid, 24, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(24), "Armeria SAPD", NombreJugador(playerid));
	        return 1;
        }
        if(row == 1)
        {
	        format(string, sizeof(string), "* %s coge una MP5 de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        new iden = random(99999);
	        DarObjeto(playerid, 29, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(29), "Armeria SAPD", NombreJugador(playerid));
	        return 1;
        }
        if(row == 2)
        {
	        format(string, sizeof(string), "* %s coge una M4 de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        new iden = random(99999);
	        DarObjeto(playerid, 31, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(31), "Armeria SAPD", NombreJugador(playerid));
	        return 1;
        }
        if(row == 3)
        {
	        format(string, sizeof(string), "* %s coge una Sniper de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        new iden = random(99999);
	        DarObjeto(playerid, 34, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(34), "Armeria SAPD", NombreJugador(playerid));
	        return 1;
        }
        if(row == 4)
        {
	        new iden = random(99999);
	        DarObjeto(playerid, 25, iden, 0);
	        format(string, sizeof(string), "* %s coge una escopeta de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        ArmaLegal(iden, ObtenerNombreObjeto(25), "Armeria SAPD", NombreJugador(playerid));
	        return 1;
        }
    }
    if(Current == MunicionSAPD)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
	        new iden = random(99999);
	        ArmaLegal(iden, ObtenerNombreObjeto(46), "Armeria SAPD", NombreJugador(playerid));
	        DarObjeto(playerid, 46, iden, 7);
	        format(string, sizeof(string), "* %s coge un cargador de Desert Eagle de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        return 1;
        }
        if(row == 1)
        {
	        new iden = random(99999);
	        ArmaLegal(iden, ObtenerNombreObjeto(51), "Armeria SAPD", NombreJugador(playerid));
	        DarObjeto(playerid, 51, iden, 30);
	        format(string, sizeof(string), "* %s coge un cargador de MP5 de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        return 1;
        }
        if(row == 2)
        {
	        new iden = random(99999);
	        ArmaLegal(iden, ObtenerNombreObjeto(53), "Armeria SAPD", NombreJugador(playerid));
	        DarObjeto(playerid, 53, iden, 30);
	        format(string, sizeof(string), "* %s coge un cargador de M4 de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        return 1;
        }
        if(row == 3)
        {
	        new iden = random(99999);
	        ArmaLegal(iden, ObtenerNombreObjeto(56), "Armeria SAPD", NombreJugador(playerid));
	        DarObjeto(playerid, 56, iden, 4);
	        format(string, sizeof(string), "* %s coge un cargador de Sniper de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        return 1;
        }
        if(row == 4)
        {
	        new iden = random(99999);
	        ArmaLegal(iden, ObtenerNombreObjeto(47), "Armeria SAPD", NombreJugador(playerid));
	        DarObjeto(playerid, 47, iden, 6);
	        format(string, sizeof(string), "* %s coge un cargador de Escopeta de la armería.", NombreJugador(playerid));
	        ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        return 1;
        }
    }
    if(Current == TiendaDeportes)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 45) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 5;
			JugadorInfo[playerid][jDinero] -= 45;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 70) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 2;
			JugadorInfo[playerid][jDinero] -= 70;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 350) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 8;
			JugadorInfo[playerid][jDinero] -= 350;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 70) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 116;
			JugadorInfo[playerid][jDinero] -= 70;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_prolaps, "Ropa");
			return 1;
        }
        if(row == 5)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaBinco)
    {
        TogglePlayerControllable(playerid, true);
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_binco, "Ropa");
			return 1;
        }
        if(row == 1)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaZIP)
    {
        TogglePlayerControllable(playerid, true);
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_zip, "Ropa");
			return 1;
        }
        if(row == 1)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaSubUrban)
    {
        TogglePlayerControllable(playerid, true);
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_suburban, "Ropa");
			return 1;
        }
        if(row == 1)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaDS)
    {
        TogglePlayerControllable(playerid, true);
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_ds, "Ropa");
			return 1;
        }
        if(row == 1)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaVictim)
    {
        TogglePlayerControllable(playerid, true);
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			ShowModelSelectionMenu(playerid, ropa_victim, "Ropa");
			return 1;
        }
        if(row == 1)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaFerreteria)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 6;
			JugadorInfo[playerid][jDinero] -= 25;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 50) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 90;
			JugadorInfo[playerid][jDinero] -= 50;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 10);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 150) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 42;
			JugadorInfo[playerid][jDinero] -= 150;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 500);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 50) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 91;
			JugadorInfo[playerid][jDinero] -= 50;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 350) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 9;
			JugadorInfo[playerid][jDinero] -= 350;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 0);
			return 1;
        }
        if(row == 5)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaElectronica)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 250) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 104;
			JugadorInfo[playerid][jDinero] -= 250;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			new telefono = 1000000 + random(9900000);
			DarObjeto(playerid, objeto, telefono, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 117;
			JugadorInfo[playerid][jDinero] -= 200;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 90) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 89;
			JugadorInfo[playerid][jDinero] -= 90;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 110) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 118;
			JugadorInfo[playerid][jDinero] -= 110;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 400) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 43;
			JugadorInfo[playerid][jDinero] -= 400;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 200);
			return 1;
        }
        if(row == 5)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == Tienda247)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 76;
			JugadorInfo[playerid][jDinero] -= 5;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 20) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 75;
			JugadorInfo[playerid][jDinero] -= 20;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 10);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 77;
			JugadorInfo[playerid][jDinero] -= 3;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 78;
			JugadorInfo[playerid][jDinero] -= 5;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 119;
			JugadorInfo[playerid][jDinero] -= 25;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 120;
			JugadorInfo[playerid][jDinero] -= 10;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 5);
			return 1;
        }
        if(row == 6)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaPizzeria)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge un trozo de pizza y se lo come.", NombreJugador(playerid));
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge una pizza margarita y se la come.", NombreJugador(playerid));
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+12);
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge una pizza cuatro estaciones y se la come.", NombreJugador(playerid));
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge una pizza barbacoa y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaClukin)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unos nuggets de pollo y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unas alitas de pollo y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge una ensalada césar y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge unas patatas fritas con nuggets y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaBurger)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge una hamburguesa se pollo y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge una cheeseburguer y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge una long chicken y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge una steakhouse y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaItaliano)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge una pizza y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unos macarrones a la bolognesa y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge unos espaguetis a la carbonara y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+20);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge una pizza lasagna y se la come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaChino)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unos tallarines y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unos rollitos de primavera y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge un plato de arroz tres delicias y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge un plato de pollo a la naranja y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+20);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaJapones)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge un plato de sushi y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge un tofu y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge unos tallarines y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+15);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge un plato de sashimi y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+12);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaMexicano)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 6;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unos frijoles y se lo come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+6);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 8;
			JugadorInfo[playerid][jHambre] += 1;
			format(string, sizeof(string), "* %s coge unas fajitas y se las come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10;
			JugadorInfo[playerid][jHambre] += 2;
			format(string, sizeof(string), "* %s coge unos chiles rellenos y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12;
			JugadorInfo[playerid][jHambre] += 3;
			format(string, sizeof(string), "* %s coge unos tacos y se los come.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPlayerHealth(playerid, HP+10);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaSexShop)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 121;
			JugadorInfo[playerid][jDinero] -= 12;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 60) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 11;
			JugadorInfo[playerid][jDinero] -= 60;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 2)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaFarmacia)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 122;
			JugadorInfo[playerid][jDinero] -= 5;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 123;
			JugadorInfo[playerid][jDinero] -= 40;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 124;
			JugadorInfo[playerid][jDinero] -= 40;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 125;
			JugadorInfo[playerid][jDinero] -= 40;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 4)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaGasolinera)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 76;
			JugadorInfo[playerid][jDinero] -= 4;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 75;
			JugadorInfo[playerid][jDinero] -= 10;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 10);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 120;
			JugadorInfo[playerid][jDinero] -= 5;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 40) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 126;
			JugadorInfo[playerid][jDinero] -= 40;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 25);
			return 1;
        }
        if(row == 4)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaEstanco)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 76;
			JugadorInfo[playerid][jDinero] -= 4;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 75;
			JugadorInfo[playerid][jDinero] -= 10;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 10);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 120;
			JugadorInfo[playerid][jDinero] -= 5;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 1);
			return 1;
        }
        if(row == 3)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaArmeriaAE)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 12000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 12000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(31));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 31, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(31), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 10000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 10000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(30));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 30, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(30), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 16000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 16000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(34));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 34, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(34), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 800) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 53;
			JugadorInfo[playerid][jDinero] -= 800;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 30);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 700) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 52;
			JugadorInfo[playerid][jDinero] -= 700;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 30);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 800) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 56;
			JugadorInfo[playerid][jDinero] -= 800;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 2);
			return 1;
        }
        if(row == 6)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaArmeriaD)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 4000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 4000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(33));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 33, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(33), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 55;
			JugadorInfo[playerid][jDinero] -= 300;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 6);
			return 1;
        }
        if(row == 2)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaArmeriaC)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 3000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(28));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 28, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(28), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3500;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(32));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 32, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(32), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 5000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(25));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 25, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(25), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 7000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 7000;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(29));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 29, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(29), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 400) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 50;
			JugadorInfo[playerid][jDinero] -= 400;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 50);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 400) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 54;
			JugadorInfo[playerid][jDinero] -= 400;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 50);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 400) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 47;
			JugadorInfo[playerid][jDinero] -= 400;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 8);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 600) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 51;
			JugadorInfo[playerid][jDinero] -= 600;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 30);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaArmeriaB)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 1500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 1500;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(22));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 22, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(22), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 2500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2500;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(24));
			SendClientMessage(playerid, CELESTE, string);
			new iden = random(99999);
	        DarObjeto(playerid, 24, iden, 0);
	        ArmaLegal(iden, ObtenerNombreObjeto(24), "Ammu Nation", NombreJugador(playerid));
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 44;
			JugadorInfo[playerid][jDinero] -= 200;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 10);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			new objeto = 46;
			JugadorInfo[playerid][jDinero] -= 200;
			format(string, sizeof(string), "* Has comprado un %s.", ObtenerNombreObjeto(objeto));
			SendClientMessage(playerid, CELESTE, string);
			DarObjeto(playerid, objeto, 1, 7);
			return 1;
        }
        if(row == 4)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	if(Current == TiendaBar)
    {
        TogglePlayerControllable(playerid, true);
        new string[256];
        if(row == 0)
        {
            if(JugadorInfo[playerid][jDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 2;
			DarObjeto(playerid, 80, 1, 5);
			format(string, sizeof(string), "* %s coge una botella agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 1)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 81, 1, 5);
			format(string, sizeof(string), "* %s coge una bote de zumo.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 2)
        {
            if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 3;
			DarObjeto(playerid, 77, 1, 5);
			format(string, sizeof(string), "* %s coge una lata de refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 3)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 78, 1, 5);
			JugadorInfo[playerid][jEnergia] -= 2;
			format(string, sizeof(string), "* %s coge una botella de redbull.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 4)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 83, 1, 5);
			format(string, sizeof(string), "* %s coge una botella de cerveza.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 5)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 62, 1, 5);
			format(string, sizeof(string), "* %s coge un vino.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 6)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 85, 1, 5);
			format(string, sizeof(string), "* %s coge un ron con refresco.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 7)
        {
            if(JugadorInfo[playerid][jDinero] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
			JugadorInfo[playerid][jDinero] -= 5;
			DarObjeto(playerid, 86, 1, 5);
			format(string, sizeof(string), "* %s coge un whisky con agua.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
        }
        if(row == 8)
        {
            TogglePlayerControllable(playerid, true);
        }
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new coche = GetPlayerVehicleID(playerid);
	new keyso, updown, leftright;
	GetPlayerKeys(playerid, keyso, updown, leftright);
	if (EnCatalogoVeh[playerid] != NOEXISTE)
	{
	    if (((newkeys & KEY_JUMP) == KEY_JUMP)  && ((oldkeys & KEY_JUMP) != KEY_JUMP))
	    {
			TextDrawHideForPlayer(playerid, Nombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	        EnCatalogoVeh[playerid]--;
			DestroyVehicle(VehCatalogo[playerid]);
			VehCatalogo[playerid] = NOEXISTE;
			catalogovehiculos(playerid, PConcesionario[playerid]);
			return 1;
		}
	    if (((newkeys & KEY_WALK) == KEY_WALK) && ((oldkeys & KEY_WALK) != KEY_WALK))
	    {
			TextDrawHideForPlayer(playerid, Nombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	        EnCatalogoVeh[playerid]++;
			DestroyVehicle(VehCatalogo[playerid]);
			VehCatalogo[playerid] = NOEXISTE;
			catalogovehiculos(playerid, PConcesionario[playerid]);
			return 1;
		}
	    if (((newkeys & KEY_SECONDARY_ATTACK) == KEY_SECONDARY_ATTACK) && ((oldkeys & KEY_SECONDARY_ATTACK) != KEY_SECONDARY_ATTACK))
	    {
			TextDrawHideForPlayer(playerid, Nombre[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
			TextDrawHideForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	        TogglePlayerControllable(playerid,1);
	        DestroyVehicle(VehCatalogo[playerid]);
	        VehCatalogo[playerid] = NOEXISTE;
	        SetPlayerPos(playerid, tempX[playerid], tempY[playerid], tempZ[playerid]);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
	    	EnCatalogoVeh[playerid] = NOEXISTE;
	    	TogglePlayerControllable(playerid, false);
	    	SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos...", 5000, 5);
			return 1;
		}
	}
	if(newkeys ==  KEY_SECONDARY_ATTACK )
	{
	    if(EstaFumando[playerid] == 1)
	    {
            EstaFumando[playerid] = 0;
			new string[128];
			format(string, sizeof(string), "* %s tira su cigarro al suelo y lo apaga.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    }
	}
	if(newkeys == KEY_ANALOG_DOWN) // 2 teclado numérico
	{
	    if(SolicitandoRef[playerid] == 0)
	    {
		    if(JugadorInfo[playerid][jMiembro] == 1 && JugadorInfo[playerid][jServicio] == 1)
		    {
		        SolicitandoRef[playerid] = 1;
			    new string[128];
		    	format(string, sizeof(string), "[Central] {FFFFFF}%s necesita más unidades en su posición, acudan lo más rápido posible, corto.", NombreJugador(playerid));
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((JugadorInfo[i][jMiembro] == JugadorInfo[playerid][jMiembro]) && JugadorInfo[i][jServicio] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0x1B37D2FF);
							SendClientMessage(i, AZUL, string);
						}
					}
				}
			}
			return 1;
		}
		else if (SolicitandoRef[playerid] == 1)
		{
		    if(JugadorInfo[playerid][jMiembro] == 1 && JugadorInfo[playerid][jServicio] == 1)
		    {
			    SolicitandoRef[playerid] = 0;
		    	SendClientMessage(playerid, AZUL, "* Refuerzos cancelados.");
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((JugadorInfo[i][jMiembro] == 1 || JugadorInfo[i][jMiembro] == 2 || JugadorInfo[i][jMiembro] == 3) && JugadorInfo[i][jServicio] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
						}
					}
				}
			}
			return 1;
		}
	}
    if(newkeys == KEY_HANDBRAKE) // Espacio
	{
        if(PlayerToPoint(playerid, 5, 759.2063,-1370.8650,13.8239))
		{
		    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar al garaje.");
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SetVehiclePos(GetPlayerVehicleID(playerid), 770.3700,-1389.8593,-15.5754);
		        SetVehicleZAngle(GetPlayerVehicleID(playerid), 180);
		        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
				GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
		        return 1;
		    }
		    else
		    {
		        SetPlayerPos(playerid, 770.3700,-1389.8593,-15.5754);
		        SetPlayerFacingAngle(playerid, 180);
		        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
				GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
		        return 1;
		    }
		}
		if(PlayerToPoint(playerid, 5, 784.9937,-1387.9502,-15.5962))
		{
		    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar al garaje.");
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SetVehiclePos(GetPlayerVehicleID(playerid), 759.6904,-1380.6534,13.8206);
		        SetVehicleZAngle(GetPlayerVehicleID(playerid), 270);
		        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
				GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
		        return 1;
		    }
		    else
		    {
		        SetPlayerPos(playerid, 759.6904,-1380.6534,13.8206);
		        SetPlayerFacingAngle(playerid, 270);
		        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
				GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
		        return 1;
		    }
		}
		return 1;
    }
    if(newkeys == 16) // INTRO
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			ComprobarEntradas(playerid);
		}
	}
	if(newkeys == KEY_ACTION ) // CONTROL
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(AutoInfo[coche][aMotor]==0)
				EncenderVehiculo(coche, playerid);
			else if(AutoInfo[coche][aMotor]==1)
			    ApagarVehiculo(coche, playerid);
			return 1;
		}
	}
	if(newkeys == KEY_YES)
	{
	    ComprobarAbrirPuertas(playerid);
	    if(IsPlayerInRangeOfPoint(playerid,5.0,1777.37927, -1777.52820, 14.01590) || IsPlayerInRangeOfPoint(playerid,5.0,1777.37927, -1777.52820, 42.89976))
        {
        	ShowPlayerDialog(playerid, AscensorObras, DIALOG_STYLE_LIST, "{FFFFFF}Ascensor", "Llamar ascensor\nPrimer piso\nÚltimo piso", "Aceptar","Cerrar");
        }
	}
	if(newkeys == KEY_NO)
	{
	    ComprobarCerrarPuertas(playerid);
	}
	if(newkeys == KEY_SUBMISSION && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // 2
	{
		new motor, luces, alarma, puertas, capo, maletero, objetivo;
		GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
		if(luces == 1)
		{
			SetVehicleParamsEx(coche, motor, false, alarma, puertas, capo, maletero, objetivo);
		}
		else
		{
			SetVehicleParamsEx(coche, motor, true, alarma, puertas, capo, maletero, objetivo);
		}
		return 1;
	}
	if(newkeys & KEY_ANALOG_UP) // 8 numpad
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && (AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] == 1 || AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] == 2 || AutoInfo[GetPlayerVehicleID(playerid)][aFaccionID] == 3))
	    {
	        new enginem, lights, alarm, doors, bonnet, boot, objective;
	       	GetVehicleParamsEx(GetPlayerVehicleID(playerid), enginem, lights, alarm, doors, bonnet, boot, objective);

	       	if(lights == VEHICLE_PARAMS_OFF)
	       	{
	       		SendClientMessage(playerid, ROJO_OSCURO, "* Debes encender las luces del vehículo primero.");
	       		return 1;
	       	}
	        new Panels, Doors1, Lights, Tires;
			GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
            if(LucesAlternes[GetPlayerVehicleID(playerid)] == 0)
            {
                LucesAlternes[GetPlayerVehicleID(playerid)] = 1;
                AlternandoLuces2[GetPlayerVehicleID(playerid)] = 1;
            	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,1,1), Tires);
            }
            else
            {
                LucesAlternes[GetPlayerVehicleID(playerid)] = 0;
                AlternandoLuces2[GetPlayerVehicleID(playerid)] = 0;
                UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,0,0), Tires);
            }
	    }
	    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        new veh = JugadorCercaVehiculo(playerid);
	        if(veh == 0) return 1;
	        if(ComprobarDueno(veh, playerid) || ComprobarPrestado(veh, playerid) || ComprobarRenta(veh, playerid) || ComprobarFaccion(veh, playerid))
			{
			    new string[128], motor, luces, alarma, puertas, capo, objetivo;
	            if(AutoInfo[veh][aMal] == 0)
			    {
			        AutoInfo[veh][aMal] = 1;
			        SetVehicleParamsEx(veh, motor, luces, alarma, puertas, capo, AutoInfo[veh][aMal], objetivo);
					format(string, sizeof(string), "* %s abre el maletero del vehículo y mira en su interior.", NombreJugador(playerid));
					ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
					ActualizarMaletero(veh);
					for(new i = 0; i < (EspaciosMaletero(GetVehicleModel(veh)) - 1); i++)
					{
					    format(string, sizeof(string), "[Espacio %d] %s [Cantidad: %d]", i+1, ObtenerNombreObjeto(AutoInfo[veh][aMalID][i]), AutoInfo[veh][aMalCantidad][i]);
					    SendClientMessage(playerid, AMARILLO, string);
					}
					return 1;
			    }
			    else
			    {
			        AutoInfo[veh][aMal] = 0;
			        SetVehicleParamsEx(veh, motor, luces, alarma, puertas, capo, AutoInfo[veh][aMal], objetivo);
					format(string, sizeof(string), "* %s cierra el maletero del vehículo.", NombreJugador(playerid));
					ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
					ActualizarMaletero(veh);
					return 1;
				}
			}
	    }
	}
	if(newkeys & KEY_ANALOG_LEFT ) // 4 numpad
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	    {
	        if(SinSonido[vehicleid] == 0)
		    {
		        if(GetVehicleModel(vehicleid) == 523) //Moto
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.1,0.8,0.4,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.2,0.8,0.4,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.05,0.8,0.4,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,-0.15,0.8,0.4,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 427) //Enforcer
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,-0.5,1.0,1.2,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,0.5,1.0,1.2,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,-0.25,1.0,1.2,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,0.25,1.0,1.2,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 596) //Patrulla
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.25,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,-0.25,-0.3,1.0,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 525) // Grua
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19284,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,-0.5,-0.5,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,0.5,-0.5,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,-0.25,-0.5,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,0.25,-0.5,1.5,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 597) // Patrulla bomberos
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.25,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,-0.25,-0.3,1.0,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 407) // Camión de bomberos
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
        			LuzSS[1][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19282,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,-0.7,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,0.7,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,-0.35,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,0.35,3.2,1.5,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 560 && AutoInfo[vehicleid][aFaccionID] == 1)
		        {
		            SinSonido[vehicleid] = 1;
		            DestroyObject(TieneSirena[vehicleid]);
		            TieneSirena[vehicleid] = CreateObject(19419, 0.0,0.0,0.0,0.0,0.0,0.0);
					AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, -0.25, 0.83, 0, 0, 0);
		        }
		        return 1;
		    }
		    if(SinSonido[vehicleid] == 1)
		    {
		        SinSonido[vehicleid] = 0;
		        if(GetVehicleModel(vehicleid) == 560 && AutoInfo[vehicleid][aFaccionID] == 1)
		        {
		            DestroyObject(TieneSirena[vehicleid]);
		            TieneSirena[vehicleid] = CreateObject(19420, 0.0,0.0,0.0,0.0,0.0,0.0);
					AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, -0.25, 0.83, 0, 0, 0);
		        }
		        else
		        {
		            DestroyDynamicObject(LuzSS[0][vehicleid]);
		        	DestroyDynamicObject(LuzSS[1][vehicleid]);
		        	DestroyDynamicObject(LuzSS[2][vehicleid]);
		        	DestroyDynamicObject(LuzSS[3][vehicleid]);
		        }
				return 1;
		    }
		}
	}
	if(newkeys &  KEY_ANALOG_RIGHT) // 6 numpad
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	    {
	        if(SinSonido[vehicleid] == 0)
		    {
		        if(GetVehicleModel(vehicleid) == 597) // LSFD
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
        			LuzSS[1][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.25,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,-0.25,-0.3,1.0,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 407) // Camión de bomberos
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
        			LuzSS[1][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19286,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,-0.7,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,0.7,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,-0.35,3.2,1.5,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,0.35,3.2,1.5,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 596) // LSPD
		        {
		            LuzSS[0][vehicleid] = CreateDynamicObject(19288,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
        			LuzSS[1][vehicleid] = CreateDynamicObject(19288,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[2][vehicleid] = CreateDynamicObject(19288,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        	LuzSS[3][vehicleid] = CreateDynamicObject(19288,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		            SinSonido[vehicleid] = 1;
		            AttachDynamicObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.25,-0.3,1.0,0.0,0.0,0.0);
		        	AttachDynamicObjectToVehicle(LuzSS[3][vehicleid],vehicleid,-0.25,-0.3,1.0,0.0,0.0,0.0);
		        }
		        return 1;
		    }
		    if(SinSonido[vehicleid] == 1)
		    {
		        DestroyDynamicObject(LuzSS[0][vehicleid]);
		        DestroyDynamicObject(LuzSS[1][vehicleid]);
		        DestroyDynamicObject(LuzSS[2][vehicleid]);
		        DestroyDynamicObject(LuzSS[3][vehicleid]);
		        SinSonido[vehicleid] = 0;
				return 1;
		    }
		}
	}
	if(newkeys & KEY_JUMP) // Barra espaciadora
	{
	    if(HaciendoPress[playerid] == 1)
        {
            xejercicio[playerid] += 1;
        }
        else if(HaciendoBicicleta[playerid] == 1)
        {
            xejercicio[playerid] += 1;
        }
        else if(HaciendoMancuerna[playerid] == 1)
        {
            xejercicio[playerid] += 1;
        }
        else if(HaciendoEliptica[playerid] == 1)
        {
            xejercicio[playerid] += 1;
        }
	}
	/* Sistema de agua en camiones de bomberos */
	if ( ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) &&  GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
	{
		JugadorInfo[playerid][jShotingWater] = 1;

		if(JugadorInfo[playerid][jWaterTimer] != -1)
		{
			KillTimer(JugadorInfo[playerid][jWaterTimer]);
			JugadorInfo[playerid][jWaterTimer] = -1;
		}
		JugadorInfo[playerid][jWaterTimer] = SetTimerEx("WaterTick", 1000 * 8, true, "d", playerid);
	}
	else if( RELEASED(KEY_FIRE) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
	{
		JugadorInfo[playerid][jShotingWater] = 0;
		if(JugadorInfo[playerid][jWaterTimer] != -1)
		{
			KillTimer(JugadorInfo[playerid][jWaterTimer]);
			JugadorInfo[playerid][jWaterTimer] = -1;
		}

	}

	if(newkeys & KEY_FIRE)
	{
		if(IsPlayerInGangZoneCazadores(playerid))
		{
			MatandoCiervos(playerid);
 			return 1;
		}
		if(EstaFumando[playerid] == 1)
		{
		    ApplyAnimation(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1,1);
		}
	}
	return 1;
}
//ACA3
public OnPlayerUpdate(playerid)
{
	if(GetPlayerWeapon(playerid) > 0 && BolsilloID[playerid][11] == 0 && GetPlayerWeapon(playerid) != 46)
	{
		    if(GuardoArmaSegura[playerid] == 0)
			{
				new string[128];
				ResetPlayerWeapons(playerid);
				format(string, 124, "[Anticheat] %s {FFFFFF}fue expulsado. Razón: {A71F26}Cheat de armas",NombreJugador(playerid));
			  	SendClientMessageToAll(0xA71F26FF, string);
				Kick(playerid);
				return 1;
			}
	}
    if(Chaleco[playerid] == 1 && JugadorInfo[playerid][jChaleco] == 0){
    Chaleco[playerid] = 0;
    RemovePlayerAttachedObject(playerid,9);
    return 1;
    }
    new Float:vida;
	if(vida > 100)
	{
		SetPlayerHealthEx(playerid, 100);
	}
    new dinero;
    RefreshPos(playerid);
    dinero = GetPlayerMoney(playerid);
    if(dinero > JugadorInfo[playerid][jDinero] || dinero < JugadorInfo[playerid][jDinero])
    {
        ResetPlayerMoney(playerid);
        GivePlayerMoney(playerid, JugadorInfo[playerid][jDinero]);
    }

    if(EsArma(BolsilloID[playerid][11]) && BolsilloCantidad[playerid][11] > 0)
	{
	    SetPlayerArmedWeapon(playerid, BolsilloID[playerid][11]);
	}

	new Float:Vida;
	GetPlayerHealth(playerid, Vida);
	/*if(Vida <= 23.5 && JugadorInfo[playerid][jHerido] == 0)
	{
	    new string[256], ZoneName[128];
		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayer2DZone(ZoneName, 128, Pos[0], Pos[1]);
	    JugadorInfo[playerid][jHerido] = 1;
	    TogglePlayerControllable(playerid, 0);
		ClearAnimations(playerid);
		LoopingAnim(playerid, "CRACK", "crckdeth1", 4.1, 0, 1, 1, 1, 1);
		TimerMuerto[playerid] = SetTimerEx("TrasladarHospital", (20000), 0, "d", playerid);
		SendClientMessage(playerid, CELESTE, "(( Tu estado de salud era muy malo y por ello has quedado insconciente en el suelo, se han...");
		SendClientMessage(playerid, CELESTE, "... avisado a todas los médicos online. Si no aparecen en 20 minutos spawnearás en el hospital.");
		format(string, sizeof(string), "[Central] {FFFFFF}Nos han informado de un civil insconciente en la zona de %s, todas...", ZoneName);
		MensajeDeFaccion(2, AZUL, string);
		MensajeDeFaccion(2, AZUL, "... las unidades disponibles dirigirse a la emergencia, corto.");
		new Float:Pos[3];
		SetPlayerCheckpoint(playerid, Pos[0], Pos[1], Pos[2], 5.0);
	}*/

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new carid = GetPlayerVehicleID(playerid);
        for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]))
            {
  	            if(ObjectsInfo[i][cpCreated] == 1 && ObjectsInfo[i][cpType] == 1)
  	            {
  	                new panels, doors, lights, tires;
		            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
  	                return 1; // No 0
  	            }
  	        }
  	    }
  	}

  	if(IsPlayerInGangZoneCazadores(playerid))
	{
		new Float:Angulo, Float:PosicionX,Float:PosicionY,Float:PosicionZ;
		new Float:AnguloRecibido,Float:AnguloCiervo;
		GetPlayerPos(playerid, PosicionX,PosicionY,PosicionZ);
		GetPlayerFacingAngle(playerid, Angulo);
		new Float: AnguloMinimo=Angulo-1;
		new Float: AnguloMaximo=Angulo+1;
		//new cad[100];
		for(new i=0;i<MAX_CIERVOS;i++)
		{
			GetObjectPos(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]);

			AnguloRecibido = IfPlayerLockingAtCiervo( PosicionX,PosicionY,NumeroCiervosInfo[i][Ciervos_PosX], NumeroCiervosInfo[i][Ciervos_PosY]);
			//AnguloRecibido = GetPointAngleToPoint(PosicionX, PosicionY,NumeroCiervosInfo[i][Ciervos_PosX], NumeroCiervosInfo[i][Ciervos_PosY]); //(Float:x2, Float:y2, Float:X, Float:Y)
			AnguloCiervo = IfPlayerLockingAtCiervo( NumeroCiervosInfo[i][Ciervos_PosX], NumeroCiervosInfo[i][Ciervos_PosY] ,PosicionX,PosicionY);
			AnguloCiervo-=180;
			if((AnguloRecibido >= AnguloMinimo) && (AnguloRecibido <= AnguloMaximo)) // para tener  un pequeño margen de error
			{
				if(NumeroCiervosInfo[i][Ciervos_Muertos] != 1)
				{
					if(NumeroCiervosInfo[i][Ciervos_Moviendose] != 1)
					{
						//if(NumeroCiervosInfo[i][Ciervos_Moviendose] != 1) SendClientMessage(playerid, -1, "Moviendose != 1");


						MoverCiervo(i);
						//format(cad, sizeof(cad), "El angulo del ciervo %d, es %f, y tu angulo con el ciervo es :%f", i,AnguloRecibido, AnguloCiervo);
						//SendClientMessage(playerid, -1, cad);
						break;
					}
				}
			}
		}
	}

    if(PlayerToPoint(playerid, 60, 1913.8141,-1404.5256,13.5703))//Skate Park
    {
        if(musicaglenpark[playerid] == 0)
        {
            musicaglenpark[playerid] = 1;
        	PlayAudioStreamForPlayer(playerid, "http://s6.viastreaming.net/7010/listen.asx", 1913.8141,-1404.5256,13.5703, 60, 1);
			return 1;
		}
	}
	else if(PlayerToPoint(playerid, 15, 1323.6327,-1792.8379,13.5469))//Terraza popa
	{
	    if(musicaglenpark[playerid] == 0)
        {
            musicaglenpark[playerid] = 1;
        	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/42457537/CELE%20MAI%20ASCULTATE%2010%20MANELE%20LIVIU%20GUTA%2C%20MIX%202013%2C%20ZOOM%20STUDIO.mp3", 1323.6327,-1792.8379,13.5469, 15, 1);
			return 1;
		}
	}
	else if(PlayerToPoint(playerid, 20, 2041.0330,-1705.6204,13.5547))//Idlewood
	{
	    if(musicaglenpark[playerid] == 0)
        {
            musicaglenpark[playerid] = 1;
        	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/42457537/Terror%20Squad%20-%20The%20Album%20%5B%20FULL%20ALBUM%20%5D.wmv.mp3", 2041.0330,-1705.6204,13.5547, 20, 1);
			return 1;
		}
	}
	else
	{
	    //StopAudioStreamForPlayer(playerid);
        musicaglenpark[playerid] = 0;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid == Cargar_Camion)
	{
		if(!response) return 1;
		switch(listitem)
		{
		case 0:
			{
				CargarCamion(playerid);
				CargaCamionero = 1;
				SetPlayerCheckpoint(playerid, 1229.0922,188.8994,19.5714, 5.0);
			}
		case 1:
			{
				CargarCamion(playerid);
				CargaCamionero = 2;
				SetPlayerCheckpoint(playerid, 224.6607,17.4525,2.5676, 5.0);
			}
		case 2:
			{
				CargarCamion(playerid);
				CargaCamionero = 3;
				SetPlayerCheckpoint(playerid, 2394.6062,-1894.3419,13.3736, 5.0);
			}
		case 3:
			{
   				CargarCamion(playerid);
   				CargaCamionero = 4;
   				SetPlayerCheckpoint(playerid, 2338.9006,30.3900,26.3960, 5.0);
			}
		}
		return 1;
	}
    if(dialogid == Mostrar_Talleres)
	{
		if(!response) return 1;
		switch(listitem)
		{
		case 0:
			{
			    SendClientMessage(playerid, CELESTE, "Se ha marcado el Taller de Ganton en el mapa");
				SetPlayerCheckpoint(playerid, 2312.6636,-1981.9938,13.5695, 5.0);
			}
		case 1:
			{
			    SendClientMessage(playerid, CELESTE, "Se ha marcado el Taller de Jefferson en el mapa");
				SetPlayerCheckpoint(playerid, 2530.5293,-1524.9912,24.0535, 5.0);
			}
		}
		return 1;
	}
    if(dialogid == dSpecReport)
	{
 		if(!response)
   		{
   			DeletePVar(playerid, "REPORT_IDSPEC");
      		return 1;
		}
			new str[5];
			valstr(str, GetPVarInt(playerid, "REPORT_IDSPEC"));
			DeletePVar(playerid, "REPORT_IDSPEC");
			cmd_spect(playerid, str);
			return 1;
	}
	if(dialogid == EquipoPD)
	{
		if(!response) return 1;
		new string[128];
		format(string, sizeof(string), "* %s coge material policial de las taquillas.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);

		if (listitem == 0)
			DarObjeto(playerid, 3, 1, 1);
		else if (listitem == 1)
			DarObjeto(playerid, 41, 1, 600);
		else if (listitem == 2)
			DarObjeto(playerid, 24, 1, 30);
		else if (listitem == 3)
			SetPlayerArmourEx(playerid, 99);
        else if (listitem == 4)
			DarObjeto(playerid, 23, 1, 2);
		return 1;
	}
	if(dialogid == SelecSpawn)
	{
	    if(!response) return 1;
	    if(listitem == 0)
	    {
	        SendClientMessage(playerid, CELESTE, "* Has spawneado en tu última posición conocida.");
	    }
	    if(listitem == 1)
	    {
			if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, CELESTE, "* No tienes casa, por lo que spawneas en tu última posición conocida.");
			for(new i = 0; i < MAX_CASAS; i++)
			{
			    if(JugadorInfo[playerid][jCasa] == CasaInfo[i][cID])
			    {
			        SetPlayerPos(playerid, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]);
			        SetPlayerInterior(playerid, CasaInfo[i][cint]);
			        SetPlayerVirtualWorld(playerid, CasaInfo[i][cvw]);
			        SendClientMessage(playerid, CELESTE, "* Has spawneado en tu casa ya que eres miembro premium.");
			        return 1;
			    }
			}
		}
	    if(listitem == 2)
	    {
	        if(JugadorInfo[playerid][jNegocio] == NOEXISTE) return SendClientMessage(playerid, CELESTE, "* No tienes casa, por lo que spawneas en tu última posición conocida.");
            for(new i = 0; i < MAX_NEGOCIOS; i++)
			{
			    if(JugadorInfo[playerid][jNegocio] == NegocioInfo[i][nID])
			    {
			        SetPlayerPos(playerid, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerVirtualWorld(playerid, 0);
			        SendClientMessage(playerid, CELESTE, "* Has spawneado en tu negocio ya que eres miembro premium.");
			        return 1;
			    }
			}
		}
	}
	if(dialogid == VentaVeh)
	{
	    if(!response) return 1;
	    if(!PlayerToPoint(playerid, 10, 369.1873,-1347.9966,14.5174)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el concesionario de compra de vehículos.");
	    if(ComprobarDueno(GetPlayerVehicleID(playerid),playerid))
	    {
	        new coche = GetPlayerVehicleID(playerid), string[128], precio;
	        precio = PrecioCoche(GetVehicleModel(coche)) / 3;
			JugadorInfo[playerid][jDinero] += precio;
			format(string, sizeof(string), "* Has vendido tu vehículo LS-%d por %d dólares.", AutoInfo[coche][aID], precio);
	    	SendClientMessage(playerid, CELESTE, string);
			if(AutoInfo[coche][aID] == JugadorInfo[playerid][jCoches][0]) JugadorInfo[playerid][jCoches][0] = NOEXISTE;
        	else if(AutoInfo[coche][aID] == JugadorInfo[playerid][jCoches][1]) JugadorInfo[playerid][jCoches][1] = NOEXISTE;
        	else if(AutoInfo[coche][aID] == JugadorInfo[playerid][jCoches][2]) JugadorInfo[playerid][jCoches][2] = NOEXISTE;
        	DestroyVehicle(coche);
	    	EliminarVehiculo(coche);
			return 1;
	    }
	}
	if(dialogid == AscensorObras)
	{
	    if(response)
        {
        	switch(listitem)
            {
            	case 0:
            	{
            		if(IsPlayerInRangeOfPoint(playerid,5.0,1777.37927, -1777.52820, 14.01590)){MoveDynamicObject(ascensorunity, 1777.37927, -1777.52820, 14.01590, 5.00);}
            		if(IsPlayerInRangeOfPoint(playerid,5.0,1777.37927, -1777.52820, 42.89976)){MoveDynamicObject(ascensorunity, 1777.37927, -1777.52820, 42.89976, 5.00);}
            	}
            	case 1: MoveDynamicObject(ascensorunity, 1777.37927, -1777.52820, 14.01590, 5.00);
            	case 2: MoveDynamicObject(ascensorunity, 1777.37927, -1777.52820, 42.89976, 5.00);
        	}
    	}
	}
    if(dialogid == TeoricoCoche1)
	{
	    if(listitem == 2)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche2, DIALOG_STYLE_LIST, "{00FFFF}¿Que velocidad máxima se permite dentro de poblado?", "{FFFFFF}A) Máximo de 50 KM/H en todo momento.\nB) Máximo de 65 KM/H en todo momento.\nC) Máximo de 80 KM/H en todo momento.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche2)
	{
	    if(listitem == 2)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche3, DIALOG_STYLE_LIST, "{00FFFF}¿En qué casos deberá llevar el alumbrado encendido?", "{FFFFFF}A) Unicamente por las noches.\nB) Cuando las condiciones de visibilidad se vean reducidas.\nC) Cuando lo crea justo y necesario para la seguridad.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche3)
	{
	    if(listitem == 1)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche4, DIALOG_STYLE_LIST, "{00FFFF}¿Es obligatorio detenerse en un peaje aunque esté abierto?", "{FFFFFF}A) Si, siempre es obligatorio parar en los peajes.\nB) No, si está abierto, se puede pasar.\nC) No, pasaré más rápido por si se baja en medio.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche4)
	{
	    if(listitem == 0)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche5, DIALOG_STYLE_LIST, "{00FFFF}Si veo o escucho una sirena de emergencia...", "{FFFFFF}A) Continúo mi marcha lo máximo posible.\nB) Apartarme lo más rápido posible de la vía.\nC) Si no interrumpo su paso, continúo la marcha normalmente.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche5)
	{
	    if(listitem == 2)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche6, DIALOG_STYLE_LIST, "{00FFFF}Estoy obligado a realizar la prueba de alcoholemia...", "{FFFFFF}A) Cuando lo solicite un agente.\nB) Cuando este implicado en un accidente.\nC) Siempre que me lo pida un agente y sea el conductor.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche6)
	{
	    if(listitem == 2)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche7, DIALOG_STYLE_LIST, "{00FFFF}Si esta lloviendo la distancia de frenado...", "{FFFFFF}A) Disminuye.\nB) Aumenta.\nC) No se ve perjudicada.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche7)
	{
	    if(listitem == 1)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche8, DIALOG_STYLE_LIST, "{00FFFF}¿Se permite conducir bajo los efectos de las drogas?", "{FFFFFF}A) Si.\nB) No.\nC) Si, si son recetadas.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche8)
	{
	    if(listitem == 1)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche9, DIALOG_STYLE_LIST, "{00FFFF}¿Qué es el método de conducción preventiva?", "{FFFFFF}A) Guardar las distancias de seguridad y conducir a buena velocidad.\nB) Gastar la menor cantidad de gasolina posible.\nC) Conducir lo más rápido posible para gastar menos gasolina.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche9)
	{
	    if(listitem == 0)
	    {
	        ShowPlayerDialog(playerid, TeoricoCoche10, DIALOG_STYLE_LIST, "{00FFFF}¿Cual es la forma correcta de estacionar tu vehículo?", "{FFFFFF}A) Encima de la acera\nB) En la calzada.\nC) Mitad en la acera y mitad en la calzada.", "Siguiente", "Cancelar");
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == TeoricoCoche10)
	{
	    if(listitem == 2)
	    {
	        SendClientMessage(playerid, BLANCO, "Empleado autoescuela: Felicidades, has aprobado el examen teórico, ve al exterior y súbete en uno de los vehículos de la autoescuela.");
	        ExamenAutoescuela[playerid] = 2;
			SendClientMessage(playerid, CELESTE, "* Recuerda colocarte el cinturón de seguridad y no superar el límite de 80KM/H en toda la ciudad.");
	        return 1;
	    }
	    else
	    {
	        ExamenAutoescuela[playerid] = 0;
        	TipoLicenciaAutoescuela[playerid] = 0;
	        IntentosLicencia[playerid] ++;
			if(IntentosLicencia[playerid] == 1)
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico, te queda una ultima oportunidad.");
				return 1;
			}
			else if(IntentosLicencia[playerid] == 2)
			{
			    IntentosLicencia[playerid] = 3;
				SendClientMessage(playerid, ROJO_OSCURO, "* Has suspendido el examen teórico por segunda vez, tendrás que pagar el abono nuevamente.");
				return 1;
			}
	    }
	}
	if(dialogid == CLicenciasCoche)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jLicencias][0] > 0)
	    {
	        ProxDetector(10.0, playerid, "Empleado autoescuela: Ya usted tiene licencia de conducción, si lo que busca es subir sus puntos, pase por comisaría, allí le informarán.", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        return 1;
	    }
	    if(IntentosLicencia[playerid] == 0 || IntentosLicencia[playerid] == 3)
	    {
	        if(JugadorInfo[playerid][jDinero] < 200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes el dinero suficiente.");
	        SendClientMessage(playerid, CELESTE, "* Se te ha cobrado 200 dólares por los costes de matrícula.");
	        JugadorInfo[playerid][jDinero] -= 200;
	        IntentosLicencia[playerid] = 0;
	    }
        ExamenAutoescuela[playerid] = 1;
        TipoLicenciaAutoescuela[playerid] = 1;
        SetPlayerCheckpoint(playerid, 2183.2268,-1939.0250,-60.6141, 3.0);
		ProxDetector(10.0, playerid, "Empleado autoescuela: Tenga suerte señor, pase a la sala de examenes que está ahí al fondo.", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	if(dialogid == CLicenciasMoto)
	{
	    if(!response) return 1;
	    new string[128];
	    if(JugadorInfo[playerid][jDinero] < 340) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	    if(JugadorInfo[playerid][jLicencias][7] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes esta licencia.");
	    JugadorInfo[playerid][jDinero] -= 340;
	    JugadorInfo[playerid][jLicencias][7] = 1;
	    format(string, sizeof(string), "Empleado autoescuela: Bien %s, ahí tiene su licencia de moto, vaya con cuidado.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    return 1;
	}
	if(dialogid == CLicenciasVuel)
	{
	    if(!response) return 1;
	    new string[128];
	    if(JugadorInfo[playerid][jDinero] < 780) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	    if(JugadorInfo[playerid][jLicencias][2] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes esta licencia.");
	    JugadorInfo[playerid][jDinero] -= 780;
	    JugadorInfo[playerid][jLicencias][2] = 1;
	    format(string, sizeof(string), "Empleado autoescuela: Bien %s, ahí tiene su licencia de vuelo, vaya con cuidado.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    return 1;
	}
	if(dialogid == CLicenciasNav)
	{
	    if(!response) return 1;
	    new string[128];
	    if(JugadorInfo[playerid][jDinero] < 650) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	    if(JugadorInfo[playerid][jLicencias][1] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes esta licencia.");
	    JugadorInfo[playerid][jDinero] -= 650;
	    JugadorInfo[playerid][jLicencias][1] = 1;
	    format(string, sizeof(string), "Empleado autoescuela: Bien %s, ahí tiene su licencia de navegación, vaya con cuidado.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    return 1;
	}
	if(dialogid == CLicenciasCamion)
	{
	    if(!response) return 1;
	    new string[128];
	    if(JugadorInfo[playerid][jDinero] < 450) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	    if(JugadorInfo[playerid][jLicencias][6] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes esta licencia.");
	    JugadorInfo[playerid][jDinero] -= 450;
	    JugadorInfo[playerid][jLicencias][6] = 1;
	    format(string, sizeof(string), "Empleado autoescuela: Bien %s, ahí tiene su licencia de camión, vaya con cuidado.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    return 1;
	}
	if(dialogid == CLicencias)
	{
	    if(!response) return 1;
	    if(listitem == 0)
	    {
	        ShowPlayerDialog(playerid, CLicenciasCoche, DIALOG_STYLE_MSGBOX, "{00FFFF}Licencia de conducción", "{00FFFF}· Información de la licencia:{FFFFFF}\n\n\tCon la licencia de conducción, podrá conducir todo tipo de vehículos, exeptuando motocicletas y camiones, que\n\tdeberás sacar una licencia especial.\n\n{00FFFF}· Precio de la licencia:{FFFFFF}\n\n\tLa licencia tiene un costo de 200 dólares y constará de dos intentos.", "Comprar", "Cancelar");
	    }
	    if(listitem == 1)
	    {
	        ShowPlayerDialog(playerid, CLicenciasMoto, DIALOG_STYLE_MSGBOX, "{00FFFF}Licencia de motos", "{00FFFF}· Información de la licencia:{FFFFFF}\n\n\tCon la licencia de motos, tendrás acceso a conducir todo tipo de motocicletas sin ningún problema.\n\n{00FFFF}· Precio de la licencia:{FFFFFF}\n\n\tLa licencia tiene un costo de 340 dólares.", "Comprar", "Cancelar");
	    }
	    if(listitem == 2)
	    {
	        ShowPlayerDialog(playerid, CLicenciasVuel, DIALOG_STYLE_MSGBOX, "{00FFFF}Licencia de vuelo", "{00FFFF}· Información de la licencia:{FFFFFF}\n\n\tCon la licencia de vuelo, podrás conducir todo tipo de vehículos aéreos, ya sean helicópteros o aviones\n\n{00FFFF}· Precio de la licencia:{FFFFFF}\n\n\tLa licencia tiene un costo de 780 dólares.", "Comprar", "Cancelar");
	    }
	    if(listitem == 3)
	    {
	        ShowPlayerDialog(playerid, CLicenciasNav, DIALOG_STYLE_MSGBOX, "{00FFFF}Licencia de navegación", "{00FFFF}· Información de la licencia:{FFFFFF}\n\n\tCon la licencia de conducción, podrá conducir todo tipo de barcos sin ningún problema.\n\n{00FFFF}· Precio de la licencia:{FFFFFF}\n\n\tLa licencia tiene un costo de 650 dólares.", "Comprar", "Cancelar");
	    }
	    if(listitem == 4)
	    {
	        ShowPlayerDialog(playerid, CLicenciasCamion, DIALOG_STYLE_MSGBOX, "{00FFFF}Licencia de camión", "{00FFFF}· Información de la licencia:{FFFFFF}\n\n\tCon la licencia de conducción, podrá conducir todo tipo de camiones sin ningún problema.\n\n{00FFFF}· Precio de la licencia:{FFFFFF}\n\n\tLa licencia tiene un costo de 450 dólares.", "Comprar", "Cancelar");
	    }
	}
    if(dialogid == TraficarArmasD)
	{
	    if(!response) return 1;
	    new i = random(3);
	    SetPlayerCheckpoint(playerid, RecogerTraficarArmas[i][0], RecogerTraficarArmas[i][1], RecogerTraficarArmas[i][2], 3.0);
	    TimerTraficandoArmas[playerid] = SetTimerEx("RecogerTraficandoArmas", (60000*4), 0, "d", playerid);
		SendClientMessage(playerid, AMARILLO, "[NOTA] Vé a recoger las armas, vigila que no te siga nadie y vé lo más rápido posible.");
		SendClientMessage(playerid, CELESTE, "* Si no llegas en 4 minutos, el pedido se anulará automáticamente.");
	    if(listitem == 0)
	    {
	        if(JugadorInfo[playerid][jDinero] < 2000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 2000;
	        TraficandoArmas[playerid] = 2;
    		return 1;
	    }
	    if(listitem == 1)
	    {
	        if(JugadorInfo[playerid][jDinero] < 4000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 4000;
	        TraficandoArmas[playerid] = 3;
    		return 1;
	    }
	    if(listitem == 2)
	    {
	        if(JugadorInfo[playerid][jDinero] < 11000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 11000;
	        TraficandoArmas[playerid] = 4;
    		return 1;
	    }
	    if(listitem == 3)
	    {
	        if(JugadorInfo[playerid][jDinero] < 9000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 9000;
	        TraficandoArmas[playerid] = 5;
    		return 1;
	    }
	    if(listitem == 4)
	    {
	        if(JugadorInfo[playerid][jDinero] < 8000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 8000;
	        TraficandoArmas[playerid] = 6;
    		return 1;
	    }
	    if(listitem == 5)
	    {
	        if(JugadorInfo[playerid][jDinero] < 15000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= 15000;
	        TraficandoArmas[playerid] = 7;
    		return 1;
	    }
	}
    if(dialogid == DIALOG_COMP)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid, DIALOG_COMP+1, DIALOG_STYLE_LIST, "Vinilos (10 productos) $600", "Vinilo 1\nVinilo 2\nVinilo 3\nVolver", "Seleccionar", "Salir");
			case 1: ShowPlayerDialog(playerid, DIALOG_COMP+2, DIALOG_STYLE_LIST, "Tubos de escape (5 productos) $500", "Wheel Arch Alien\nWheel Arch X-Flow\nLocos Low Chromer\nLocos Low Slamin\nUpswept\nTwin\nLarge\nMedium\nSmall\nVolver", "Seleccionar", "Salir");
			case 2: ShowPlayerDialog(playerid, DIALOG_COMP+3, DIALOG_STYLE_LIST, "Parachoques delanteros (10 productos) $300", "Wheel Arch Alien \nWheel Arch X-Flow \nLocos Low Chromer \nLocos Low Slamin \nVolver", "Seleccionar", "Salir");
			case 3: ShowPlayerDialog(playerid, DIALOG_COMP+4, DIALOG_STYLE_LIST, "Parachoques traseros (10 productos) $300", "Wheel Arch Alien\nWheel Arch X-Flow\nLocos Low Chromer \nLocos Low Slamin\nVolver", "Seleccionar", "Salir");
			case 4: ShowPlayerDialog(playerid, DIALOG_COMP+5, DIALOG_STYLE_LIST, "Techos (5 productos) $500", "Wheel Arch Alien Vent\nWheel Arch X-Flow Vent\nLocos Low Hardtop\nLocos Low Softtop\nRoof Scoop\nVolver", "Seleccionar", "Salir");
			case 5:	ShowPlayerDialog(playerid, DIALOG_COMP+6, DIALOG_STYLE_LIST, "Alerones (5 productos) $600", "Wheel Arch Alien\nWheel Arch X-Flow\nPro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\nVolver", "Seleccionar", "Salir");
			case 6:	ShowPlayerDialog(playerid, DIALOG_COMP+7, DIALOG_STYLE_LIST, "Faldones laterales (10 productos) $300", "Wheel Arch Alien\nWheel Arch X-Flow\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nChamp\nVolver", "Seleccionar", "Salir");
			case 7:	ShowPlayerDialog(playerid, DIALOG_COMP+8, DIALOG_STYLE_LIST, "Parrillas(5 productos) $300", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
			case 8: ShowPlayerDialog(playerid, DIALOG_COMP+9, DIALOG_STYLE_LIST, "Llantas: $800", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
			case 9: ShowPlayerDialog(playerid, DIALOG_COMP+10, DIALOG_STYLE_LIST, "Focos antiniebla (5 productos) $650", "Redondos\nCuadrados\nVolver", "Seleccionar", "Salir");
			case 10: ShowPlayerDialog(playerid, DIALOG_COMP+11, DIALOG_STYLE_LIST, "Tomas de aire (5 productos) $300", "Oval\nSquare\nVolver", "Seleccionar", "Salir");
			case 11: ShowPlayerDialog(playerid, DIALOG_COMP+12, DIALOG_STYLE_LIST, "Capós (10 productos) $500", "Champ Scoop\nFury Scoop\nRace Scoop\nWorx Scoop\nVolver", "Seleccionar", "Salir");
			case 12: ShowPlayerDialog(playerid, DIALOG_COMP+13, DIALOG_STYLE_LIST, "Equipos de sonido: $400", "Estereo normal (1000 C/U)\nEstereo X-Flow (5000 C/U)\nEstereo Alien (10000 C/U)\nVolver", "Seleccionar", "Salir");
			case 13: ShowPlayerDialog(playerid, DIALOG_COMP+15, DIALOG_STYLE_LIST, "Alarmas:", "Alarma básica (800 C/U)\nAlarma con GPS (1500 C/U)\nVolver", "Seleccionar", "Salir");
			case 14:
			{
			    if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 15) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 15;
				if(JugadorInfo[playerid][jDinero] < 1000) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				AddVehicleComponent(pvehicle[playerid], 1087);
				SendClientMessage(playerid, CELESTE, "* Has añadido el sistema hidráulico por $1000.");
				JugadorInfo[playerid][jDinero] -= 1000;
			}
		}
	}
	else if(dialogid == DIALOG_COMP+1) //Vinilos 10
	{
		if(pmodelid[playerid] == 483 || pmodelid[playerid] == 534 || pmodelid[playerid] == 535 || pmodelid[playerid] == 536 || pmodelid[playerid] == 558 ||
		pmodelid[playerid] == 559 || pmodelid[playerid] == 560 || pmodelid[playerid] == 561 || pmodelid[playerid] == 562 || pmodelid[playerid] == 565 ||
		pmodelid[playerid] == 567 || pmodelid[playerid] == 575 || pmodelid[playerid] == 576)
		{
			if(listitem < 3)
			{
			    if(JugadorInfo[playerid][jDinero] < 600) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
				ChangeVehiclePaintjob(AutoInfo[pvehicle[playerid]][aID], listitem);
				SendClientMessage(playerid, CELESTE, "* Has puesto el vinilo.");
				JugadorInfo[playerid][jDinero] -= 600;
			}
		}
		else SendClientMessage(playerid, ROJO_OSCURO, "* Los vinilos no cuadran en este vehículo.");
	}
	else if(dialogid == DIALOG_COMP+2) //Tubos de escape 5
	{
	    if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	    NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
	    if(JugadorInfo[playerid][jDinero] < 500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1089);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1065);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1028);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1064);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1034);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1046);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1092);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1066);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1029);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1059);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1037);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1045);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1126);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Remington.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1113);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1104);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Blade.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1129);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1044);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1136);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Chromer en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Locos Low Chromer a este vehículo.");
					}
				}
			}
			case 3:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1127);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Remington.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1114);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1105);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Blade.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1132);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1043);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1135);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Locos Low Slamin en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Locos Low Slamin a este vehículo.");
					}
				}
			}
			case 4:
			{
				if(IsValidComponent(pmodelid[playerid], 1018))
				{
					AddVehicleComponent(pvehicle[playerid], 1018);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Upswept al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Upswept a este vehículo.");
					JugadorInfo[playerid][jDinero] -= 500;
				}
			}
			case 5:
			{
				if(IsValidComponent(pmodelid[playerid], 1019))
				{
					AddVehicleComponent(pvehicle[playerid], 1019);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Twin al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Twin a este vehículo.");
				}
			}
			case 6:
			{
				if(IsValidComponent(pmodelid[playerid], 1020))
				{
					AddVehicleComponent(pvehicle[playerid], 1020);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Large al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Large a este vehículo.");
				}
			}
			case 7:
			{
				if(IsValidComponent(pmodelid[playerid], 1021))
				{
					AddVehicleComponent(pvehicle[playerid], 1021);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Medium al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Medium a este vehículo.");
				}
			}
			case 8:
			{
				if(IsValidComponent(pmodelid[playerid], 1022))
				{
					AddVehicleComponent(pvehicle[playerid], 1022);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el tubo de escape Small al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el tubo de escape Small a este vehículo.");
				}
			}
			case 9:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	else if(dialogid == DIALOG_COMP+3) //Parachoques delanteros
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	   NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
	   if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1166);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1160);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1169);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1155);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1171);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1153);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques delantero Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1165);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1173);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1170);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1157);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1172);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1152);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques delantero Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1179);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Remington.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1115);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1182);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Blade.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1189);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1174);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1191);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Chromer en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques delantero Locos Low Chromer a este vehículo.");
					}
				}
			}
			case 3:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1185);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Remington.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1116);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1181);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Blade.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1188);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1175);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1190);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques delantero Locos Low Slamin en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques delantero Locos Low Slamin a este vehículo.");
					}
				}
			}
			case 4:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	else if(dialogid == DIALOG_COMP+4) //Parachoques traseros
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	    NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
	   if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1168);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1159);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1141);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1154);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1149);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1150);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques trasero Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1167);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1161);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1140);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1156);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1148);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1151);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques trasero Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1180);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Remington.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1109);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1184);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Blade.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1187);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1176);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1192);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Chromer en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques trasero Locos Low Chromer a este vehículo.");
					}
				}
			}
			case 3:
			{
				switch(pmodelid[playerid])
				{
					case 534:
					{
						AddVehicleComponent(pvehicle[playerid], 1178);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Remington.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 535:
					{
						AddVehicleComponent(pvehicle[playerid], 1110);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Slamvan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1183);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Blade.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1186);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1177);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1193);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el parachoques trasero Locos Low Slamin en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el parachoques trasero Locos Low Slamin a este vehículo.");
					}
				}
			}
			case 4:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificiones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	else if(dialogid == DIALOG_COMP+5) //Techos
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	    NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
	    if(JugadorInfo[playerid][jDinero] < 500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1088);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1067);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1032);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1055);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1035);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1054);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el techo Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1091);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1068);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1033);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1061);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1035);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1053);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el techo Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				switch(pmodelid[playerid])
				{
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1128);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Locos Low Chromer en el Blade.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1130);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Locos Low Chromer en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el techo Locos Low Chromer a este vehículo.");
					}
				}
			}
			case 3:
			{
				switch(pmodelid[playerid])
				{
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1103);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Locos Low Slamin en el Blade.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1131);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el techo Locos Low Slamin en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 500;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el techo Locos Low Slamin a este vehículo.");
					}
				}
			}
			case 4:
			{
				if(IsValidComponent(pmodelid[playerid], 1006))
				{
					AddVehicleComponent(pvehicle[playerid], 1006);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el techo Roof Scoop al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el techo Roof Scoop a este vehículo.");
				}
			}
			case 5:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	else if(dialogid == DIALOG_COMP+6) //Alerones
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	    NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
	  if(JugadorInfo[playerid][jDinero] < 600) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1164);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1162);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1138);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1058);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1147);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1049);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1163);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1158);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1139);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1060);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1146);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1050);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 600;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				if(IsValidComponent(pmodelid[playerid], 1000))
				{
					AddVehicleComponent(pvehicle[playerid], 1000);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Pro al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Pro a este vehículo.");
				}
			}
			case 3:
			{
				if(IsValidComponent(pmodelid[playerid], 1001))
				{
					AddVehicleComponent(pvehicle[playerid], 1001);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Win al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Win a este vehículo.");
				}
			}
			case 4:
			{
				if(IsValidComponent(pmodelid[playerid], 1002))
				{
					AddVehicleComponent(pvehicle[playerid], 1002);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Drag al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Drag a este vehículo.");
				}
			}
			case 5:
			{
				if(IsValidComponent(pmodelid[playerid], 1003))
				{
					AddVehicleComponent(pvehicle[playerid], 1003);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Alpha al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Alpha a este vehículo.");
				}
			}
			case 6:
			{
				if(IsValidComponent(pmodelid[playerid], 1014))
				{
					AddVehicleComponent(pvehicle[playerid], 1014);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Champ al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Champ a este vehículo.");
				}
			}
			case 7:
			{
				if(IsValidComponent(pmodelid[playerid], 1015))
				{
					AddVehicleComponent(pvehicle[playerid], 1015);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Race al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Race a este vehículo.");
				}
			}
			case 8:
			{
				if(IsValidComponent(pmodelid[playerid], 1016))
				{
					AddVehicleComponent(pvehicle[playerid], 1016);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Worx al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Worx a este vehículo.");
				}
			}
			case 9:
			{
				if(IsValidComponent(pmodelid[playerid], 1023))
				{
					AddVehicleComponent(pvehicle[playerid], 1023);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el alerón Fury al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 600;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] += 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle el alerón Fury a este vehículo.");
				}
			}
			case 10:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	else if(dialogid == DIALOG_COMP+7) //Faldones
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
       if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1090);
						AddVehicleComponent(pvehicle[playerid], 1094);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1069);
						AddVehicleComponent(pvehicle[playerid], 1071);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1026);
						AddVehicleComponent(pvehicle[playerid], 1027);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1056);
						AddVehicleComponent(pvehicle[playerid], 1062);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1036);
						AddVehicleComponent(pvehicle[playerid], 1040);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1047);
						AddVehicleComponent(pvehicle[playerid], 1051);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch Alien en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Wheel Arch Alien a este vehículo.");
					}
				}
			}
			case 1:
			{
				switch(pmodelid[playerid])
				{
					case 558:
					{
						AddVehicleComponent(pvehicle[playerid], 1093);
						AddVehicleComponent(pvehicle[playerid], 1095);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Uranus.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 559:
					{
						AddVehicleComponent(pvehicle[playerid], 1070);
						AddVehicleComponent(pvehicle[playerid], 1072);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Jester.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 560:
					{
						AddVehicleComponent(pvehicle[playerid], 1030);
						AddVehicleComponent(pvehicle[playerid], 1031);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Sultan.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 561:
					{
						AddVehicleComponent(pvehicle[playerid], 1057);
						AddVehicleComponent(pvehicle[playerid], 1063);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Stratum.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 562:
					{
						AddVehicleComponent(pvehicle[playerid], 1039);
						AddVehicleComponent(pvehicle[playerid], 1041);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Elegy.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 565:
					{
						AddVehicleComponent(pvehicle[playerid], 1048);
						AddVehicleComponent(pvehicle[playerid], 1052);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Wheel Arch X-Flow en el Flash.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Wheel Arch X-Flow a este vehículo.");
					}
				}
			}
			case 2:
			{
				switch(pmodelid[playerid])
				{
					case 536:
					{
						AddVehicleComponent(pvehicle[playerid], 1107);
						AddVehicleComponent(pvehicle[playerid], 1108);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Strip en el Blade.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 567:
					{
						AddVehicleComponent(pvehicle[playerid], 1102);
						AddVehicleComponent(pvehicle[playerid], 1133);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Strip en el Savanna.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 575:
					{
						AddVehicleComponent(pvehicle[playerid], 1042);
						AddVehicleComponent(pvehicle[playerid], 1099);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Strip en el Brodway.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					case 576:
					{
						AddVehicleComponent(pvehicle[playerid], 1134);
						AddVehicleComponent(pvehicle[playerid], 1137);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Strip en el Tornado.");
						JugadorInfo[playerid][jDinero] -= 300;
					}
					default:
					{
						NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
						SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Locos Low Chrome Strip a este vehículo.");
					}
				}
			}
			case 3:
			{
				if(pmodelid[playerid] == 534)
				{
					AddVehicleComponent(pvehicle[playerid], 1101);
					AddVehicleComponent(pvehicle[playerid], 1122);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Flames en el Remington.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Locos Low Chrome Flames a este vehículo.");
				}
			}
			case 4:
			{
				if(pmodelid[playerid] == 534)
				{
					AddVehicleComponent(pvehicle[playerid], 1106);
					AddVehicleComponent(pvehicle[playerid], 1124);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Arches en el Remington.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Locos Low Chrome Arches a este vehículo.");
				}
			}
			case 5:
			{
				if(pmodelid[playerid] == 535)
				{
					AddVehicleComponent(pvehicle[playerid], 1118);
					AddVehicleComponent(pvehicle[playerid], 1120);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome Trim en el Slamvan.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Locos Low Chrome Trim a este vehículo.");
			}
			case 6:
			{
				if(pmodelid[playerid] == 535)
				{
					AddVehicleComponent(pvehicle[playerid], 1119);
					AddVehicleComponent(pvehicle[playerid], 1121);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Locos Low Chrome en el Slamvan.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Locos Low Chrome a este vehículo.");
				}
			}
			case 7:
			{
				if(IsValidComponent(pmodelid[playerid], 1007) && IsValidComponent(pmodelid[playerid], 1017))
				{
					AddVehicleComponent(pvehicle[playerid], 1007);
					AddVehicleComponent(pvehicle[playerid], 1017);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido los faldones Champ al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle los faldones Champ a este vehículo.");
				}
			}
			case 8:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+8) //Parrillas
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
      if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				if(pmodelid[playerid] == 534)
				{
					AddVehicleComponent(pvehicle[playerid], 1100);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido la parrilla Locos Low Chrome Grill en el Remington.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle la parrilla Locos Low Chrome Grill a este vehículo.");
				}
			}
			case 1:
			{
				if(pmodelid[playerid] == 534)
				{
					AddVehicleComponent(pvehicle[playerid], 1123);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido la parrilla Locos Low Chrome Bars en el Remington.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle la parrilla Locos Low Chrome Bars a este vehículo.");
				}
			}
			case 2:
			{
				if(pmodelid[playerid] == 535)
				{
					AddVehicleComponent(pvehicle[playerid], 1117);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, CELESTE, "* Has añadido la parrilla Locos Low Chrome Bullbar en el Slamvan.");
					JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
					SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ponerle la parrilla Locos Low Chrome Bullbar a este vehículo.");
				}
			}
			case 3:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+9) //Llantas
	{
	    if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
       if(JugadorInfo[playerid][jDinero] < 800) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				AddVehicleComponent(pvehicle[playerid], 1025);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Offroad.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 1:
			{
				AddVehicleComponent(pvehicle[playerid], 1074);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Mega.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 2:
			{
				AddVehicleComponent(pvehicle[playerid], 1076);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Wires.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 3:
			{
				AddVehicleComponent(pvehicle[playerid], 1078);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Twist.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 4:
			{
				AddVehicleComponent(pvehicle[playerid], 1081);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Groove.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 5:
			{
				AddVehicleComponent(pvehicle[playerid], 1082);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Import.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 6:
			{
				AddVehicleComponent(pvehicle[playerid], 1085);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Atomic.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 7:
			{
				AddVehicleComponent(pvehicle[playerid], 1096);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Ahab.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 8:
			{
				AddVehicleComponent(pvehicle[playerid], 1097);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Virtual.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 9:
			{
				AddVehicleComponent(pvehicle[playerid], 1098);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Access.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 10:
			{
				AddVehicleComponent(pvehicle[playerid], 1084);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Trance.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 11:
			{
				AddVehicleComponent(pvehicle[playerid], 1073);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Shadow.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 12:
			{
				AddVehicleComponent(pvehicle[playerid], 1075);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Rimshine.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 13:
			{
				AddVehicleComponent(pvehicle[playerid], 1077);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Classic.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 14:
			{
				AddVehicleComponent(pvehicle[playerid], 1079);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Cutter.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 15:
			{
				AddVehicleComponent(pvehicle[playerid], 1080);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Switch.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 16:
			{
				AddVehicleComponent(pvehicle[playerid], 1083);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, CELESTE, "* Has añadido las ruedas Dollar.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
		}
	}
	if(dialogid == DIALOG_COMP+10) //Focos antiniebla
	{
  		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
      if(JugadorInfo[playerid][jDinero] < 650) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				if(IsValidComponent(pmodelid[playerid], 1013))
				{
					AddVehicleComponent(pvehicle[playerid], 1013);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido los faros antiniebla Round al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 650;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los los faros antiniebla Round a este vehículo.");
				}
			}
			case 1:
			{
				if(IsValidComponent(pmodelid[playerid], 1024))
				{
					AddVehicleComponent(pvehicle[playerid], 1024);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido los faros antiniebla Square al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 650;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los los faros antiniebla Square a este vehículo.");
				}
			}
			case 2:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+11) //Tomas de aire
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
       	NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
       if(JugadorInfo[playerid][jDinero] < 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				if(IsValidComponent(pmodelid[playerid], 1142) && IsValidComponent(pmodelid[playerid], 1143))
				{
					AddVehicleComponent(pvehicle[playerid], 1142);
					AddVehicleComponent(pvehicle[playerid], 1143);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido las tomas de aire Oval al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
					SendClientMessage(playerid, CELESTE, "* Has añadido los las tomas de aire Oval a este vehículo.");
				}
			}
			case 1:
			{
				if(IsValidComponent(pmodelid[playerid], 1144) && IsValidComponent(pmodelid[playerid], 1145))
				{
					AddVehicleComponent(pvehicle[playerid], 1144);
					AddVehicleComponent(pvehicle[playerid], 1145);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido las tomas de aire Square al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 300;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 5;
					SendClientMessage(playerid, CELESTE, "* Has añadido los las tomas de aire Square a este vehículo.");
				}
			}
			case 2:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+12) //Capós
	{
		if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
      if(JugadorInfo[playerid][jDinero] < 500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				if(IsValidComponent(pmodelid[playerid], 1004))
				{
					AddVehicleComponent(pvehicle[playerid], 1004);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el capó Champ al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los el capó Champ a este vehículo.");
				}
			}
			case 1:
			{
				if(IsValidComponent(pmodelid[playerid], 1005))
				{
					AddVehicleComponent(pvehicle[playerid], 1005);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el capó Fury al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los el capó Fury a este vehículo.");
				}
			}
			case 2:
			{
				if(IsValidComponent(pmodelid[playerid], 1011))
				{
					AddVehicleComponent(pvehicle[playerid], 1011);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el capó Race al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los el capó Race a este vehículo.");
				}
			}
			case 3:
			{
				if(IsValidComponent(pmodelid[playerid], 1012))
				{
					AddVehicleComponent(pvehicle[playerid], 1012);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid, CELESTE, "* Has añadido el capó Worx  al vehículo.");
				    JugadorInfo[playerid][jDinero] -= 500;
				}
				else
				{
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has añadido los el capó Worx a este vehículo.");
				}
			}
			case 4:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Moficiaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+13) //Equipo de sonido
	{
	    if(JugadorInfo[playerid][jDinero] < 400) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		switch(listitem)
		{
			case 0:
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AutoInfo[pvehicle[playerid]][aEquipo] = 1;
				ActualizarVeh(pvehicle[playerid]);
				SendClientMessage(playerid, CELESTE, "* Has añadido el equipo de sonido estéreo normal.");
				JugadorInfo[playerid][jDinero] -= 400;
			}
			case 1:
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AutoInfo[pvehicle[playerid]][aEquipo] = 2;
				ActualizarVeh(pvehicle[playerid]);
				SendClientMessage(playerid, CELESTE, "* Has añadido el equipo de sonido estéreo X-Flow.");
				JugadorInfo[playerid][jDinero] -= 400;
			}
			case 2:
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AutoInfo[pvehicle[playerid]][aEquipo] = 3;
				ActualizarVeh(pvehicle[playerid]);
				SendClientMessage(playerid, CELESTE, "* Has añadido el equipo de sonido estéreo Alien.");
				JugadorInfo[playerid][jDinero] -= 400;
			}
			case 3:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == DIALOG_COMP+14) //Alarmas
	{
		switch(listitem)
		{
			case 0:
			{
			    if(JugadorInfo[playerid][jDinero] < 800) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AutoInfo[pvehicle[playerid]][aAlarma] = 1;
				ActualizarVeh(pvehicle[playerid]);
				SendClientMessage(playerid, CELESTE, "* Has añadido el sistema de alarma básico.");
				JugadorInfo[playerid][jDinero] -= 800;
			}
			case 1:
			{
			    if(JugadorInfo[playerid][jDinero] < 1500) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AutoInfo[pvehicle[playerid]][aAlarma] = 2;
				ActualizarVeh(pvehicle[playerid]);
				SendClientMessage(playerid, CELESTE, "* Has añadido el sistema de alarma con GPS.");
				JugadorInfo[playerid][jDinero] -= 1500;
			}
			case 2:
			{
				ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Modificaciones", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
			}
		}
	}
    if(dialogid == DIALOG_TUNNING && response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				if(AutoInfo[pvehicle[playerid]][aInhibidor] == 0)
				{
					if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 30) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                    if(JugadorInfo[playerid][jDinero] < 1200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
					SendClientMessage(playerid, CELESTE, "* Has añadido un inhibidor de radares al vehículo.");
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					AutoInfo[pvehicle[playerid]][aInhibidor] = 1;
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 30;
					ActualizarVeh(pvehicle[playerid]);
                    JugadorInfo[playerid][jDinero] -= 1200;
				}
				else SendClientMessage(playerid, ROJO_OSCURO, "* Este vehículo ya tiene un inhibidor de radares instalado.");
			}
			case 1: ShowPlayerDialog(playerid, DIALOG_TUNNING+1, DIALOG_STYLE_LIST, "Menú de óxido nitroso: (15 productos)", "Nitro x2 $350\nNitro x5 $650\nNitro x10 $1300", "Instalar", "Salir");
			case 2: ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Menú de lunas: (10 productos)", "Lunas tintadas $700\nLunas originales $100", "Instalar", "Salir");
		}
	}
	else if(dialogid == DIALOG_TUNNING+1 && response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 15) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                if(JugadorInfo[playerid][jDinero] < 350) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				AddVehicleComponent(pvehicle[playerid], 1009);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 15;
				SendClientMessage(playerid, CELESTE, "* Has añadido el nitro x2 al vehículo.");
				JugadorInfo[playerid][jDinero] -= 350;
			}
			case 1:
			{
				if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 15) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                if(JugadorInfo[playerid][jDinero] < 650) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				AddVehicleComponent(pvehicle[playerid], 1008);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 15;
				SendClientMessage(playerid, CELESTE, "* Has añadido el nitro x5 al vehículo.");
				JugadorInfo[playerid][jDinero] -= 650;
			}
			case 2:
			{
				if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 15) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                if(JugadorInfo[playerid][jDinero] < 1300) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
				AddVehicleComponent(pvehicle[playerid], 1010);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 15;
				SendClientMessage(playerid, CELESTE, "* Has añadido el nitro x10 al vehículo.");
				JugadorInfo[playerid][jDinero] -= 1300;
			}
		}
	}
	else if(dialogid == DIALOG_TUNNING+4 && response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				if(AutoInfo[pvehicle[playerid]][aLunasTintadas] == 0)
				{
					if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                    if(JugadorInfo[playerid][jDinero] < 700) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has tintado las lunas al vehículo.");
					JugadorInfo[playerid][jDinero] -= 700;
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(GetPlayerVehicleID(p) == pvehicle[playerid])
						{
							for(new i = 0; i < MAX_PLAYERS; i++)
							{
								ShowPlayerNameTagForPlayer(i, p, 0);
							}
						}
					}
					AutoInfo[pvehicle[playerid]][aLunasTintadas] = 1;
					ActualizarVeh(pvehicle[playerid]);
				}
				else SendClientMessage(playerid, ROJO_OSCURO, "* Este coche ya tiene las lunas tintadas.");
			}
			case 1:
			{
				if(AutoInfo[pvehicle[playerid]][aLunasTintadas] == 1)
				{
        			if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
                    if(JugadorInfo[playerid][jDinero] < 100) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] -= 10;
					SendClientMessage(playerid, CELESTE, "* Has destintado las lunas al vehículo.");
					JugadorInfo[playerid][jDinero] -= 100;
                    for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(GetPlayerVehicleID(p) == pvehicle[playerid])
						{
							for(new i = 0; i < MAX_PLAYERS; i++)
							{
								ShowPlayerNameTagForPlayer(i, p, 1);
							}
						}
					}
					AutoInfo[pvehicle[playerid]][aLunasTintadas] = 0;
					ActualizarVeh(pvehicle[playerid]);
				}
				else SendClientMessage(playerid, ROJO_OSCURO, "* Este coche ya tiene las lunas originales.");
			}
		}
	}
	if(dialogid == Ruta_Autobus)
	{
	    if(!response) return 1;
	    if(listitem == 0)
	    {
	        RutaAutobus[playerid] = 1;
	        SendClientMessage(playerid, CELESTE, "* Has elegido la ruta central, vé por los checkpoint marcados en el mapa.");
	        SetPlayerCheckpoint(playerid, 1825.1166, -1662.4463, 13.5162, 3.0);
	        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Estación de autobuses.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Alhambra, Idlewood.");
			return 1;
		}
		if(listitem == 1)
	    {
	        RutaAutobus[playerid] = 17;
	        SendClientMessage(playerid, CELESTE, "* Has elegido la ruta oeste, vé por los checkpoint marcados en el mapa.");
	        SetPlayerCheckpoint(playerid, 1385.5265, -1781.1686, 13.5179, 3.0);
	        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Estación de autobuses.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Wells Street, Commerce.");
			return 1;
		}
		if(listitem == 2)
	    {
	        RutaAutobus[playerid] = 36;
	        SendClientMessage(playerid, CELESTE, "* Has elegido la ruta este, vé por los checkpoint marcados en el mapa.");
	        SetPlayerCheckpoint(playerid, 2479.6824,-1734.7070,13.3828, 3.0);
	        SendClientMessage(playerid, BLANCO, "{FFFFFF}Estación actual: {FF6347}Estación de autobuses.{FFFFFF} | {FFFFFF}Próxima estación: {FF6347}Washington Street, Idlewood.");
			return 1;
		}
	}
	if(dialogid == T_Basurero)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 10; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de basurero, usa '/ayuda trabajo' para ver los comandos.");
	    SendClientMessage(playerid, CELESTE, "* Usa /trabajar para comenzar a trabajar..");
	    return 1;
	}
	if(dialogid == T_Licencias)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 6; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de vendedor de documentos ilegales, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Autobus)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 1; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de conductor de autobuses, usa '/ayuda trabajo' para ver los comandos.");
	    SendClientMessage(playerid, CELESTE, "* Recuerda dejar los autobuses en su aparcamiento y en buen estado para cobrar, si no es así, quizás no ganes nada.");
	    return 1;
	}
	if(dialogid == T_Barrendero)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 11; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de barrendero, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Ladron)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 8; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de ladrón, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Abogado)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 3; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de abogado, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Moviles)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 12; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de vendedor de móviles, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Mecanico)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 2; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de mecánico, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == T_Camionero)
	{
	    if(!response) return 1;
	    if(JugadorInfo[playerid][jTrabajo] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un trabajo. Usa /dejartrabajo para renunciar.");
	    JugadorInfo[playerid][jTrabajo] = 14; JugadorInfo[playerid][jTiempoTrabajo] = 1; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has aceptado el trabajo de camionero, usa '/ayuda trabajo' para ver los comandos.");
	    return 1;
	}
	if(dialogid == ARMARIO)
	{
	    new string[256];
	    if(!response) return 1;
	    new coche = EstaEnCasa[playerid];
		if(listitem >= 0 && listitem <= 4)
		{
		    new bol = listitem;
		    if(CasaInfo[coche][cArmID][bol] == 0)
		    {
		        SendClientMessage(playerid, VERDE, "* Este espacio se encuentra vacío.");
		        MostrarArmario(coche, playerid);
		    }
			else
			{
			    if(CasaInfo[coche][cArmID][bol] >= 92 && CasaInfo[coche][cArmID][bol] <= 103 || CasaInfo[coche][cArmID][bol] >= 108 && CasaInfo[coche][cArmID][bol] <= 115)
		    	{
		    	    if(BolsilloID[playerid][11] == 0 && BolsilloID[playerid][12] == 0)
			    	{
			    	    BolsilloID[playerid][11] = CasaInfo[coche][cArmID][bol];
				        BolsilloTipo[playerid][11] = CasaInfo[coche][cArmTipo][bol];
				        BolsilloCantidad[playerid][11] = CasaInfo[coche][cArmCantidad][bol];
				        CasaInfo[coche][cArmID][bol] = 0;
				        CasaInfo[coche][cArmTipo][bol] = 0;
				        CasaInfo[coche][cArmCantidad][bol] = 0;
						if(EsArma(BolsilloID[playerid][11])) GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
				        UpdateAttach(playerid);
						GuardarBolsillos(playerid);
				    	ActualizarArmario(coche);
				        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano derecha.");
						format(string, sizeof(string), "* Sacaste del armario un/a %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
						SendClientMessage(playerid, VERDE, string);
						MostrarArmario(coche, playerid);
			    	}
			    	else return SendClientMessage(playerid, ROJO_OSCURO, "* Para coger dicho objeto necesitas ambas manos vacias.");
		    	}
			    if(BolsilloID[playerid][11] == 0)
			    {
			        if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][11] >= 108 && BolsilloID[playerid][11] <= 115 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103 || BolsilloID[playerid][12] >= 108 && BolsilloID[playerid][12] <= 115) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
           BolsilloID[playerid][11] = CasaInfo[coche][cArmID][bol];
			        BolsilloTipo[playerid][11] = CasaInfo[coche][cArmTipo][bol];
			        BolsilloCantidad[playerid][11] = CasaInfo[coche][cArmCantidad][bol];
			        CasaInfo[coche][cArmID][bol] = 0;
			        CasaInfo[coche][cArmTipo][bol] = 0;
			        CasaInfo[coche][cArmCantidad][bol] = 0;
					if(EsArma(BolsilloID[playerid][11])) GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
			        UpdateAttach(playerid);
					GuardarBolsillos(playerid);
			    	ActualizarArmario(coche);
			        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano derecha.");
					format(string, sizeof(string), "* Sacaste del armario un objeto %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
					SendClientMessage(playerid, VERDE, string);
					MostrarArmario(coche, playerid);
			    }
			    else if(BolsilloID[playerid][12] == 0)
			    {
			        if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][11] >= 108 && BolsilloID[playerid][11] <= 115 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103 || BolsilloID[playerid][12] >= 108 && BolsilloID[playerid][12] <= 115) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
           BolsilloID[playerid][12] = CasaInfo[coche][cArmID][bol];
			        BolsilloTipo[playerid][12] = CasaInfo[coche][cArmTipo][bol];
			        BolsilloCantidad[playerid][12] = CasaInfo[coche][cArmCantidad][bol];
			        CasaInfo[coche][cArmID][bol] = 0;
			        CasaInfo[coche][cArmTipo][bol] = 0;
			        CasaInfo[coche][cArmCantidad][bol] = 0;
			        UpdateAttach(playerid);
					GuardarBolsillos(playerid);
			    	ActualizarArmario(coche);
			        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano izquierda.");
					format(string, sizeof(string), "* Sacaste del bolsillo un objeto %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
					SendClientMessage(playerid, VERDE, string);
					MostrarArmario(coche, playerid);
			    }
			    else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener al menos una mano desocupada.");
			    }
			}
		}
	    else if(listitem == 5)
	    {
			SendClientMessage(playerid, VERDE, "* Este espacio es simplemente decorativo, no tiene ningún otro uso.");
			MostrarArmario(coche, playerid);
			return 1;
		}
		else if(listitem == 6 || listitem == 7)
		{
			new lista;
			if(listitem == 6) lista = 11;
			else if(listitem == 7) lista = 12;
            if(BolsilloID[playerid][lista] == 0)
		    {
		        SendClientMessage(playerid, VERDE, "* Esta mano está desocupada.");
		        MostrarArmario(coche, playerid);
		    }
		    else
		    {
		        for(new i = 0; i < 5; i++)
		        {
		            if(CasaInfo[coche][cArmID][i] == 0)
		            {
		        		CasaInfo[coche][cArmID][i] = BolsilloID[playerid][lista];
		        		CasaInfo[coche][cArmTipo][i] = BolsilloTipo[playerid][lista];
		        		CasaInfo[coche][cArmCantidad][i] = BolsilloCantidad[playerid][lista];
						if(lista == 11) ResetPlayerWeapons(playerid);
  						BolsilloID[playerid][lista] = 0;
		        		BolsilloTipo[playerid][lista] = 0;
		        		BolsilloCantidad[playerid][lista] = 0;
            			QuitarObjeto(playerid, lista);
						GuardarBolsillos(playerid);
						format(string, sizeof(string), "* El objeto ha sido colocado en el armario %d.", i+1);
						SendClientMessage(playerid, CELESTE, string);
						if(lista == 11) format(string, sizeof(string), "* Sacaste del bolsillo derecho un %s que fue guardado en el armario %d.", ObtenerNombreObjeto(CasaInfo[coche][cArmID][i]), i+1);
			            else format(string, sizeof(string), "* Sacaste del bolsillo izquierdo un %s que fue guardado en el armario %d.", ObtenerNombreObjeto(CasaInfo[coche][cArmID][i]), i+1);
						SendClientMessage(playerid, VERDE, string);
						UpdateAttach(playerid);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						if(lista == 11) RemovePlayerAttachedObject(playerid, 0);
						else RemovePlayerAttachedObject(playerid, 1);
      					MostrarArmario(coche, playerid);
						return 1;
					}
		        }
		        SendClientMessage(playerid, ROJO_OSCURO, "* No tienes espacios disponibles para colocar el objeto.");
          		MostrarArmario(coche, playerid);
		    }
		    return 1;
		}
	}
			if(dialogid == dSolicitarADM)
		{
			if(!response) return 1;

			static
			    OldRequest[MAX_PLAYERS];

				new timec = gettime();

			if(timec < OldRequest[playerid]){
				new string[128];
				format(string, sizeof(string), "Debes esperar {ff9c00}%dm %ds {FFFFFF}para enviar otra solicitud.", (OldRequest[playerid]-timec) / 60, (OldRequest[playerid]-timec) % 60 );
				SendClientMessage(playerid, BLANCO, string);
				return 1;
			 	}
			OldRequest[playerid] = timec+(60*3);

			switch(listitem)
			{
			    case 0:
				{
					new string[128];
                    format(string, sizeof(string), "El jugador {72B1FF}%s {FFFFFF}solicita un {FF8600}Ayudante {21D121}(/as %d)", NombreJugador(playerid), playerid);
					ABroadCast(BLANCO, string, 1);
					SetPVarInt(playerid, "SolicitaADM", true);
                    return 1;
				}
			    case 1:
				{
 					new string[128];
                    format(string, sizeof(string), "El jugador {72B1FF}%s {FFFFFF}solicita un {21D121}Moderador (/as %d)", NombreJugador(playerid), playerid);
					ABroadCast(BLANCO, string, 1);
					SetPVarInt(playerid, "SolicitaADM", true);
					return 1;
				}
				case 2:
    			{
    			    new string[128];
                    format(string, sizeof(string), "El jugador {72B1FF}%s {FFFFFF}solicita un {EA7384}Administrador {21D121}(/as %d)", NombreJugador(playerid), playerid);
					ABroadCast(BLANCO, string, 1);
					SetPVarInt(playerid, "SolicitaADM", true);
					return 1;
				}
			}
		}
	if(dialogid == GAS)
	{
	    if(response)
        {
            new string[128];
            new cantidad = strval(inputtext);
            new vehicleid = GetPlayerVehicleID(playerid);
            if((AutoInfo[vehicleid][aGasolina] + cantidad) > 100) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes añadir tantos litros.");
            if(cantidad < 1 || cantidad > 100) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad debe estar entre 1 y 100.");
            new precio;
            if(IsDiesel(vehicleid))
            {
                precio = cantidad * diesel[CualGas[playerid]];
            }
            else
            {
                precio = cantidad * gasolina[CualGas[playerid]];
	        }
	        if(JugadorInfo[playerid][jDinero] < precio) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        JugadorInfo[playerid][jDinero] -= precio;
	        format(string, sizeof(string), "* Has cargado tu vehiculo con %d litros por $%d.", cantidad, precio);
	        SendClientMessage(playerid, CELESTE, string);
	        AutoInfo[vehicleid][aGasolina] += cantidad;
        }
        return 1;
	}
	if(dialogid == EquipoLSFD)
	{
	    if(!response) return 1;
	    new string[128];
	    if(listitem == 0)
	    {
	        DarObjeto(playerid, 42, 1, 500);
	        format(string, sizeof(string), "* %s coge un extintor de las taquillas.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    }
	    else if(listitem == 1)
		{
		    DarObjeto(playerid, 91, 1, 0);
	        format(string, sizeof(string), "* %s coge una palanca de las taquillas.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		}
	}
	/*if(dialogid == DEPOSITAR)
	{
	    new cantidad = strval(inputtext);
	    new string[128];
	    if(!response) return SelectTextDraw(playerid, 0x00FF00FF);
		if(response)
		{
		    if(!IsNumeric(inputtext))
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Ingresa solo números en el menú.");
				SelectTextDraw(playerid, -1);
			}
			else if(strval(inputtext) > JugadorInfo[playerid][jDinero])
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* No tienes esa cantidad para depositar.");
				SelectTextDraw(playerid, -1);
			}
			else
			{
				JugadorInfo[playerid][jDinero] -= cantidad;
				JugadorInfo[playerid][jBanco] += cantidad;
				format(string, sizeof(string), "* Has depositado %d dólares en tu cuenta bancaria.", cantidad);
				SendClientMessage(playerid, CELESTE, string);
				SelectTextDraw(playerid, -1);
			}
		}
		return 1;
	}
	if(dialogid == JUGADORID)
	{
	    new cantidad = strval(inputtext);
	    new string[128];
	    if(!response)
        {
            CantidadTransf[playerid] = 0;
            SelectTextDraw(playerid, -1);
        }
        if(response)
        {
     		if(!IsNumeric(inputtext))
            {
				SendClientMessage(playerid, ROJO_OSCURO, "* Ingresa solo números, (ID) del jugador.");
				SelectTextDraw(playerid, -1);
            }
            else if(!IsPlayerConnected(strval(inputtext)))
            {
                SendClientMessage(playerid, ROJO_OSCURO, "* Ese jugador no está conectado o el ID es incorrecto.");
                SelectTextDraw(playerid, -1);
            }
            else
            {
                JugadorInfo[cantidad][jBanco] += CantidadTransf[playerid];
                JugadorInfo[playerid][jBanco] -= CantidadTransf[playerid];
                format(string, sizeof(string), "* Has enviado %d dólares a %s.", CantidadTransf[playerid], NombreJugador(cantidad));
                SendClientMessage(playerid, CELESTE, string);
                format(string, sizeof(string), "[SMS | Número: 555] Has recibido %d dólares en tu cuenta bancaria a nombre de %s.", CantidadTransf[playerid], NombreJugador(playerid));
                SendClientMessage(cantidad, AMARILLO, string);
                CantidadTransf[playerid] = 0;
                SelectTextDraw(playerid, -1);
            }
        }
        return 1;
	}
	if(dialogid == TRANSFERIR)
	{
	    new cantidad = strval(inputtext);
	    if(!response) return SelectTextDraw(playerid, -1);
        if(response)
        {
            if(!IsNumeric(inputtext))
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Ingresa solo números en el menú.");
				SelectTextDraw(playerid, -1);
			}
			else if(strval(inputtext) > JugadorInfo[playerid][jBanco])
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* No tienes esa cantidad de dinero en el banco.");
				SelectTextDraw(playerid, -1);
			}
            else
            {
                CantidadTransf[playerid] = cantidad;
                ShowPlayerDialog(playerid, JUGADORID, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Santos", "{FFFFFF}Escriba el ID del jugador que desea transferir dinero", "Enviar", "Cancelar");
            }
        }
        return 1;
	}
	if(dialogid == RETIRAR)
	{
	    new cantidad = strval(inputtext);
	    new string[128];
	    if(!response) return SelectTextDraw(playerid, -1);
        if(response)
        {
            if(!IsNumeric(inputtext))
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Ingresa solo números en el menú.");
				SelectTextDraw(playerid, -1);
			}
            else if(strval(inputtext) > JugadorInfo[playerid][jBanco])
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* No posees esa cantidad para retirar.");
				SelectTextDraw(playerid, -1);
			}
			else
			{
            	JugadorInfo[playerid][jDinero] += cantidad;
            	JugadorInfo[playerid][jBanco] -= cantidad;
            	format(string, sizeof(string), "* Has retirado %d dólares de tus fondos bancarios.", cantidad);
				SendClientMessage(playerid, CELESTE, string);
				SelectTextDraw(playerid, -1);
			}
        }
        return 1;
	}*/
 if(dialogid == D_MOSTRARCUENTA)
	{
	    if(!response) return 1;
	    if(listitem == 0)
	    {
	        MostrarPersonaje(playerid, playerid);
			return 1;
		}
		if(listitem == 1)
	    {
	        MostrarDatos(playerid, playerid);
			return 1;
		}
		if(listitem == 2)
	    {
            MostrarPropiedades(playerid, playerid);
			return 1;
		}
	}
	if(dialogid == HistorialPD)
	{
	    if(!response) return 1;

	    LimpiarConsola(playerid, 20);
	    new dialog[2048], string[256], resultado = 0;
		for(new i = 0; i < TotalDelitos; i ++)
		{
		    if(strcmp(DelitoInfo[i][dNombre], inputtext) == 0)
		    {
		        new buscado[4];
	            if(DelitoInfo[i][dResuelto] == 0) buscado = "Sí";
	            else buscado = "No";

			    if(resultado == 0)
			    {
			        format(dialog,sizeof(dialog),"{FFFFFF}Listado de personas buscadas actualmente.\n\n\t{00FFFF}Información:{FFFFFF} %s - {00FFFF}Reportador:{FFFFFF} %s - {00FFFF}Fecha:{FFFFFF} %s - {00FFFF}Buscado:{FFFFFF} %s", DelitoInfo[i][dInformacion], DelitoInfo[i][dReportador], DelitoInfo[i][dFecha], buscado);
			        resultado ++;
					continue;
				}

			    format(string,sizeof(string),"\n\t{00FFFF}Información:{FFFFFF} %s - {00FFFF}Reportador:{FFFFFF} %s - {00FFFF}Fecha:{FFFFFF} %s - {00FFFF}Buscado:{FFFFFF} %s", DelitoInfo[i][dInformacion], DelitoInfo[i][dReportador], DelitoInfo[i][dFecha], buscado);
				strcat(dialog, string);
				resultado ++;
			}
		}
		ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Personas en busca", dialog, "Cerrar", "");
		return 1;
	}
	if(dialogid == RastrearPD)
	{
	    if(!response) return 1;
	    for(new j = 0; j < MAX_PLAYERS; j++)
	    {
		    for(new i = 0; i < 13; i ++)
			{
				if(BolsilloID[j][i] == 104 && BolsilloCantidad[j][i] == strval(inputtext))
				{
				    new Float:Pos[3];
				    ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Rastreador de teléfonos móviles", "\tSe ha marcado la posición del sujeto en el radar.", "Cerrar", "");
					GetPlayerPos(j, Pos[0], Pos[1], Pos[2]);
					SetPlayerCheckpoint(playerid, Pos[0], Pos[1], Pos[2], 5.0);
				    return 1;
				}
			}
		}
		ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Rastreador de teléfonos móviles", "\tEl teléfono móvil indicado está apagado o fuera de cobertura.", "Cerrar", "");
		return 1;
	}
	if(dialogid == MusicaRadio)
	{
	    if(!response) return 1;
		for(new i = 0; i < sizeof(RadioInfo); i++)
		{
		    if(PlayerToPoint(playerid, 3, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]))
		    {
		        RadioInfo[i][rademisora] = listitem;
		    }
		}
	}
    if(dialogid == Musica)
	{
	    if(!response) return 1;
	    if(listitem == 0)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 0;
					StopAudioStreamForPlayer(i);
					return 1;
				}
			}
		}
		if(listitem == 1)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 2;
					PlayAudioStreamForPlayer(i, "http://69.4.238.127/listen.pls");
				}
			}
		}
		if(listitem == 2)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 2;
					PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8000/listen.pls");
				}
			}
		}
		if(listitem == 3)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 3;
					PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8000/listen.pls");
				}
			}
		}
		if(listitem == 4)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 4;
					PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8012/listen.pls");
				}
			}
		}
		if(listitem == 5)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 5;
					PlayAudioStreamForPlayer(i, "http://bluelayershoutcast.com:8036/listen.pls");
				}
			}
		}
		if(listitem == 6)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 6;
					PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8034/listen.pls");
				}
			}
		}
		if(listitem == 7)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 7;
					PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/eurodance.pls");
				}
			}
		}
		if(listitem == 8)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 8;
					PlayAudioStreamForPlayer(i, "http://91.121.18.185:5200/listen.pls");
				}
			}
		}
		if(listitem == 9)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 9;
					PlayAudioStreamForPlayer(i, "http://s5.voscast.com:7938/listen.pls");
				}
			}
		}
		if(listitem == 10)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 10;
					PlayAudioStreamForPlayer(i, "http://funky01.funkyexpress.com.br:8024/listen.pls");
				}
			}
		}
		if(listitem == 11)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 11;
					PlayAudioStreamForPlayer(i, "http://shoutcast4.hardcoreradio.nl/listen.pls");
				}
			}
		}
		if(listitem == 12)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 12;
					PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/hardstyle.pls");
				}
			}
		}
		if(listitem == 13)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 13;
					PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/house.pls");
				}
			}
		}
		if(listitem == 14)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 14;
					PlayAudioStreamForPlayer(i, "http://sc1.abacast.com:8240/listen.pls");
				}
			}
		}
		if(listitem == 15)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 15;
					PlayAudioStreamForPlayer(i, "http://88.191.73.231:5010/listen.pls");
				}
			}
		}
		if(listitem == 16)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 16;
					PlayAudioStreamForPlayer(i, "http://50.7.242.114:7582/listen.pls");
				}
			}
		}
		if(listitem == 17)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 17;
					PlayAudioStreamForPlayer(i, "http://stream2.blackbeats.fm/listen.pls");
				}
			}
		}
		if(listitem == 18)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 18;
					PlayAudioStreamForPlayer(i, "http://80.94.69.106:6694/listen.pls");
				}
			}
		}
		if(listitem == 19)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 19;
					PlayAudioStreamForPlayer(i, "http://69.175.94.98:8138/listen.pls");
				}
			}
		}
		if(listitem == 20)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 20;
					PlayAudioStreamForPlayer(i, "http://bluedog.wavestreamer.com:2260/listen.pls");
				}
			}
		}
		if(listitem == 21)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 21;
					PlayAudioStreamForPlayer(i, "http://stream01.noisefm.pl:8000/listen.pls");
				}
			}
		}
		if(listitem == 22)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 22;
					PlayAudioStreamForPlayer(i, "http://radiolatina.info:7218/listen.pls");
				}
			}
		}
		if(listitem == 23)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 23;
					PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8058/listen.pls");
				}
			}
		}
		if(listitem == 24)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 24;
					PlayAudioStreamForPlayer(i, "http://88.191.229.8:8050/listen.pls");
				}
			}
		}
		if(listitem == 25)
		{
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(GetPlayerInterior(i) == GetPlayerInterior(playerid) && EstaEnNegocio[i] == EstaEnNegocio[playerid])
				{
				    NegocioInfo[EstaEnNegocio[playerid]][nTipo] = 25;
					PlayAudioStreamForPlayer(i, "http://uk1.internet-radio.com:15862/listen.pls");
				}
			}
		}
	}
    if(dialogid == BOLSILLO)
	{
	    new string[256];
	    if(!response) return 1;
		if(listitem >= 0 && listitem <= 9)
		{
		    new bol = listitem+1;
		    if(BolsilloID[playerid][bol] == 0)
		    {
		        SendClientMessage(playerid, ROJO_OSCURO, "* Este bolsillo se encuentra vacío.");
		    }
		    if(BolsilloID[playerid][10] && listitem == 9)
		    {
          		SendClientMessage(playerid, CELESTE, "Este espacio está reservado para la espalda. Usa /sespalda para quitar lo que llevas.");
		    }
			else
			{
			    if(BolsilloID[playerid][bol] >= 92 && BolsilloID[playerid][bol] <= 103)
		    	{
		    	    if(BolsilloID[playerid][11] == 0 && BolsilloID[playerid][12] == 0)
			    	{
			    	    BolsilloID[playerid][11] = BolsilloID[playerid][bol];
				        BolsilloTipo[playerid][11] = BolsilloTipo[playerid][bol];
				        BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][bol];
				        BolsilloID[playerid][bol] = 0;
				        BolsilloTipo[playerid][bol] = 0;
				        BolsilloCantidad[playerid][bol] = 0;
						if(EsArma(BolsilloID[playerid][11])) DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
				        UpdateAttach(playerid);
						GuardarBolsillos(playerid);
				        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano derecha.");
						format(string, sizeof(string), "* Sacaste del bolsillo un objeto %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
						SendClientMessage(playerid, VERDE, string);
						SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
            			GuardoArmaSegura[playerid] = 1;
			    	}
			    	else return SendClientMessage(playerid, ROJO_OSCURO, "* Para coger dicho objeto necesitas ambas manos vacias.");
		    	}
			    if(BolsilloID[playerid][11] == 0)
			    {
			        if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
       				BolsilloID[playerid][11] = BolsilloID[playerid][bol];
			        BolsilloTipo[playerid][11] = BolsilloTipo[playerid][bol];
			        BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][bol];
			        BolsilloID[playerid][bol] = 0;
			        BolsilloTipo[playerid][bol] = 0;
			        BolsilloCantidad[playerid][bol] = 0;
					if(EsArma(BolsilloID[playerid][11])) DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
			        UpdateAttach(playerid);
					GuardarBolsillos(playerid);
			        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano derecha.");
					format(string, sizeof(string), "* Sacaste del bolsillo un objeto %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
					SendClientMessage(playerid, VERDE, string);
					SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
  					GuardoArmaSegura[playerid] = 1;
			    }
			    else if(BolsilloID[playerid][12] == 0)
			    {
			        if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
			        BolsilloID[playerid][12] = BolsilloID[playerid][bol];
			        BolsilloTipo[playerid][12] = BolsilloTipo[playerid][bol];
			        BolsilloCantidad[playerid][12] = BolsilloCantidad[playerid][bol];
			        BolsilloID[playerid][bol] = 0;
			        BolsilloTipo[playerid][bol] = 0;
			        BolsilloCantidad[playerid][bol] = 0;
			        UpdateAttach(playerid);
					GuardarBolsillos(playerid);
			        SendClientMessage(playerid, CELESTE, "* El objeto ha sido colocado en tu mano izquierda.");
					format(string, sizeof(string), "* Sacaste del bolsillo un objeto %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
					SendClientMessage(playerid, VERDE, string);
					SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
  					GuardoArmaSegura[playerid] = 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener al menos una mano desocupada.");
			    }
			}
		}
		else if(listitem == 10)
	    {
			SendClientMessage(playerid, CELESTE, "Este slot es solo decorativo.");
			MostrarBolsillos(playerid, playerid);
			return 1;
		}
		else
		{
			if(listitem < 0) return 1;

		    if(BolsilloID[playerid][listitem] == 0)
		    {
		        SendClientMessage(playerid, ROJO_OSCURO, "* Esta mano está desocupada.");
		    }
		    else
		    {
		        if(ObjetoPesado(BolsilloID[playerid][listitem])) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes guardar este objeto en tu bolsillo.");
          		for(new i = 1; i < 11; i++)
		        {
		            if(BolsilloID[playerid][i] == 0)
		            {
		        		BolsilloID[playerid][i] = BolsilloID[playerid][listitem];
		        		BolsilloTipo[playerid][i] = BolsilloTipo[playerid][listitem];
		        		BolsilloCantidad[playerid][i] = BolsilloCantidad[playerid][listitem];
						if(listitem == 11) RemoverArmas(playerid);
		        		BolsilloID[playerid][listitem] = 0;
		        		BolsilloTipo[playerid][listitem] = 0;
		        		BolsilloCantidad[playerid][listitem] = 0;
						GuardarBolsillos(playerid);
						format(string, sizeof(string), "* El objeto ha sido colocado en el bolsillo %d.", i);
						SendClientMessage(playerid, CELESTE, string);
						if(listitem == 11) format(string, sizeof(string), "* Sacaste del bolsillo derecho un %s que fue guardado en el bolsillo %d.", ObtenerNombreObjeto(BolsilloID[playerid][i]), i);
			            else format(string, sizeof(string), "* Sacaste del bolsillo izquierdo un %s que fue guardado en el bolsillo %d.", ObtenerNombreObjeto(BolsilloID[playerid][i]), i);
						SendClientMessage(playerid, VERDE, string);
						UpdateAttach(playerid);
						SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
  						GuardoArmaSegura[playerid] = 1;
						return 1;
					}
		        }
		        SendClientMessage(playerid, ROJO_OSCURO, "* No tienes bolsillos disponibles para colocar el objeto.");
		    }
		    return 1;
		}
	}
	if(dialogid == RentarVeh)
	{
	    if(!response) return 1;
	    if(VehRentado[playerid] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un vehículo alquilado.");
	    if(VehAlquilado[GetPlayerVehicleID(playerid)] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Este vehículo ya está alquilado.");
	    if(JugadorInfo[playerid][jDinero] < 275) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	    JugadorInfo[playerid][jDinero] -= 275;
		VehAlquilado[GetPlayerVehicleID(playerid)] = 1;
		VehRentado[playerid] = AutoInfo[GetPlayerVehicleID(playerid)][aID];
		new string[92];
		format(string, sizeof(string), "* Has alquilado el vehículo con matrícula LS-%d, recuerda entregarlo en este mismo punto.", AutoInfo[GetPlayerVehicleID(playerid)][aID]);
		SendClientMessage(playerid, CELESTE, string);
		SendClientMessage(playerid, CELESTE, "* Recuerda dejarlo en perfecto estado, si no es así, no te devolveremos los 200 dólares de fianza. Para dejar usa '/noalquilar coche'");
    }
	if(dialogid == AvisoPCU)
	{
	    Expulsar(playerid, "BOT", "Cuenta inexistente");
	}
	if(dialogid == Acceso)
	{
	    if(response)
		{
		    if(!strlen(inputtext))
			{
				new string[196];
		    	format(string, sizeof(string), "{FF0000}Contraseña incorrecta.\n\n{FFFFFF}Bienvenido nuevamente {00FFFF}%s{FFFFFF}.\n\nIntroduce tu contraseña a continuación para acceder al servidor.",NombreJugador(playerid));
	    		ShowPlayerDialog(playerid, Acceso, DIALOG_STYLE_PASSWORD, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Contraseña", string, "Entrar", "Cancelar");
		   		return 1;
      		}

      		if(PassValida(playerid, inputtext) && (strlen(inputtext) > 0))
			{
			    SendClientMessage(playerid, GRIS, "Espera mientras validamos tu cuenta...");
			    
			    StopAudioStreamForPlayer(playerid);
				//LOGIN
			    new query[800], temp[128];
				strcat(query, "SELECT `id`,");
				strcat(query, "`Admin`,");
				strcat(query, "`Negocio`,");
				strcat(query, "`Baneado`,");
				strcat(query, "`TBan`,");
				strcat(query, "`Skin`,");
				strcat(query, "`Vida`,");
				strcat(query, "`Chaleco`,");
				strcat(query, "`PlacaPolicia`,");
				strcat(query, "`Advertencias`,");
				strcat(query, "`Almacen`,");
				strcat(query, "`Taller`,");
				strcat(query, "`HorasJugadas`,");
				strcat(query, "`CuentaPrincipal`,");
				strcat(query, "`Dinero`,");
				strcat(query, "`Posiciones`,");
				strcat(query, "`Datos`,");
				strcat(query, "`Casas`,");
				strcat(query, "`Coches`,");
				strcat(query, "`Faccion`,");
				strcat(query, "`Carcel`,");
				strcat(query, "`Medicos`,");
				strcat(query, "`Necesidades`,");
				strcat(query, "`Documentacion`,");
				strcat(query, "`Trabajo`,");
				strcat(query, "`Servicio`,");
				strcat(query, "`Licencias`,");
				strcat(query, "`DocFalsa`,");
				strcat(query, "`LicenciasFalsas`,");
				strcat(query, "`Lenguajes`,");
				strcat(query, "`Premium`,");
				strcat(query, "`Habilidad`,");
				strcat(query, "`PuntosRol`,");
				strcat(query, "`Heridas`,");
				strcat(query, "`Fisico`,");
				strcat(query, "`CuentasBancarias`,");
				strcat(query, "`BolsilloID`,");
				strcat(query, "`BolsilloCantidad`,");
				strcat(query, "`BolsilloTipo`,");
				strcat(query, "`Apodo`");
				strcat(query, " FROM `usuarios`");
				strcat_format(query, sizeof(query), " WHERE `Nombre` = '%q' LIMIT 1", pNameEx(playerid));
				mysql_query(database, query, true);

				JugadorInfo[playerid][jSQLID] = cache_get_row_int(0, 0, database);
				JugadorInfo[playerid][jAdmin] = cache_get_row_int(0, 1, database);
				JugadorInfo[playerid][jNegocio] = cache_get_row_int(0, 2, database);
				JugadorInfo[playerid][jBaneado] = cache_get_row_int(0, 3, database);
				JugadorInfo[playerid][jTBan] = cache_get_row_int(0, 4, database);
				JugadorInfo[playerid][jRopa] = cache_get_row_int(0, 5, database);
				JugadorInfo[playerid][jVida] = cache_get_row_float(0, 6, database);
				JugadorInfo[playerid][jChaleco] = cache_get_row_float(0, 7, database);
				JugadorInfo[playerid][jPlaca] = cache_get_row_int(0, 8, database);
				JugadorInfo[playerid][jAdvertencias] = cache_get_row_int(0, 9, database);
				JugadorInfo[playerid][jAlmacen] = cache_get_row_int(0, 10, database);
				JugadorInfo[playerid][jTaller] = cache_get_row_int(0, 11, database);
				JugadorInfo[playerid][jHorasJugadas] = cache_get_row_int(0, 12, database);
				JugadorInfo[playerid][jCuentaPrincipal] = cache_get_row_int(0, 13, database);

				JugadorInfo[playerid][jDinero] = cache_get_row_int(0, 14, database);
				GivePlayerMoney(playerid, JugadorInfo[playerid][jDinero]);

				cache_get_row(0, 15, temp, database);
				sscanf(temp, "p<,>ffffii", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);

				SetPlayerInterior(playerid, JugadorInfo[playerid][jInt]);
				SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][jVw]);

				cache_get_row(0, 16, temp, database);
				sscanf(temp, "p<,>iiiii", JugadorInfo[playerid][jEdad], JugadorInfo[playerid][jSexo], JugadorInfo[playerid][jNivel], JugadorInfo[playerid][jRespeto], JugadorInfo[playerid][jPayDay]);

				cache_get_row(0, 17, temp, database);
				sscanf(temp, "p<,>iii", JugadorInfo[playerid][jCasa], JugadorInfo[playerid][jCasaPrestada], JugadorInfo[playerid][jCasaAlq]);

				cache_get_row(0, 18, temp, database);
				sscanf(temp, "p<,>iiiiii", JugadorInfo[playerid][jCoches][0], JugadorInfo[playerid][jCoches][1], JugadorInfo[playerid][jCoches][2], JugadorInfo[playerid][jCochesPrestado][0], JugadorInfo[playerid][jCochesPrestado][1], JugadorInfo[playerid][jCochesPrestado][2]);

				cache_get_row(0, 19, temp, database);
				sscanf(temp, "p<,>iii", JugadorInfo[playerid][jLider], JugadorInfo[playerid][jMiembro], JugadorInfo[playerid][jRango]);

				cache_get_row(0, 20, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jEncarcelado], JugadorInfo[playerid][jTiempoEncarcelado]);

				cache_get_row(0, 21, temp, database);
				sscanf(temp, "p<,>iii", JugadorInfo[playerid][jHerido], JugadorInfo[playerid][jEnfermedad], JugadorInfo[playerid][jReceta]);

				cache_get_row(0, 22, temp, database);
				sscanf(temp, "p<,>iii", JugadorInfo[playerid][jHambre], JugadorInfo[playerid][jEnergia], JugadorInfo[playerid][jAlcohol]);

				cache_get_row(0, 23, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jDNI], JugadorInfo[playerid][jTiempoDNI]);

				cache_get_row(0, 24, temp, database);
				sscanf(temp, "p<,>iii", JugadorInfo[playerid][jTrabajo], JugadorInfo[playerid][jTiempoTrabajo], JugadorInfo[playerid][jUltimoTrabajo]);

				cache_get_row(0, 25, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jServicio], JugadorInfo[playerid][jUniforme]);

				cache_get_row(0, 26, temp, database);
				sscanf(temp, "p<,>iiiiiiii", JugadorInfo[playerid][jLicencias][0], JugadorInfo[playerid][jLicencias][1], JugadorInfo[playerid][jLicencias][2], JugadorInfo[playerid][jLicencias][3], JugadorInfo[playerid][jLicencias][4], JugadorInfo[playerid][jLicencias][5], JugadorInfo[playerid][jLicencias][6], JugadorInfo[playerid][jLicencias][7]);

				cache_get_row(0, 27, temp, database);
				sscanf(temp, "p<,>s[35]i", JugadorInfo[playerid][jNombreFalso], JugadorInfo[playerid][jDNIFalso]);

				cache_get_row(0, 28, temp, database);
				sscanf(temp, "p<,>iiiiiiii", JugadorInfo[playerid][jFLicencia][0], JugadorInfo[playerid][jFLicencia][1], JugadorInfo[playerid][jFLicencia][2], JugadorInfo[playerid][jFLicencia][3], JugadorInfo[playerid][jFLicencia][4], JugadorInfo[playerid][jFLicencia][5], JugadorInfo[playerid][jFLicencia][6], JugadorInfo[playerid][jFLicencia][7]);

				cache_get_row(0, 29, temp, database);
				sscanf(temp, "p<,>iiiiiiiiiiiiiii", JugadorInfo[playerid][jBiblio], JugadorInfo[playerid][jIdiomas][0], JugadorInfo[playerid][jIdiomas][1], JugadorInfo[playerid][jIdiomas][2], JugadorInfo[playerid][jIdiomas][3], JugadorInfo[playerid][jIdiomas][4], JugadorInfo[playerid][jIdiomas][5], JugadorInfo[playerid][jIdiomas][6], JugadorInfo[playerid][jEIdiomas][0], JugadorInfo[playerid][jEIdiomas][1], JugadorInfo[playerid][jEIdiomas][2], JugadorInfo[playerid][jEIdiomas][3], JugadorInfo[playerid][jEIdiomas][4], JugadorInfo[playerid][jEIdiomas][5], JugadorInfo[playerid][jEIdiomas][6]);

				cache_get_row(0, 30, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jPremium], JugadorInfo[playerid][jTiempoPremium]);

				cache_get_row(0, 31, temp, database);
				sscanf(temp, "p<,>iiiiiiiiii", JugadorInfo[playerid][jHabilidad][0], JugadorInfo[playerid][jHabilidad][1], JugadorInfo[playerid][jHabilidad][2], JugadorInfo[playerid][jHabilidad][3], JugadorInfo[playerid][jHabilidad][4], JugadorInfo[playerid][jHabilidad][5], JugadorInfo[playerid][jHabilidad][6], JugadorInfo[playerid][jHabilidad][7], JugadorInfo[playerid][jHabilidad][8], JugadorInfo[playerid][jHabilidad][9]);

				cache_get_row(0, 32, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jPuntosRol][0], JugadorInfo[playerid][jPuntosRol][1]);

				cache_get_row(0, 33, temp, database);
				sscanf(temp, "p<,>iiiiiii", JugadorInfo[playerid][jHeridas][0], JugadorInfo[playerid][jHeridas][1], JugadorInfo[playerid][jHeridas][2], JugadorInfo[playerid][jHeridas][3], JugadorInfo[playerid][jHeridas][4], JugadorInfo[playerid][jHeridas][5], JugadorInfo[playerid][jHeridas][6]);

				cache_get_row(0, 34, temp, database);
				sscanf(temp, "p<,>ii", JugadorInfo[playerid][jFuerza], JugadorInfo[playerid][jResistencia]);

				cache_get_row(0, 36, temp, database);
				sscanf(temp, "p<,>iiiii", JugadorInfo[playerid][jCuentasBancarias][0], JugadorInfo[playerid][jCuentasBancarias][1], JugadorInfo[playerid][jCuentasBancarias][2], JugadorInfo[playerid][jCuentasBancarias][3], JugadorInfo[playerid][jCuentasBancarias][4]);

				cache_get_row(0, 36, temp, database);
				sscanf(temp, "p<,>iiiiiiiiiiiii", BolsilloID[playerid][0], BolsilloID[playerid][1], BolsilloID[playerid][2], BolsilloID[playerid][3], BolsilloID[playerid][4], BolsilloID[playerid][5], BolsilloID[playerid][6], BolsilloID[playerid][7], BolsilloID[playerid][8], BolsilloID[playerid][9], BolsilloID[playerid][10], BolsilloID[playerid][11], BolsilloID[playerid][12]);

				cache_get_row(0, 37, temp, database);
				sscanf(temp, "p<,>iiiiiiiiiiiii", BolsilloCantidad[playerid][0], BolsilloCantidad[playerid][1], BolsilloCantidad[playerid][2], BolsilloCantidad[playerid][3], BolsilloCantidad[playerid][4], BolsilloCantidad[playerid][5], BolsilloCantidad[playerid][6], BolsilloCantidad[playerid][7], BolsilloCantidad[playerid][8], BolsilloCantidad[playerid][9], BolsilloCantidad[playerid][10], BolsilloCantidad[playerid][11], BolsilloCantidad[playerid][12]);

				cache_get_row(0, 38, temp, database);
				sscanf(temp, "p<,>iiiiiiiiiiiii", BolsilloTipo[playerid][0], BolsilloTipo[playerid][1], BolsilloTipo[playerid][2], BolsilloTipo[playerid][3], BolsilloTipo[playerid][4], BolsilloTipo[playerid][5], BolsilloTipo[playerid][6], BolsilloTipo[playerid][7], BolsilloTipo[playerid][8], BolsilloTipo[playerid][9], BolsilloTipo[playerid][10], BolsilloTipo[playerid][11], BolsilloTipo[playerid][12]);

				cache_get_row(0, 38 /*39*/, JugadorInfo[playerid][jApodo], database);

				/*printf("%d", JugadorInfo[playerid][jSQLID]);
				printf("%d", JugadorInfo[playerid][jAdmin]);
				printf("%d", JugadorInfo[playerid][jNegocio]);
				printf("%d", JugadorInfo[playerid][jBaneado]);
				printf("%d", JugadorInfo[playerid][jTBan]);
				printf("%d", JugadorInfo[playerid][jRopa]);
				printf("%f", JugadorInfo[playerid][jVida]);
				printf("%f", JugadorInfo[playerid][jChaleco]);
				printf("%d", JugadorInfo[playerid][jPlaca]);
				printf("%d", JugadorInfo[playerid][jAdvertencias]);
				printf("%d", JugadorInfo[playerid][jAlmacen]);
				printf("%d", JugadorInfo[playerid][jTaller]);
				printf("%d", JugadorInfo[playerid][jHorasJugadas]);
				//printf("%d", JugadorInfo[playerid][jCuentaPrincipal]);
				printf("%d", JugadorInfo[playerid][jDinero]);
				printf("%f, %f, %f, %f, %d, %d", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);
				printf("%d, %d, %d, %d, %d", JugadorInfo[playerid][jEdad], JugadorInfo[playerid][jSexo], JugadorInfo[playerid][jNivel], JugadorInfo[playerid][jRespeto], JugadorInfo[playerid][jPayDay]);
				printf("%d, %d, %d", JugadorInfo[playerid][jCasa], JugadorInfo[playerid][jCasaPrestada], JugadorInfo[playerid][jCasaAlq]);
				printf("%d, %d, %d, %d, %d, %d", JugadorInfo[playerid][jCoches][0], JugadorInfo[playerid][jCoches][1], JugadorInfo[playerid][jCoches][2], JugadorInfo[playerid][jCochesPrestado][0], JugadorInfo[playerid][jCochesPrestado][1], JugadorInfo[playerid][jCochesPrestado][2]);
				printf("%d, %d, %d", JugadorInfo[playerid][jLider], JugadorInfo[playerid][jMiembro], JugadorInfo[playerid][jRango]);
				printf("%d, %d", JugadorInfo[playerid][jEncarcelado], JugadorInfo[playerid][jTiempoEncarcelado]);
				printf("%d, %d, %d", JugadorInfo[playerid][jHerido], JugadorInfo[playerid][jEnfermedad], JugadorInfo[playerid][jReceta]);
				printf("%d, %d, %d", JugadorInfo[playerid][jHambre], JugadorInfo[playerid][jEnergia], JugadorInfo[playerid][jAlcohol]);
				printf("%d, %d", JugadorInfo[playerid][jDNI], JugadorInfo[playerid][jTiempoDNI]);
				printf("%d, %d, %d", JugadorInfo[playerid][jTrabajo], JugadorInfo[playerid][jTiempoTrabajo], JugadorInfo[playerid][jUltimoTrabajo]);
				printf("%d, %d", JugadorInfo[playerid][jServicio], JugadorInfo[playerid][jUniforme]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d", JugadorInfo[playerid][jLicencias][0], JugadorInfo[playerid][jLicencias][1], JugadorInfo[playerid][jLicencias][2], JugadorInfo[playerid][jLicencias][3], JugadorInfo[playerid][jLicencias][4], JugadorInfo[playerid][jLicencias][5], JugadorInfo[playerid][jLicencias][6], JugadorInfo[playerid][jLicencias][7]);
				printf("%s, %d", JugadorInfo[playerid][jNombreFalso], JugadorInfo[playerid][jDNIFalso]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d,", JugadorInfo[playerid][jFLicencia][0], JugadorInfo[playerid][jFLicencia][1], JugadorInfo[playerid][jFLicencia][2], JugadorInfo[playerid][jFLicencia][3], JugadorInfo[playerid][jFLicencia][4], JugadorInfo[playerid][jFLicencia][5], JugadorInfo[playerid][jFLicencia][6], JugadorInfo[playerid][jFLicencia][7]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", JugadorInfo[playerid][jBiblio], JugadorInfo[playerid][jIdiomas][0], JugadorInfo[playerid][jIdiomas][1], JugadorInfo[playerid][jIdiomas][2], JugadorInfo[playerid][jIdiomas][3], JugadorInfo[playerid][jIdiomas][4], JugadorInfo[playerid][jIdiomas][5], JugadorInfo[playerid][jIdiomas][6], JugadorInfo[playerid][jEIdiomas][0], JugadorInfo[playerid][jEIdiomas][1], JugadorInfo[playerid][jEIdiomas][2], JugadorInfo[playerid][jEIdiomas][3], JugadorInfo[playerid][jEIdiomas][4], JugadorInfo[playerid][jEIdiomas][5], JugadorInfo[playerid][jEIdiomas][6]);
				printf("%d, %d", JugadorInfo[playerid][jPremium], JugadorInfo[playerid][jTiempoPremium]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d, %d, %d", JugadorInfo[playerid][jHabilidad][0], JugadorInfo[playerid][jHabilidad][1], JugadorInfo[playerid][jHabilidad][2], JugadorInfo[playerid][jHabilidad][3], JugadorInfo[playerid][jHabilidad][4], JugadorInfo[playerid][jHabilidad][5], JugadorInfo[playerid][jHabilidad][6], JugadorInfo[playerid][jHabilidad][7], JugadorInfo[playerid][jHabilidad][8], JugadorInfo[playerid][jHabilidad][9]);
				printf("%d, %d", JugadorInfo[playerid][jPuntosRol][0], JugadorInfo[playerid][jPuntosRol][1]);
				printf("%d, %d, %d, %d, %d, %d, %d", JugadorInfo[playerid][jHeridas][0], JugadorInfo[playerid][jHeridas][1], JugadorInfo[playerid][jHeridas][2], JugadorInfo[playerid][jHeridas][3], JugadorInfo[playerid][jHeridas][4], JugadorInfo[playerid][jHeridas][5], JugadorInfo[playerid][jHeridas][6]);
				printf("%d, %d", JugadorInfo[playerid][jFuerza], JugadorInfo[playerid][jResistencia]);
				printf("%d, %d, %d, %d, %d", JugadorInfo[playerid][jCuentasBancarias][0], JugadorInfo[playerid][jCuentasBancarias][1], JugadorInfo[playerid][jCuentasBancarias][2], JugadorInfo[playerid][jCuentasBancarias][3], JugadorInfo[playerid][jCuentasBancarias][4]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", BolsilloID[playerid][0], BolsilloID[playerid][1], BolsilloID[playerid][2], BolsilloID[playerid][3], BolsilloID[playerid][4], BolsilloID[playerid][5], BolsilloID[playerid][6], BolsilloID[playerid][7], BolsilloID[playerid][8], BolsilloID[playerid][9], BolsilloID[playerid][10], BolsilloID[playerid][11], BolsilloID[playerid][12]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", BolsilloCantidad[playerid][0], BolsilloCantidad[playerid][1], BolsilloCantidad[playerid][2], BolsilloCantidad[playerid][3], BolsilloCantidad[playerid][4], BolsilloCantidad[playerid][5], BolsilloCantidad[playerid][6], BolsilloCantidad[playerid][7], BolsilloCantidad[playerid][8], BolsilloCantidad[playerid][9], BolsilloCantidad[playerid][10], BolsilloCantidad[playerid][11], BolsilloCantidad[playerid][12]);
				printf("%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", BolsilloTipo[playerid][0], BolsilloTipo[playerid][1], BolsilloTipo[playerid][2], BolsilloTipo[playerid][3], BolsilloTipo[playerid][4], BolsilloTipo[playerid][5], BolsilloTipo[playerid][6], BolsilloTipo[playerid][7], BolsilloTipo[playerid][8], BolsilloTipo[playerid][9], BolsilloTipo[playerid][10], BolsilloTipo[playerid][11], BolsilloTipo[playerid][12]);
				printf("%s", JugadorInfo[playerid][jApodo]);*/

				printf("LOGUEA: %f, %f, %f, %f, %d, %d", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);

				LoggedIn(playerid);
				return 1;
			}

			IntentoDeLogear[playerid] += 1;

			new string[196];
	    	format(string, sizeof(string), "{FF0000}Contraseña incorrecta.\n\n{FFFFFF}Bienvenido nuevamente {00FFFF}%s{FFFFFF}.\n\nIntroduce tu contraseña a continuación para acceder al servidor.",NombreJugador(playerid));
    		ShowPlayerDialog(playerid, Acceso, DIALOG_STYLE_PASSWORD, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Contraseña", string, "Entrar", "Cancelar");

	   		if(IntentoDeLogear[playerid] == 3)
			{
			    format(string, sizeof(string), "{FFFFFF}Has sido expulsado del servidor "NOMBRE_COMUNIDAD" como medida de seguridad.\n\nSi no recuerdas la contraseña de tu cuenta, dirígete al soporte en "PAGINA_WEB"");
                ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Expulsado", string, "Cerrar", "");
				Expulsar(playerid, "BOT", "Exceder el limite intentos de login");
			}
		}
		else
		{
      		new string[256];
		    format(string, sizeof(string), "{FFFFFF}Has sido expulsado por cerrar el acceso a "NOMBRE_COMUNIDAD".\nRecuerda que es obligatorio rellenar la contraseña para acceder.");
            ShowPlayerDialog(playerid, 32000, DIALOG_STYLE_MSGBOX, "{00FFFF}Acceso "NOMBRE_COMUNIDAD" - {FFFFFF}Expulsado", string, "Cerrar", "");
			Expulsar(playerid, "BOT", "No rellenar contraseña en login");
		}
	}
	if(dialogid == DCCB_Informacion)
	{
	    if(!response) { return ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); }
	    ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir");
	    return 1;
	}
	if(dialogid == DCCB_Ingresar)
	{
	    if(!response) { return ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); }
	    new sql_in[256], row_in[256], datos_in[9][64], string[126], mensaje[256], temp_data[128];
        format(sql_in, sizeof(sql_in), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, sql_in, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row_in, "|");
				strcat(row_in, temp_data);
			}
			else
			{
				strcat(row_in, temp_data);
			}
		}

		split(row_in, datos_in, '|');
		if(strval(inputtext) > JugadorInfo[playerid][jDinero]) { format(string, sizeof(string), "{FF0000}No tienes tanto dinero.\n\n{FFFFFF}Introduzca a continuación la cantidad de dinero que desea ingresar."); ShowPlayerDialog(playerid, DCCB_Ingresar, DIALOG_STYLE_INPUT, "{FFFFFF}Ingresar dinero", string, "Ingresar", "Volver"); return 1; }
		if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		JugadorInfo[playerid][jDinero] -= strval(inputtext);
		format(sql_in, sizeof(sql_in), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(datos_in[3]) + strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, sql_in, false);
		format(string, sizeof(string), "{FFFFFF}Has ingresado %d dólares.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(datos_in[3]) + strval(inputtext)));
		ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
	  	format(mensaje, sizeof(mensaje), "%s ha ingresado %d dólares", NombreJugador(playerid), strval(inputtext));
//		InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == DCCB_Retirar)
	{
	    if(!response) { return ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); }
	    new sql_re[256], row_re[256], datos_re[9][64], string[526], mensaje[126], temp_data[128];
        format(sql_re, sizeof(sql_re), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, sql_re, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row_re, "|");
				strcat(row_re, temp_data);
			}
			else
			{
				strcat(row_re, temp_data);
			}
		}

		split(row_re, datos_re, '|');
		if(strval(inputtext) > strval(datos_re[3])) { format(string, sizeof(string), "{FF0000}No tienes tanto saldo en la cuenta.\n\n{FFFFFF}Introduzca a continuación la cantidad de dinero que desea retirar.\n\nSaldo disponible: %d", strval(datos_re[3])); ShowPlayerDialog(playerid, DCCB_Retirar, DIALOG_STYLE_INPUT, "{FFFFFF}Retirar dinero", string, "Retirar", "Volver"); return 1; }
        if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		JugadorInfo[playerid][jDinero] += strval(inputtext);
		format(sql_re, sizeof(sql_re), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(datos_re[3]) - strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, sql_re, false);
		format(string, sizeof(string), "{FFFFFF}Has retirado %d dólares.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(datos_re[3]) - strval(inputtext)));
		ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		format(mensaje, sizeof(mensaje), "%s ha retirado %d dólares", NombreJugador(playerid), strval(inputtext));
//		InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == DCCB_TransferirD)
	{
	    if(!response) { CuentaATransferir[playerid] = NOEXISTE; ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); return 1; }
	    new sql_tr[256], row_tr[256], datos_tr[9][64], string[126], mensaje[126], temp_data[128];
        format(sql_tr, sizeof(sql_tr), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, sql_tr, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row_tr, "|");
				strcat(row_tr, temp_data);
			}
			else
			{
				strcat(row_tr, temp_data);
			}
		}

		split(row_tr, datos_tr, '|');
		if(strval(inputtext) > strval(datos_tr[3])) return ShowPlayerDialog(playerid, DCCB_TransferirD, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", "{FF0000}No tiene suficiente dinero en su cuenta.\n\n{FFFFFF}Introduzca la cantidad que desea transferir:", "Transferir", "Volver");
        if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		format(sql_re, sizeof(sql_re), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(datos_tr[3]) - strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, sql_re, false);
		format(sql_re, sizeof(sql_re), "UPDATE cuentasbancarias SET saldo = (saldo + %d) WHERE numerocuenta = %d", strval(inputtext), CuentaATransferir[playerid]);
		mysql_query(database, sql_re, false);
		format(string, sizeof(string), "{FFFFFF}Has transferido {FF8000}%d dólares{FFFFFF}.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(datos_tr[3]) - strval(inputtext)));
		ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		format(mensaje, sizeof(mensaje), "%s ha transferido a %d %d dólares", NombreJugador(playerid), CuentaATransferir[playerid], strval(inputtext));
	//	InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == DCCB_TransferirC)
	{
	    if(!response) { CuentaATransferir[playerid] = NOEXISTE; ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); return 1; }
	    new query[256];
	    format(query, sizeof(query), "SELECT * FROM cuentasbancarias WHERE numerocuenta = '%d' LIMIT 1", strval(inputtext));
		mysql_query(database, query, true);
		new rows = cache_get_row_count(database);
		if(rows == 1)
		{
		    CuentaATransferir[playerid] = strval(inputtext);
		    ShowPlayerDialog(playerid, DCCB_TransferirD, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", "{FFFFFF}Introduzca la cantidad de dinero que desea transferir:", "Transferir", "Volver");
			return 1;
		}
		else
		{
		    new string[256];
		    format(string, sizeof(string), "{FF0000}El número de cuenta %d no existe.\n\n{FFFFFF}Introduzca a continuación el número de cuenta al que desea realizar la transferencia.", strval(inputtext));
	     	ShowPlayerDialog(playerid, DCCB_TransferirC, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", string, "Siguiente", "Volver");
		}
		return 1;
	}
	if(dialogid == DCCB_CambiarPIN)
	{
	    if(!response) { ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); return 1; }
	    if(strlen(inputtext) != 4)
	    {
     		SendClientMessage(playerid, ROJO_OSCURO, "* El número PIN tiene que ser de 4 digitos.");
     		ShowPlayerDialog(playerid, DCCB_CambiarPIN, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}Introduce el número PIN de 4 digitos:\n{FF0000}Solo se aceptan números", "Siguiente", "Atras");
     		return 1;
	    }
	    new query[256];
	    format(query, sizeof(query), "UPDATE cuentasbancarias SET PIN = %d WHERE numerocuenta = %d", strval(inputtext), CuentaElegida[playerid]);
		mysql_query(database, query, false);
		format(query, sizeof(query), "* Has cambiado el PIN de la cuenta %d.", CuentaElegida[playerid]);
		SendClientMessage(playerid, NARANJA, query);
		return 1;
	}
	if(dialogid == DCCB_CambiarDesc)
	{
	    if(!response) { ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); return 1; }
	    new query[256];
	    format(query, sizeof(query), "UPDATE cuentasbancarias SET descripcion = '%s' WHERE numerocuenta = %d", inputtext, CuentaElegida[playerid]);
		mysql_query(database, query, false);
		format(query, sizeof(query), "* Has cambiado la descripción de la cuenta %d a %s.", CuentaElegida[playerid], inputtext);
		SendClientMessage(playerid, NARANJA, query);
		return 1;
	}
	if(dialogid == DCCB_Eliminar)
	{
	    if(!response) { ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir"); return 1; }
     	new query[512];
	    format(query, sizeof(query), "DELETE FROM cuentasbancarias WHERE `numerocuenta` = '%d'", CuentaElegida[playerid]);
	    mysql_query(database, query, false);
	    format(query, sizeof(query), "* Has cambiado eliminado la cuenta %d.", CuentaElegida[playerid]);
		SendClientMessage(playerid, NARANJA, query);
		if(CuentaElegida[playerid] == JugadorInfo[playerid][jCuentaPrincipal])
		{
		    SendClientMessage(playerid, BLANCO, "* Has eliminado tu cuenta principal, para seguir recibiendo tu nómina vuelve a seleccionar la cuenta principal. (( /selprincipal ))");
		    JugadorInfo[playerid][jCuentaPrincipal] = 0;
		}
	    for(new i = 0; i < MAX_CBANCARIAS; i++)
	    {
	        if(JugadorInfo[playerid][jCuentasBancarias][i] == CuentaElegida[playerid])
	        {
	            JugadorInfo[playerid][jCuentasBancarias][i] = NOEXISTE;
	        }
	    }
	    CuentaElegida[playerid] = NOEXISTE;
	    ReorganizarCuentasBancarias(playerid);
	    //SaveValues(playerid, "CuentasBancarias");
	    return 1;
	}
	if(dialogid == DCCB_Opciones)
	{
	    if(!response) { CuentaElegida[playerid] = NOEXISTE; return 1; }
	    new sql_op[256], row_op[256], datos_op[9][64], string[512], temp_data[128];
        format(sql_op, sizeof(sql_op), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, sql_op, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row_op, "|");
				strcat(row_op, temp_data);
			}
			else
			{
				strcat(row_op, temp_data);
			}
		}

		split(row_op, datos_op, '|');
		switch(listitem)
		{
		    case 1:
		    {
		        format(string, sizeof(string), "{FFFFFF}El saldo actual disponible en la cuenta %d, es de {FF8000}%d dólares{FFFFFF}.", CuentaElegida[playerid], strval(datos_op[3]));
          		ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		    }
		    case 2:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación la cantidad de dinero que desea retirar.\n\nSaldo disponible: {FF8000}%d dólares{FFFFFF}.", strval(datos_op[3]));
		        ShowPlayerDialog(playerid, DCCB_Retirar, DIALOG_STYLE_INPUT, "{FFFFFF}Retirar dinero", string, "Retirar", "Volver");
		    }
		    case 3:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación la cantidad de dinero que desea ingresar.");
		        ShowPlayerDialog(playerid, DCCB_Ingresar, DIALOG_STYLE_INPUT, "{FFFFFF}Ingresar dinero", string, "Ingresar", "Volver");
		    }
		    case 4:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación el número de cuenta al que desea realizar la transferencia.");
		        ShowPlayerDialog(playerid, DCCB_TransferirC, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", string, "Siguiente", "Volver");
		    }
		    case 5:
		    {
		    	/*printf("LLEGA");
		        new bigstring[1024], stringdialogo[1024], sql[1024], row[1024], datos[4][64];
				strmid(bigstring,"", 0, strlen(""), 255);
				strmid(stringdialogo,"", 0, strlen(""), 255);
				format(sql, sizeof(sql), "SELECT * FROM movimientosbancarios WHERE numerocuenta = %d", CuentaElegida[playerid]);
				mysql_query(sql);
			    mysql_store_result();
			    printf("a");
				for(new i = 0; i < 20; i++)
				{
				    printf("b");
					mysql_fetch_row(row);
					split(row, datos, '|');
					format(stringdialogo,sizeof(stringdialogo),"%s | Descripción: %s\n", datos[2], datos[3]);
					strcat(bigstring,stringdialogo);
					printf("PRINTF FOR: %d %d %s %s", strval(datos[0]), strval(datos[1]), datos[2], datos[3]);
				}
				printf("c");
				ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", bigstring, "Volver", "");
				mysql_free_result();
				printf("d");*/
				SendClientMessage(playerid, NARANJA, "* Los últimos movimientos estrán disponibles próximamente.");
		    }
		    case 7:
		    {
		        if(strval(datos_op[4]) != JugadorInfo[playerid][jSQLID]) {
                    ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir");
				}
				else
				{
		        	format(string, sizeof(string), "{FFFFFF}Introduzca a continuación el nuevo PIN de la cuenta.");
		        	ShowPlayerDialog(playerid, DCCB_CambiarPIN, DIALOG_STYLE_INPUT, "{FFFFFF}Cambiar PIN", string, "Siguiente", "Volver");
				}
			}
		    case 8:
		    {
		        if(strval(datos_op[4]) != JugadorInfo[playerid][jSQLID]) {
                    ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir");
				}
				else
				{
		        	format(string, sizeof(string), "{FFFFFF}Introduzca a continuación la nueva descripción de la cuenta\n{FF8000}Actual: {FFFFFF}%s.",datos_op[1]);
		        	ShowPlayerDialog(playerid, DCCB_CambiarDesc, DIALOG_STYLE_INPUT, "{FFFFFF}Cambiar descripción", string, "Siguiente", "Volver");
				}
			}
		    case 9:
		    {
		        if(strval(datos_op[4]) != JugadorInfo[playerid][jSQLID]) {
                    ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir");
				}
				else
				{
		    		format(string, sizeof(string), "{FFFFFF}Estás a punto de eliminar la cuenta bancaria {FF8000}%d {FFFFFF}con un saldo de {FF8000}%d dólares{FFFFFF}. ¿Estas seguro que quieres eliminar la cuenta?\n\n{FF0000}Importante: Si eliminas la cuenta bancaria y tienes dinero dentro de ella perderas todo y no se podrá recuperar.", CuentaElegida[playerid], strval(datos_op[3]));
          			ShowPlayerDialog(playerid, DCCB_Eliminar, DIALOG_STYLE_MSGBOX, "{FFFFFF}Eliminar cuenta", string, "Confirmar", "Volver");
				}
			}
		}
		return 1;
	}
	if(dialogid == DCCB_Password)
	{
	    if(!response) { CuentaElegida[playerid] = NOEXISTE; return 1; }
	    new sql_pw[256], row_pw[256], datos_pw[9][64], temp_data[128];
        format(sql_pw, sizeof(sql_pw), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, sql_pw, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row_pw, "|");
				strcat(row_pw, temp_data);
			}
			else
			{
				strcat(row_pw, temp_data);
			}
		}

		split(row_pw, datos_pw, '|');
		if(strval(datos_pw[2]) == strval(inputtext))
		{
		    ShowPlayerDialog(playerid, DCCB_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero\n\tMovimientos bancarios\n{FF8000}Administrar cuenta\n\t{FFFFFF}Cambiar PIN\n\tCambiar descripción\n\tEliminar cuenta", "Siguiente", "Salir");
			return 1;
		}
		else
		{
		    new titulo[50];
		    format(titulo, sizeof(titulo), "{FFFFFF}Acceso a la cuenta {FF8000}%d", CuentaElegida[playerid]);
		    ShowPlayerDialog(playerid, DCCB_Password, DIALOG_STYLE_PASSWORD, titulo, "{FF0000}El pin introducido no es correcto.\n\n{FFFFFF}Introduzca el número pin de la cuenta bancaria:", "Siguiente", "Cancelar");
		}
	    return 1;
	}
	if(dialogid == DCCB_Cuentas)
	{
	    if(!response) return 1;
	    if(listitem < 0) return 1;

	    new titulo[50];
	    CuentaElegida[playerid] = JugadorInfo[playerid][jCuentasBancarias][listitem];
	    format(titulo, sizeof(titulo), "{FFFFFF}Acceso a la cuenta {FF8000}%d", CuentaElegida[playerid]);
	    ShowPlayerDialog(playerid, DCCB_Password, DIALOG_STYLE_PASSWORD, titulo, "{FFFFFF}Introduzca el número pin de la cuenta bancaria:", "Siguiente", "Cancelar");
	    return 1;
	}
	if(dialogid == DCCB_VerInfo)
	{
	    if(!response) return 1;
	    if(listitem < 0) return 1;

        new sql2[256], row2[256], datos2[8][64], string2[564], titulo[128], temp_data[128];
        format(sql2, sizeof(sql2), "SELECT cuentasbancarias.*, usuarios.Nombre FROM cuentasbancarias, usuarios WHERE cuentasbancarias.numerocuenta = %d AND cuentasbancarias.propietario = usuarios.id", JugadorInfo[playerid][jCuentasBancarias][listitem]);
		mysql_query(database, sql2, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(row2, "|");
				strcat(row2, temp_data);
			}
			else
			{
				strcat(row2, temp_data);
			}
		}

		split(row2, datos2, '|');
		format(string2, sizeof(string2), "{00FFFF}IMPORTANTE: {FFFFFF}Toda la información mostrada a continuación es simplemente de caracter OOC para ver la información de la cuenta.\n\n\n{FF8000}Número: {FFFFFF}%d\n{FF8000}Descripción: {FFFFFF}%s\n{FF8000}Fecha de creación: {FFFFFF}%s\n{FF8000}Propietario: {FFFFFF}%s", JugadorInfo[playerid][jCuentasBancarias][listitem], datos2[1], datos2[5], datos2[6]);
		format(titulo, sizeof(titulo), "{FFFFFF}Información cuenta {FF8000}%d", JugadorInfo[playerid][jCuentasBancarias][listitem]);
		ShowPlayerDialog(playerid, DCCB_VerInfo, DIALOG_STYLE_MSGBOX, titulo, string2, "Cerrar", "");
		return 1;
	}
	if(dialogid == Cajero_Cuentas)
	{
	    if(!response) return 1;
	    if(listitem < 0) return 1;

	    new titulo[50];
	    CuentaElegida[playerid] = JugadorInfo[playerid][jCuentasBancarias][listitem];
	    format(titulo, sizeof(titulo), "{FFFFFF}Acceso a la cuenta {FF8000}%d", CuentaElegida[playerid]);
	    ShowPlayerDialog(playerid, Cajero_Pin, DIALOG_STYLE_PASSWORD, titulo, "{FFFFFF}Introduzca el número pin de la cuenta bancaria:", "Siguiente", "Cancelar");
	    return 1;
	}
	if(dialogid == Cajero_Info)
	{
	    if(!response) return 1;
	    if(listitem < 0) return 1;

        new ca_sql2[256], ca_row2[256], ca_datos2[8][64], string2[564], titulo[128], temp_data[128];
        format(ca_sql2, sizeof(ca_sql2), "SELECT cuentasbancarias.*, usuarios.Nombre FROM cuentasbancarias, usuarios WHERE cuentasbancarias.numerocuenta = %d AND cuentasbancarias.propietario = usuarios.id", JugadorInfo[playerid][jCuentasBancarias][listitem]);
		mysql_query(database, ca_sql2, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row2, "|");
				strcat(ca_row2, temp_data);
			}
			else
			{
				strcat(ca_row2, temp_data);
			}
		}

		split(ca_row2, ca_datos2, '|');
		format(string2, sizeof(string2), "{00FFFF}IMPORTANTE: {FFFFFF}Toda la información mostrada a continuación es simplemente de caracter OOC para ver la información de la cuenta.\n\n\n{FF8000}Número: {FFFFFF}%d\n{FF8000}Descripción: {FFFFFF}%s\n{FF8000}Fecha de creación: {FFFFFF}%s\n{FF8000}Propietario: {FFFFFF}%s", JugadorInfo[playerid][jCuentasBancarias][listitem], ca_datos2[1], ca_datos2[5], ca_datos2[6]);
		format(titulo, sizeof(titulo), "{FFFFFF}Información cuenta {FF8000}%d", JugadorInfo[playerid][jCuentasBancarias][listitem]);
		ShowPlayerDialog(playerid, Cajero_Info, DIALOG_STYLE_MSGBOX, titulo, string2, "Cerrar", "");
		return 1;
	}
	if(dialogid == Cajero_Pin)
	{
	    if(!response) { CuentaElegida[playerid] = NOEXISTE; return 1; }
	    new ca_sql_pw[256], ca_row_pw[256], ca_datos_pw[9][64], temp_data[128];
        format(ca_sql_pw, sizeof(ca_sql_pw), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, ca_sql_pw, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row_pw, "|");
				strcat(ca_row_pw, temp_data);
			}
			else
			{
				strcat(ca_row_pw, temp_data);
			}
		}

		split(ca_row_pw, ca_datos_pw, '|');
		if(strval(ca_datos_pw[2]) == strval(inputtext))
		{
		    ShowPlayerDialog(playerid, Cajero_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero", "Siguiente", "Salir");
			return 1;
		}
		else
		{
		    new titulo[50];
		    format(titulo, sizeof(titulo), "{FFFFFF}Acceso a la cuenta {FF8000}%d", CuentaElegida[playerid]);
		    ShowPlayerDialog(playerid, Cajero_Pin, DIALOG_STYLE_PASSWORD, titulo, "{FF0000}El pin introducido no es correcto.\n\n{FFFFFF}Introduzca el número pin de la cuenta bancaria:", "Siguiente", "Cancelar");
		}
	    return 1;
	}
	if(dialogid == Cajero_Opciones)
	{
	    if(!response) { CuentaElegida[playerid] = NOEXISTE; return 1; }
	    new ca_sql_op[256], ca_row_op[256], ca_datos_op[9][64], string[512], temp_data[128];
        format(ca_sql_op, sizeof(ca_sql_op), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, ca_sql_op, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row_op, "|");
				strcat(ca_row_op, temp_data);
			}
			else
			{
				strcat(ca_row_op, temp_data);
			}
		}

		split(ca_row_op, ca_datos_op, '|');
		switch(listitem)
		{
		    case 1:
		    {
		        format(string, sizeof(string), "{FFFFFF}El saldo actual disponible en la cuenta %d, es de {FF8000}%d dólares{FFFFFF}.", CuentaElegida[playerid], strval(ca_datos_op[3]));
          		ShowPlayerDialog(playerid, Cajero_Info, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		    }
		    case 2:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación la cantidad de dinero que desea retirar.\n\nSaldo disponible: {FF8000}%d dólares{FFFFFF}.", strval(ca_datos_op[3]));
		        ShowPlayerDialog(playerid, Cajero_Retirar, DIALOG_STYLE_INPUT, "{FFFFFF}Retirar dinero", string, "Retirar", "Volver");
		    }
		    case 3:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación la cantidad de dinero que desea ingresar.");
		        ShowPlayerDialog(playerid, Cajero_Ingresar, DIALOG_STYLE_INPUT, "{FFFFFF}Ingresar dinero", string, "Ingresar", "Volver");
		    }
		    case 4:
		    {
		        format(string, sizeof(string), "{FFFFFF}Introduzca a continuación el número de cuenta al que desea realizar la transferencia.");
		        ShowPlayerDialog(playerid, Cajero_TransferirC, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", string, "Siguiente", "Volver");
		    }
		}
		return 1;
	}
	if(dialogid == Cajero_Ingresar)
	{
	    if(!response) { return ShowPlayerDialog(playerid, Cajero_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero", "Siguiente", "Salir"); }
	    new ca_sql_in[256], ca_row_in[256], ca_datos_in[9][64], string[126], mensaje[256], temp_data[128];
        format(ca_sql_in, sizeof(ca_sql_in), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, ca_sql_in, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row_in, "|");
				strcat(ca_row_in, temp_data);
			}
			else
			{
				strcat(ca_row_in, temp_data);
			}
		}

		split(ca_row_in, ca_datos_in, '|');
        if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		if(strval(inputtext) > JugadorInfo[playerid][jDinero]) { format(string, sizeof(string), "{FF0000}No tienes tanto dinero.\n\n{FFFFFF}Introduzca a continuación la cantidad de dinero que desea ingresar."); ShowPlayerDialog(playerid, DCCB_Ingresar, DIALOG_STYLE_INPUT, "{FFFFFF}Ingresar dinero", string, "Ingresar", "Volver"); return 1; }
		JugadorInfo[playerid][jDinero] -= strval(inputtext);
		format(ca_sql_in, sizeof(ca_sql_in), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(ca_datos_in[3]) + strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, ca_sql_in, false);
		format(string, sizeof(string), "{FFFFFF}Has ingresado %d dólares.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(ca_datos_in[3]) + strval(inputtext)));
		ShowPlayerDialog(playerid, Cajero_Info, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
	  	format(mensaje, sizeof(mensaje), "%s ha ingresado %d dólares", NombreJugador(playerid), strval(inputtext));
//		InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == Cajero_Retirar)
	{
	    if(!response) { return ShowPlayerDialog(playerid, Cajero_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero", "Siguiente", "Salir"); }
	    new ca_sql_re[256], ca_row_re[256], ca_datos_re[9][64], string[526], mensaje[126], temp_data[128];
        format(ca_sql_re, sizeof(ca_sql_re), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, ca_sql_re, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row_re, "|");
				strcat(ca_row_re, temp_data);
			}
			else
			{
				strcat(ca_row_re, temp_data);
			}
		}

		split(ca_row_re, ca_datos_re, '|');
		if(strval(inputtext) > strval(ca_datos_re[3])) { format(string, sizeof(string), "{FF0000}No tienes tanto saldo en la cuenta.\n\n{FFFFFF}Introduzca a continuación la cantidad de dinero que desea retirar.\n\nSaldo disponible: %d", strval(ca_datos_re[3])); ShowPlayerDialog(playerid, DCCB_Retirar, DIALOG_STYLE_INPUT, "{FFFFFF}Retirar dinero", string, "Retirar", "Volver"); return 1; }
		if(strval(inputtext) > 300) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes sacar más de 300 dólares en el cajero.");
        if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		JugadorInfo[playerid][jDinero] += strval(inputtext);
		format(ca_sql_re, sizeof(ca_sql_re), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(ca_datos_re[3]) - strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, ca_sql_re, false);
		format(string, sizeof(string), "{FFFFFF}Has retirado %d dólares.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(ca_datos_re[3]) - strval(inputtext)));
		ShowPlayerDialog(playerid, Cajero_Info, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		format(mensaje, sizeof(mensaje), "%s ha retirado %d dólares", NombreJugador(playerid), strval(inputtext));
//		InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == Cajero_TransferirD)
	{
	    if(!response) { CuentaATransferir[playerid] = NOEXISTE; ShowPlayerDialog(playerid, Cajero_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero", "Siguiente", "Salir"); return 1; }
	    new ca_sql_tr[256], ca_row_tr[256], ca_datos_tr[9][64], string[126], mensaje[126], temp_data[128];
        format(ca_sql_tr, sizeof(ca_sql_tr), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", CuentaElegida[playerid]);
		mysql_query(database, ca_sql_tr, true);

		for(new i = 0, j = cache_get_field_count(database); i < j; i ++)
		{
			cache_get_row(0, i, temp_data);

			if(i != 0)
			{
				strcat(ca_row_tr, "|");
				strcat(ca_row_tr, temp_data);
			}
			else
			{
				strcat(ca_row_tr, temp_data);
			}
		}

		split(ca_row_tr, ca_datos_tr, '|');
		if(strval(inputtext) > strval(datos_tr[3])) return ShowPlayerDialog(playerid, DCCB_TransferirD, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", "{FF0000}No tiene suficiente dinero en su cuenta.\n\n{FFFFFF}Introduzca la cantidad que desea transferir:", "Transferir", "Volver");
        if(strval(inputtext) < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
		format(ca_sql_re, sizeof(ca_sql_re), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", (strval(ca_datos_tr[3]) - strval(inputtext)), CuentaElegida[playerid]);
		mysql_query(database, ca_sql_re, false);
		format(ca_sql_re, sizeof(ca_sql_re), "UPDATE cuentasbancarias SET saldo = (saldo + %d) WHERE numerocuenta = %d", strval(inputtext), CuentaATransferir[playerid]);
		mysql_query(database, ca_sql_re, false);
		format(string, sizeof(string), "{FFFFFF}Has transferido {FF8000}%d dólares{FFFFFF}.\n\nEl saldo actual es de {FF8000}%d dólares{FFFFFF}.", strval(inputtext), (strval(ca_datos_tr[3]) - strval(inputtext)));
		ShowPlayerDialog(playerid, DCCB_Informacion, DIALOG_STYLE_MSGBOX, "{FFFFFF}Saldo disponible", string, "Volver", "");
		format(mensaje, sizeof(mensaje), "%s ha transferido a %d %d dólares", NombreJugador(playerid), CuentaATransferir[playerid], strval(inputtext));
//		InsertarMovimiento(CuentaElegida[playerid], mensaje);
		return 1;
	}
	if(dialogid == Cajero_TransferirC)
	{
	    if(!response) { CuentaATransferir[playerid] = NOEXISTE; ShowPlayerDialog(playerid, Cajero_Opciones, DIALOG_STYLE_LIST, "{FFFFFF}Administrar cuenta bancaria", "{FF8000}General\n\t{FFFFFF}Consultar saldo\n\tRetirar dinero\n\tIngresar dinero\n\tTransferir dinero", "Siguiente", "Salir"); return 1; }
	    new ca_query2[256];
	    format(ca_query2, sizeof(ca_query2), "SELECT * FROM cuentasbancarias WHERE numerocuenta = '%d' LIMIT 1", strval(inputtext));
		mysql_query(database, ca_query2, true);
		new rows = cache_get_row_count(database);
		if(rows == 1)
		{
		    CuentaATransferir[playerid] = strval(inputtext);
		    ShowPlayerDialog(playerid, Cajero_TransferirD, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", "{FFFFFF}Introduzca la cantidad de dinero que desea transferir:", "Transferir", "Volver");
			return 1;
		}
		else
		{
		    new string[256];
		    format(string, sizeof(string), "{FF0000}El número de cuenta %d no existe.\n\n{FFFFFF}Introduzca a continuación el número de cuenta al que desea realizar la transferencia.", strval(inputtext));
	     	ShowPlayerDialog(playerid, Cajero_TransferirC, DIALOG_STYLE_INPUT, "{FFFFFF}Transferir dinero", string, "Siguiente", "Volver");
		}
		return 1;
	}
	if(dialogid == DCCB_Descripcion)
	{
	    if(response)
		{
		    format(CCB_Descripcion[playerid], 120, "%s", inputtext);
		    ShowPlayerDialog(playerid,DCCB_PIN, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}Introduce el número PIN de 4 digitos:\n{FF0000}Solo se aceptan números", "Siguiente", "Atras");
		}
	}
	if(dialogid == DCCB_PIN)
	{
	    if(response)
		{
		    if(strlen(inputtext) != 4)
		    {
		        SendClientMessage(playerid, ROJO_OSCURO, "* El número PIN tiene que ser de 4 digitos.");
		        ShowPlayerDialog(playerid,DCCB_PIN, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}Introduce el número PIN de 4 digitos:\n{FF0000}Solo se aceptan números", "Siguiente", "Atras");
		        return 1;
		    }
			CCB_PIN[playerid] = strval(inputtext);
			new string2[512];
		    format(string2, sizeof(string2), "{FFFFFF}·Estas apunto de abrir una nueva cuenta bancaria, confirma los datos.\n{FF8000}Número de cuenta: {FFFFFF}Por confirmar\n{FF8000}Descripción: {FFFFFF}%s\n{FF8000}PIN: {FFFFFF}%d\n{FF8000}Saldo: {FFFFFF}0$\n{FF8000}Titular: {FFFFFF}%s",CCB_Descripcion[playerid], CCB_PIN[playerid], pNameEx(playerid));
			ShowPlayerDialog(playerid,DCCB_Crear, DIALOG_STYLE_MSGBOX, "{FFFFFF}Banco de Los Ángeles", string2, "Confirmar", "Atras");
		}
		else
		{
		    ShowPlayerDialog(playerid,DCCB_Descripcion, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}Introduce la descripción de la cuenta bancaria (Puede ser por ejemplo para que estara destinada):", "Continuar", "Salir");
		}
	}
	if(dialogid == DCCB_Crear)
	{
	    if(response)
		{
		    CrearCuentaBancaria(playerid, CCB_Descripcion[playerid], CCB_PIN[playerid]);
		}
		else
		{
		    ShowPlayerDialog(playerid,DCCB_PIN, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}·Introduce el número PIN de 4 digitos:\n{FF0000}Solo se aceptan números", "Siguiente", "Atras");
		}
	}
	if(dialogid == GUIA)
	{
		if(!response) return 1;
		switch(listitem)
		{
			case 0:
			{
				SetPlayerCheckpoint(playerid, 1480.1294,-1741.7043,13.5469,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el ayuntamiento en el mapa.");
			}
			case 1:
			{
				SetPlayerCheckpoint(playerid, 1405.8192,-1668.2262,13.5600,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado la comisaría en el mapa.");
			}
			case 2:
			{
				SetPlayerCheckpoint(playerid, 1178.2823,-1323.7556,14.1124,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el hospital en el mapa.");
			}
			case 3:
			{
				SetPlayerCheckpoint(playerid, 1513.9397,-1586.2377,13.5469,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el parque de bomberos en el mapa.");
			}
			case 4:
			{
				SetPlayerCheckpoint(playerid, 789.7357,-1344.0166,13.3945,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado Los Santos Radio Televisión en el mapa.");
			}
			case 5:
			{
				SetPlayerCheckpoint(playerid, 2365.6689,-2385.4375,13.6288,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado la U.S. Army en el mapa.");
			}
			case 6:
			{
				SetPlayerCheckpoint(playerid, 946.1539,-1388.0844,13.3945,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el depósito municipal en el mapa.");
			}
			case 7:
			{
				SetPlayerCheckpoint(playerid, 2065.1450,-1916.5474,13.8975,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado la autoescuela en el mapa.");
			}
			case 8:
			{
				SetPlayerCheckpoint(playerid, 1544.7742,-1675.4465,13.5591,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado los juzgados en el mapa.");
			}
			case 9:
			{
				SetPlayerCheckpoint(playerid, 1795.5166,-1904.5555,13.4007,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado la estación de autobuses en el mapa.");
			}
			case 10:
			{
				SetPlayerCheckpoint(playerid, 2286.5256,-2332.2002,13.6288,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el taller de mecánica en el mapa.");
			}
			case 11:
			{
				// NO HAGA NADA
			}
			case 12:
			{
				SetPlayerCheckpoint(playerid, 1753.0623,-1894.0410,13.5573,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de conductor de autobus en el mapa.");
			}
			case 13:
			{
				SetPlayerCheckpoint(playerid, 2273.9412,-2355.8669,13.5469,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de mecánico en el mapa.");
			}
			case 14:
			{
				SetPlayerCheckpoint(playerid, 2148.0562,-2191.6433,13.5544,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de basurero en el mapa.");
			}
			case 15:
			{
				SetPlayerCheckpoint(playerid, 2170.8396,-2175.6587,13.5469,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de barrendero en el mapa.");
			}
			case 16:
			{
				SetPlayerCheckpoint(playerid, 1649.2026,-1493.9423,13.5469,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de vendedor de móviles en el mapa.");
			}
			case 17:
			{
				SetPlayerCheckpoint(playerid, 891.3534,-1271.4711,14.9527,5);
				SendClientMessage(playerid, CELESTE, "* Se ha marcado el trabajo de camionero en el mapa.");
			}
		}
	}
	return 1;
}

/* COMANDOS */
CMD:abandonar(playerid, params[])
{
	Camionero[playerid] = 0;
	SendClientMessage(playerid, BLANCO, "{33CCFF}Abandonaste {FFFFFF}la carga que llevabas, no se te pagará nada..");
	return 1;
}

CMD:cargar(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 14) return SendClientMessage(playerid, ROJO_OSCURO, "No eres camionero.");
	if(Camionero[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en una ruta, deberás terminar esa primero o usa /abandonar.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(AutoInfo[vehicleid][aFaccionID] == 114){
		SetPlayerCheckpoint(playerid, 849.4312,-1291.9653,13.6856, 10.0);
		SendClientMessage(playerid, BLANCO, "Vé al {33CCFF}checkpoint {FFFFFF}marcado.");
		return 1;
	}
	else
	{
		SendClientMessage(playerid, ROJO_OSCURO, "No estás en un camión");
		return 1;
	}
}
CMD:vaciarbolsillos(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
  	if(sscanf(params, "ui", params[0], params[1]))
   	{
    	SendClientMessage(playerid, GRIS, "Uso: /vaciarbolsillos [ID] [Slot]");
     	return 1;
    }
    format(string, sizeof(string), "* %s te ha quitado un %s del bolsillo.", NombreJugador(playerid), ObtenerNombreObjeto(params[1]));
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "Administración: %s ha quitado a %s el objeto %s de los bolsillo.",  NombreJugador(playerid), NombreJugador(params[0]), ObtenerNombreObjeto(params[1]));
	ABroadCast(ROJO, string, 1);
    QuitarObjeto(params[0], params[1]);
    SetTimerEx("ArmaSegura", 3000, 0, "d", params[0]);
	GuardoArmaSegura[params[0]] = 1;
	return 1;
}

CMD:expulsartodos(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    SendClientMessageToAll(NARANJA, "Se hará un reinicio del servidor.");
    for(new i = 0; i < MAX_PLAYERS; i++) Kick(i);
	return 1;
}

CMD:noadmins(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 0) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(NoAparecerAdmins[playerid] == 0)
	{
	    NoAparecerAdmins[playerid] = 1;
	    SendClientMessage(playerid, CELESTE, "* Ahora no aparecerás en el '/admins'.");
	    return 1;
	}
	else
	{
	    NoAparecerAdmins[playerid] = 0;
	    SendClientMessage(playerid, CELESTE, "* Ahora aparecerás en el '/admins'");
	}
	return 1;
}

CMD:dardinero(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
 	new string[256];
  	if(sscanf(params, "ui", params[0], params[1]))
   	{
    	SendClientMessage(playerid, GRIS, "Uso: /dardinero [ID] [Cantidad]");
     	return 1;
    }
    JugadorInfo[params[0]][jDinero] += params[1];
    format(string, sizeof(string), "* Has dado %d dólares a %s.", params[1], NombreJugador(params[0]));
    SendClientMessage(playerid, CELESTE, string);
    format(string, sizeof(string), "* %s te ha dado %d dólares.", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "Administración: %s ha dado %d dólares a %s.", NombreJugador(playerid), params[1], NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	return 1;
}

CMD:admins(playerid, params[])
{
	new string[512];
	SendClientMessage(playerid, NARANJA, "__________| Admins online |__________");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(JugadorInfo[i][jAdmin] > 0 && NoAparecerAdmins[i] == 0)
	    {
	        format(string, sizeof(string), "# %s - [%s]", NombreJugador(i), JugadorInfo[i][jApodo]);
	        SendClientMessage(playerid, AMARILLO, string);
	    }
	}
	return 1;
}

CMD:llevarls(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
 	new string[256];
  	if(sscanf(params, "u", params[0]))
   	{
    	SendClientMessage(playerid, GRIS, "Uso: /llevarls [ID]");
     	return 1;
    }
    SetPlayerPos(params[0], 1411.8982,-1667.9940,13.5600);
    SetPlayerInterior(params[0], 0); SetPlayerVirtualWorld(params[0], 0);
    JugadorInfo[params[0]][jHerido] = 0; SetPlayerSpecialAction(params[0], 0);
    ClearAnimations(params[0]);
    OnePlayAnim(params[0], "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    SetPlayerHealthEx(params[0], 100);
    TogglePlayerControllable(params[0], true);
    format(string, sizeof(string), "* Has desbugeado a %s.", NombreJugador(params[0]));
    SendClientMessage(playerid, CELESTE, string);
    format(string, sizeof(string), "* %s te ha teleportado a la comisaría.", NombreJugador(playerid));
    SendClientMessage(params[0], CELESTE, string);
    KillTimer(TimerComa[params[0]]);
    SetCameraBehindPlayer(params[0]);
    return 1;
}

CMD:desbug(playerid, params[])
{
    SetPlayerVirtualWorld(playerid, 0);
    //SetPlayerInterior(playerid, 0);
    SetPlayerSpecialAction(playerid, 0);
    ClearAnimations(params[0]);
    OnePlayAnim(params[0], "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
    SetCameraBehindPlayer(playerid);
    SendClientMessage(playerid, CELESTE, "Desbugueado correctamente");
    return 1;
}

CMD:tiempotrabajo(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "* Te quedan %d minutos para poder volver a trabajar.", JugadorInfo[playerid][jUltimoTrabajo]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:reestablecercoches(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    for(new i = 0; i < MAX_VEHICLES; i++)
    {
        SetVehicleHealthEx(i, 1000);
	    RepairVehicle(i);
	    AutoInfo[i][aRoto] = 0;
		AutoInfo[i][aGasolina] = 100;
		SendClientMessage(playerid, CELESTE, "Comando ejecutado correctamente");
    }
	return 1;
}

CMD:vernombres(playerid, params[])
{
	if(ViendoNombres[playerid] == 0)
	{
	    ViendoNombres[playerid] = 1;
    	for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, false);
    	SendClientMessage(playerid, CELESTE, "* Has ocultado los nombres de todos los jugadores.");
    	return 1;
	}
	else
	{
	    ViendoNombres[playerid] = 0;
	    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, true);
	    SendClientMessage(playerid, CELESTE, "* Has mostrado los nombres de todos los jugadores.");
	}
	return 1;
}

CMD:rtc(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new coche = JugadorCercaVehiculo(playerid);
	if(coche == 0) return 1;
	SetVehicleToRespawn(coche);
	SendClientMessage(playerid, CELESTE, "* Has respawneado el vehículo.");
	return 1;
}

CMD:tiempo(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Tiempo de condena: %d | Jail ID: %d", JugadorInfo[playerid][jTiempoEncarcelado], JugadorInfo[playerid][jEncarcelado]);
	SendClientMessage(playerid, AMARILLO, string);
	return 1;
}

CMD:verjail(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /verjail [ID]");
		return 1;
	}
	new string[128];
	format(string, sizeof(string), "__________| Tiempo de condena de %s |__________", NombreJugador(params[0]));
	SendClientMessage(playerid, AMARILLO, string);
	format(string, sizeof(string), "Tiempo de condena: %d | Jail ID: %d", JugadorInfo[params[0]][jTiempoEncarcelado], JugadorInfo[params[0]][jEncarcelado]);
	SendClientMessage(playerid, AMARILLO, string);
	return 1;
}

CMD:suerte(playerid, params[])
{
	new suerte = random(2), string[128];
	if(suerte == 0) format(string, sizeof(string), "* %s ha tenido suerte.", NombreJugador(playerid));
	else format(string, sizeof(string), "* %s no ha tenido suerte.", NombreJugador(playerid));
	ProxDetector(10, playerid, string, VERDE, VERDE, VERDE, VERDE, VERDE);
	return 1;
}

CMD:fumar(playerid,params[])
{
	new string[128];
	if(BolsilloID[playerid][11] != 75) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener tabaco en la mano derecha.");
	if(BolsilloID[playerid][12] != 61 && BolsilloID[playerid][12] != 76) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener un mechero en la mano izquierda.");
	if(BolsilloID[playerid][11] > 1) { BolsilloCantidad[playerid][11] --; }
	else { QuitarObjeto(playerid, 11); }
	EstaFumando[playerid] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	ApplyAnimation(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1,1);
	ApplyAnimation(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1,1);
	format(string, 128, "* %s enciende uno de sus cigarrillos.", NombreJugador(playerid));
	ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	SendClientMessage(playerid, CELESTE,"* Para fumar pulsa el botón izquierdo del ratón. Para tirar el cigarro, pulsa F.");
	return 1;
}

CMD:vertelefono(playerid, params[])
{
	if(BolsilloID[playerid][11] != 104) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener un teléfono móvil en la mano derecha.");
	new string[128];
	format(string, sizeof(string), "* El número de teléfono es: %d.", BolsilloTipo[playerid][11]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:vercuenta(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /vercuenta [ID]");
		return 1;
	}
    MostrarCuenta(playerid, params[0]);
	return 1;
}

CMD:comprarveh(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(sscanf(params, "iii", params[0], params[1], params[2]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /comprarveh [ID Vehículo] [Color 1] [Color 2] {FFFF00}Si no sabes como son las ID usa /ayuda color");
		return 1;
	}
	if(TimerConce == 1) { SendClientMessage(playerid, ROJO_OSCURO, "* Acaban de comprar un coche, espera mientras se guardan los datos."); return 1; }
	if(JugadorInfo[playerid][jDinero] < datacar[params[0]][dcPrecio]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	if(ComprarVeh(playerid) == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes el máximo de vehículos permitidos.");
	SendClientMessage(playerid, CELESTE, "* Has comprado un nuevo vehículo.");
	SendClientMessage(playerid, NARANJA, "* El vendedor te ha entregado las llaves. Puedes verlo en '/cuenta'.");
	new Conce = datacar[params[0]][dcConcesionario]-1;
    AgregarVehiculo(playerid, datacar[params[0]][dcIDModel], Concesionarios[Conce][ctX], Concesionarios[Conce][ctY], Concesionarios[Conce][ctZ], 0, 0, params[1], params[2], 8888, 60, 0, pNameEx(playerid));
   	new matricula[40];
	format(matricula, sizeof(matricula), "LS-%d", AutoInfo[vehicleid][aID]);
	SetVehicleNumberPlate(vehicleid, matricula);
	JugadorInfo[playerid][jDinero] -= datacar[params[0]][dcPrecio];
	TimerConce = 1;
	SetTimerEx("ResetearTimerConce",10000,0,"");
	return 1;
}

CMD:catalogo(playerid, params[])
{
	new string[128];
    GetPlayerPos(playerid, tempX[playerid], tempY[playerid], tempZ[playerid]);
	if (GetPlayerConcesionario(playerid) > 0)
	{
		format(string, 128, "Emplado dice: Bienvenido al concesionario %s, puede observar toda la gama de modelos.", Concesionarios[GetPlayerConcesionarioEx(playerid)][cNombre]);
		SendClientMessage(playerid, COLOR_FADE1, string);
		SendClientMessage(playerid, NARANJA, "Pulsa SHIFT y ALT en el teclado para cambiar los modelos.");
		SendClientMessage(playerid, AMARILLO, "Pulsa ENTER para salir del catálogo");
		if(GetPlayerConcesionario(playerid) == 6)
		{//Aviones
			SetPlayerFacingAngle(playerid, 230.7040);
			SetPlayerCameraPos(playerid, -2236.1682,2334.3647,7.5469);
			SetPlayerCameraLookAt(playerid, -2229.1060,2326.0977,8.2523);
			SetPlayerVirtualWorld(playerid, playerid+1);
			SetPlayerPos(playerid, -2237.7878,2335.6909,7.5469);
		}
		else if(GetPlayerConcesionario(playerid) == 7)
		{//Barcos
			SetPlayerCameraPos(playerid, 723.3899,-1495.9838,1.9343);
			SetPlayerCameraLookAt(playerid, 733.2559,-1506.8319,-0.0312);
			SetPlayerVirtualWorld(playerid, playerid+1);
			SetPlayerPos(playerid, 723.3899,-1495.9838,1.9343);
			SetPlayerFacingAngle(playerid, 217.5417);
		}
		else
		{//Coches
			SetPlayerCameraPos(playerid, -1952.2235,272.1783,41.0471);
			SetPlayerCameraLookAt(playerid, -1951.1927,264.8029,40.7625);
			SetPlayerVirtualWorld(playerid, playerid+1);
			SetPlayerPos(playerid, -1952.2235,272.1783,41.0471);
			SetPlayerFacingAngle(playerid, 189.8909);
		}

		if (EnCatalogoVeh[playerid] == NOEXISTE)
		{
			TogglePlayerControllable(playerid,0);
			EnCatalogoVeh[playerid] = 1;
		}
		PConcesionario[playerid] = GetPlayerConcesionario(playerid);
		//printf("Concesionario = %d", PConcesionario[playerid]);
		catalogovehiculos(playerid, PConcesionario[playerid]);
	}
	else
		SendClientMessage(playerid, ROJO_OSCURO, "* No estas en el concesionario, debes salir del catalogo.");
	return 1;
}

CMD:radio(playerid, params[])
{
	new opcion[16];
    if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/radio [Colocar | Quitar | Encender | Apagar | Sintonizar]");
		return 1;
	}
	if(strcmp(opcion, "colocar", true) == 0)
	{
	    if(BolsilloID[playerid][11] != 89) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna radio en la mano derecha.");
        for(new i = 0; i < TotalRadios; i++)
	    {
			if(PlayerToPoint(playerid, 30, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]) && RadioInfo[i][radint] == GetPlayerInterior(playerid) && RadioInfo[i][radvw] == GetPlayerVirtualWorld(playerid))
			{
			    return SendClientMessage(playerid, ROJO_OSCURO, "* Ya hay alguna radio cerca.");
			}
	    }
		new string[128], Float:Pos[4];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    GetPlayerFacingAngle(playerid, Pos[3]);
	    RadioInfo[TotalRadios][radx] = Pos[0]; RadioInfo[TotalRadios][rady] = Pos[1]; RadioInfo[TotalRadios][radz] = Pos[2];
	    RadioInfo[TotalRadios][rada] = Pos[3];
	    Pos[0] += (2 * floatsin(-Pos[3], degrees));
	   	Pos[1] += (2 * floatcos(-Pos[3], degrees));
	   	Pos[2] -= 1.0;

	    format(string, sizeof(string), "* %s coloca una radio en el suelo.", NombreJugador(playerid));
	    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		RadioInfo[TotalRadios][radobjeto] = CreateDynamicObject(2226, Pos[0], Pos[1], Pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		RadioInfo[TotalRadios][radtexto] = CreateDynamic3DTextLabel("{00FFFF}Radio portatil\n{FFFFFF}Usa {00FFFF}/radio{FFFFFF} para configurarla.", VERDE, Pos[0], Pos[1], Pos[2]+0.6, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 100.0);
		RadioInfo[TotalRadios][radarea] = CreateDynamicSphere(Pos[0], Pos[1], Pos[2], 20.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		RadioInfo[TotalRadios][radint] = GetPlayerInterior(playerid); RadioInfo[TotalRadios][radvw] = GetPlayerVirtualWorld(playerid);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		TotalRadios ++;
		QuitarObjeto(playerid, 11);
		return 1;
	}
	else if(strcmp(opcion, "quitar", true) == 0)
	{
	    new string[128];
	    if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
		for(new i = 0; i < TotalRadios; i++)
	    {
			if(PlayerToPoint(playerid, 3, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]) && RadioInfo[i][radint] == GetPlayerInterior(playerid) && RadioInfo[i][radvw] == GetPlayerVirtualWorld(playerid))
			{
			    if(RadioInfo[i][radestado] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes apagar la radio antes de cogerla del suelo. Usa '/radio apagar'.");
			    DarObjeto(playerid, 89, 1, 1);
			    DestroyDynamicObject(RadioInfo[i][radobjeto]);
			    DestroyDynamic3DTextLabel(RadioInfo[i][radtexto]);
				DestroyDynamicArea(RadioInfo[i][radarea]);
				format(string, sizeof(string), "* %s coge la radio del suelo.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
			}
	    }
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ninguna radio.");
	}
	else if(strcmp(opcion, "encender", true) == 0)
	{
	    new string[128];
	    for(new i = 0; i < TotalRadios; i++)
	    {
			if(PlayerToPoint(playerid, 3, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]) && RadioInfo[i][radint] == GetPlayerInterior(playerid) && RadioInfo[i][radvw] == GetPlayerVirtualWorld(playerid))
			{
			    if(RadioInfo[i][radestado] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* La radio ya está encendida.");
			    RadioInfo[i][radestado] = 1;
				format(string, sizeof(string), "* %s enciende la radio.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				for(new j = 0; j < MAX_PLAYERS; j++)
				{
				    if(IsPlayerInDynamicArea(j, RadioInfo[i][radarea]))
				    {
				        ColocarEmisora(j, RadioInfo[i][rademisora], RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]);
				    }
				}
				return 1;
			}
	    }
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ninguna radio.");
	}
	else if(strcmp(opcion, "apagar", true) == 0)
	{
	    new string[128];
	    for(new i = 0; i < TotalRadios; i++)
	    {
			if(PlayerToPoint(playerid, 3, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]) && RadioInfo[i][radint] == GetPlayerInterior(playerid) && RadioInfo[i][radvw] == GetPlayerVirtualWorld(playerid))
			{
			    if(RadioInfo[i][radestado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La radio ya está apagada.");
			    RadioInfo[i][radestado] = 0;
				format(string, sizeof(string), "* %s apaga la radio.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				for(new j = 0; j < MAX_PLAYERS; j++)
				{
				    if(IsPlayerInDynamicArea(j, RadioInfo[i][radarea]))
				    {
				        StopAudioStreamForPlayer(j);
				    }
				}
				return 1;
			}
	    }
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ninguna radio.");
	}
	else if(strcmp(opcion, "sintonizar", true) == 0)
	{
	    new string[128];
	    for(new i = 0; i < TotalRadios; i++)
	    {
			if(PlayerToPoint(playerid, 3, RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]) && RadioInfo[i][radint] == GetPlayerInterior(playerid) && RadioInfo[i][radvw] == GetPlayerVirtualWorld(playerid))
			{
			    if(RadioInfo[i][radestado] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* La radio debe estar apagada para cambiar la emisora.");
				format(string, sizeof(string), "* %s cambia de emisora.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				for(new j = 0; j < MAX_PLAYERS; j++)
				{
				    if(IsPlayerInDynamicArea(j, RadioInfo[i][radarea]))
				    {
				        ShowPlayerDialog(playerid, MusicaRadio, DIALOG_STYLE_LIST, "{FFFFFF}Seleccionar música",
						"{FFFFFF}60's\n70's\n80's\n90's\nBlues\nCountry\nDance\nDisco\nDubstep\nFunk\nHardcore\nHardstyle\nHouse\nJazz\nProgressive\nR&B\nBlackbeats FM\nRap Old School\nReggae\nReggaeton\nRock\nSalsa\nSoul\nTechno\nTrance", "Sintonizar", "Cerrar");
				    }
				}
				return 1;
			}
	    }
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ninguna radio.");
	}
	else SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/radio [Colocar | Quitar | Encender | Apagar | Sintonizar]");
	return 1;
}

CMD:pagar(playerid, params[])
{
    if(sscanf(params, "ii", params[0], params[1]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /pagar [ID] [Cantidad]");
		return 1;
	}
	if(JugadorInfo[playerid][jNivel] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "Debes ser al menos nivel 2 para dar dinero.");
	if(params[1] < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser mayor que 0.");
	if(params[1] > 9999999) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser menor que 10 millones.");
	if(params[1] > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(1.5, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	JugadorInfo[playerid][jDinero] -= params[1];
	JugadorInfo[params[0]][jDinero] += params[1];
	new string[128];
	format(string, sizeof(string), "* %s te ha pagado %d dólares.", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has pagado %d dólares a %s.", params[1], NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s pasa algo de dinero a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	new query[300];
	format(query, sizeof(query), "INSERT INTO dinero (UsuarioPago, UsuarioRecibio, Monto) VALUES ('%d', '%d', '%d')", JugadorInfo[playerid][jSQLID], JugadorInfo[params[0]][jSQLID], params[1]);
	mysql_query(database, query, false);
	return 1;
}

CMD:venderlicencia(playerid, params[])
{
	if(JugadorInfo[playerid][jLider] == 4)
	{
	    new opcion, opcion2[16], opcion3[16], string[128];
		if(sscanf(params, "is[16]S()[16]", opcion, opcion2, opcion3))
		{
			SendClientMessage(playerid, GRIS, "Uso: /venderlicencia [ID] [caza | armas]");
			return 1;
		}
		if(strcmp(opcion2, "caza", true) == 0)
		{
		    JugadorInfo[opcion][jLicencias][3] = 1;
		    format(string, sizeof(string), "* %s le pasa una licencia a %s.", NombreJugador(playerid), NombreJugador(opcion));
		    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(string, sizeof(string), "* %s te ha dado una licencia de caza.", NombreJugador(playerid));
			SendClientMessage(opcion, CELESTE, string);
			format(string, sizeof(string), "* Has dado una licencia de caza a %s.", NombreJugador(opcion));
			SendClientMessage(playerid, CELESTE, string);
			return 1;
		}
		else if(strcmp(opcion2, "armas", true) == 0)
		{
		    if(sscanf(params, "is[16]s[16]", opcion, opcion2, opcion3))
			{
				SendClientMessage(playerid, GRIS, "Uso: /venderlicencia [ID] [armas] [B | C | D | AE]");
				return 1;
			}
			if(strcmp(opcion3, "b", true) == 0)
			{
			    JugadorInfo[opcion][jLicencias][5] = 1;
			    format(string, sizeof(string), "* %s le pasa una licencia a %s.", NombreJugador(playerid), NombreJugador(opcion));
			    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				format(string, sizeof(string), "* %s te ha dado una licencia de tipo B.", NombreJugador(playerid));
				SendClientMessage(opcion, CELESTE, string);
				format(string, sizeof(string), "* Has dado una licencia de tipo B a %s.", NombreJugador(opcion));
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
			else if(strcmp(opcion3, "c", true) == 0)
			{
			    JugadorInfo[opcion][jLicencias][5] = 2;
			    format(string, sizeof(string), "* %s le pasa una licencia a %s.", NombreJugador(playerid), NombreJugador(opcion));
			    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				format(string, sizeof(string), "* %s te ha dado una licencia de tipo C.", NombreJugador(playerid));
				SendClientMessage(opcion, CELESTE, string);
				format(string, sizeof(string), "* Has dado una licencia de tipo C a %s.", NombreJugador(opcion));
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
			else if(strcmp(opcion3, "d", true) == 0)
			{
			    JugadorInfo[opcion][jLicencias][5] = 3;
			    format(string, sizeof(string), "* %s le pasa una licencia a %s.", NombreJugador(playerid), NombreJugador(opcion));
			    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				format(string, sizeof(string), "* %s te ha dado una licencia de tipo D.", NombreJugador(playerid));
				SendClientMessage(opcion, CELESTE, string);
				format(string, sizeof(string), "* Has dado una licencia de tipo D a %s.", NombreJugador(opcion));
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
			else if(strcmp(opcion3, "ae", true) == 0)
			{
			    JugadorInfo[opcion][jLicencias][5] = 4;
			    format(string, sizeof(string), "* %s le pasa una licencia a %s.", NombreJugador(playerid), NombreJugador(opcion));
			    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				format(string, sizeof(string), "* %s te ha dado una licencia de tipo AE.", NombreJugador(playerid));
				SendClientMessage(opcion, CELESTE, string);
				format(string, sizeof(string), "* Has dado una licencia de tipo AE a %s.", NombreJugador(opcion));
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
			else SendClientMessage(playerid, GRIS, "Uso: /venderlicencia [ID] [armas] [B | C | D | AE]");
			return 1;
		}
		else SendClientMessage(playerid, GRIS, "Uso: /venderlicencia [ID] [caza | armas]");
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a la ATF.");
	return 1;
}

CMD:ircasa(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO, "No tienes permisos");
    if(sscanf(params, "i", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /ircasa [ID]");
		return 1;
	}
	new string[128];
	SetPlayerPos(playerid, CasaInfo[params[0]][cx], CasaInfo[params[0]][cy], CasaInfo[params[0]][cz]);
	format(string, sizeof(string), "ID CASA: %d", CasaInfo[params[0]][cID]);
	SendClientMessage(playerid, AMARILLO, string);
	return 1;
}

CMD:irneg(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO, "No tienes permisos");
    if(sscanf(params, "i", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /irneg [ID]");
		return 1;
	}
	new string[128];
	SetPlayerPos(playerid, NegocioInfo[params[0]][nEX], NegocioInfo[params[0]][nEY], NegocioInfo[params[0]][nEZ]);
	format(string, sizeof(string), "ID NEGOCIO: %d", NegocioInfo[params[0]][nID]);
	SendClientMessage(playerid, AMARILLO, string);
	return 1;
}

CMD:lanzar(playerid, params[])
{
    new opcion[16], string[128];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /lanzar [caña | redes]");
		return 1;
	}
	if(strcmp(opcion, "caña", true) == 0)
	{
	    if(HaLanzadoCana[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya lanzaste la caña, debes esperar...");
	    if(BolsilloID[playerid][11] != 116) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes una caña de pescar en la mano derecha.");
		if(ComprobarPeces(playerid) == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes todo el valde de peces lleno, vé a venderlos. (/vender pesca)");
		if(Pescando[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás pescando. Debes usar '/pescar' primero.");
		if(Pescando[playerid] == 1 && PlayerToPoint(playerid, 10, 379.3164,-2088.7974,7.8359) ||
		Pescando[playerid] == 2 && PlayerToPoint(playerid, 10, 2942.5386,-2051.6477,3.5480) ||
		Pescando[playerid] == 3 && PlayerToPoint(playerid, 10, 1402.4205,-283.2667,1.1304))
		{
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("EstaPescando", 25000, 0, "dd", playerid, Pescando[playerid]);
			ApplyAnimation(playerid,"SWORD","sword_3",50.0,0,1,1,1,1,1);
			format(string, sizeof(string), "* %s coge su caña de pescar con las dos manos y echa un lance.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona adecuada para pescar.");
	}
	else if(strcmp(opcion, "redes", true) == 0)
	{
	    if(HaLanzadoCana[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya lanzaste las redes, debes esperar...");
	    if(ComprobarPeces(playerid) == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes todo el valde de peces lleno, vé a venderlos.");
		if(Pescando[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás pescando. Debes usar '/pescar' primero.");
		if(Pescando[playerid] == 4 && PlayerToPoint(playerid, 10, 619.2984,-2760.6736,9.8829))
		{
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("EstaPescando", 45000, 0, "dd", playerid, Pescando[playerid]);
			format(string, sizeof(string), "* %s lanza unas redes de pesca al mar.", NombreJugador(playerid));
			ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona adecuada de altamar.");
	}
	else { SendClientMessage(playerid, GRIS, "Uso: /lanzar [caña | redes]"); }
	return 1;
}

CMD:pescar(playerid, params[])
{
	if(Pescando[playerid] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás pescando.");
	if(TiempoPesca[playerid] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes esperar 20 minutos entre una pesca y otra.");
    new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /pescar [Muelle | Playa | Río | Altamar]");
		return 1;
	}
	if(strcmp(opcion, "muelle", true) == 0)
	{
	    if(!PlayerToPoint(playerid, 5, 379.3164,-2088.7974,7.8359)) { SetPlayerCheckpoint(playerid, 379.3164,-2088.7974,7.8359, 5); }
	    Pescando[playerid] = 1;
	    SendClientMessage(playerid, CELESTE, "* Usa '/lanzar caña' para intentar pescar algún pescado.");
	    return 1;
	}
	else if(strcmp(opcion, "playa", true) == 0)
	{
	    if(!PlayerToPoint(playerid, 5, 2942.5386,-2051.6477,3.5480)) { SetPlayerCheckpoint(playerid, 2942.5386,-2051.6477,3.5480, 5); }
	    Pescando[playerid] = 2;
	    SendClientMessage(playerid, CELESTE, "* Usa '/lanzar caña' para intentar pescar algún pescado.");
	    return 1;
	}
	else if(strcmp(opcion, "rio", true) == 0 || strcmp(opcion, "río", true) == 0)
	{
	    if(JugadorInfo[playerid][jHabilidad][4] < 60) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes la habilidad suficiente para pescar en ríos.");
	    if(!PlayerToPoint(playerid, 5, 1402.4205,-283.2667,1.1304)) { SetPlayerCheckpoint(playerid, 1402.4205,-283.2667,1.1304, 5); }
	    Pescando[playerid] = 3;
	    SendClientMessage(playerid, CELESTE, "* Usa '/lanzar caña' para intentar pescar algún pescado.");
	    return 1;
	}
	else if(strcmp(opcion, "altamar", true) == 0)
	{
	    if(JugadorInfo[playerid][jHabilidad][4] < 120) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes la habilidad suficiente para pescar en altamar.");
	    if(!PlayerToPoint(playerid, 5, 619.2984,-2760.6736,9.8829)) { SetPlayerCheckpoint(playerid, -24.9605,-2003.8070,1.3926, 5); }
	    Pescando[playerid] = 4;
	    SendClientMessage(playerid, CELESTE, "* Usa '/lanzar redes' para lanzar las redes en altamar.");
	    return 1;
	}
	else { SendClientMessage(playerid, GRIS, "Uso: /pescar [Muelle | Río | Playa | Altamar]"); }
	return 1;
}

CMD:premium(playerid, params[])
{
	if(JugadorInfo[playerid][jPremium] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres premium.");
	new string[256];
	new restante_segundos = JugadorInfo[playerid][jTiempoPremium] - gettime();
	new restante_dias = ((restante_segundos /60) /60) /24;
    restante_segundos -= restante_dias*24*60*60;
	new restante_horas = (restante_segundos /60) /60;
    restante_segundos -= restante_horas*60*60;
	new restante_minutos = (restante_segundos /60);
	restante_segundos -= restante_minutos*60;
	format(string, sizeof(string), "* Tiempo restante: %d días %d horas %d minutos %d segundos", restante_dias, restante_horas, restante_minutos, restante_segundos);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:transferirestado(playerid, params[])
{
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /transferirestado [ Cantidad ]");
	    return 1;
	}
	if(!PlayerToPoint(playerid, 5, 358.7913,187.5178,1008.3859)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la sala del gobierno.");
	if(params[0] < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad debe ser positiva y mayor que 0.");
	new string[128], sql[128];
	format(string, sizeof(string), "* Has transferido %d dólares a la cuenta del gobierno.", params[0]);
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "(( Se ha recibido una transferencia de %s. La cantidad es de %d dólares. ))", NombreJugador(playerid), params[0]);
	MensajeDeFaccionOOC(4, AMARILLO, string);
	CajasFuerte[0] += params[0];
	JugadorInfo[playerid][jDinero] -= params[0];
	format(sql, sizeof(sql), "UPDATE varios SET CajaGobierno = %d WHERE id = 1", CajasFuerte[0]);
	mysql_query(database, sql, false);
	return 1;
}

CMD:venderveha(playerid, params[])
{
    if(sscanf(params, "uii", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /venderveha [ID] [Espacio] [Precio]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(params[2] < 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El precio tiene que ser mayor que 1 dolar.");
	if(params[1] < 0 || params[1] > 2) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio que ingresaste es invalido.");
	if(JugadorInfo[playerid][jCoches][params[1]] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún vehículo en ese espacio.");
	new string[128];
	Oferta[params[0]] = 7;
	OfertaCreador[params[0]] = playerid;
	OfertaPrecio[params[0]] = params[2];
	OfertaCantidad[params[0]] = params[1];
	format(string, sizeof(string), "* %s te ofrece un el vehículo con matrícula %d por %d dólares. Usa '/aceptar' o '/rechazar'.", NombreJugador(playerid), JugadorInfo[playerid][jCoches][params[1]], params[2]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has ofrecido el vehículo con matrícula %d a %s por %d dólares.", JugadorInfo[playerid][jCoches][params[1]], NombreJugador(params[0]), params[2]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:venderveh(playerid, params[])
{
    if(!PlayerToPoint(playerid, 10, 369.1873,-1347.9966,14.5174)) { SetPlayerCheckpoint(playerid, 369.1873,-1347.9966,14.5174, 5); SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la tienda. Se ha marcado con un checkpoint."); return 1; }
    if(ComprobarDueno(GetPlayerVehicleID(playerid),playerid))
    {
        new coche = GetPlayerVehicleID(playerid), string[128], precio;
        precio = PrecioCoche(GetVehicleModel(coche)) / 3;
        format(string, sizeof(string), "¿Está seguro que desea vender su vehículo por %d dólares?", precio);
        ShowPlayerDialog(playerid, VentaVeh, DIALOG_STYLE_MSGBOX, "{FFFFFF}Venta de vehículos", string, "Vender", "Cancelar");
        return 1;
    }
    else
    {
        SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este vehículo.");
    }
	return 1;
}

CMD:heridas(playerid, params[])
{
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, 0x72B1FFFF, "Uso: {FFFFFF}/heridas [ID]");
		return 1;
	}
	new string[128];
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	SendClientMessage(playerid, NARANJA, "____________| Heridas |____________");
	if(JugadorInfo[params[0]][jHeridas][0] != 0) { format(string, sizeof(string), "Herida en la pierna derecha a causa de %d balas.", JugadorInfo[params[0]][jHeridas][0]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][1] != 0) { format(string, sizeof(string), "Herida en la pierna izquierda a causa de %d balas.", JugadorInfo[params[0]][jHeridas][1]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][2] != 0) { format(string, sizeof(string), "Herida en la ingle a causa de %d balas.", JugadorInfo[params[0]][jHeridas][2]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][3] != 0) { format(string, sizeof(string), "Herida en el torso a causa de %d balas.", JugadorInfo[params[0]][jHeridas][3]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][4] != 0) { format(string, sizeof(string), "Herida en el brazo izquierdo a causa de %d balas.", JugadorInfo[params[0]][jHeridas][4]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][5] != 0) { format(string, sizeof(string), "Herida en el brazo derecho a causa de %d balas.", JugadorInfo[params[0]][jHeridas][5]); SendClientMessage(playerid, AMARILLO, string); }
	if(JugadorInfo[params[0]][jHeridas][6] != 0) { format(string, sizeof(string), "Herida en la cabeza a causa de %d balas.", JugadorInfo[params[0]][jHeridas][6]); SendClientMessage(playerid, AMARILLO, string); }
	return 1;
}

CMD:transportar(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 13) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres camionero.");
	if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes trabajar aún, inténtalo más tarde.");
    new opcion[16], coche = GetPlayerVehicleID(playerid), string[128];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /transportar [Productos | Líquidos | Gasolina | Arena | Mudanzas | Hormigón | Aereo]");
		return 1;
	}
	if(strcmp(opcion, "productos", true) == 0)
	{
	    if(JugadorInfo[playerid][jHabilidad][4] < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Habilidad insuficiente, mejor coger otro trabajo.");
	    if(AutoInfo[coche][aFaccionID] != 113) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo de transporte.");
	    Transportando[playerid] = 1;
	    SetPlayerCheckpoint(playerid, 2185.3821,-2301.2087,13.2266,5);
	    format(string, sizeof(string), "Encargado: Bien %s, vé a la fábrica de productos y carga el camión, allí el encargado te dará tu destino.", NombreJugador(playerid));
	    ProxDetector(10, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /transportar [Productos | Gasolina | Arena | Mudanzas | Hormigón | Aereo]");
	}
	return 1;
}

CMD:vendermovil(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 12) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres vendedor de móviles.");
    if(sscanf(params, "ui", params[0], params[1]))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/vendermovil [ID] [Precio]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(params[1] < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad ha de ser positiva.");
	new telefono = 10000 + random(99000), string[128];
	Oferta[params[0]] = 6;
	OfertaCreador[params[0]] = playerid;
	OfertaPrecio[params[0]] = params[1];
	OfertaCantidad[params[0]] = telefono;
	format(string, sizeof(string), "* %s te ofrece un teléfono móvil con número %d por %d dólares. Usa '/aceptar' o '/rechazar'.", NombreJugador(playerid), telefono, params[1]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has ofrecido un teléfono móvil con número %d a %s por %d dólares.", telefono, NombreJugador(params[0]), params[1]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:barrer(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 11) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres barrendero.");
	if(Barriendo[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás barriendo.");
	new coche = GetPlayerVehicleID(playerid);
	if(AutoInfo[coche][aFaccionID] != 111) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una barredora.");
	if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes trabajar aún, inténtalo más tarde.");
	new string[128], ruta = random(2);
	SetPlayerSkin(playerid, 16);
	if(ruta == 0)
	{
		format(string, sizeof(string), "Encargado: Bien %s, haga la ruta este.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		Barriendo[playerid] = 1;
		SetPlayerCheckpoint(playerid, 2263.9011, -2235.3506, 13.1755, 5);
		return 1;
	}
	else if(ruta == 1)
	{
	    format(string, sizeof(string), "Encargado: Bien %s, haga la ruta oeste.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		Barriendo[playerid] = 20;
		SetPlayerCheckpoint(playerid, 1977.6230,-2106.8752,13.0649, 5);
		return 1;
	}
	else if(ruta == 2)
	{
	    format(string, sizeof(string), "Encargado: Bien %s, haga la ruta norte.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		Barriendo[playerid] = 40;
		SetPlayerCheckpoint(playerid, 1965.0912,-1901.2483,13.0875, 5);
	}
	return 1;
}

CMD:tirarbasura(playerid, params[])
{
    new string[128];
	if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha.");
	for(new i = 0; i < MAX_BASURA; i++)
	{
	    if(PlayerToPoint(playerid, 3, BasuraInfo[i][bax], BasuraInfo[i][bay], BasuraInfo[i][baz]))
	    {
	        for(new b = 0; b < MAX_ESPACIOSBASURA; b++)
	        {
	            if(BasuraInfo[i][baid][b] == 0)
	            {
	                format(string, sizeof(string), "* %s tiró un %s al contenedor de basura.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
	                ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	                if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][11] >= 108 && BolsilloID[playerid][11] <= 115){ QuitarObjeto(playerid, 11); }
	                else { BasuraInfo[i][baid][b] = BolsilloID[playerid][11]; BasuraInfo[i][batipo][b] = BolsilloTipo[playerid][11]; BasuraInfo[i][bacantidad][b] = BolsilloCantidad[playerid][11]; QuitarObjeto(playerid, 11); }
                    SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
					GuardoArmaSegura[playerid] = 1;
					return 1;
				}
	        }
	        SendClientMessage(playerid, ROJO_OSCURO, "* El contenedor de basura está lleno.");
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un contenedor de basura.");
	return 1;
}

CMD:tirarobjeto(playerid, params[])
{
    new string[128];
	if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha.");
    if(!PlayerToPoint(playerid, 3, 215.5868,185.3376,1003.0313)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el vestuario de LSPD.");
    format(string, sizeof(string), "* %s tiró un %s al depósito de LSPD.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	QuitarObjeto(playerid, 11);
	SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
	GuardoArmaSegura[playerid] = 1;
    return 1;
}

CMD:explorar(playerid, params[])
{
	new string[128];
	if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha libre para poder buscar en el contenedor.");
	for(new i = 0; i < MAX_BASURA; i++)
	{
	    if(PlayerToPoint(playerid, 3, BasuraInfo[i][bax], BasuraInfo[i][bay], BasuraInfo[i][baz]))
	    {
	        new contador = 0;
	        for(new b = 0; b < MAX_ESPACIOSBASURA; b++)
	        {
				if(BasuraInfo[i][baid][b] == 0) contador++;
	        }
	        if(contador == MAX_ESPACIOSBASURA) return SendClientMessage(playerid, ROJO_OSCURO, "* El contenedor está vacío.");
	        new suerte = random(MAX_ESPACIOSBASURA)+1;
	        if(suerte == (MAX_ESPACIOSBASURA+1))
	        {
	            suerte = MAX_ESPACIOSBASURA;
	            if(BasuraInfo[i][baid][suerte] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No has encontrado nada en el contenedor de basura.");
	            format(string, sizeof(string), "* Has encontrado un %s en el contenedor. (Cantidad: %d)", ObtenerNombreObjeto(BasuraInfo[i][baid][suerte]), BasuraInfo[i][bacantidad][suerte]);
	            SendClientMessage(playerid, CELESTE, string);
	            format(string, sizeof(string), "* %s busca en la basura y encuentra un %s.", NombreJugador(playerid), ObtenerNombreObjeto(BasuraInfo[i][baid][suerte]));
	            ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            DarObjeto(playerid, BasuraInfo[i][baid][suerte], BasuraInfo[i][batipo][suerte], BasuraInfo[i][bacantidad][suerte]);
	            BasuraInfo[i][baid][suerte] = 0; BasuraInfo[i][batipo][suerte] = 0; BasuraInfo[i][bacantidad][suerte] = 0;
	            SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
				GuardoArmaSegura[playerid] = 1;
	            return 1;
	        }
	        else
	        {
	            if(BasuraInfo[i][baid][suerte] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No has encontrado nada en el contenedor de basura.");
	            format(string, sizeof(string), "* Has encontrado un %s en el contenedor. (Cantidad: %d)", ObtenerNombreObjeto(BasuraInfo[i][baid][suerte]), BasuraInfo[i][bacantidad][suerte]);
	            SendClientMessage(playerid, CELESTE, string);
	            format(string, sizeof(string), "* %s busca en la basura y encuentra un %s.", NombreJugador(playerid), ObtenerNombreObjeto(BasuraInfo[i][baid][suerte]));
	            ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            DarObjeto(playerid, BasuraInfo[i][baid][suerte], BasuraInfo[i][batipo][suerte], BasuraInfo[i][bacantidad][suerte]);
	            BasuraInfo[i][baid][suerte] = 0; BasuraInfo[i][batipo][suerte] = 0; BasuraInfo[i][bacantidad][suerte] = 0;
	            SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
				GuardoArmaSegura[playerid] = 1;
	            return 1;
	        }
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un contenedor de basura.");
	return 1;
}

CMD:cogerbasura(playerid, params[])
{
	new string[128];
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No puede usar este comando desde el camión de basura.");
	if(Basurero[playerid] == 2)
	{
	    if(!PlayerToPoint(playerid, 3, 2242.1199,-1756.3590,13.5455))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 2242.1199,-1756.3590,13.5455, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2434.3503,-1470.4613,23.3952, 5);
	    Basurero[playerid] = 3;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 4)
	{
	    if(!PlayerToPoint(playerid, 3, 2438.9653,-1470.3248,24.0000))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 2438.9653,-1470.3248,24.0000, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2454.1941,-1279.9526,23.4079, 5);
	    Basurero[playerid] = 5;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 6)
	{
	    if(!PlayerToPoint(playerid, 3, 2458.2861,-1279.5405,24.0000))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 2458.2861,-1279.5405,24.0000, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2110.1350,-1103.5632,24.6373, 5);
	    Basurero[playerid] = 7;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 8)
	{
	    if(!PlayerToPoint(playerid, 3, 2110.9761,-1099.0762,25.2322))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 2110.9761,-1099.0762,25.2322, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1844.1753,-1310.9166,12.9614, 5);
	    Basurero[playerid] = 9;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 10)
	{
	    if(!PlayerToPoint(playerid, 3, 1839.2401,-1311.2891,13.5478))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1839.2401,-1311.2891,13.5478, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1824.4749,-1561.0847,12.9295, 5);
	    Basurero[playerid] = 11;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 12)
	{
	    if(!PlayerToPoint(playerid, 3, 1816.9336,-1558.0879,13.5212))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1816.9336,-1558.0879,13.5212, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1818.7723,-1904.1506,12.9732, 5);
	    Basurero[playerid] = 13;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 14)
	{
	    if(!PlayerToPoint(playerid, 3, 1813.7947,-1904.1361,13.5707))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1813.7947,-1904.1361,13.5707, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2125.0283,-2140.4390,14.1474, 5);
	    Basurero[playerid] = 15;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, ya has finalizado la ruta, vuelve al aparcamiento para cobrar tu paga.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	/* RUTA centro */
	else if(Basurero[playerid] == 21)
	{
	    if(!PlayerToPoint(playerid, 3, 1461.5865,-1487.7188,13.5469))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1461.5865,-1487.7188,13.5469, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1383.0800,-1139.1320,23.2203, 5);
	    Basurero[playerid] = 22;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 23)
	{
	    if(!PlayerToPoint(playerid, 3, 1383.1660,-1132.6079,23.8281))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1383.1660,-1132.6079,23.8281, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1294.0261,-1036.5035,30.6339, 5);
	    Basurero[playerid] = 24;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 25)
	{
	    if(!PlayerToPoint(playerid, 3, 1293.0375,-1030.1757,31.2339))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1293.0375,-1030.1757,31.2339, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1034.1090,-1037.6257,31.1955, 5);
	    Basurero[playerid] = 26;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 27)
	{
	    if(!PlayerToPoint(playerid, 3, 1033.3312,-1031.2925,31.9929))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1033.3312,-1031.2925,31.9929, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 940.3417,-1240.2091,15.8697, 5);
	    Basurero[playerid] = 28;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 29)
	{
	    if(!PlayerToPoint(playerid, 3, 934.3425,-1240.8853,16.4387))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 934.3425,-1240.8853,16.4387, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1023.0825,-1329.0867,12.9592, 5);
	    Basurero[playerid] = 30;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 31)
	{
	    if(!PlayerToPoint(playerid, 3, 1023.3083,-1334.8911,13.5432))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1023.3083,-1334.8911,13.5432, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1160.1412,-1408.2209,13.0095, 5);
	    Basurero[playerid] = 32;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 33)
	{
	    if(!PlayerToPoint(playerid, 3, 1160.5409,-1414.1307,13.5759))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1160.5409,-1414.1307,13.5759, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2125.0283,-2140.4390,14.1474, 5);
	    Basurero[playerid] = 34;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	/* Basurero oeste */
	else if(Basurero[playerid] == 41)
	{
	    if(!PlayerToPoint(playerid, 3, 1647.7836,-1864.1681,13.5358))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1647.7836,-1864.1681,13.5358, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1142.0361,-1849.9016,12.9523, 5);
	    Basurero[playerid] = 42;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 43)
	{
	    if(!PlayerToPoint(playerid, 3, 1141.5594,-1843.7255,13.5450))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1141.5594,-1843.7255,13.5450, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 666.1183,-1736.2782,13.0786, 5);
	    Basurero[playerid] = 44;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 45)
	{
	    if(!PlayerToPoint(playerid, 3, 667.0949,-1730.3627,13.6846))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 667.0949,-1730.3627,13.6846, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 735.7942,-1083.3600,21.2683, 5);
	    Basurero[playerid] = 46;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 47)
	{
	    if(!PlayerToPoint(playerid, 3, 741.7759,-1089.4927,21.6763))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 741.7759,-1089.4927,21.6763, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 790.1992,-1481.5485,12.9541, 5);
	    Basurero[playerid] = 48;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 49)
	{
	    if(!PlayerToPoint(playerid, 3, 782.1559,-1479.8925,13.6166))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 782.1559,-1479.8925,13.6166, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 982.2037,-1574.6221,12.9465, 5);
	    Basurero[playerid] = 50;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 51)
	{
	    if(!PlayerToPoint(playerid, 3, 982.2037,-1574.6221,12.9465))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 982.2037,-1574.6221,12.9465, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 1352.5239,-1582.1696,12.9424, 5);
	    Basurero[playerid] = 52;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	else if(Basurero[playerid] == 53)
	{
	    if(!PlayerToPoint(playerid, 3, 1349.4160,-1590.0479,13.4600))
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el cubo de basura indicado.");
            SetPlayerCheckpoint(playerid, 1349.4160,-1590.0479,13.4600, 5);
            return 1;
		}
	    SetPlayerCheckpoint(playerid, 2125.0283,-2140.4390,14.1474, 5);
	    Basurero[playerid] = 54;
	    SendClientMessage(playerid, CELESTE, "* Buen trabajo, sube al camión y dirígete al próximo cubo de basura.");
	    format(string, sizeof(string), "* %s coge unas bolsas de basura y las deposita en el camión de basura.", NombreJugador(playerid));
	    ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	return 1;
}

CMD:basura(playerid, params[])
{
	new coche = GetPlayerVehicleID(playerid);
	if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes trabajar aún, inténtalo más tarde.");
	if(JugadorInfo[playerid][jTrabajo] != 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres basurero.");
    if(AutoInfo[coche][aFaccionID] != 110) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un camión de basura.");
    if(Trabajando[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio. Vé al trabajo y usa '/trabajar'.");
    new ruta = random(2), string[128];
	switch (ruta)
	{
	    case 0:
	    {
	        Basurero[playerid] = 1;
	        SetPlayerCheckpoint(playerid, 2241.8054,-1751.8950,12.9651, 5);
	        format(string, sizeof(string), "Encargado: %s, te encargarás de realizar la ruta de la zona este.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        SendClientMessage(playerid, CELESTE, "* Realiza toda la ruta de checkpoints para cobrar el trabajo.");
	        return 1;
	    }
	    case 1:
	    {
	        Basurero[playerid] = 20;
	        SetPlayerCheckpoint(playerid, 1452.8132,-1487.6974,12.9396, 5);
	        format(string, sizeof(string), "Encargado: %s, te encargarás de realizar la ruta de la zona centro.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        SendClientMessage(playerid, CELESTE, "* Realiza toda la ruta de checkpoints para cobrar el trabajo.");
	        return 1;
		}
	    case 2:
	    {
	        Basurero[playerid] = 40;
	        SetPlayerCheckpoint(playerid, 1647.7836,-1864.1681,13.5358, 5);
	        format(string, sizeof(string), "Encargado: %s, te encargarás de realizar la ruta de la zona oeste.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        SendClientMessage(playerid, CELESTE, "* Realiza toda la ruta de checkpoints para cobrar el trabajo.");
	        return 1;
		}
	}
	return 1;
}

CMD:respawn(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new opcion[32], opcion2;
    if(sscanf(params, "s[32]I(-1)", opcion, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /respawn [Opción]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: General, Faccion, Trabajo, Matricula");
	    return 1;
	}
	if(strcmp(opcion, "general", true) == 0)
	{
	    new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
 		{
        	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
 		}
   		for(new i = 0; i < MAX_VEHICLES; i++)
		{
		 	if(!unwanted[i]) SetVehicleToRespawn(i);
		}
		SendClientMessageToAll(NARANJA, "Administración: Respawn general de vehículos realizado.");
		return 1;
	}
	if(strcmp(opcion, "matricula", true) == 0)
	{
	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(AutoInfo[i][aID] == opcion2)
	        {
	    		SetVehicleToRespawn(i); break;
			}
		}
		SendClientMessage(playerid, CELESTE, "* Has respawneado el vehículo.");
		return 1;
	}
	if(strcmp(opcion, "faccion", true) == 0)
	{
	    new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
 		{
        	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
 		}
   		for(new i = 0; i < MAX_VEHICLES; i++)
		{
		 	if(!unwanted[i] && AutoInfo[i][aFaccionID] == opcion2) SetVehicleToRespawn(i);
		}
		printf("Respawn de vehículos de la facción %d realizado con éxito por %s.", opcion2, NombreJugador(playerid));
		return 1;
	}
	if(strcmp(opcion, "trabajo", true) == 0)
	{
	    new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
 		{
        	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
 		}
   		for(new i = 0; i < MAX_VEHICLES; i++)
		{
		 	if(!unwanted[i] && (AutoInfo[i][aFaccionID] == (100+opcion2))) SetVehicleToRespawn(i);
		}
		printf("Respawn de vehículos del trabajo %d realizado con éxito por %s.", opcion2, NombreJugador(playerid));
		return 1;
	}
	return 1;
}

CMD:hora(playerid, params[])
{
    new mtext[20], string[128];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Enero"; }
	else if(month == 2) { mtext = "Febrero"; }
	else if(month == 3) { mtext = "Marzo"; }
	else if(month == 4) { mtext = "Abril"; }
	else if(month == 5) { mtext = "Mayo"; }
	else if(month == 6) { mtext = "Junio"; }
	else if(month == 7) { mtext = "Julio"; }
	else if(month == 8) { mtext = "Augosto"; }
	else if(month == 9) { mtext = "Septiembre"; }
	else if(month == 10) { mtext = "Octubre"; }
	else if(month == 11) { mtext = "Noviembre"; }
	else if(month == 12) { mtext = "Diciembre"; }
    new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	format(string, sizeof(string), "~y~%d %s~n~~w~%d:%d", day, mtext, hour, minuite);
	GameTextForPlayer(playerid, string, 5000, 1);
    ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
    format(string, sizeof(string), "* %s mira la hora en su reloj.", NombreJugador(playerid));
	ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	return 1;
}

CMD:cargobob(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres militar.");
	new vw = GetPlayerVirtualWorld(playerid);
	new coche = ObtenerVehiculoPorID(205);
	new Float:Pos[3];
	GetVehiclePos(coche, Pos[0], Pos[1], Pos[2]);
	if(vw == 0)
	{
		if(!PlayerToPoint(playerid, 2, Pos[0], Pos[1], Pos[2])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del cargobob.");
		SetPlayerPos(playerid, 2827.2397,1360.7455,10.7500);
		SetPlayerFacingAngle(playerid, 188);
		SetPlayerInterior(playerid, 4);
		SetPlayerVirtualWorld(playerid, 4);
		return 1;
	}
	else
	{
	    SetPlayerPos(playerid, Pos[0], Pos[1]+5, Pos[2]);
	    SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	return 1;
}

CMD:robarcaja(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres ladrón.");
    if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando aún, debes esperar 20 minutos (jugados) para usarlos nuevamente.");
	if(JugadorInfo[playerid][jHabilidad][0] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes habilidad suficiente para robar. Necesitas al menos 10 puntos de habilidad.");
    if(!PlayerToPoint(playerid, 20, NegocioInfo[EstaEnNegocio[playerid]][nIX], NegocioInfo[EstaEnNegocio[playerid]][nIY], NegocioInfo[EstaEnNegocio[playerid]][nIZ])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un negocio.");
    if(NegocioInfo[EstaEnNegocio[playerid]][nCerrada] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes robar si el negocio está cerrado.");
	if(NegocioInfo[EstaEnNegocio[playerid]][nDinero] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* La caja del negocio está vacía.");
	new string[128];
	GetPlayerPos(playerid, PosRobo[playerid][0], PosRobo[playerid][1], PosRobo[playerid][2]);
	RobandoDinero[playerid] = 1;
	RobandoNegocio[playerid] = EstaEnNegocio[playerid];
	format(string, sizeof(string), "~w~Dinero robado: ~g~$%d", RobandoDinero[playerid]);
	GameTextForPlayer(playerid, string, 1000, 6);
	return 1;
}

CMD:robar(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres ladrón.");
    if(EstaEnCasa[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna casa.");
    if(JugadorInfo[playerid][jUltimoTrabajo] != 0) return SendClientMessage(playerid, CELESTE, "Debes esperar para volver a robar. Puedes ver cuanto falta con /tiempotrabajo");
	if(EstaRobando[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás robando, espera...");
	if(BolsilloID[playerid][11] != 0 || BolsilloID[playerid][12] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener ambas manos vacias.");
	if(CasaInfo[EstaEnCasa[playerid]][cComprada] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes robar en una casa que está en venta.");
	if(Robos[playerid][0] != NOEXISTE && Robos[playerid][1] != NOEXISTE && Robos[playerid][2] != NOEXISTE && Robos[playerid][3] != NOEXISTE)
	{
		SendClientMessage(playerid, ROJO_OSCURO, "* Ya has robado bastante, ve a una casa de empeño a vender las cosas.");
        JugadorInfo[playerid][jUltimoTrabajo] = 20;
		return 1;
	}
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	new timer = (random(25000)+20000);
	GameTextForPlayer(playerid, "~w~Buscando articulo...", timer, 3);
	EstaRobando[playerid] = 1;
	SetTimerEx("RobarCasa", timer, 0, "ddfff", playerid, EstaEnCasa[playerid], Pos[0], Pos[1], Pos[2]);
	return 1;
}

CMD:carterista(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres ladrón.");
    if(JugadorInfo[playerid][jUltimoTrabajo] != 0) return SendClientMessage(playerid, CELESTE, "Debes esperar para volver a robar. Puedes ver cuanto falta con /tiempotrabajo");
	if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando aún, debes esperar 20 minutos (jugados) para usarlos nuevamente.");
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /carterista [ ID ]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(1.5, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	new suerte, string[128];
	if(JugadorInfo[playerid][jHabilidad][0] >= 0 && JugadorInfo[playerid][jHabilidad][0] <= 15){ suerte = random(15); }
	else if(JugadorInfo[playerid][jHabilidad][0] >= 16 && JugadorInfo[playerid][jHabilidad][0] <= 25){ suerte = random(10); }
	else if(JugadorInfo[playerid][jHabilidad][0] >= 26){ suerte = random(7); }
	if(suerte == 2 || suerte == 4 || suerte == 6 || suerte == 8 || suerte == 10 || suerte == 12 || suerte == 14)
	{
		new dinero = random(150);
		if(JugadorInfo[params[0]][jDinero] < dinero)
		{
			format(string, sizeof(string), "* Has intentado robarle a %s, pero se ha dado cuenta.", NombreJugador(params[0]));
			SendClientMessage(playerid, 0x32CD32FF, string);
			format(string, sizeof(string), "[ID: %d] Notas como alguien te está intentando robar la cartera.", params[0]);
			SendClientMessage(params[0], 0x32CD32FF, string);
			format(string, sizeof(string), "* %s introduce disimuladamente la mano en el bolsillo de %s.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else
		{
			if(dinero == 0)
			{
				format(string, sizeof(string), "[ID: %d] Notas como alguien te está intentando robar la cartera.", params[0]);
				SendClientMessage(params[0], 0x32CD32FF, string);
				format(string, sizeof(string), "* Has intentado robarle a %s, pero se ha dado cuenta.", NombreJugador(params[0]));
				SendClientMessage(playerid, 0x32CD32FF, string);
				return 1;
			}
			format(string, sizeof(string), "* Has conseguido robar %d dólares a %s.", dinero, NombreJugador(params[0]));
			SendClientMessage(playerid, CELESTE, string);
			format(string, sizeof(string), "* %s introduce disimuladamente la mano en el bolsillo de %s y le roba algo de dinero.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			JugadorInfo[playerid][jDinero] += dinero; JugadorInfo[params[0]][jDinero] -= dinero;
			return 1;
		}
	}
	else
	{
		format(string, sizeof(string), "* Has intentado robarle a %s, pero se ha dado cuenta.", NombreJugador(params[0]));
		SendClientMessage(playerid, 0x32CD32FF, string);
		format(string, sizeof(string), "[ID: %d] Notas como alguien te está intentando robar la cartera.", params[0]);
		SendClientMessage(params[0], 0x32CD32FF, string);
		format(string, sizeof(string), "* %s introduce disimuladamente la mano en el bolsillo de %s.", NombreJugador(playerid), NombreJugador(params[0]));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		JugadorInfo[playerid][jUltimoTrabajo] = 5;
	}
	return 1;
}

CMD:forzarladron(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 8) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres ladrón.");
    if(JugadorInfo[playerid][jUltimoTrabajo] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando aún, debes esperar 20 minutos (jugados) para usarlos nuevamente.");
    new opcion1[128];
    if(sscanf(params, "s[128]", opcion1))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /forzarladron [ Casa | Negocio ]");
	    return 1;
	}
 	if(!strcmp(opcion1, "casa", true))
	{
	    if(JugadorInfo[playerid][jHabilidad][0] < 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes la habilidad suficiente para forzar una casa.");
	    if(BolsilloID[playerid][11] != 90 && BolsilloID[playerid][11] != 91) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener una palanca o ganzúa en tu mano derecha.");
	    for(new i = 0; i < sizeof(CasaInfo); i++)
	    {
	        if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
			{
			    if(CasaInfo[i][cComprada] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes forzar una casa que esté en venta.");
			    if(CasaInfo[i][cAbierta] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No es necesario forzar la cerradura, la puerta ya está abierta.");
				new timer = (random(15000)+15000);
				if(BolsilloID[playerid][11] == 90)
			    {
			        new suerte;
			        if(CasaInfo[i][cCerradura] == 0)
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(10); }
			        }
			        else
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(25); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(15); }
			        }
			        GameTextForPlayer(playerid, "~w~Forzando cerradura", timer, 3);
			        new Float:Pos[3];
			        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					SetTimerEx("ForzarCerradura", timer, 0, "ddddfff", playerid, i, suerte, 1, Pos[0], Pos[1], Pos[2], 1);
					return 1;
			    }
			    else if(BolsilloID[playerid][11] == 91)
			    {
			        new suerte;
			        if(CasaInfo[i][cCerradura] == 0)
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(10); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(5); }
			        }
			        else
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(10); }
			        }
			        GameTextForPlayer(playerid, "~w~Forzando cerradura", timer, 3);
					new Float:Pos[3];
			        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					SetTimerEx("ForzarCerradura", timer, 0, "ddddfff", playerid, i, suerte, 2, Pos[0], Pos[1], Pos[2], 1);
					return 1;
			    }
			}
	    }
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	    return 1;
	}
	else if(!strcmp(opcion1, "negocio", true))
	{
	    if(JugadorInfo[playerid][jHabilidad][0] < 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes la habilidad suficiente para forzar una casa.");
	    if(BolsilloID[playerid][11] != 90 && BolsilloID[playerid][11] != 91) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener una palanca o ganzúa en tu mano derecha.");
	    for(new i = 0; i < sizeof(NegocioInfo); i++)
	    {
	        if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
			{
			    if(NegocioInfo[i][nComprada] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes forzar un negocio que esté en venta.");
			    if(NegocioInfo[i][nCerrada] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No es necesario forzar la cerradura, la puerta ya está abierta.");
				new timer = (random(15000)+15000);
				if(BolsilloID[playerid][11] == 90)
			    {
			        new suerte;
			        if(NegocioInfo[i][nCerradura] == 0)
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(10); }
			        }
			        else
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(25); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(15); }
			        }
			        GameTextForPlayer(playerid, "~w~Forzando cerradura", timer, 3);
			        new Float:Pos[3];
			        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					SetTimerEx("ForzarCerradura", timer, 0, "ddddfff", playerid, i, suerte, 1, Pos[0], Pos[1], Pos[2], 2);
					return 1;
			    }
			    else if(BolsilloID[playerid][11] == 91)
			    {
			        new suerte;
			        if(NegocioInfo[i][nCerradura] == 0)
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(10); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(5); }
			        }
			        else
			        {
			            if(JugadorInfo[playerid][jHabilidad][0] >= 25 && JugadorInfo[playerid][jHabilidad][0] <= 35) { suerte = random(20); }
			            else if(JugadorInfo[playerid][jHabilidad][0] >= 35 && JugadorInfo[playerid][jHabilidad][0] <= 50) { suerte = random(15); }
			            else if(JugadorInfo[playerid][jHabilidad][0] > 50) { suerte = random(10); }
			        }
			        GameTextForPlayer(playerid, "~w~Forzando cerradura", timer, 3);
					new Float:Pos[3];
			        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					SetTimerEx("ForzarCerradura", timer, 0, "ddddfff", playerid, i, suerte, 2, Pos[0], Pos[1], Pos[2], 2);
					return 1;
			    }
			}
	    }
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /forzarladron [ Casa | Negocio ]");
	}
	return 1;
}

	CMD:reportar(playerid,params[])
	{
		new string[128];
    	if(sscanf(params,"us[122]",params[0],params[1])) return SendClientMessage(playerid, BLANCO, "{FFFF00}Uso: {FFFFFF}/reportar ID Razón.");
		if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, "No puedes reportarte a tí mismo - Usa {FFFFFF}/solicitar{E60000} si requieres un miembro del Staff.");
		if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "Jugador desconectado");
		if(GetPVarInt(playerid,"PideREPORTE")) return SendClientMessage(playerid, ROJO_OSCURO, "Ya tienes un reporte activo, espera 1 minuto.");
		format(string, sizeof(string), "{FF0000}[Reporte]{FFFFFF} %s(%d) a %s(%d): %s {21D121}(/ar %d)", NombreJugador(playerid), playerid,NombreJugador(params[0]),params[0],params[1],playerid);
		ABroadCast(0xFF0000FF, string, 2);


		SetPVarInt(playerid,"PideREPORTE",1);
		SetTimerEx("SacarReporte", 60000, false, "i", playerid);

		SetPVarInt(playerid,"REPORTADO_ID", params[0]);
		format(string, sizeof(string), "Reportaste{FFFFFF} a {21D121}%s{FFFFFF} razón:{21D121} %s{FFFFFF}. El reporte será evaluado.", NombreJugador(params[0]),params[1]);
		SendClientMessage(playerid, 0x21D121FF, string);


		return 1;
	}

    forward SacarReporte(playerid);
	public SacarReporte(playerid)
	{
		return DeletePVar(playerid,"PideREPORTE");
	}

CMD:ar(playerid,params[])
	{
	    new string[128];
	    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    if(sscanf(params,"u",params[0])) return SendClientMessage(playerid, ROJO, "/ar <ID/Nombre>");
	    if(!GetPVarInt(params[0],"PideREPORTE")) return SendClientMessage(playerid, ROJO, "Este jugador no reportó nada u otro administrador ya lo atendió.");

		format(string, sizeof(string), "[Reporte] {FFFFFF}%s aceptó el reporte de %s.", NombreJugador(playerid),NombreJugador(params[0]));
		ABroadCast(0x72B1FFFF, string, 1);

		format(string, sizeof(string), "%s {FFFFFF}aceptó tu reporte.", NombreJugador(playerid));
		SendClientMessage(params[0], 0x21D121FF, string);

		SetPVarInt(playerid, "REPORT_IDSPEC", GetPVarInt(params[0], "REPORTADO_ID") );

		DeletePVar(params[0],"REPORTADO_ID");
		DeletePVar(params[0],"PideREPORTE");

		ShowPlayerDialog(playerid, dSpecReport, DIALOG_STYLE_MSGBOX, "Reporte", "¿Desea spectear al jugador reportado?", "Si", "No");
		return 1;
	}

CMD:solicitar(playerid, params[])
	{
	    ShowPlayerDialog(playerid, dSolicitarADM, DIALOG_STYLE_LIST, "¿Qué necesitás?", "{FF8600}Ayudante\n{21D121}Moderador\n{EA7384}Administrador", "Enviar", "Cancelar");
		return 1;
	}

CMD:as(playerid,params[])
	{
		if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    if(sscanf(params,"u",params[0])) return SendClientMessage(playerid, AMARILLO, "/as 'ID'");
		if(params[0] == INVALID_PLAYER_ID) return SendClientMessage(playerid, ROJO_OSCURO, "Jugador desconectado");
		if(GetPVarInt(playerid, "AceptoAyuda")) return SendClientMessage(playerid, ROJO_OSCURO, "Primero debes terminar la ayuda actual");
		if(!GetPVarInt(params[0], "SolicitaADM")) return SendClientMessage(playerid, ROJO_OSCURO, "Este jugador no solicitó ayuda o ya fue atendido.");
		new string[150];
		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "SOLICITUD_PX" , x);
		SetPVarFloat(playerid, "SOLICITUD_PY" , y);
		SetPVarFloat(playerid, "SOLICITUD_PZ" , z);
		SetPVarInt  (playerid, "SOLICITUD_INT", GetPlayerInterior(playerid)    );
		SetPVarInt  (playerid, "SOLICITUD_VW" , GetPlayerVirtualWorld(playerid));

		GetPlayerPos(params[0], x, y  , z);
		SetPlayerPos(playerid , x, y+1, z);
		SetPlayerInterior(playerid,     GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		format(string, sizeof(string), "[Solicitud] {FFFFFF}%s aceptó la solicitud de %s", NombreJugador(playerid),NombreJugador(params[0]));
		ABroadCast(0x72B1FFFF, string, 1);
        SetTimerEx("Desfrizear", 3000, 0, "d", playerid);

		format(string, sizeof(string), "[Solicitud] {FFFFFF}%s aceptó tu solicitud y se ha teletransportado contigo.", NombreJugador(playerid));
		SendClientMessage(params[0], 0x72B1FFFF, string);

		format(string, sizeof(string), "Aceptaste la solicitud de {72B1FF}%s. {FFFFFF}Utiliza {21D121}/terminarayuda {FFFFFF}cuando termines de ayudar.", NombreJugador(params[0]));
		SendClientMessage(playerid, BLANCO, string);
		SetPVarInt(playerid, "AceptoAyuda", true);
		DeletePVar(params[0], "SolicitaADM");
		return 1;
	}

CMD:terminarayuda(playerid, params[])
	{
		if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
		if(!GetPVarInt(playerid, "AceptoAyuda")) return SendClientMessage(playerid, ROJO_OSCURO, "No estás ayudando a nadie.");

		new
		    Float:x, Float:y, Float:z, intid, vw;

		x = GetPVarFloat(playerid, "SOLICITUD_PX");
		y = GetPVarFloat(playerid, "SOLICITUD_PY");
		z = GetPVarFloat(playerid, "SOLICITUD_PZ");
		intid = GetPVarInt(playerid, "SOLICITUD_INT");
		vw = GetPVarInt(playerid, "SOLICITUD_VW");

		DeletePVar(playerid, "SOLICITUD_PX");
		DeletePVar(playerid, "SOLICITUD_PY");
		DeletePVar(playerid, "SOLICITUD_PZ");
		DeletePVar(playerid, "SOLICITUD_INT");
		DeletePVar(playerid, "SOLICITUD_VW");

		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, intid);
		SetPlayerVirtualWorld(playerid, vw);
        SetTimerEx("Desfrizear", 3000, 0, "d", playerid);

		DeletePVar(playerid, "AceptoAyuda");
		return 1;
	}

CMD:limpiarchat(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	LimpiarConsolaATodos(120);
	format(string, sizeof(string), "Administración: %s ha limpiado el chat.", NombreJugador(playerid));
	ABroadCast(ROJO, string, 1);
	SendClientMessageToAll(ROJO_OSCURO, "Un administrador borró el log del chat.");
    return 1;
}

CMD:rduda(playerid, params[])
{
    new string[124];
    if(isnull(params)) return SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/duda [Pregunta] {ff9c00}>> {FFFFFF}Usa {ff9c00}/ayuda duda {FFFFFF}si no sabes como usarlo");
    switch(JugadorInfo[playerid][jAdmin])
    {
        case 1: format(string, 124, "[{ff9c00}Ayudante{43962D}] %s: %s", NombreJugador(playerid), params);
        case 2: format(string, 124, "[{ff9c00}Moderador{43962D}] %s: %s", NombreJugador(playerid), params);
        case 3: format(string, 124, "[{ff9c00}Moderador{43962D}] %s: %s", NombreJugador(playerid), params);
        case 4: format(string, 124, "[{ff9c00}Moderador{43962D}] %s: %s", NombreJugador(playerid), params);
        case 5: format(string, 124, "[{ff9c00}Admin{43962D}] %s: %s", NombreJugador(playerid), params);
    }
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        if(JugadorInfo[playerid][jAdmin] > 0) SendClientMessage(i,0x43962DFF,string);
    }
    return 1;
}

CMD:gps(playerid, params[])
{
        if(BolsilloID[playerid][11] != 117 && BolsilloID[playerid][12] != 117) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener un GPS en una mano.");
		{
		    ShowPlayerDialog(playerid, GUIA, DIALOG_STYLE_LIST, "{FFFFFF}Guía de Los Santos", "{FFFFFF}Ayuntamiento\nComisaría\nHospital\nParque de bomberos\nLos Santos Radio Televisión\nU.S. Army\nDepósito\nAutoescuela\nJuzgados\nEstación de autobuses\nTaller de mecánica\n\t{00FFFF}Trabajos públicos\n{FFFFFF}Conductor de autobus\nMecánico\nBasurero\nBarrendero\nVendedor de móviles\nCamionero", "Ver info", "Cancelar");
			//ShowPlayerDialog(playerid,dGPS,DIALOG_STYLE_LIST, "{FFFFFF}Menú GPS", "» Trabajos\n» Hoteles\n» Puntos de Interés\n» Concesionarios", "Aceptar", "Cancelar");
		}
		return 1;
}

CMD:duda(playerid, params[])
{
   if(JugadorInfo[playerid][jAdmin] > 0) return cmd_rduda(playerid, params);
    new string[124];
    if(isnull(params)) return SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/duda [Pregunta] {ff9c00}>> {FFFFFF}Usa {ff9c00}/ayuda duda {FFFFFF}si no sabes como usarlo");
    format(string, 124, "No puedes hablar por el canal de dudas por %d minutos (%d segundos).", Muteduda[playerid]/60, Muteduda[playerid]);
    if(Muteduda[playerid] != 0) return SendClientMessage(playerid, NARANJA, string);
    if(EnvioDuda[playerid] != 0){
	format(string, 124, "Debes esperar {21D121}%d {ffffff}segundos para enviar otra duda.", EnvioDuda[playerid]);
	SendClientMessage(playerid, BLANCO, string);
	return 1;
	}
    if(isnull(params)) return SendClientMessage(playerid, -1, "Uso: /duda [Pregunta]  >> Usa /ayuda duda si no sabes como usarlo");
    EnvioDuda[playerid] = 1*60;
    for(new i ; i < MAX_PLAYERS ; i++)
    if(sscanf(params, "s[128]", params[0]))
    if(!CanalDuda[i]) return 1;
    {
        format(string, 124, "[{E4EF0F}Usuario{43962D}] %s (%d): %s",NombreJugador(playerid), playerid, params[0]);
        SendClientMessageToAll(0x43962DFF, string);
    }
    return 1;
}

CMD:rastrear(playerid, params[]){
	    if(JugadorInfo[playerid][jMiembro] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "[ERROR] Usted no forma parte del Departamento de Policía.");
		if(sscanf(params, "s[32]i", params[0], params[1], params[2])){
		    SendClientMessage(playerid, AZUL, "[USO] {FFFFFF}'/rastrear' [Opción]");
		    SendClientMessage(playerid, AZUL, "Opciones disponibles: {FFFFFF}Teléfono [Número] | Persona [ID Jugador] | Vehículo [Matrícula]");
		    return 1;
		}
		/*if(strcmp(params[0], "telefono", true)){
		    if(params[1] < 1000 || params[1] > 9999) return Mensaje(playerid, 0x0000FF00, "[ERROR] El número introducido es inexistente.");
		    foreach(new i : Player){
				if(JugadorInfo[i][jTelefono] == params[1]){
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X, Y, Z);
					SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
					Mensaje(playerid, COLOR_BLANCO, "La ubicación del número seleccionado ha sido marcado en el GPS.");
					return 1;
				}
		    }Mensaje(playerid, 0x0000FF00, "[ERROR] El teléfono se encuentra apagado o fuera de cobertura.");
		    return 1;
		}
		if(strcmp(params[0], "persona", true)){
		    if(params[1] != INVALID_PLAYER_ID) return Mensaje(playerid, 0x0000FF00, "[ERROR] El jugador seleccionado no se encuentra conectado.");
		    new Float:X, Float:Y, Float:Z;
			GetPlayerPos(params[1], X, Y, Z);
			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
			Mensaje(playerid, COLOR_BLANCO, "La ubicación de la persona seleccionada ha sido marcado en el GPS.");
	jDonadorjDonador		return 1;
		}*/
		if(strcmp(params[0], "vehiculo", true)){
   for(new i=0; i < sizeof(AutoInfo); i++){
			    if(AutoInfo[i][aID] == params[1]){
			        new Float:X, Float:Y, Float: Z;
			        GetVehiclePos(i, X, Y, Z);
					SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
					SendClientMessage(playerid, AZUL, "La ubicación del vehículo seleccionado ha sido marcado en el GPS.");
					return 1;
			    }
			}SendClientMessage(playerid, ROJO_OSCURO, "[ERROR] No se ha detectado ningún vehículo con esa matrícula.");
		    return 1;
		}
		else{
		    SendClientMessage(playerid, ROJO_OSCURO, "[USO] '/rastrear' [Opción]");
		    SendClientMessage(playerid, ROJO_OSCURO, "Opciones disponibles: Teléfono [Número] | Persona [ID Jugador] | Vehículo [Matrícula]");
		}
		return 1;
	}


CMD:buscar(playerid, params[])
{
    if(sscanf(params, "ui", params[0]))
   	{
    	SendClientMessage(playerid, BLANCO, "/buscar [ID]. Precio: ${ff9c00}50{FFFFFF}.");
        SendClientMessage(playerid, BLANCO, "Puedes ver las ID de tus vehículos en {8D8DFF}/cuenta > Propiedades{FFFFFF}.");
     	return 1;
    }
    //if(JugadorInfo[playerid][jCoches][params[0]] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna llave en ese slot.");
	//new car;
	/*for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(AutoInfo[x][cID] == PlayerInfo[playerid][jCoches][slot-1]){car = x; break;}
	}
	if(AutoInfo[car][cEnDeposito] == 2) //Si está en depósito LSPD
	{
	    SetPlayerCheckpoint(playerid, 1621.5406,-1866.9160,13.5469, 4.0);
	    SendClientMessage(playerid, Amarillo, "* Tu vehículo se encuentra en el depósito de LSPD.");
	    LocalizarVeh[playerid] = 1;
	    return 1;
	}*/
	for(new i=0; i < sizeof(AutoInfo); i++){
	    if(AutoInfo[i][aID] == params[1]){
			if(params[0] == JugadorInfo[playerid][jCoches][0] || JugadorInfo[playerid][jCoches][1] || JugadorInfo[playerid][jCoches][2]){
	        new Float:X, Float:Y, Float: Z;
	        GetVehiclePos(params[0], X, Y, Z);
			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
			SendClientMessage(playerid, AZUL, "La ubicación del vehículo seleccionado ha sido marcado en el GPS, se te han descontado $50.");
			JugadorInfo[playerid][jDinero] -= 50;
			return 1;
			}SendClientMessage(playerid, ROJO_OSCURO, "No tienes ningún coche con esa placa.");
	    }
	}SendClientMessage(playerid, ROJO_OSCURO, "[ERROR] No se ha detectado ningún vehículo con esa matrícula.");
    return 1;
}

CMD:malnombre(playerid, params[])
	{
     	if(JugadorInfo[playerid][jAdmin] < 2) return 0;
     	new string[128];
	    if(sscanf(params, "u", params[0])) return SendClientMessage(playerid,BLANCO,"/malnombre [ID]");
	    if(params[0] == INVALID_PLAYER_ID) return SendClientMessage(playerid,ROJO_OSCURO,"Jugador desconectado");
     	format(string, 124, "%s fue expulsado por %s debido a su nombre", NombreJugador(params[0]), NombreJugador(playerid));
    	SendClientMessage(playerid, ROJO, string);
     	SendClientMessage(params[0], AMARILLO, "=========================================================");
	    SendClientMessage(params[0], AMARILLO,"Atención: {FFFFFF}Con ese nombre no puede entrar al servidor. En este modo de juego se intenta");
	    SendClientMessage(params[0], -1,"imitar al máximo la vida real, y tú nombre incumple alguna de las normas o no es real.");
	    SendClientMessage(params[0], -1,"Pongase un nombre realista con formato {FCF804}Nombre_Apellido{FFFFFF}, ejemplo {33C847}Tomas_Fernandez.");
	    SendClientMessage(params[0], -1,"No se permiten nombres de famosos, como {FC0404}Michael_Jackson.");
	    SendClientMessage(params[0], -1,"Si su nombre cumple el formato pero hace burla o rompe otras reglas, serás expulsado por un administrador.");
	    SendClientMessage(params[0], AMARILLO, "=========================================================");
        KickRetrasado(params[0]);
		return 1;
	}

CMD:silenciar(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new gid, money, time, reason[64], string[124], pname[MAX_PLAYER_NAME], gname[MAX_PLAYER_NAME];
    if(sscanf(params, "ddds[64]", gid, money, time, reason)) return SendClientMessage(playerid, -1, "USO: /silenciar [ID] [$] [Minutos] [Razón]");
    if(!IsPlayerConnected(gid)) return 1;
    if(isnull(reason)) return SendClientMessage(playerid, -1, "Escribe una razón valida.");
    GetPlayerName(playerid, pname, sizeof(pname));
    GetPlayerName(gid, gname, sizeof(gname));
    format(string, 124, "%s fue silenciado del canal de dudas por %s", gname, reason);
    //format(string, 124, "%s te sileció a %s del canal de dudas. Razon: %s.", pname, gname, reason);
    SendClientMessageToAll(0xA71F26FF, string);
    format(string, 124, "[Dudas] Tiempo: %d minuto(s) | Multa económica: $%d.", time, money);
    SendClientMessage(gid, 0xA71F26FF, string);
    format(string, 124, "[Dudas] Tiempo: %d minuto(s) | Multa económica: $%d.", time, money);
    ABroadCast(ROJO, string, 1);
    JugadorInfo[gid][jDinero] -= money;
    Muteduda[gid] = time*60;
    return 1;
}


CMD:canalduda(playerid, params[])
{
    if(CanalDuda[playerid])
    {
        CanalDuda[playerid] = false;
        SendClientMessage(playerid, NARANJA, "Desactivaste el canal de dudas");
    }
    else
    {
        CanalDuda[playerid] = true;
        SendClientMessage(playerid, NARANJA, "Activaste el canal de dudas");
    }
    return 1;
}

/*
CMD:duda(playerid, params[])
{
	new string[256];
    if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /duda [Texto]");
	    return 1;
	}
	format(string, sizeof(string), "[DUDA ID: %d] %s. Usa '/rduda %d [texto]'", playerid, params[0], playerid);
	ABroadCast(AMARILLO, string, 1);
	SendClientMessage(playerid, CELESTE, "* Has enviado una duda, espera a que sea respondida.");
	return 1;
}*/

CMD:golpear(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /golpear [ID] [Mensaje]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	new Float:Pos[3];
	GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]); SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]+3);
	format(string, sizeof(string), "Administración: %s ha golpeado a %s. Razón: %s.", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha golpeado. Razón: %s", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:leermps(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	if(LeerMPS[playerid] == 0)
	{
	    LeerMPS[playerid] = 1;
	    format(string, sizeof(string), "Administración: %s ha comenzado a leer todos los mensaje privados.", NombreJugador(playerid));
		ABroadCast(ROJO, string, 1);
		return 1;
	}
	else
	{
	    LeerMPS[playerid] = 0;
	    format(string, sizeof(string), "Administración: %s ha dejado a leer todos los mensaje privados.", NombreJugador(playerid));
		ABroadCast(ROJO, string, 1);
		return 1;
	}
}

CMD:w(playerid, params[]) return SendClientMessage(playerid, CELESTE, "El comando es /mp.");
CMD:mp(playerid, params[])
{
	new string[256];
    if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /mp [ID] [Mensaje]");
	    return 1;
	}
	if(JugadorInfo[params[0]][jAdmin] == 0 && JugadorInfo[playerid][jAdmin] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "Este comando no puede ser usado entre jugadores.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	if(NoMps[params[0]] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador tiene los mensajes privados cerrados.");
	format(string, sizeof(string), "(( %s [%d] te envía: %s ))", NombreJugador(playerid), playerid, params[1]);
	SendClientMessage(params[0], AMARILLO, string);
	format(string, sizeof(string), "(( MP enviado a %s [%d]: %s ))", NombreJugador(params[0]), params[0], params[1]);
	SendClientMessage(playerid, AMARILLO, string);
	for(new i=0; i < MAX_PLAYERS; i++)
	{
	    if(LeerMPS[i] == 1)
	    {
	        format(string, sizeof(string), "(( [MP] %s(%d) a %s(%d): %s ))", NombreJugador(playerid), playerid, NombreJugador(params[0]), params[0], params[1]);
			SendClientMessage(i, AMARILLO, string);
	    }
	}
	return 1;
}

CMD:darvida(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "ii", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /davida [ID] [0 - 100]");
	    return 1;
	}
	if(params[1] > 100) return SendClientMessage(playerid, ROJO_OSCURO, "No puedes darle más de 100 de vida o será baneado por el anticheat");
	SetPlayerHealth(params[0], params[1]);
	format(string, sizeof(string), "Administración: %s ha cambiado la vida de %s a %d.", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha cambiado la vida a %d.", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:darint(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "ii", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /darint [ID] [Interior]");
	    return 1;
	}
	SetPlayerInterior(params[0], params[1]);
	format(string, sizeof(string), "Administración: %s ha cambiado el interior de %s a %d.", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha cambiado el interior a %d.", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:darvw(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "ii", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /darvw [ID] [Mundo virtual]");
	    return 1;
	}
	SetPlayerVirtualWorld(params[0], params[1]);
	format(string, sizeof(string), "Administración: %s ha cambiado el mundo virtual de %s a %d.", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha cambiado el mundo virtual a %d.", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:congelar(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /congelar [ID]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
    TogglePlayerControllable(params[0], false);
    format(string, sizeof(string), "Administración: %s ha congelado a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha congelado.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	AntiSobeit(playerid);
	return 1;
}

CMD:descongelar(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /descongelar [ID]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
    TogglePlayerControllable(params[0], true);
    format(string, sizeof(string), "Administración: %s ha descongelado a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha descongelado.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:aservicio(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(AdminServicio[playerid] == 0)
	{
	    SendClientMessage(playerid,ROJO_OSCURO, "Comando deshabilitado indefinidamente");
	    //SendClientMessage(playerid, VERDECLARO, "Te has colocado en servicio administrativo - Tu nick ahora se ve en {ff9c00}naranja");
	    //SetPlayerColor(playerid, 0xff9c0000);
    	//AdminServicio[playerid] = 1;
    	//SetPlayerHealth(playerid, 1000);
    	return 1;
	}
	else
	{
		//SendClientMessage(playerid, VERDECLARO, "Ya no estás en servicio administrativo.");
	    //AdminServicio[playerid] = 0;
	    //SetPlayerHealth(playerid, JugadorInfo[playerid][jVida]);
     	//SinColoresJugadores(playerid);
	    return 1;
	}
}

CMD:advertir(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /advertir [ID] [Razón]");
	    return 1;
	}
	JugadorInfo[params[0]][jAdvertencias] ++;
	format(string, sizeof(string), "Administración: %s advirtió a %s. Razón: %s", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 2);
	format(string, sizeof(string), "* %s te ha advertido. Razón: %s", NombreJugador(playerid), params[1]);
	SendClientMessage(params[1], CELESTE, string);
	if(JugadorInfo[params[0]][jAdvertencias] == 3)
	{
	    Ban(playerid);
	}
	return 1;
}

CMD:revivir(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /revivir [ID]");
	    return 1;
	}
	SetPlayerPos(params[0], 2034.1057,-1402.9364,17.2942);
	SetPlayerInterior(params[0], 0);
	SetPlayerVirtualWorld(params[0], 0);
	JugadorInfo[params[0]][jHerido] = 0;
    SetPlayerHealthEx(playerid, 99);
    KillTimer(TimerComa[playerid]);
    SetCameraBehindPlayer(playerid);
	format(string, sizeof(string), "Administración: %s revivió a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha revivido de tu estado de coma.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	TogglePlayerControllable(params[0], true);
	return 1;
}

CMD:ao(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
    if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ao [Mensaje]");
	    return 1;
	}
	format(string, sizeof(string), "Administración: %s", params[0]);
	SendClientMessageToAll(NARANJA, string);
	return 1;
}

CMD:ir(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ir [ID]");
	    return 1;
	}
	new Float:Pos[3];
	GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	if(GetPlayerState(playerid) == 2)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
	}
	else
	{
		SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(params[0]));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
	format(string, sizeof(string), "* Te has teleportado a la posición de %s.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s se ha teleportado a tu posición.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:traer(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /traer [ID]");
	    return 1;
	}
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(GetPlayerState(playerid) == 2)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
	}
	else
	{
		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	}
	SetPlayerInterior(params[0], GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid));
	format(string, sizeof(string), "* Has teleportado a %s a tu posición.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s te ha teleportado a su posición.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:llevar(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[256];
	if(sscanf(params, "ii", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /llevar [ID 1] [ID 2]");
	    return 1;
	}
	new Float:Pos[3];
	GetPlayerPos(params[1], Pos[0], Pos[1], Pos[2]);
	SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(params[0], GetPlayerInterior(params[1]));
	SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(params[1]));
	format(string, sizeof(string), "Administración: %s teleportó a %s a la posición de %s.", NombreJugador(playerid), NombreJugador(params[0]), NombreJugador(params[1]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te teleportó a la posición de %s.", NombreJugador(playerid), NombreJugador(params[1]));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:qwc(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] > 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "iis[128]", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /qpr [ID] [Cantidad] [Razón]");
	    return 1;
	}
	JugadorInfo[params[0]][jPuntosRol][1] += params[1];
	format(string, sizeof(string), "Administración: %s le quitó %d Watts City coins a %s. Razón: %s", NombreJugador(playerid), params[1], NombreJugador(params[0]), params[2]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te quitó {FF6347}%d {33CCFF}Watts City coins. Razón: {FF6347}%s", NombreJugador(playerid), params[1], params[2]);
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:tspect(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new
		    Float:x, Float:y, Float:z;
    TogglePlayerSpectating(playerid, 0);
    //SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
    SetPlayerPos(playerid, x, y, z);
    return 1;
}

CMD:spect(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /spect [ID]");
	    return 1;
	}
	new
		    Float:x, Float:y, Float:z;
	new string[256];
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes spectarte a ti mismo.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	GetPlayerPos(playerid, x, y, z);
	new inte = GetPlayerInterior(params[0]);
	new vw = GetPlayerVirtualWorld(params[0]);
	new din = JugadorInfo[params[0]][jDinero];
	new Float:Vida; GetPlayerHealth(params[0], Vida);
	new Float:Chalecos; GetPlayerArmour(params[0], Chalecos);
	format(string, sizeof(string), "[INFO] Interior: %d | Mundo virtual: %d | Dinero en mano: $%d | Vida: %f | Chaleco: %f", inte, vw, din, Vida, Chalecos);
	SendClientMessage(playerid, CELESTE, string);
	if(!IsPlayerInAnyVehicle(params[0]))
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, params[0]);
		SetPlayerInterior(playerid, GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid,  GetPlayerVirtualWorld(params[0]));
		return 1;
	}
	else{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(params[0]));
		SetPlayerInterior(playerid, GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		return 1;
	}
}

CMD:sanu(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "iis[128]", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /sanu [ID] [Tiempo] [Razón]");
	    return 1;
	}
	JugadorInfo[params[0]][jEncarcelado] = 25;
	JugadorInfo[params[0]][jTiempoEncarcelado] = params[1];
	SetPlayerVirtualWorld(params[0], params[0]);
	SetPlayerInterior(params[0], 5);
	SetPlayerPos(params[0], 322.197998,302.497985,999.148437);
	format(string, sizeof(string), "%s ha sido sancionado durante %d minutos. Razón: %s", NombreJugador(params[0]), params[1], params[2]);
	SendClientMessageToAll(0xA71F26FF, string);
	format(string, sizeof(string), "* Has sido sancionado por %s durante %d minutos. Razón: %s", NombreJugador(playerid), params[1], params[2]);
	SendClientMessage(params[0], NARANJA, string);
	format(string, sizeof(string), "Administración: %s encarceló a %s durante %d minutos. Razón: %s", NombreJugador(playerid), NombreJugador(params[0]), params[1], params[2]);
	ABroadCast(ROJO, string, 1);
	return 1;
}

CMD:ban(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ban [ID] [Razón]");
	    return 1;
	}
	format(string, sizeof(string), "%s {FFFFFF}fue baneado por un administrador. Razón: {A71F26}%s", NombreJugador(params[0]), params[1]);
	SendClientMessageToAll(0xA71F26FF, string);
	format(string, sizeof(string), "* %s te ha baneado la cuenta. Razón: %s", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], ROJO, string);
	SendClientMessage(params[0], ROJO, "Toma una screenshot con F8 si crees que ha sido un error y haz una apelación en el foro.");
	JugadorInfo[params[0]][jBaneado] = 1;
	new query[1024];
	format(query, sizeof(query), "INSERT INTO bans (UsuarioID, AdminID, razon, TipoBan) VALUES ('%d', '%d', '%s', '1')", JugadorInfo[params[0]][jSQLID], JugadorInfo[playerid][jSQLID], params[1]);
	mysql_query(database, query, false);
	//KickRetrasado(params[0]);
	BanRetrasado(params[0]);
	return 1;
}

CMD:kick(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /kick [ID] [Razón]");
	    return 1;
	}
	format(string, sizeof(string), "Administración: %s expulsó a %s. Razón: %s", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	SendClientMessageToAll(ROJO, string);
	format(string, sizeof(string), "* %s te ha expulsado del servidor. Razón: %s", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], ROJO, string);
	KickRetrasado(params[0]);
	return 1;
}

CMD:dwc(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] > 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "ii", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /dwc [ID] [Cantidad]");
	    return 1;
	}
	JugadorInfo[params[0]][jPuntosRol][0] += params[1];
	format(string, sizeof(string), "Administración: %s le dio %d Watts City coins a %s.", NombreJugador(playerid), params[1], NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "Compraste {21D121}%d {33CCFF}Watts City coins.", params[1]);
	SendClientMessage(params[0],CELESTE, string);
	return 1;
}

CMD:clima(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /clima [ID]");
	    return 1;
	}
	SetWeather(params[0]);
	format(string, sizeof(string), "Administración: %s ha cambiado el clima a %d.", NombreJugador(playerid), params[0]);
	ABroadCast(ROJO, string, 1);
	return 1;
}

CMD:qadvertencia(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "is[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /qadvertencia [ID] [Razón]");
	    return 1;
	}
	if(JugadorInfo[params[0]][jAdvertencias] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no tiene advertencias.");
	JugadorInfo[params[0]][jAdvertencias] --;
	format(string, sizeof(string), "Administración: %s ha quitado una advertencia a %s. Razón: %s", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha quitado un advertencia. Razón: %s", NombreJugador(playerid), params[1]);
	SendClientMessage(params[1], CELESTE, string);
	return 1;
}

CMD:irveh(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /irveh [Matrícula]");
	    return 1;
	}
	for(new i=0; i < MAX_VEHICLES; i++)
	{
	    if(AutoInfo[i][aID] == params[0])
	    {
	        new Float:Pos[3];
	        GetVehiclePos(i, Pos[0], Pos[1], Pos[2]);
	        SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	        SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(i));
	        SendClientMessage(playerid, CELESTE, "* Te has teleportado a un vehículo.");
	        return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No se ha encontrado el vehículo.");
	return 1;
}

CMD:traerveh(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /traerveh [Matrícula]");
	    return 1;
	}
	for(new i=0; i < MAX_VEHICLES; i++)
	{
	    if(AutoInfo[i][aID] == params[0])
	    {
	        new Float:Pos[4];
	        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	        GetPlayerFacingAngle(playerid, Pos[3]);
	        SetVehiclePos(i, Pos[0], Pos[1], Pos[2]);
        	SetVehicleZAngle(i, Pos[3]);
	        LinkVehicleToInterior(i, GetPlayerInterior(playerid));
	        SetVehicleVirtualWorld(i, GetPlayerVirtualWorld(playerid));
	        SendClientMessage(playerid, CELESTE, "* Has traido un vehículo a tu posición.");
	        return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No se ha encontrado el vehículo.");
	return 1;
}

CMD:tod(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new string[256];
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /tod [Hora]");
	    return 1;
	}
	SetWorldTime(params[0]);
	format(string, sizeof(string), "Administración: %s ha cambiado la hora a %d.", NombreJugador(playerid), params[0]);
	ABroadCast(ROJO, string, 1);
	return 1;
}

CMD:darstat(playerid, params[])
{
    new string[256];
    if(sscanf(params, "iii", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /darstat [ID] [Opción] [Valor]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: 1 - Skin | 2 - Nivel | 3 - Facción | 4 - Rango | 5 - Trabajo");
	    return 1;
	}
	if(params[1] == 1)
	{
	    JugadorInfo[params[0]][jRopa] = params[2];
	    SetPlayerSkin(params[0], params[2]);
	    format(string, sizeof(string), "Administración: %s ha cambiado a %d el skin de %s.", NombreJugador(playerid), params[2], NombreJugador(params[0]));
		ABroadCast(ROJO, string, 1);
		format(string, sizeof(string), "* %s te ha cambiado el skin a %d.", NombreJugador(playerid), params[2]);
		SendClientMessage(params[0], CELESTE, string);
		return 1;
	}
	else if(params[1] == 2)
	{
	    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    JugadorInfo[params[0]][jNivel] = params[2];
	    SetPlayerScore(params[0], params[2]);
	    format(string, sizeof(string), "Administración: %s ha cambiado a %d el nivel de %s.", NombreJugador(playerid), params[2], NombreJugador(params[0]));
		ABroadCast(ROJO, string, 1);
		format(string, sizeof(string), "* %s te ha cambiado el nivel a %d.", NombreJugador(playerid), params[2]);
		SendClientMessage(params[0], CELESTE, string);
		return 1;
	}
	else if(params[1] == 3)
	{
	    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    JugadorInfo[params[0]][jMiembro] = params[2];
	    JugadorInfo[params[0]][jRango] = 1;
	    format(string, sizeof(string), "Administración: %s ha cambiado a %d la facción de %s.", NombreJugador(playerid), params[2], NombreJugador(params[0]));
		ABroadCast(ROJO, string, 1);
		format(string, sizeof(string), "* %s te ha cambiado la facción a %d.", NombreJugador(playerid), params[2]);
		SendClientMessage(params[0], CELESTE, string);
		return 1;
	}
	else if(params[1] == 4)
	{
	    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    JugadorInfo[params[0]][jRango] = params[2];
	    format(string, sizeof(string), "Administración: %s ha cambiado a %d el rango de facción a %s.", NombreJugador(playerid), params[2], NombreJugador(params[0]));
		ABroadCast(ROJO, string, 1);
		format(string, sizeof(string), "* %s te ha cambiado el rango de facción a %d.", NombreJugador(playerid), params[2]);
		SendClientMessage(params[0], CELESTE, string);
		return 1;
	}
	else if(params[1] == 5)
	{
	    JugadorInfo[params[0]][jTrabajo] = params[2];
	    JugadorInfo[params[0]][jUltimoTrabajo] = 0;
	    JugadorInfo[params[0]][jTiempoTrabajo] = 1;
	    format(string, sizeof(string), "Administración: %s ha cambiado a %d el trabajo de %s.", NombreJugador(playerid), params[2], NombreJugador(params[0]));
		ABroadCast(ROJO, string, 1);
		format(string, sizeof(string), "* %s te ha cambiado el trabajo a %d.", NombreJugador(playerid), params[2]);
		SendClientMessage(params[0], CELESTE, string);
		return 1;
	}
	return 1;
}

CMD:forzarservicio(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[128];
	if(sscanf(params, "r", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /forzarservicio [ID/Nombre]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	if(JugadorInfo[params[0]][jServicio] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador ya está de servicio.");
	JugadorInfo[params[0]][jServicio] = 1;
	format(string, sizeof(string), "Administración: %s ha forzado el servicio de %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ABroadCast(ROJO, string, 1);
	format(string, sizeof(string), "* %s te ha forzardo el servicio.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:tban(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[128];
	if(sscanf(params, "rs[75]i", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /tban [ID/Nombre] [Razón] [Minutos]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* Ese usuario no está conectado.");
	JugadorInfo[params[0]][jTBan] = gettime() + (params[2] * 60);
	format(string, sizeof(string), "%s {FFFFFF}ha sido baneado {A71F26}%d {FFFFFF}minutos por un administrador. Razón: {A71F26}%s{FFFFFF}.", NombreJugador(params[0]), params[2], params[1]);
	SendClientMessageToAll(0xA71F26FF, string);
	format(string, sizeof(string), "Administración: %s ha sido baneado %d minutos por el administrador %s. Razón: %s.", NombreJugador(params[0]), params[2], NombreJugador(playerid), params[1]);
    ABroadCast(ROJO, string, 2);
	KickRetrasado(params[0]);
	return 1;
}

CMD:qban(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "s[30]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /qban [Nombre_Apellidos]");
	    SendClientMessage(playerid, ROJO, "Importante: Es importante escribir el nombre exactamente con el formato 'Nombre_Apellidos', si no, no desbaneará");
	    SendClientMessage(playerid, ROJO, "al usuario aunque ponga que este ha sido desbaneado.");
	    return 1;
	}
	new sql[256];
	format(sql, sizeof(sql), "UPDATE usuarios SET Baneado = 0, TBan = 0 WHERE Nombre = '%s'", params[0]);
	mysql_query(database, sql, false);
	format(sql, sizeof(sql), "* Has desbaneado al usuario %s.", params[0]);
	SendClientMessage(playerid, CELESTE, sql);
	format(sql, sizeof(sql), "Administración: %s ha desbaneado al usuario %s.", NombreJugador(playerid), params[0]);
	ABroadCast(ROJO, sql, 1);
	return 1;
}

CMD:e(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(NoEquipo == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El chat de ayudantes está cerrado.");
    new string[128];
	if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /e [Mensaje]");
	    return 1;
	}
	format(string, sizeof(string), "[CA | %d] %s: %s", playerid, NombreJugador(playerid), params[0]);
	MensajeCanalEquipo(0xF5E7AD96, string, 1);
	return 1;
}

CMD:a(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(NoAdmin == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El chat de administración está cerrado.");
    new string[128];
	if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /a [Mensaje]");
	    return 1;
	}
	format(string, sizeof(string), "[N%d | %d] %s: %s",JugadorInfo[playerid][jAdmin],playerid,NombreJugador(playerid),params[0]);
	MensajeCanalAdmin(0x33CCAAFF, string, 2);
	return 1;
}

CMD:noequipo(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[128];
	if(NoEquipo == 0)
    {
        NoEquipo = 1;
        format(string, sizeof(string), "Administración: %s ha cerrado el chat del equipo administrativo. (/e)", NombreJugador(playerid));
		ABroadCast(ROJO, string, 1);
		return 1;
    }
    else
    {
        NoEquipo = 0;
        format(string, sizeof(string), "Administración: %s ha abierto el chat del equipo administrativo. (/e)", NombreJugador(playerid));
		ABroadCast(ROJO, string, 1);
    }
    return 1;
}

CMD:noadmin(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[128];
	if(NoAdmin == 0)
    {
        NoAdmin = 1;
        format(string, sizeof(string), "Administración: %s ha cerrado el chat del staff administrativo. (/a)", NombreJugador(playerid));
		ABroadCast(ROJO, string, 3);
		return 1;
    }
    else
    {
        NoAdmin = 0;
        format(string, sizeof(string), "Administración: %s ha abierto el chat del staff administrativo. (/a)", NombreJugador(playerid));
		ABroadCast(ROJO, string, 3);
    }
    return 1;
}

CMD:hprivados(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(NoMps[playerid] == 0)
    {
        NoMps[playerid] = 1;
        SendClientMessage(playerid, CELESTE, "* Has bloqueado los mensajes privados, ahora no recibirás mensajes privados.");
        return 1;
    }
    else
    {
        NoMps[playerid] = 0;
        SendClientMessage(playerid, CELESTE, "* Has desbloqueado los mensajes privados, ahora podrás recibirás mensajes privados.");
    }
    return 1;
}

CMD:hequipo(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(OcultarChatEquipo[playerid] == 0)
	{
	    OcultarChatEquipo[playerid] = 1;
	    SendClientMessage(playerid, CELESTE, "* Dejas de leer el canal de equipo. (/e)");
	    return 1;
	}
	else
	{
	    OcultarChatEquipo[playerid] = 0;
	    SendClientMessage(playerid, CELESTE, "* Comienzas a leer el canal de equipo. (/e)");
	}
	return 1;
}

CMD:hadmin(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(OcultarChatAdmin[playerid] == 0)
	{
	    OcultarChatAdmin[playerid] = 1;
	    SendClientMessage(playerid, CELESTE, "* Dejas de leer el canal de administración. (/a)");
	    return 1;
	}
	else
	{
	    OcultarChatAdmin[playerid] = 0;
	    SendClientMessage(playerid, CELESTE, "* Comienzas a leer el canal de administración. (/a)");
	}
	return 1;
}

CMD:hacerpremium(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    if(sscanf(params, "ui", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /hacerpremium [ID] [Meses]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	new string[128];
	format(string, sizeof(string), "Administración: %s ha dado a %s %d meses de usuario premium.", NombreJugador(playerid), NombreJugador(params[0]), params[1]);
	MensajeCanalAdmin(ROJO, string, 3);
	format(string, sizeof(string), "* Se te han establecido %d meses de usuario premium.", params[1]);
	SendClientMessage(params[0], CELESTE, string);
	if(params[1] == 0) JugadorInfo[params[0]][jPremium] = 0;
	else JugadorInfo[params[0]][jPremium] = 1;
	JugadorInfo[params[0]][jTiempoPremium] = gettime()+((2592000)*params[1]);
	return 1;
}

CMD:dejartrabajo(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún trabajo.");
	//if(JugadorInfo[playerid][jTiempoTrabajo] >= 5 && JugadorInfo[playerid][jPremium] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener cinco horas trabajadas como mínimo.");
	JugadorInfo[playerid][jTrabajo] = 0; JugadorInfo[playerid][jTiempoTrabajo] = 0; JugadorInfo[playerid][jUltimoTrabajo] = 0;
	SendClientMessage(playerid, CELESTE, "* Has dejado tu trabajo.");
	return 1;
}

CMD:miembros(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a ninguna facción.");
	new string[128];
	SendClientMessage(playerid, AMARILLO, "_____| Miembros de la facción |_____");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(JugadorInfo[i][jJugando] == 1)
		{
	    new miembro, rango;
		miembro = JugadorInfo[i][jMiembro];
		rango = JugadorInfo[i][jRango];
		if(JugadorInfo[playerid][jMiembro] == miembro)
		{
		    if(JugadorInfo[i][jServicio] == 1)
		    {
		        if(JugadorInfo[i][jLider] == 1)
		        {
		        	format(string, sizeof(string), "[ID: %d] %s, %s. De servicio {FFFF00}(Líder)", i, NombreJugador(i), ObtenerRango(miembro, rango));
				}
				else
				{
				    format(string, sizeof(string), "[ID: %d] %s, %s. De servicio", i, NombreJugador(i), ObtenerRango(miembro, rango));
				}
				SendClientMessage(playerid, 0x72B1FFFF, string);
		    }
		    else
		    {
		        if(JugadorInfo[i][jLider] == 1)
		        {
		        	format(string, sizeof(string), "[ID: %d] %s, %s. {FFFF00}(Líder)", i, NombreJugador(i), ObtenerRango(miembro, rango));
				}
				else
				{
				    format(string, sizeof(string), "[ID: %d] %s, %s.", i, NombreJugador(i), ObtenerRango(miembro, rango));
				}
		        SendClientMessage(playerid, 0x72B1FFFF, string);
		    }
		}
		}
	}
	return 1;
}

CMD:lenguaje(playerid, params[])
{
    new opcion1[128];
    if(sscanf(params, "s[128]", opcion1))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: /lenguaje [ {FFFFFF}Español | Japonés| Italiano | Ruso | Alemán | Francés | Chino {ff9c00}]");
	    return 1;
	}
	if(!strcmp(opcion1, "japones", true) || !strcmp(opcion1, "japonés", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][0] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Japonés.");
		Hablando[playerid] = 0;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Japonés, ahora siempre que hables será en Japonés.");
		return 1;
	}
	else if(!strcmp(opcion1, "italiano", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][1] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Italiano.");
		Hablando[playerid] = 1;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Italiano, ahora siempre que hables será en Italiano.");
		return 1;
	}
	else if(!strcmp(opcion1, "ruso", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][2] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Ruso.");
		Hablando[playerid] = 2;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Ruso, ahora siempre que hables será en Ruso.");
		return 1;
	}
	else if(!strcmp(opcion1, "aleman", true) || !strcmp(opcion1, "alemán", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][3] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Alemán.");
		Hablando[playerid] = 3;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Alemán, ahora siempre que hables será en Alemán.");
		return 1;
	}
	else if(!strcmp(opcion1, "frances", true) || !strcmp(opcion1, "francés", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][4] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Francés.");
		Hablando[playerid] = 4;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Francés, ahora siempre que hables será en Francés.");
		return 1;
	}
	else if(!strcmp(opcion1, "chino", true))
	{
	    if(JugadorInfo[playerid][jIdiomas][5] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No sabes hablar Chino.");
		Hablando[playerid] = 5;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Chino, ahora siempre que hables será en Chino.");
		return 1;
	}
	else if(!strcmp(opcion1, "español", true) || !strcmp(opcion1, "inglés", true))
	{
	    Hablando[playerid] = -1;
		SendClientMessage(playerid, CELESTE, "* Has cambiado tu lenguaje a Español, ahora siempre que hables será en Español.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, NARANJA, "Uso: /lenguaje [ Español | Japonés| Italiano | Ruso | Alemán | Francés | Chino ]");
	}
	return 1;
}

CMD:estudiar(playerid, params[])
{
    if(JugadorInfo[playerid][jBiblio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás inscrito en la biblioteca.");
    if(EstaEstudiando[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás estudiando.");
    new string[256], opcion1[128];
    if(sscanf(params, "s[128]", opcion1))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: /estudiar [ {FFFFFF}Japonés | Italiano | Ruso | Alemán | Francés | Chino {ff9c00}]");
	    return 1;
	}
	if(!strcmp(opcion1, "japones", true) || !strcmp(opcion1, "japonés", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 0);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Japones...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else if(!strcmp(opcion1, "italiano", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 1);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Italiano...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else if(!strcmp(opcion1, "ruso", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 2);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Ruso...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else if(!strcmp(opcion1, "aleman", true) || !strcmp(opcion1, "alemán", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 3);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Aleman...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else if(!strcmp(opcion1, "frances", true) || !strcmp(opcion1, "francés", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 4);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Frances...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else if(!strcmp(opcion1, "chino", true))
	{
	    if(!EstaEnBiblio(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No se puede estudiar aquí.");
        SetTimerEx("Estudiando", (60000*4), 0, "dd", playerid, 5);
        EstaEstudiando[playerid] = 1;
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~w~Estudiando Chino...", 240000, 3);
        format(string, sizeof(string), "* %s abre un libro y comienza a leer.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        SendClientMessage(playerid, CELESTE, "* Tardarás cuatro minutos en aprender una nueva lección.");
        return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /estudiar [ Japonés | Italiano | Ruso | Alemán | Francés | Chino ]");
	}
	return 1;
}

CMD:inscripcion(playerid, params[])
{
	if(JugadorInfo[playerid][jBiblio] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás inscrito en la biblioteca.");
	JugadorInfo[playerid][jBiblio] = 1;
	ProxDetector(10.0, playerid, "Empleada: Perfecto, a partir de ahora podrá comenzar a usar nuestro material cuando usted lo desee.", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	SendClientMessage(playerid, CELESTE, "* Se podrá estudiar en cualquiera de las mesas que están en la biblioteca, tanto planta baja como superior. Para ello usa '/estudiar'.");
	return 1;
}

CMD:solicitarabogado(playerid, params[])
{
	new string[128];
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /solicitarabogado [ ID ]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	//if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(1.5, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	format(string, sizeof(string), "* Has solicitado un abogado de oficio para %s.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* El agente %s ha solicitado un abogado de oficio para usted.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	SolicitaAbogado[params[0]] = 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(JugadorInfo[i][jTrabajo] == 3)
	    {
	        format(string, sizeof(string), "[Corte de Los Santos] El agente %s solicita un abogado para %s. Usa '/casos todos' para mas información.", NombreJugador(playerid), NombreJugador(params[0]));
	        SendClientMessage(i, AZUL, string);
	    }
	}
	return 1;
}

CMD:casos(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres abogado.");
    new string[256], opcion1[128], opcion2;
    if(sscanf(params, "s[128]U", opcion1, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /casos [ Todos | Aceptar ]");
	    return 1;
	}
	if(!strcmp(opcion1, "todos", true))
	{
	    SendClientMessage(playerid, AMARILLO, "__________| ESPERANDO ABOGADO |__________");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(SolicitaAbogado[i] == 1)
		    {
		        format(string, sizeof(string), "[CASO: %d] - Nombre: %s. Usa '/casos aceptar %d' para aceptarlo.", i, NombreJugador(i), i);
		        SendClientMessage(playerid, BLANCO, string);
		    }
		}
		SendClientMessage(playerid, AMARILLO, "_________________________________________");
		return 1;
	}
	if(!strcmp(opcion1, "aceptar", true))
	{
	    if(sscanf(params, "s[128]u", opcion1, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /casos aceptar [ID]");
	    if(SolicitaAbogado[opcion2] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no está solicitando un abogado.");
	    format(string, sizeof(string), "[Corte de Los Santos] El abogado de oficio %s se encargará del cliente %s, esperelo en recepción.", NombreJugador(playerid), NombreJugador(opcion2));
	    MensajeDeFaccion(1, AZUL, string);
	    format(string, sizeof(string), "* Has aceptado el caso %d, dirígete a comisaría lo antes posible y espera en recepción, corto.", opcion2);
	    SendClientMessage(playerid, CELESTE, string);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /casos [ Todos | Aceptar ]");
	}
	return 1;
}

CMD:licilegal(playerid, params[])
{
    // 0 - Conducción | 1 - Navegación | 2 - Vuelo | 3 - Pesca | 4 - Caza | 5 - Armas | 6 - Camiones | 7 - Motos
    if(JugadorInfo[playerid][jTrabajo] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes crear DNI falso.");
    new string[256];
    if(sscanf(params, "us[128]", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /licilegal [ID] [Conducción | Navegación | Vuelo | Caza | Armas | Camiones | Motos]");
	    return 1;
	}
	if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso primero.");
	if(!strcmp(params[1], "conducción", true) || !strcmp(params[1], "conduccion", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de conducción falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de conducción falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][0] = 12;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "navegación", true) || !strcmp(params[1], "navegacion", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de navegación falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de navegación falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][1] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "vuelo", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de vuelo falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de vuelo falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][2] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "pesca", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de pesca falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de pesca falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][3] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "caza", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de caza falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de caza falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][4] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "armas", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de armas falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de armas falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][5] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "camiones", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de camiones falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de camiones falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][6] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else if(!strcmp(params[1], "motos", true))
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
		if(JugadorInfo[params[0]][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador debe tener un DNI falso para poder tener una licencia ilegal.");
		format(string, sizeof(string), "* Has dado una licencia de motos falsa a %s.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s te ha dado una licencia de motos falsa. Usa '/mostrar licfalsa' para mostrarla.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		JugadorInfo[params[0]][jFLicencia][7] = 1;
		SaveValues(playerid, "LicenciasFalsas");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /licilegal [ID] [Conducción | Navegación | Vuelo | Caza | Armas | Camiones | Motos]");
	}
	return 1;
}

CMD:creardnifalso(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes crear DNI falso.");
    new giveplayerid, nombre[35], string[256];
    if(sscanf(params, "us[35]", giveplayerid, nombre))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /creardnifalso [ID] [Nombre_Apellido]");
	    return 1;
	}
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador al que le vas a dar el DNI falso no está conectado.");
	if(JugadorInfo[giveplayerid][jDNIFalso] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador ya tiene un DNI falso.");
	strmid(JugadorInfo[giveplayerid][jNombreFalso], nombre, 0, 64, 255);
	JugadorInfo[giveplayerid][jDNIFalso] = 1;
	format(string, sizeof(string), "* Has dado un DNI falso a %s.", NombreJugador(giveplayerid));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s te ha dado un DNI falso. Puedes verlo con '/dnifalso'.", NombreJugador(playerid));
	SendClientMessage(giveplayerid, CELESTE, string);
	new sql[256];
	format(sql, sizeof(sql), "UPDATE usuarios SET NombreFalso='%s', DNIFalso=1 WHERE id = %d", nombre, JugadorInfo[giveplayerid][jSQLID]);
	mysql_query(database, sql, false);

	return 1;
}

CMD:drogarse(playerid, params[])
{
    new opcion[32], valor;
    if(sscanf(params, "s[32]I", opcion, valor))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /drogarse [Cocaína]");
	    return 1;
	}
	if(!strcmp(opcion, "cocaina", true) || !strcmp(opcion, "cocaína", true))
	{
	    if(BolsilloID[playerid][11] != 107) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener cocaína en la mano derecha.");
	    if(BolsilloCantidad[playerid][11] < 2) return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitarás al menos dos gramos para poder drogarte.");
	    BolsilloCantidad[playerid][11] -= 2;
	    PlayCameraMover(playerid, CamaraCocaina);
	    FlashPlayerScreen(playerid, 0xAC58FA66, 40000, 1);
	    SetPlayerDrunkLevel(playerid, 160000);
	    TimerDrogado[playerid] = SetTimerEx("EfectoCocaina", 40000, 0, "d", playerid);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /drogarse [Cocaína]");
	}
	return 1;
}

CMD:preparar(playerid, params[])
{
    new opcion[32], valor;
    if(sscanf(params, "s[32]I", opcion, valor))
	{
	    SendClientMessage(playerid, 0x72B1FFFF, "Uso: /preparar [{FFFFFF}Hachís | Cocaína{72B1FF}]");
	    return 1;
	}
	if(!strcmp(opcion, "hachis", true) || !strcmp(opcion, "hachís", true))
	{
	    if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante.");
		if(BolsilloID[playerid][11] != 70) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener marihuana en la mano derecha.");
		if(BolsilloCantidad[playerid][11] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener mínimo tres gramos de marihuana.");

	    TogglePlayerControllable(playerid, false);
	    GameTextForPlayer(playerid, "~w~Obteniendo hachis...", 34500, 4);
	    SetTimerEx("PreparandoHachis", 35000, 0, "d", playerid);
		return 1;
	}
	else if(!strcmp(opcion, "cocaina", true) || !strcmp(opcion, "cocaína", true))
	{
	    if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante.");
	    SendClientMessage(playerid, CELESTE, "* Para obtener cocaína, deberás usar '/llamar 4728' para contactar.");
		return 1;
	}
	else { SendClientMessage(playerid, 0x72B1FFFF, "Uso: /preparar [{FFFFFF}Hachís | Cocaína{72B1FF}]"); }
	return 1;
}

CMD:plantainfo(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    for(new i = 0; i < sizeof(PlantaInfo); i++)
	{
	    if(PlayerToPoint(playerid, 1.5, PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]))
	    {
			new string[128];
			format(string, sizeof(string), "[Información de la planta %d] Plantador: %s", PlantaInfo[i][plantID], PlantaInfo[i][plantNombre]);
			SendClientMessage(playerid, ROJO, string);
			return 1;
	    }
    }
	SendClientMessage(playerid, ROJO_OSCURO, "* No hay ninguna plantación de marihuana en esta zona.");
	return 1;
}

CMD:recoger(playerid, params[])
{
    new opcion[32], string[128];
    if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, 0x72B1FFFF, "Uso: /recoger [{FFFFFF}Cosecha | Cocaína{72B1FF}]");
	    return 1;
	}
	if(!strcmp(opcion, "cosecha", true))
	{
	    if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante.");

		for(new i = 0; i < sizeof(PlantaInfo); i++)
		{
		    if(PlayerToPoint(playerid, 1.5, PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]))
		    {
		        if(PlantaInfo[i][plantTiempo] == 100)
		        {
		            DestroyDynamicObject(PlantaInfo[i][plantObjeto]);
		            Delete3DTextLabel(PlantaInfo[i][plantTexto]);
					new gramos = random(20)+10;
					format(string, sizeof(string), "* Has conseguido %d gramos de marihuana de esta planta.", gramos);
		            SendClientMessage(playerid, CELESTE, string);
					DarObjeto(playerid, 70, 1, gramos);
					PlantaInfo[i][plantX] = -1;
		            PlantaInfo[i][plantY] = -1;
		            PlantaInfo[i][plantZ] = -1;
		            format(string, sizeof(string), "* %s recoge la marihuana de su planta.", NombreJugador(playerid));
		            ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
					new query[256];
					format(query, 256, "DELETE FROM plantaciones WHERE id=%d", PlantaInfo[i][plantID]);
					mysql_query(database, query, false);
		            return 1;
		        }
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No hay ninguna plantación de marihuana en esta zona.");
		return 1;
	}
	else if(!strcmp(opcion, "cocaina", true) || !strcmp(opcion, "cocaína", true))
	{
	    if(PuntoDeEntregaTraficantes == 1 && PlayerToPoint(playerid, 2.5, 2787.6999500,-1425.3000500,15.3000000) ||
		PuntoDeEntregaTraficantes == 2 && PlayerToPoint(playerid, 2.5, 2875.2998000,-2126.8994100,3.2000000) ||
		PuntoDeEntregaTraficantes == 3 && PlayerToPoint(playerid, 2.5, 2395.1999500,-2495.0000000,12.7000000) ||
		PuntoDeEntregaTraficantes == 4 && PlayerToPoint(playerid, 2.5, 1397.1999500,-1892.6999500,12.5000000) ||
		PuntoDeEntregaTraficantes == 5 && PlayerToPoint(playerid, 2.5, 873.0000000,-1347.0000000,12.7000000) ||
		PuntoDeEntregaTraficantes == 6 && PlayerToPoint(playerid, 2.5, 1292.5000000,-995.2999900,31.7000000) ||
		PuntoDeEntregaTraficantes == 7 && PlayerToPoint(playerid, 2.5, 1413.9000200,-1298.5000000,12.5000000))
	    {
	        DestroyDynamicObject(CajasTrafis[0]);
	        DisablePlayerCheckpoint(playerid);
	        format(string, sizeof(string), "* %s coge un fardo de cocaína del suelo.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			DarObjeto(playerid, 107, 1, 10);
			return 1;
	    }
	}
	else { SendClientMessage(playerid, GRIS, "Uso: /recoger [Cosecha | Cocaína]"); }
	return 1;
}

CMD:plantar(playerid, params[])
{
    new bolid = BolsilloID[playerid][11];
    if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante.");
    //if(!PlayerToPoint(playerid, 10, -1027.6101,-1628.1967,76.3672)) return SendClientMessage(playerid, ROJO_OSCURO, "* Aquí no puedes plantar marihuana.");
	if(bolid != 69) return SendClientMessage(playerid, ROJO_OSCURO, "* Solamente se pueden plantar semillas de marihuana, y no tienes.");
	if(BolsilloCantidad[playerid][11] < 5) return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitas al menos 5 semillas para poder plantar.");
    for(new i = 0; i < sizeof(AgujeroInfo); i++)
    {
        if(PlayerToPoint(playerid, 5, AgujeroInfo[i][aguX], AgujeroInfo[i][aguY], AgujeroInfo[i][aguZ]))
        {
            new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			CrearPlanta(playerid, Pos[0], Pos[1], Pos[2]);
			SendClientMessage(playerid, CELESTE, "* Has creado una plantación de marihuana aquí.");
			BolsilloCantidad[playerid][11] -= 5;

			AgujeroInfo[i][aguX] = -1;
			AgujeroInfo[i][aguY] = -1;
			AgujeroInfo[i][aguZ] = -1;
			Delete3DTextLabel(AgujeroInfo[i][aguTexto]);
			return 1;
        }
    }
	SendClientMessage(playerid, ROJO_OSCURO, "* No hay ningún agujero aquí, deberás hacer uno primero.");
    return 1;
}

CMD:agujero(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante.");
	if(GetPlayerWeapon(playerid) == 6)
	{
	    for(new i = 0; i < sizeof(AgujeroInfo); i++)
	    {
	        if(PlayerToPoint(playerid, 5.0, AgujeroInfo[i][aguX], AgujeroInfo[i][aguY], AgujeroInfo[i][aguZ]))
	        {
	            SendClientMessage(playerid, ROJO_OSCURO, "* Ya hay un agujero aquí.");
	            return 1;
	        }
	    }
	    new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		CrearAgujero(playerid, Pos[0], Pos[1], Pos[2]);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener una pala para hacer un agujero.");
	}
	return 1;
}

CMD:incautar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
    if(PlantacionIncautadaID[playerid] != -1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás incautando una plantación.");
    for(new i = 0; i < sizeof(PlantaInfo); i++)
	{
	    if(PlayerToPoint(playerid, 1.5, PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]))
	    {
	        PlantacionIncautadaID[playerid] = i;
	        Update3DTextLabelText(PlantaInfo[i][plantTexto], ROJO_OSCURO, "Quemandose...");
	        SendClientMessage(playerid, CELESTE, "* Deberás esperar 30 segundos para que se queme bien la planta.");
	        SetTimerEx("PlantacionIncautada",30000,0,"d",playerid);
			PlantaInfo[i][plantObjeto2] = CreateDynamicObject(18691, PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-2.8, 0, 0, 0);
			return 1;
        }
	}
	return 1;
}

CMD:traficararmas(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres traficante de armas.");
	if(TraficandoArmas[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un pedido pendiente.");
    SendClientMessage(playerid, AMARILLO, "[SMS | Teléfono: Privado] Dirígete a la posición que acordamos, allí encontrarás una nota escondida con más información.");
    SendClientMessage(playerid, CELESTE, "* Si no llegas en 4 minutos, el pedido se cancelará automáticamente.");
	new i = random(9);
	SetPlayerCheckpoint(playerid, TraficarArmas[i][0], TraficarArmas[i][1], TraficarArmas[i][2], 3.0);
	TraficandoArmas[playerid] = 1;
    TimerTraficandoArmas[playerid] = SetTimerEx("LlegarTraficandoArmas", (60000*4), 0, "d", playerid);
	return 1;
}

CMD:cuenta(playerid, params[])
{
    ShowPlayerDialog(playerid, D_MOSTRARCUENTA, DIALOG_STYLE_LIST, "{FFFFFF}Seleccione datos a mostrar", "Datos de tu personaje\nDatos generales\nPropiedades", "Siguiente", "Cancelar");
	///MostrarCuenta(playerid, playerid);
	return 1;
}

CMD:almacen(playerid, params[])
{
    new opcion[128], opcion2, string[128];
	if(sscanf(params, "s[128]I(-1)", opcion, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /almacen [Situar | Ver | Sacar | Guardar | Cogerunidad]");
	    return 1;
	}
	if(!strcmp(opcion, "situar", true))
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 100, AlmacenInfo[i][alxx], AlmacenInfo[i][alyy], AlmacenInfo[i][alzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(JugadorInfo[playerid][jAlmacen] != AlmacenInfo[i][alID]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este almacén.");
		        new Float:Pos[3];
		        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		        AlmacenInfo[i][alxxx] = Pos[0], AlmacenInfo[i][alyyy] = Pos[1], AlmacenInfo[i][alzzz] = Pos[2];
		        GuardarAlmacen(i);
				SendClientMessage(playerid, CELESTE, "* Has movido el almacén a esta posición, ahora solo podrás ver lo que hay en su interior desde aquí.");
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás dentro de un almacén.");
		return 1;
	}
	else if(!strcmp(opcion, "ver", true))
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 5, AlmacenInfo[i][alxxx], AlmacenInfo[i][alyyy], AlmacenInfo[i][alzzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(AlmacenInfo[i][alEstado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El almacén está cerrado.");
				MostrarAlmacen(i, playerid);
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar de ver el contenido del almacén.");
		return 1;
	}
	else if(!strcmp(opcion, "sacar", true))
	{
	    if(sscanf(params, "s[128]i", opcion, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /almacen [Sacar] [Espacio (0-29)]");
		    return 1;
		}
		if(opcion2 < 0 || opcion2 > 29) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio del almacén debe estar entre 0 y 29.");
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 5, AlmacenInfo[i][alxxx], AlmacenInfo[i][alyyy], AlmacenInfo[i][alzzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(AlmacenInfo[i][alEstado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El almacén está cerrado.");
				if(AlmacenInfo[i][alOID][opcion2] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio elegido está vacío.");
				if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
				BolsilloID[playerid][11] = AlmacenInfo[i][alOID][opcion2];
				BolsilloCantidad[playerid][11] = AlmacenInfo[i][alOCA][opcion2];
				BolsilloTipo[playerid][11] = AlmacenInfo[i][alOTI][opcion2];
				if(EsArma(AlmacenInfo[i][alOID][opcion2])) GivePlayerWeapon(playerid, AlmacenInfo[i][alOID][opcion2], AlmacenInfo[i][alOCA][opcion2]);
				UpdateAttach(playerid);
				AlmacenInfo[i][alOTI][opcion2] = 0; AlmacenInfo[i][alOCA][opcion2] = 0; AlmacenInfo[i][alOID][opcion2] = 0;
				GuardarAlmacen(i);
				GuardarBolsillos(playerid);
				format(string, sizeof(string), "* %s coge un/a %s del almacén.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar del contenido del almacén.");
		return 1;
	}
    else if(!strcmp(opcion, "guardar", true))
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 5, AlmacenInfo[i][alxxx], AlmacenInfo[i][alyyy], AlmacenInfo[i][alzzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(AlmacenInfo[i][alEstado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El almacén está cerrado.");
		        if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha.");
				for(new o = 0; o < 30; o++)
				{
			        if(AlmacenInfo[i][alOID][o] != 0) continue;
			        AlmacenInfo[i][alOID][o] = BolsilloID[playerid][11];
			        AlmacenInfo[i][alOCA][o] = BolsilloCantidad[playerid][11];
			        AlmacenInfo[i][alOTI][o] = BolsilloTipo[playerid][11];
			        if(EsArma(BolsilloID[playerid][11]))
					{
					    ResetPlayerWeapons(playerid);
					}
					BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
					UpdateAttach(playerid);
					GuardarAlmacen(i);
					GuardarBolsillos(playerid);
					format(string, sizeof(string), "* %s deja un/a %s del almacén.", NombreJugador(playerid), ObtenerNombreObjeto(AlmacenInfo[i][alOID][o]));
					ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
					return 1;
				}
				SendClientMessage(playerid, ROJO_OSCURO, "* El almacén ya está lleno.");
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar del contenido del almacén.");
		return 1;
	}
	else if(!strcmp(opcion, "cogerunidad", true))
	{
	    if(sscanf(params, "s[128]i", opcion, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /almacen [cogerunidad] [Espacio (0-29)]");
		    return 1;
		}
		if(opcion2 < 0 || opcion2 > 29) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio del almacén debe estar entre 0 y 29.");
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 5, AlmacenInfo[i][alxxx], AlmacenInfo[i][alyyy], AlmacenInfo[i][alzzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(AlmacenInfo[i][alEstado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El almacén está cerrado.");
				if(AlmacenInfo[i][alOID][opcion2] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio elegido está vacío.");
				if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
				if(AlmacenInfo[i][alOID][opcion2] < 92 || AlmacenInfo[i][alOID][opcion2] > 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Las unidades solo pueden ser cogidas de las cajas.");
				if(AlmacenInfo[i][alOCA][opcion2] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La caja está vacía.");
				if(AlmacenInfo[i][alOID][opcion2] == 92) DarObjeto(playerid, 30, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 93) DarObjeto(playerid, 22, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 94) DarObjeto(playerid, 24, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 95) DarObjeto(playerid, 28, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 96) DarObjeto(playerid, 25, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 97) DarObjeto(playerid, 34, 1, 0);
				else if(AlmacenInfo[i][alOID][opcion2] == 98) DarObjeto(playerid, 52, 1, 30);
				else if(AlmacenInfo[i][alOID][opcion2] == 99) DarObjeto(playerid, 44, 1, 10);
				else if(AlmacenInfo[i][alOID][opcion2] == 100) DarObjeto(playerid,46, 1, 7);
				else if(AlmacenInfo[i][alOID][opcion2] == 101) DarObjeto(playerid, 50, 1, 30);
				else if(AlmacenInfo[i][alOID][opcion2] == 102) DarObjeto(playerid, 47, 1, 2);
				else if(AlmacenInfo[i][alOID][opcion2] == 103) DarObjeto(playerid, 56, 1, 2);

				if(EsArma(AlmacenInfo[i][alOID][opcion2])) GivePlayerWeapon(playerid, AlmacenInfo[i][alOID][opcion2], AlmacenInfo[i][alOCA][opcion2]);
                AlmacenInfo[i][alOCA][opcion2] --;
				UpdateAttach(playerid);
				GuardarAlmacen(i);
				GuardarBolsillos(playerid);
				format(string, sizeof(string), "* %s coge un/a %s del almacén.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar del contenido del almacén.");
		return 1;
	}
	else { SendClientMessage(playerid, GRIS, "Uso: /almacen [Situar | Ver | Sacar | Guardar | Cogerunidad]"); }
	return 1;
}

CMD:puertapf(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningún vehículo.");
	new coche = GetPlayerVehicleID(playerid);
	if(PlayerToPoint(playerid, 2, 1829.2887,-1539.2230,13.1821))
	{
	    SetVehiclePos(coche, 1816.8546,-1536.7004,13.0401);
	    SetVehicleZAngle(coche, 82);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 1816.8546,-1536.7004,13.0401))
	{
	    SetVehiclePos(coche, 1829.2887,-1539.2230,13.1821);
	    SetVehicleZAngle(coche, 253);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta del garaje de la prisión.");
	}
	return 1;
}

CMD:celdas(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(!PlayerToPoint(playerid, 20.0, 229.0191,-1096.6929,-90.5441)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona de control de la prisión.");
    new string[256], opcion[128];
	if(sscanf(params, "s[128]", opcion))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /celdas [Abrir | Cerrar]");
	    return 1;
	}
	if(!strcmp(opcion, "abrir", true))
	{
	    for(new c = 0; c < MAX_CELDAS; c++)
		{
			AbrirCelda(c);
		}
		format(string, sizeof(string), "[Central] {FFFFFF}%s ha dado la orden de abrir las celdas de prisión.", NombreJugador(playerid));
		MensajeDeFaccion(1, AZUL, string);
		return 1;
	}
	else if(!strcmp(opcion, "cerrar", true))
	{
	    for(new c = 0; c < MAX_CELDAS; c++)
		{
			CerrarCelda(c);
		}
		format(string, sizeof(string), "[Central] {FFFFFF}%s ha dado la orden de cerrar las celdas de prisión.", NombreJugador(playerid));
		MensajeDeFaccion(1, AZUL, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /celdas [Abrir | Cerrar]");
	}
	return 1;
}

CMD:llamar(playerid, params[])
{
    new string[256], telefono;
	if(sscanf(params, "i", telefono))
	{
	    SendClientMessage(playerid, 0x72B1FFFF, "Uso: {FFFFFF}/llamar [Número]");
	    return 1;
	}
	if(BolsilloID[playerid][11] != 104) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes un teléfono en tu mano.");
	format(string, sizeof(string), "* %s saca su teléfono móvil.", NombreJugador(playerid));
	ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	if(telefono == 911)
	{
	    SendClientMessage(playerid, 0x72B1FFFF, "[Operadora] {FFFFFF}Emergencias de Los Santos: ¿En qué puedo ayudarle?");
	    SendClientMessage(playerid, 0x72B1FFFF, "Diga: Policía - Bomberos - Médicos");
	    LlamadaMovil[playerid] = 911;
	    return 1;
	}
	else if(telefono == 4728)
	{
	    if(JugadorInfo[playerid][jTrabajo] != 5) return SendClientMessage(playerid, 0x72B1FFFF, "El teléfono está apagado o fuera de cobertura...");
        if(EncargoTrafis == 1) return SendClientMessage(playerid, 0x72B1FFFF, "El teléfono está ocupado, llame en otro momento...");
		if(LlamandoTraficantes[playerid] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás llamando...");
		EncargoTrafis = 1;
		LlamandoTraficantes[playerid] = 1;
	    SendClientMessage(playerid, GRIS, "Llamando...");
        SetTimerEx("LaLlamadaTrafis",6000,0,"d",playerid);
        format(string, sizeof(string), "* %s descuelga el teléfono y teclea un número.", NombreJugador(playerid));
        ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    for(new b = 0; b < 13; b++)
		    {
				if(BolsilloID[i][b] == 104 && BolsilloTipo[i][b] == telefono && telefono != 0)
				{
				    new giveplayerid;
					giveplayerid = i;
					LlamadaMovil[playerid] = giveplayerid; //caller connecting
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if(LlamadaMovil[giveplayerid] == NOEXISTE)
							{
								format(string, sizeof(string), "* Estás recibiendo una llamada entrante de %d. Usa '/responder' para contestar la llamada.", BolsilloTipo[playerid][11]);
								SendClientMessage(giveplayerid, CELESTE, string);
								format(string, sizeof(string), "* Empieza a sonar el teléfono de %s.", NombreJugador(giveplayerid));
								ProxDetector(10.0, i, string, ROSA, ROSA, ROSA, ROSA, ROSA);
								format(string, sizeof(string), "* %s descuelga el teléfono y teclea un número.", NombreJugador(playerid));
        						ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
								return 1;
							}
						}
					}
				}
			}
		}
	}
	SendClientMessage(playerid, GRIS, "El teléfono está apagado o fuera de cobertura...");
	return 1;
}

CMD:sms(playerid, params[])
{
    if(BolsilloID[playerid][11] != 104) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes teléfono móvil.");
    new sms[256], telefono, string[256];
	if(sscanf(params, "is[32]", telefono, sms))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/sms [Teléfono] [Mensaje]");
	    return 1;
	}
	if(JugadorInfo[playerid][jDinero] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero, necesitas $3.");
	for(new i=0; i < MAX_PLAYERS; i++)
	{
	    for(new b = 0; b < 13; b++)
	    {
			if(BolsilloID[i][b] == 104 && BolsilloTipo[i][b] == telefono && telefono != 0)
			{
			    format(string, sizeof(string), "[SMS] %s. Teléfono: %d", sms, BolsilloTipo[playerid][11]);
				SendClientMessage(i, AMARILLO, string);
				format(string, sizeof(string), "* %s saca su teléfono móvil y lee un sms.", NombreJugador(i));
				ProxDetector(10.0, i, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				format(string, sizeof(string), "* %s saca su teléfono y envía un sms.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				JugadorInfo[playerid][jDinero] -= 3;
				return 1;
		    }
		}
	}
	SendClientMessage(playerid, GRIS, "El movil está apagado o fuera de cobertura...");
	return 1;
}

CMD:colgar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		TogglePlayerControllable(playerid, 1);
		new caller = LlamadaMovil[playerid];
		if(IsPlayerConnected(caller))
		{
			if(caller != INVALID_PLAYER_ID)
			{
				if(caller != 255)
				{
					if(caller < 255)
					{
						SendClientMessage(caller, AMARILLO, "Han colgado.");
						SendClientMessage(playerid, AMARILLO, "Has colgado la llamada.");
						LlamadaMovil[caller] = NOEXISTE;
					}
					LlamadaMovil[playerid] = NOEXISTE;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
					return 1;
				}
			}
		}
		SendClientMessage(playerid,  ROJO_OSCURO, "* No estás en ninguna llamada.");
	}
	return 1;
}

CMD:responder(playerid, params[])
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(LlamadaMovil[i] == BOMBERO)
     		{
     		    if(JugadorInfo[playerid][jMiembro] == 3)
				{
				    if(Bomberos911 > 0)
				    {
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						LlamadaMovil[playerid] = i; //caller connecting
						LlamadaMovil[i] = playerid;
						SendClientMessage(i, AMARILLO, "Han atendido el teléfono.");
						format(string, sizeof(string), "* %s contesta a su teléfono móvil.", NombreJugador(playerid));
				 		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
						Bomberos911--;
						return 1;
					}
					else{SendClientMessage(i, ROJO_OSCURO, "* Nadie ha llamado.");}
				}
			}
			if(LlamadaMovil[i] == MEDICO)
     		{
     		    if(JugadorInfo[playerid][jMiembro] == 2)
				{
				    if(Medicos911 > 0)
				    {
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						LlamadaMovil[playerid] = i; //caller connecting
						LlamadaMovil[i] = playerid;
						SendClientMessage(i, GRIS, "Han descolgado el teléfono.");
						format(string, sizeof(string), "* %s contesta a su teléfono móvil.", NombreJugador(playerid));
				 		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
						Medicos911--;
						return 1;
					}
					else{SendClientMessage(i, ROJO_OSCURO, "* Nadie ha llamado.");}
				}
			}
			if(LlamadaMovil[i] == POLICIA)
     		{
     		    if(JugadorInfo[playerid][jMiembro] == 1)
				{
				    if(Policias911 > 0)
				    {
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
                   		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						LlamadaMovil[playerid] = i; //caller connecting
						LlamadaMovil[i] = playerid;
						SendClientMessage(i, GRIS, "Han descolgado el teléfono.");
						format(string, sizeof(string), "* %s contesta a su teléfono móvil.", NombreJugador(playerid));
				 		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
						Policias911--;
						return 1;
					}
					else{SendClientMessage(i, ROJO_OSCURO, "* Nadie ha llamado.");}
				}
			}
			if(BolsilloID[playerid][11] != 104) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes teléfono móvil.");
			if(LlamadaMovil[i] == playerid)
			{
				LlamadaMovil[playerid] = i; //caller connecting
				SendClientMessage(i, GRIS, "Han descolgado el teléfono.");
				format(string, sizeof(string), "* %s contesta a su teléfono móvil.", NombreJugador(playerid));
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
			}
		}
	}
	return 1;
}

CMD:frenodemano(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new coche = GetPlayerVehicleID(playerid);
		if(AutoInfo[coche][aMotor] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes apagar el motor para colocar el freno de mano.");
		if(ComprobarDueno(coche,playerid) || ComprobarPrestado(coche, playerid) || ComprobarRenta(coche,playerid) || ComprobarFaccion(coche, playerid) || ComprobarTrabajo(coche, playerid))
		{
		    new string[128];
		    if(FrenodeMano[coche] == 1)
            {
                FrenodeMano[coche] = 0;
                format(string, sizeof(string), "* %s quita el freno de mano a su vehículo.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
                return 1;
            }
            if(FrenodeMano[coche] == 0)
            {
                FrenodeMano[coche] = 1;
                GetVehiclePos(coche, VehFrenoPOS[coche][0], VehFrenoPOS[coche][1], VehFrenoPOS[coche][2]);
                GetVehicleZAngle(coche, VehFrenoPOS[coche][3]);
                SetVehicleVelocity(coche, 0, 0, 0);
                format(string, sizeof(string), "* %s coloca el freno de mano al vehículo.", NombreJugador(playerid));
				ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				printf("Colocado -> %f", VehComprobar[playerid][3]);
                return 1;
            }
		}
		else return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este vehículo.");
	}
	else SendClientMessage(playerid, ROJO_OSCURO, "* Necesitas estar en un vehículo y ser el conductor.");
	return 1;
}

CMD:modificar(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres mecánico.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo.");
    for(new i = 0; i < TotalTalleres; i++)
	{
		if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]) && PlayerToPoint(playerid, 50, 6.1553,2735.5730,53.2997))
	    {
	        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
            new coche = GetPlayerVehicleID(playerid);
			pvehicle[playerid] = coche;
			pmodelid[playerid] = GetVehicleModel(coche);
			ModCar(playerid);
			return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en el área de trabajo del taller para poder generar una factura.");
	return 1;
}

CMD:tunning(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres mecánico.");
    for(new i = 0; i < TotalTalleres; i++)
	{
		if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
	    {
	        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
            new coche = GetPlayerVehicleID(playerid);
            pvehicle[playerid] = coche;
			TunningCar(playerid);
			return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en el área de trabajo del taller para poder generar una factura.");
	return 1;
}

/*
CMD:modificar(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo.");
	if(PlayerToPoint(playerid, 15, 2530.5293,-1524.9912,24.0535) || PlayerToPoint(playerid, 15, 2312.6636,-1981.9938,13.5695) || PlayerToPoint(playerid, 15, 1041.6848,-1029.6130,32.1016))
    {
        new coche = GetPlayerVehicleID(playerid);
		pvehicle[playerid] = coche;
		pmodelid[playerid] = GetVehicleModel(coche);
		ModCar(playerid);
		return 1;
    }
	return 1;
}

CMD:tunning(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo.");
	if(PlayerToPoint(playerid, 15, 2530.5293,-1524.9912,24.0535) || PlayerToPoint(playerid, 15, 2312.6636,-1981.9938,13.5695) || PlayerToPoint(playerid, 15, 1041.6848,-1029.6130,32.1016))
    {
        new coche = GetPlayerVehicleID(playerid);
        pvehicle[playerid] = coche;
		TunningCar(playerid);
		return 1;
    }
	return 1;
}

CMD:pintar(playerid, params[])
{
    new coche = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo.");
	new color1, color2;
	if(sscanf(params, "ii", color1, color2))
	{
	    SendClientMessage(playerid, AMARILLO, "Uso: {FFFFFF}/pintar [Color] [Color] $200 {FFFF00} Si no sabes como son las ID usa /ayuda color");
	    return 1;
	}
	if(PlayerToPoint(playerid, 15, 2530.5293,-1524.9912,24.0535) || PlayerToPoint(playerid, 15, 2312.6636,-1981.9938,13.5695) || PlayerToPoint(playerid, 15, 1041.6848,-1029.6130,32.1016))
    {
        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
        if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] --;
        if(JugadorInfo[playerid][jDinero] < 200) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
		AutoInfo[coche][aColor1] = color1;
        AutoInfo[coche][aColor2] = color2;
        ChangeVehicleColor(coche, color1, color2);
        SendClientMessage(playerid, CELESTE, "* Has pintado el vehículo.");
        JugadorInfo[playerid][jDinero] -= 200;
        return 1;
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un taller.");
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un vehículo.");
	 if(PlayerToPoint(playerid, 15, 2530.5293,-1524.9912,24.0535) || PlayerToPoint(playerid, 15, 2312.6636,-1981.9938,13.5695) || PlayerToPoint(playerid, 15, 1041.6848,-1029.6130,32.1016))
	    {
	        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	       	if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
            if(JugadorInfo[playerid][jDinero] < 100) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para esto.");
			TogglePlayerControllable(playerid, false);
	        GameTextForPlayer(playerid, "~g~Reparando vehiculo", 2000, 5);
	    	SetTimerEx("RepararVeh", 20000, 0, "ddd", playerid, 1);
	    	JugadorInfo[playerid][jDinero] -= 100;
			return 1;
	    }
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un taller.");
	return 1;
}*/

CMD:eliminarcp(playerid, params[])
{
    DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:talleres(playerid, params[])
{
	SendClientMessage(playerid, CELESTE, "Para modificar un coche precisas ir a un taller, selecciona tu taller de preferencia");
    ShowPlayerDialog(playerid, Mostrar_Talleres, DIALOG_STYLE_LIST, "{00FFFF}Selecciona un taller.", "{00FFFF}1) {FFFFFF}Taller Ganton\n{00FFFF}2) {FFFFFF}Taller Jefferson", "Localizar", "Cancelar");
	return 1;
}

CMD:taller(playerid, params[])
{
	if(PlayerToPoint(playerid, 7, 2524.1450,-1524.6024,23.7740))
	{
	    if(JugadorInfo[playerid][jTaller] != 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	    if(TallerEast == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El taller está cerrado.");
		if(GetPlayerState(playerid) == 2)
		{
		    new i = GetPlayerVehicleID(playerid);
			SetVehiclePos(i, -0.6189,2742.6692,53.2997);
			SetVehicleZAngle(i, 266);
		}
		else SetPlayerPos(playerid, -0.6189,2742.6692,53.2997);
		SendClientMessage(playerid, CELESTE, "* Has entrado al taller.");
		return 1;
	}
	else if(PlayerToPoint(playerid, 7, -0.6189,2742.6692,53.2997))
	{
	    if(JugadorInfo[playerid][jTaller] != 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	    if(TallerEast == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El taller está cerrado.");
		if(GetPlayerState(playerid) == 2)
		{
		    new i = GetPlayerVehicleID(playerid);
			SetVehiclePos(i, 2524.1450,-1524.6024,23.7740);
			SetVehicleZAngle(i, 360);
		}
		else SetPlayerPos(playerid, 2524.1450,-1524.6024,23.7740);
		SendClientMessage(playerid, CELESTE, "* Has salido del taller.");
		return 1;
	}
	else { SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la entrada o salida de un taller."); }
	return 1;
}

CMD:factura(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres mecánico.");
	new string[256];
	if(sscanf(params, "uis[128]", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /factura [ID] [Cantidad] [Razón]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(params[1] < 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El importe de la factura ha de ser mayor a 0 dólares.");
    for(new i = 0; i < TotalTalleres; i++)
	{
		if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
	    {
	        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	        format(string, sizeof(string), "* %s te ha dado una factura de $%d. Razón: %s", NombreJugador(playerid), params[1], params[2]);
			SendClientMessage(params[0], CELESTE, string);
			SendClientMessage(params[0], CELESTE, "* Usa '/aceptar' para aceptarla o '/rechazar' para rechazarla.");
			format(string, sizeof(string), "* Has dado una factura de $%d a %s. Razón: %s", params[1], NombreJugador(params[0]), params[2]);
			SendClientMessage(playerid, CELESTE, string);
			Oferta[params[0]] = 5;
			OfertaCreador[params[0]] = playerid;
			OfertaCantidad[params[0]] = params[1];
			return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en el área de trabajo del taller para poder generar una factura.");
	return 1;
}

CMD:pintar(playerid, params[])
{
    if(JugadorInfo[playerid][jTrabajo] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres mecánico.");
	new color1, color2;
	if(sscanf(params, "ii", color1, color2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /pintar [Color] [Color]");
	    return 1;
	}
	new coche = JugadorCercaVehiculo(playerid);
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No podrás pintar un vehículo subido en el.");
	for(new i=0; i<MAX_TALLERES; i++)
	{
		if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
	    {
	        if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	        if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] --;
            AutoInfo[coche][aColor1] = color1;
            AutoInfo[coche][aColor2] = color2;
            ChangeVehicleColor(coche, color1, color2);
            SendClientMessage(playerid, CELESTE, "* Has pintado el vehículo.");
            return 1;
		}
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el área de trabajo de un taller.");
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres mecánico.");
	new opcion[32];
	if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /reparar [Opción]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: chapa, motor");
	    return 1;
	}
	new coche = JugadorCercaVehiculo(playerid);
	if(coche == 0) return 1;
	new motor, luces, alarma, puertas, capo, maletero, objetivo;
	GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No podrás reparar un vehículo subido en el.");
	if(!strcmp(opcion, "chapa", true))
	{
	    for(new i=0; i< MAX_TALLERES; i++)
	    {
	        if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
	        {
	            if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
	            if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
	            TogglePlayerControllable(playerid, false);
	            GameTextForPlayer(playerid, "~g~Reparando vehiculo", 2000, 5);
		    	SetTimerEx("RepararVeh", 20000, 0, "ddd", playerid, 1);
	    		return 1;
	        }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el área de trabajo de un taller.");
		return 1;
	}
	if(!strcmp(opcion, "motor", true))
	{
		if(capo == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes reparar el motor del vehículo con el capó cerrado.");
		if(EstaEnTaller(playerid) == 0)
		{
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid, "~g~Reparando vehiculo", 2000, 5);
		    SetTimerEx("RepararVeh", 10000, 0, "dd", playerid, 2);
		    return 1;
		}
		else if(EstaEnTaller(playerid) == JugadorInfo[playerid][jTaller])
		{
		    if(NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay productos en el taller, avisa al jefe.");
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid, "~g~Reparando vehiculo", 2000, 5);
		    SetTimerEx("RepararVeh", 20000, 0, "dd", playerid, 3);
		    return 1;
		}
		else
		{
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid, "~g~Reparando vehiculo", 2000, 5);
		    SetTimerEx("RepararVeh", 10000, 0, "dd", playerid, 2);
		    return 1;
		}
	}
	return 1;
}

CMD:tdespedir(playerid, params[])
{
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /tdespedir [id]");
	    return 1;
	}
	if(EsTaller(JugadorInfo[playerid][jNegocio]) == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún taller.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jNegocio] != JugadorInfo[params[0]][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no trabaja en tu taller.");
	new string[128];
	JugadorInfo[params[0]][jTaller] = 0;
	JugadorInfo[params[0]][jTrabajo] = 0; JugadorInfo[params[0]][jUltimoTrabajo] = 0; JugadorInfo[params[0]][jTiempoTrabajo] = 0;
	format(string, sizeof(string), "* Has despedido a %s de tu taller.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s te ha despedido de su taller.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:tcontratar(playerid, params[])
{
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /tcontratar [id]");
	    return 1;
	}
	if(EsTaller(JugadorInfo[playerid][jNegocio]) == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún taller.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[params[0]][jTrabajo] > 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador ya tiene algún trabajo.");
	if(JugadorInfo[params[0]][jMiembro] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador pertenece a alguna facción.");
	if(JugadorInfo[params[0]][jTaller] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador ya trabaja en otro taller.");
	new string[128];
	JugadorInfo[params[0]][jTaller] = JugadorInfo[playerid][jNegocio];
	JugadorInfo[params[0]][jTrabajo] = 2; JugadorInfo[params[0]][jUltimoTrabajo] = 0; JugadorInfo[params[0]][jTiempoTrabajo] = 0;
	format(string, sizeof(string), "* Has contratado a %s para trabajar en tu taller.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* %s te ha contratado para trabajar en su taller.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:trabajar(playerid, params[])
{
	if(JugadorInfo[playerid][jTrabajo] == 1)
	{
	    if(!PlayerToPoint(playerid, 2, 1753.1427,-1894.0850,13.5572)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el puesto de trabajo.");
	    if(Trabajando[playerid] == 0)
	    {
	        SetPlayerSkin(playerid, 255);
	        Trabajando[playerid] = 1;
	        SendClientMessage(playerid, CELESTE, "* Ahora estás preparado para trabajar, sube a un autobus y usa '/ruta'.");
	        return 1;
		}
		else
		{
		    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        Trabajando[playerid] = 0;
	        SendClientMessage(playerid, CELESTE, "* Has dejado de trabajar, vuelve a usar '/trabajar' para comenzar nuevamente.");
		    return 1;
		}
	}
	else if(JugadorInfo[playerid][jTrabajo] == 2)
	{
	    for(new i=0; i< MAX_TALLERES; i++)
	    {
	        if(PlayerToPoint(playerid, 5, TallerInfo[i][tx], TallerInfo[i][ty], TallerInfo[i][tz]) && PlayerToPoint(playerid, 50, 6.1553,2735.5730,53.2997))
	        {
	            if(TallerInfo[i][tNegocio] != JugadorInfo[playerid][jTaller]) return SendClientMessage(playerid, ROJO_OSCURO, "* No trabajas en este taller.");
                if(Trabajando[playerid] == 0)
			    {
			        ShowModelSelectionMenu(playerid, uniformemeca, "Uniformes");
			        Trabajando[playerid] = 1;
			        return 1;
				}
				else
				{
				    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
			        Trabajando[playerid] = 0;
			        return 1;
				}
			}
		}
	}
	else if(JugadorInfo[playerid][jTrabajo] == 10)
	{
	    if(!PlayerToPoint(playerid, 2, 2148.1677,-2191.6311,13.5544)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el puesto de trabajo.");
	    if(Trabajando[playerid] == 0)
	    {
	        SetPlayerSkin(playerid, 16);
	        Trabajando[playerid] = 1;
	        SendClientMessage(playerid, CELESTE, "* Ya estás disponible para trabajar, ahora vé a un camión de basuras y usa '/basura'.");
	        return 1;
		}
		else
		{
		    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        Trabajando[playerid] = 0;
	        SendClientMessage(playerid, CELESTE, "* Has dejado de trabajar, vuelve a usar '/trabajar' para comenzar nuevamente.");
		    return 1;
		}
	}
	return 1;
}

CMD:ruta(playerid, params[])
{
	new string[128], vehicleid = GetPlayerVehicleID(playerid);
	if(JugadorInfo[playerid][jTrabajo] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres conductor de autobuses.");
	if(JugadorInfo[playerid][jUltimoTrabajo] > 0)
	{
	    format(string, sizeof(string), "* Debes esperar %d minutos para volver a trabajar.", JugadorInfo[playerid][jUltimoTrabajo]);
	    SendClientMessage(playerid, ROJO_OSCURO, string);
	    return 1;
	}
	if(Trabajando[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes colocar '/trabajar' en el puesto de trabajo primero.");
	if(RutaAutobus[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en una ruta, deberás terminar esa primero.");
	if(GetVehicleModel(vehicleid) != 431 && AutoInfo[vehicleid][aFaccionID] != 101) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un autobus del tránsporte público.");
    ShowPlayerDialog(playerid, Ruta_Autobus, DIALOG_STYLE_LIST, "{00FFFF}Seleccionar ruta", "{00FFFF}1) {FFFFFF}Ruta central\n{00FFFF}2) {FFFFFF}Ruta oeste\n{00FFFF}3) {FFFFFF}Ruta este\n{00FFFF}4) {FFFFFF}Ruta pueblos", "Siguiente", "Cancelar");
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(PlayerToPoint(playerid, 2, 1753.1427,-1894.0850,13.5572))
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2211.1897,-2046.0941,13.5469))
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2148.1677,-2191.6311,13.5544))
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2170.8396,-2175.6587,13.5469))//BARRENDERO
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2273.9412,-2355.8669,13.5469))//Mecánico
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 1649.2026,-1493.9423,13.5469))//Móviles
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 1649.2026,-1493.9423,13.5469))//Abogados
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2381.7891,286.4539,19.5806))//Ladrón
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 2, 891.3534,-1271.4711,14.9527))//Camionero
	{
	    SendClientMessage(playerid, CELESTE, "Te has colocado tu ropa");
	    SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	    return 1;
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningún puesto trabajo.");
}

CMD:trabajo(playerid, params[])
{
	if(PlayerToPoint(playerid, 2, 1753.1427,-1894.0850,13.5572))
	{
	    ShowPlayerDialog(playerid, T_Autobus, DIALOG_STYLE_MSGBOX, "{00FFFF}Conductor de autobuses",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}60 dólares\n\t{FFFFFF}Paga por ruta: {00FFFF}75-110 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2211.1897,-2046.0941,13.5469))
	{
	    ShowPlayerDialog(playerid, T_Licencias, DIALOG_STYLE_MSGBOX, "{00FFFF}Vendedor de documentos ilegales",
		"{FFFFFF}Este es un trabajo ilegal, por lo que ganarás bastante o nada de dinero, eso según lo bueno que seas\nen este mundo, y claro está, que deberás de hacerlo con cuidado\no podrás ser condenado por falsificación de documentos.", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2148.1677,-2191.6311,13.5544))
	{
	    ShowPlayerDialog(playerid, T_Basurero, DIALOG_STYLE_MSGBOX, "{00FFFF}Basurero",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}90 dólares\n\t{FFFFFF}Paga por ruta: {00FFFF}350-750 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2170.8396,-2175.6587,13.5469))//BARRENDERO
	{
	    ShowPlayerDialog(playerid, T_Barrendero, DIALOG_STYLE_MSGBOX, "{00FFFF}Barrendero",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}125 dólares\n\t{FFFFFF}Paga por ruta: {00FFFF}150-225 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2273.9412,-2355.8669,13.5469))//Mecánico
	{
	    ShowPlayerDialog(playerid, T_Mecanico, DIALOG_STYLE_MSGBOX, "{00FFFF}Mecánico",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}100 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 1649.2026,-1493.9423,13.5469))//Móviles
	{
	    ShowPlayerDialog(playerid, T_Moviles, DIALOG_STYLE_MSGBOX, "{00FFFF}Móviles",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}180 dólares\n\t{FFFFFF}Paga por ruta: {00FFFF}450-750 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 1649.2026,-1493.9423,13.5469))//Abogados
	{
	    ShowPlayerDialog(playerid, T_Abogado, DIALOG_STYLE_MSGBOX, "{00FFFF}Abogados",
		"{00FFFF}Información del trabajo{FFFFFF}\n\tSueldo payday: {00FFFF}250 dólares\n\t{FFFFFF}Paga por ruta: {00FFFF}450-750 dólares", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 2381.7891,286.4539,19.5806))//Ladrón
	{
	    ShowPlayerDialog(playerid, T_Ladron, DIALOG_STYLE_MSGBOX, "{00FFFF}Ladrón",
		"{FFFFFF}Este es un trabajo ilegal, por lo que ganarás bastante o nada de dinero, eso según lo bueno que seas\nen este mundo, y claro está, que deberás de hacerlo con cuidado.", "Aceptar", "Cancelar");
		return 1;
	}
	else if(PlayerToPoint(playerid, 2, 891.3534,-1271.4711,14.9527))//Camionero
	{
	    ShowPlayerDialog(playerid, T_Camionero, DIALOG_STYLE_MSGBOX, "{00FFFF}Camionero",
		"{FFFFFF}Este es un trabajo en el cual deberas repartir mercancía entre todos Los Santos.", "Aceptar", "Cancelar");
		return 1;
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningún puesto trabajo.");
}

CMD:mostrar(playerid, params[])
{
    new giveplayerid, opcion[32], string[580];
    if(sscanf(params, "s[32]u", opcion, giveplayerid))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /mostrar [Opción] [id]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: acreditacion, documentacion, dnifalso, licilegal, licencias");
	    return 1;
	}
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador que indicaste no está conectado.");
	if(!strcmp(opcion, "documentacion", true))
	{
	    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador que indicaste no está conectado.");
        if(JugadorInfo[playerid][jDNI] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes documentación.");
        new sexo[10], vigencia[20];

		if(JugadorInfo[playerid][jSexo] == 1) sexo = "Masculino";
        else if(JugadorInfo[playerid][jSexo] == 2) sexo = "Femenino";
        if(JugadorInfo[playerid][jTiempoDNI] > 0 && JugadorInfo[playerid][jTiempoDNI] <= gettime()) vigencia = "Caducada";
        else if(JugadorInfo[playerid][jTiempoDNI] > 0 && JugadorInfo[playerid][jTiempoDNI] >= gettime()) vigencia = "Correcta";

	    format(string, sizeof(string), "{FFFFFF}Documento Nacional de Identidad expeditado por el gobierno de la Ciudad de Los Santos.\n\t\tEste documento es personal e instranferible.\n\n\nNúmero: \t%d\nNombre: \t%s\nCiudad: \tLos Santos\nSexo: \t\t%s\nVigencia: \t%s", JugadorInfo[playerid][jDNI], NombreJugador(playerid), sexo, vigencia);
	    ShowPlayerDialog(giveplayerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Documento nacional de identidad", string, "Cerrar", "");
	    format(string, sizeof(string), "* %s muestra su DNI a %s.", NombreJugador(playerid), NombreJugador(giveplayerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	if(!strcmp(opcion, "licilegal", true))
	{
	    if(JugadorInfo[playerid][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes DNI falso.");
	    new lic[8][50];
	    if(JugadorInfo[playerid][jFLicencia][0] == 0) { lic[0] = "No"; } else { lic[0] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][1] == 0) { lic[1] = "No"; } else { lic[1] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][2] == 0) { lic[2] = "No"; } else { lic[2] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][3] == 0) { lic[3] = "No"; } else { lic[3] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][4] == 0) { lic[4] = "No"; } else { lic[4] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][5] == 0) { lic[5] = "No"; } else { lic[5] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][6] == 0) { lic[6] = "No"; } else { lic[6] = "Si"; }
	    if(JugadorInfo[playerid][jFLicencia][7] == 0) { lic[7] = "No"; } else { lic[7] = "Si"; }
	    format(string, sizeof(string), "{FFFFFF}Licencias expeditadas por el Gobierno de Los Santos.\n\n\n\tConducción: %s\n\tNavegación: %s\n\tVuelo: %s\n\tPesca: %s\n\tCaza: %s\n\tArmas: %s\n\tCamiones: %s\n\tMotos: %s", lic[0], lic[1], lic[2], lic[3], lic[4], lic[5], lic[6], lic[7]);
	    ShowPlayerDialog(giveplayerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Documento nacional de identidad", string, "Cerrar", "");
	    format(string, sizeof(string), "* %s muestra sus licencias a %s.", NombreJugador(playerid), NombreJugador(giveplayerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	if(!strcmp(opcion, "licencias", true))
	{
	    new lice[8][50];
	    if(JugadorInfo[playerid][jLicencias][0] == 0) { lice[0] = "No"; } else { lice[0] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][1] == 0) { lice[1] = "No"; } else { lice[1] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][2] == 0) { lice[2] = "No"; } else { lice[2] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][3] == 0) { lice[3] = "No"; } else { lice[3] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][4] == 0) { lice[4] = "No"; } else { lice[4] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][6] == 0) { lice[6] = "No"; } else { lice[6] = "Si"; }
	    if(JugadorInfo[playerid][jLicencias][7] == 0) { lice[7] = "No"; } else { lice[7] = "Si"; }
	    format(string, sizeof(string), "{FFFFFF}Licencias expeditadas por el Gobierno de Los Santos.\n\n\n\tConducción: %s\n\tNavegación: %s\n\tVuelo: %s\n\tPesca: %s\n\tCaza: %s\n\tCamiones: %s\n\tMotos: %s", lice[0], lice[1], lice[2], lice[3], lice[4], lice[6], lice[7]);
	    ShowPlayerDialog(giveplayerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Documento nacional de identidad", string, "Cerrar", "");
	    format(string, sizeof(string), "* %s muestra sus licencias a %s.", NombreJugador(playerid), NombreJugador(giveplayerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	if(!strcmp(opcion, "dnifalso", true))
	{
	    new sexo[10];
	    if(JugadorInfo[playerid][jSexo] == 1) sexo = "Masculino";
        else if(JugadorInfo[playerid][jSexo] == 2) sexo = "Femenino";
	    if(JugadorInfo[playerid][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes DNI falso.");
	    format(string, sizeof(string), "{FFFFFF}Documento Nacional de Identidad expeditado por el gobierno de la Ciudad de Los Santos.\n\t\tEste documento es personal e instranferible.\n\n\nNúmero: \t%d\nNombre: \t%s\nCiudad: \tLos Santos\nSexo: \t\t%s\nVigencia: \tCorrecta", JugadorInfo[playerid][jDNI], JugadorInfo[playerid][jNombreFalso], sexo);
	    ShowPlayerDialog(giveplayerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Documento nacional de identidad", string, "Cerrar", "");
	    format(string, sizeof(string), "* %s muestra su DNI a %s.", NombreJugador(playerid), NombreJugador(giveplayerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    return 1;
	}
	if(!strcmp(opcion, "acreditacion", true))
	{
	    if(JugadorInfo[playerid][jMiembro] != 2 && JugadorInfo[playerid][jMiembro] != 3 && JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 5 && JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes acreditación.");
		if(JugadorInfo[playerid][jServicio] == 0 && JugadorInfo[playerid][jMiembro] != 2 && JugadorInfo[playerid][jMiembro] != 3 && JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio, por lo que no tienes la placa ahora mismo.");
		if(JugadorInfo[playerid][jMiembro] == 2)
		{
			format(string, sizeof(string), "{FFFFFF}Nombre:\t\t{00BFFF}%s.\n{FFFFFF}Departamento:\t\t{00BFFF}LSMD.\n{FFFFFF}Central:\t\t{00BFFF}Los Santos.", NombreJugador(playerid));
		}
		else if(JugadorInfo[playerid][jMiembro] == 3)
		{
            format(string, sizeof(string), "{FFFFFF}Nombre:\t\t{00BFFF}%s.\n{FFFFFF}Departamento:\t\t{00BFFF}LSFD.\n{FFFFFF}Central:\t\t{00BFFF}Los Santos.", NombreJugador(playerid));
		}
		else if(JugadorInfo[playerid][jMiembro] == 4)
		{
		    format(string, sizeof(string), "{FFFFFF}Nombre:\t\t{00BFFF}%s.\n{FFFFFF}Departamento:\t\t{00BFFF}Gobierno.\n{FFFFFF}Central:\t\t{00BFFF}Los Santos.", NombreJugador(playerid));
		}
		else if(JugadorInfo[playerid][jMiembro] == 5)
		{
		    format(string, sizeof(string), "{FFFFFF}Nombre:\t\t{00BFFF}%s.\n{FFFFFF}Departamento:\t\t{00BFFF}LSRTV.\n{FFFFFF}Central:\t\t{00BFFF}Los Santos.", NombreJugador(playerid));
		}
		else if(JugadorInfo[playerid][jMiembro] == 6)
		{
		    format(string, sizeof(string), "{FFFFFF}Nombre:\t\t{00BFFF}%s.\n{FFFFFF}Departamento:\t\t{00BFFF}US Army.\n{FFFFFF}Central:\t\t{00BFFF}Los Santos.", NombreJugador(playerid));
		}
		ShowPlayerDialog(giveplayerid, 998899, DIALOG_STYLE_MSGBOX, "{00BFFF}Acreditación de Los Santos", string, "Aceptar", "Cerrar");
		format(string, sizeof(string), "* %s muestra su acreditación a %s.", NombreJugador(playerid), NombreJugador(giveplayerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	return 1;
}

CMD:ceder(playerid, params[])
{
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ceder [ID]");
	    return 1;
	}
	return 1;
}

CMD:guardar(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/guardar [Slot]");
	    SendClientMessage(playerid, NARANJA, "Slots: {FFFFFF}1 = derecha | 2 = izquierda");
	    return 1;
	}
	if(id != 1 && id != 2)
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/guardar [Slot]");
	    SendClientMessage(playerid, NARANJA, "Slots: {FFFFFF}1 = derecha | 2 = izquierda");
	    return 1;
	}
	if(BolsilloID[playerid][10+id] == 0) return SendClientMessage(playerid, GRIS, "* No tienes nada en esa mano.");
	if(ObjetoPesado(BolsilloID[playerid][10+id])) return SendClientMessage(playerid, GRIS, "* No puedes guardar este objeto en tu bolsillo.");
	for(new i = 1; i < 10; i++)
	{
	    if(BolsilloID[playerid][i] == 0)
       	{
	        new string[64];
	        SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
            GuardoArmaSegura[playerid] = 1;
			BolsilloID[playerid][i] = BolsilloID[playerid][10+id];
			BolsilloTipo[playerid][i] = BolsilloTipo[playerid][10+id];
			BolsilloCantidad[playerid][i] = BolsilloCantidad[playerid][10+id];
			if(EsArma(BolsilloID[playerid][10+id]))
			{
			    ResetPlayerWeapons(playerid);
			}
			BolsilloID[playerid][10+id] = 0;
			BolsilloTipo[playerid][10+id] = 0;
			BolsilloCantidad[playerid][10+id] = 0;
			format(string, sizeof(string), "Colocaste un/a %s en el bolsillo %d.", ObtenerNombreObjeto(BolsilloID[playerid][i]), i);
			SendClientMessage(playerid, CELESTE, string);
	    	UpdateAttach(playerid);
            GuardarBolsillos(playerid);
			return 1;
       	}
    }
	return 1;
}

CMD:sacar(playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "i", id))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/sacar [Slot]");
	    return 1;
	}
	if(BolsilloID[playerid][11] != 0 && BolsilloID[playerid][12] != 0) return SendClientMessage(playerid, GRIS, "* No tienes espacio en tus manos para sacar un objeto de algún bolsillo.");
	if(id < 1 || id > 9) return SendClientMessage(playerid, GRIS, "* Has escrito un slot inválido, slots válidos: 1-9 (El slot 10 es para la espalda)");
	if(BolsilloID[playerid][id] == 0) return SendClientMessage(playerid, GRIS, "* Ese slot no contiene ningún objeto.");
	if(BolsilloID[playerid][id] >= 92 && BolsilloID[playerid][id] <= 103)
	{
	    if(BolsilloID[playerid][11] != 0 || BolsilloID[playerid][12] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener ambas manos vacias.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][id];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][id];
	    BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][id];
	    if(EsArma(BolsilloID[playerid][11])) GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    BolsilloID[playerid][id] = 0;
	    BolsilloTipo[playerid][id] = 0;
		BolsilloCantidad[playerid][id] = 0;
		GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* Sacaste un/a %s del bolsillo %d y la pusiste en tu mano derecha.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
	    SendClientMessage(playerid, CELESTE, string);
	    SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;
	    return 1;
	}
	if(BolsilloID[playerid][11] == 0)
	{
	    if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][id];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][id];
	    BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][id];
	    if(EsArma(BolsilloID[playerid][11])) GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    BolsilloID[playerid][id] = 0;
	    BolsilloTipo[playerid][id] = 0;
		BolsilloCantidad[playerid][id] = 0;
		GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* Sacaste un/a %s del bolsillo %d y la pusiste en tu mano derecha.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
	    SendClientMessage(playerid, CELESTE, string);
	    SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;
	    return 1;
	}
	else if(BolsilloID[playerid][12] == 0)
	{
	    if(BolsilloID[playerid][11] >= 92 && BolsilloID[playerid][11] <= 103 || BolsilloID[playerid][12] >= 92 && BolsilloID[playerid][12] <= 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Tienes un objeto que requiere de ambas manos.");
	    BolsilloID[playerid][12] = BolsilloID[playerid][id];
	    BolsilloTipo[playerid][12] = BolsilloTipo[playerid][id];
	    BolsilloCantidad[playerid][12] = BolsilloCantidad[playerid][id];
	    BolsilloID[playerid][id] = 0;
	    BolsilloTipo[playerid][id] = 0;
		BolsilloCantidad[playerid][id] = 0;
		GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* Sacaste un/a %s del bolsillo %d y la pusiste en tu mano izquierda.", ObtenerNombreObjeto(BolsilloID[playerid][12]));
	    SendClientMessage(playerid, CELESTE, string);
	    SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;
	    return 1;
	}
	return 1;
}

CMD:baul(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar fuera del vehículo.");
    new opcion[32], opcion2, string[256], motor, luces, alarma, puertas, capo, objetivo;
    new coche = JugadorCercaVehiculo(playerid);
    if(coche == 0) return 1;
    if(sscanf(params, "s[32]I(-1)", opcion, opcion2))
	{
        SendClientMessage(playerid, NARANJA, "Uso: /baul {FFFFFF}[ Sacar | Guardar | SacarUnidad/su (Cajas) | Ver | Llaves ]");
	    return 1;
	}
	if(!strcmp(opcion, "ver", true))
	{
	    if(AutoInfo[coche][aMal] == 1)
	    {
	        for(new i = 0; i < (EspaciosMaletero(GetVehicleModel(coche)) - 1); i++)
			{
			    format(string, sizeof(string), "[Espacio %d] %s [Cantidad: %d]", i+1, ObtenerNombreObjeto(AutoInfo[coche][aMalID][i]), AutoInfo[coche][aMalCantidad][i]);
			    SendClientMessage(playerid, AMARILLO, string);
			}
			return 1;
		} else { SendClientMessage(playerid, ROJO_OSCURO, "* El maletero está cerrado."); }
	}
	else if(!strcmp(opcion, "sacarunidad", true) || !strcmp(opcion, "su", true))
	{
	    if(AutoInfo[coche][aMal] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El maletero está cerrado.");
		if(AutoInfo[coche][aMalID][opcion2-1] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio elegido está vacío.");
		if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
		//if(AutoInfo[coche][aMalCantidad][opcion2-1] < 92 || AutoInfo[coche][aMalCantidad][opcion2-1] > 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Las unidades solo pueden ser cogidas de las cajas.");
		if(AutoInfo[coche][aMalCantidad][opcion2-1] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La caja está vacía.");
		if(AutoInfo[coche][aMalID][opcion2-1] == 92) DarObjeto(playerid, 30, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 93) DarObjeto(playerid, 22, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 94) DarObjeto(playerid, 24, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 95) DarObjeto(playerid, 28, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 96) DarObjeto(playerid, 25, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 97) DarObjeto(playerid, 34, 1, 0);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 98) DarObjeto(playerid, 52, 1, 30);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 99) DarObjeto(playerid, 44, 1, 10);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 100) DarObjeto(playerid,46, 1, 7);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 101) DarObjeto(playerid, 50, 1, 30);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 102) DarObjeto(playerid, 47, 1, 2);
		else if(AutoInfo[coche][aMalID][opcion2-1] == 103) DarObjeto(playerid, 56, 1, 2);

		AutoInfo[coche][aMalCantidad][opcion2-1] --;
		UpdateAttach(playerid);
		ActualizarMaletero(coche);
		format(string, sizeof(string), "[MALETERO] Has cogido una unidad de %s de la caja.", ObtenerNombreObjeto(AutoInfo[coche][aMalID][opcion2-1]));
	    SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s coge un/a %s del maletero.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	else if(!strcmp(opcion, "guardar", true))
	{
	    if(AutoInfo[coche][aMal] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El maletero está cerrado.");
	    if(opcion2 < 0 && opcion2 > EspaciosMaletero(GetVehicleModel(coche))) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio indicado no está disponible.");
	    if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha.");
	    if(AutoInfo[coche][aMalID][opcion2-1] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio indicado está ocupado.");
		if(EsArma(BolsilloID[playerid][11])) ResetPlayerWeapons(playerid);
		AutoInfo[coche][aMalID][opcion2-1] = BolsilloID[playerid][11]; AutoInfo[coche][aMalCantidad][opcion2-1] = BolsilloCantidad[playerid][11]; AutoInfo[coche][aMalTipo][opcion2-1] = BolsilloTipo[playerid][11];
	    BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
	    UpdateAttach(playerid);
	    ActualizarMaletero(coche);
	    format(string, sizeof(string), "[MALETERO] Has guardado un %s en el maletero del vehículo.", ObtenerNombreObjeto(AutoInfo[coche][aMalID][opcion2-1]));
	    SendClientMessage(playerid, CELESTE, string);
	    format(string, sizeof(string), "* %s guarda un/a %s en el maletero.", NombreJugador(playerid), ObtenerNombreObjeto(AutoInfo[coche][aMalID][opcion2-1]));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		ClearAnimations(playerid);
		OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;

	    return 1;
	}
	else if(!strcmp(opcion, "sacar", true))
	{
	    if(AutoInfo[coche][aMal] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El maletero está cerrado.");
	    if(sscanf(params, "s[32]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /baul sacar [Espacio]");
	    if(opcion2 < 0 && opcion2 > EspaciosMaletero(GetVehicleModel(coche))) return SendClientMessage(playerid, ROJO_OSCURO, "* El espacio indicado no está disponible.");
	    if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
	    BolsilloID[playerid][11] = AutoInfo[coche][aMalID][opcion2-1]; BolsilloCantidad[playerid][11] = AutoInfo[coche][aMalCantidad][opcion2-1]; BolsilloTipo[playerid][11] = AutoInfo[coche][aMalTipo][opcion2-1];
	    AutoInfo[coche][aMalID][opcion2-1] = 0; AutoInfo[coche][aMalCantidad][opcion2-1] = 0; AutoInfo[coche][aMalTipo][opcion2-1] = 0;
	    if(EsArma(BolsilloID[playerid][11])) GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
	    ActualizarMaletero(coche);
	    format(string, sizeof(string), "[MALETERO] Has sacado un %s del maletero del vehículo.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
	    SendClientMessage(playerid, CELESTE, string);
	    format(string, sizeof(string), "* %s coge un/a %s del maletero.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;
	    return 1;
	}
	else if(!strcmp(opcion, "llaves", true))
	{
	    if(ComprobarDueno(coche, playerid) || ComprobarPrestado(coche, playerid) || ComprobarRenta(coche, playerid) || ComprobarFaccion(coche, playerid))
		{
            if(AutoInfo[coche][aMal] == 0)
		    {
		        AutoInfo[coche][aMal] = 1;
		        SetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, AutoInfo[coche][aMal], objetivo);
				format(string, sizeof(string), "* %s abre el maletero del vehículo y mira en su interior.", NombreJugador(playerid));
				ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				ActualizarMaletero(coche);
				for(new i = 0; i < (EspaciosMaletero(GetVehicleModel(coche)) - 1); i++)
				{
				    format(string, sizeof(string), "[Espacio %d] %s [Cantidad: %d]", i+1, ObtenerNombreObjeto(AutoInfo[coche][aMalID][i]), AutoInfo[coche][aMalCantidad][i]);
				    SendClientMessage(playerid, AMARILLO, string);
				}
				return 1;
		    }
		    else
		    {
		        AutoInfo[coche][aMal] = 0;
		        SetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, AutoInfo[coche][aMal], objetivo);
				format(string, sizeof(string), "* %s cierra el maletero del vehículo.", NombreJugador(playerid));
				ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				ActualizarMaletero(coche);
				return 1;
			}
		} else { SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este vehículo."); }
	}
	else
	{
	    SendClientMessage(playerid, NARANJA, "Uso: /baul {FFFFFF}[ Sacar | Guardar | SacarUnidad (su) | Ver | Abrir ]");
	}
	return 1;
}

CMD:yo(playerid, params[])
{
    if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /yo [Texto]");
	    return 1;
	}
	new string[256];
	format(string, sizeof(string), "* Te has colocado '%s' como descripción. Para borrarla usa '/yob'.", params[0]);
	SendClientMessage(playerid, CELESTE, string);
	SetPlayerChatBubble(playerid, params[0], ROJO, 5.0, 999999);
	return 1;
}

CMD:yob(playerid, params[])
{
	SendClientMessage(playerid, CELESTE, "* Has borrado tu descripción.");
	SetPlayerChatBubble(playerid, "", ROJO, 5.0, 1);
	return 1;
}

CMD:ccinturon(playerid, params[])
{
    new string[256];
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ccinturon [ID]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	if(!IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está en un vehículo.");
	new Float:Pos[3];
	GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	if(PlayerToPoint(playerid, 3, Pos[0], Pos[1], Pos[2]))
	{
		if(TieneCinturon[params[0]] == 0)
		{
			format(string, sizeof(string), "* %s revisa el estado del cinturón de %s.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(string, sizeof(string), "* %s no lleva el cinturón abrochado.", NombreJugador(params[0]));
			SendClientMessage(playerid, ROJO, string);
		    return 1;
		}
		else
		{
		    format(string, sizeof(string), "* %s revisa el estado del cinturón de %s.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(string, sizeof(string), "* %s lleva el cinturón abrochado.", NombreJugador(params[0]));
			SendClientMessage(playerid, VERDE, string);
		}
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* Estás muy lejos del jugador.");
	return 1;
}

CMD:cinturon(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar subido en un vehículo.");
	new string[128];
	if(TieneCinturon[playerid] == 0)
	{
		format(string, sizeof(string), "* %s toma su cinturón con la diestra y se lo coloca.", NombreJugador(playerid));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    TieneCinturon[playerid] = 1;
	    return 1;
	}
	else
	{
	    format(string, sizeof(string), "* %s toma su cinturón con la diestra y se lo quita.", NombreJugador(playerid));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
        TieneCinturon[playerid] = 0;
	}
	return 1;
}

CMD:aparcar(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo para aparcarlo.");
	new coche = GetPlayerVehicleID(playerid), string[128];
	if(ComprobarDueno(coche, playerid))
	{
	    new Float:Pos[4];
	    GetVehiclePos(coche, Pos[0], Pos[1], Pos[2]);
	    GetVehicleZAngle(coche, Pos[3]);
	    AutoInfo[coche][ax] = Pos[0]; AutoInfo[coche][ay] = Pos[1]; AutoInfo[coche][az] = Pos[2]; AutoInfo[coche][aa] = Pos[3];
	    format(string, sizeof(string), "~w~¡Vehiculo ~g~aparcado~w~!");
	    GameTextForPlayer(playerid, string, 3000, 6);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este vehículo.");
	}
	return 1;
}

CMD:documentacion(playerid, params[])
{
    new opcion[32], string[256];
    if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, AMARILLO, "Uso: {FFFFFF}/documentacion [Opción]");
	    SendClientMessage(playerid, BLANCO, "Opciones disponibles: {FFFF00}Comprar - Consultar - Renovar");
	    return 1;
	}
	if(strcmp(opcion, "comprar", true) == 0)
	{
	    if(JugadorInfo[playerid][jDinero] < 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero. El precio de la documentación es de 25 dólares.");
	    if(JugadorInfo[playerid][jDNI] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes documentación, quizás debas renovarla. Usa '/documentacion consultar' para verla o '/documentacion renovar'.");
        if(!PlayerToPoint(playerid, 3, 358.6739,178.8037,1008.3859)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar para comprar la documentación.");
		JugadorInfo[playerid][jDNI] = (random(999999)+random(25));
	    JugadorInfo[playerid][jTiempoDNI] = gettime()+(2592000);
	    CajasFuerte[0] += 25;
	    JugadorInfo[playerid][jDinero] -= 25;
	    SendClientMessage(playerid, CELESTE, "* Has obtenido tu documentación de ciudadano legal por 25 dólares. Para mostrarla, usa '/mostrar documentacion [ID]'.");
	    SendClientMessage(playerid, NARANJA, "* Recuerda que deberás renovar tu documentación cada 30 días.");
	    format(string, sizeof(string), "* %s coge su documentación del mostrador y la guarda en su bolsillo derecho.");
	    return 1;
	}
	if(strcmp(opcion, "renovar", true) == 0)
	{
	    if(JugadorInfo[playerid][jDinero] < 10) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero. El precio de la renovación de los documentos es de 10 dólares.");
	    if(JugadorInfo[playerid][jDNI] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes documentación. Usa '/documentacion comprar' para obtenerla.");
		if(!PlayerToPoint(playerid, 3, 358.6739,178.8037,1008.3859)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el lugar para renovar la documentación.");
		CajasFuerte[0] += 10;
	    JugadorInfo[playerid][jDinero] -= 10;
		JugadorInfo[playerid][jTiempoDNI] = gettime()+(2592000);
        SendClientMessage(playerid, CELESTE, "* Has renovado tu documentación de ciudadano legal por 10 dólares. Para mostrarla, usa '/mostrar documentacion [ID]'.");
        SendClientMessage(playerid, NARANJA, "* Recuerda que deberás renovar tu documentación cada 30 días.");
        return 1;
	}
	if(strcmp(opcion, "consultar", true) == 0)
	{
	    if(JugadorInfo[playerid][jDNI] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes documentación. Vé al gobierno para obtenerla.");
	    new restante_segundos = JugadorInfo[playerid][jTiempoDNI] - gettime();
		new restante_dias = ((restante_segundos /60) /60) /24;
	    restante_segundos -= restante_dias*24*60*60;
		new restante_horas = (restante_segundos /60) /60;
	    restante_segundos -= restante_horas*60*60;
		new restante_minutos = (restante_segundos /60);
		restante_segundos -= restante_minutos*60;
		format(string, sizeof(string), "* Vigencia de la documentación restante: %d días %d horas %d minutos %d segundos", restante_dias, restante_horas, restante_minutos, restante_segundos);
		SendClientMessage(playerid, CELESTE, string);
		return 1;
	}
	return 1;
}

CMD:animaciones(playerid, params[])
{
	SendClientMessage(playerid, NARANJA, "________________________________________________________________________________________________________________________");
	SendClientMessage(playerid, AMARILLO,"Lista de animaciones disponibles:");
	SendClientMessage(playerid, BLANCO,"/rendirse - /bebido - /movil - /cmovil - /bomba - /apuntar - /reir - /tumbarse - /agacharse - /vomitar - /comiendo - /herido");
	SendClientMessage(playerid, BLANCO,"/saludar - /trato - /crack - /fumando - /sentarse - /gro - /fucku - /hablando - /taichi - /caer - /muerto - /brazos - /gangsta");
	SendClientMessage(playerid, BLANCO,"/spray - /medico - /golpeado - /cansado - /saltovital - /tortazo - /rodar - /cacheado - /bate - /boxing - /gritando - /facepalm");
	SendClientMessage(playerid, BLANCO,"/animar - /esposado - /basket - /caminar - /rascarse - /apoyarse - /correr - /strip - /bailar - /trafico");
	SendClientMessage(playerid, BLANCO,"/rifle - /mecanico - /carga - /bailoteo - /consola - /picado - /barandilla - /llorar - /bofetada - /billar - /beso - /dedo");
	SendClientMessage(playerid, BLANCO,"/azote - /masturb - /chupete - /mear");
	SendClientMessage(playerid, BLANCO," -Animaciones de USO en vehículo: /coche   |   Usa /no para detener la animación.");
	SendClientMessage(playerid, NARANJA, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	return 1;
}

CMD:carga(playerid, params[])
{
	LoopingAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
    return 1;
}

CMD:llorar(playerid, params[])
{
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,1,1,1,1,1);
    return 1;
}

CMD:masturb(playerid, params[])
{
	LoopingAnim(playerid,"PAULNMAC","wank_loop",4.1,1,1,1,1,1);
    return 1;
}

CMD:bofetada(playerid, params[])
{
	LoopingAnim(playerid,"MISC","bitchslap",4.1,1,0,0,1,1);
    return 1;
}

CMD:facepalm(playerid, params[])
{
	LoopingAnim(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0);
    return 1;
}

CMD:barandilla(playerid, params[])
{
	LoopingAnim(playerid,"BD_FIRE","BD_Panic_Loop",4.1,1,1,1,1,1);
    return 1;
}

CMD:rendirse(playerid, params[])
{
	LoopingAnim(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.0,0,1,1,1,1);
    return 1;
}

CMD:rifle(playerid, params[])
{
	LoopingAnim(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
    return 1;
}

CMD:movil(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}

CMD:cmovil(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    return 1;
}

CMD:bebido(playerid, params[])
{
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
    return 1;
}

CMD:bomba(playerid, params[])
{
	LoopingAnim(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,1);
    return 1;
}

CMD:reir(playerid, params[])
{
	LoopingAnim(playerid,"RAPPING","Laugh_01",4.0,1,1,1,1,1);
    return 1;
}

CMD:brazos(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /brazos [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /brazos [1-6]");
	}
    return 1;
}

CMD:agacharse(playerid, params[])
{
	LoopingAnim(playerid,"ped","cower",4.0,0,1,1,1,1);
    return 1;
}

CMD:vomitar(playerid, params[])
{
	LoopingAnim(playerid,"FOOD","EAT_Vomit_P",4.0,0,1,1,1,1);
    return 1;
}

CMD:comiendo(playerid, params[])
{
	LoopingAnim(playerid,"FOOD","EAT_Burger",4.0,0,1,1,1,1);
    return 1;
}

CMD:trato(playerid, params[])
{
	LoopingAnim(playerid,"DEALER","DEALER_DEAL",4.0,0,1,1,1,1);
    return 1;
}

CMD:crack(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /crack [1-8]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"CRACK","crckdeth2",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"CRACK","crckidle2",4.1,1,0,0,1,1);
		case 7: LoopingAnim(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"CRACK","crckidle4",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /crack [1-8]");
	}
    return 1;
}

CMD:fumando(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /fumando [1-5]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 1, 1, 1);
		case 2: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 1, 1, 1);
		case 3: LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 1, 1, 1);
		case 4: LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GANGS","smkcig_prtl",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /fumando [1-5]");
	}
    return 1;
}

CMD:sentarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /sentarse [1-9]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,1);
		case 2: LoopingAnim(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"FOOD","FF_Sit_Eat3",4.1,0,0,0,1,1);
		case 4: LoopingAnim(playerid,"FOOD","FF_Sit_In",4.1,0,0,0,1,1);
		case 5: LoopingAnim(playerid,"FOOD","FF_Sit_In_L",4.1,0,0,0,1,1);
		case 6: LoopingAnim(playerid,"FOOD","FF_Sit_In_R",4.1,0,0,0,1,1);
		case 7: LoopingAnim(playerid,"PED","SEAT_down",4.1,0,0,0,1,1);
		case 8: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.1,0,0,0,1,1);
		case 9: LoopingAnim(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /sentarse [1-9]");
	}
    return 1;
}

CMD:gro(playerid, params[])
{
	LoopingAnim(playerid,"BEACH","ParkSit_M_loop",4.0,1,0,1,1,1);
    return 1;
}

CMD:hablando(playerid, params[])
{
	LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
    return 1;
}

CMD:fucku(playerid, params[])
{
	LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,1,1);
    return 1;
}

CMD:taichi(playerid, params[])
{
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,1,1,1,1);
    return 1;
}

CMD:caer(playerid, params[])
{
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
    return 1;
}

CMD:muerto(playerid, params[])
{
	LoopingAnim(playerid,"PED","FLOOR_hit_f",4.0,0,1,1,1,1);
    return 1;
}

cmd(mear,playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "No puedes usar este comando en un vehículo.");
	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:herido(playerid, params[])
{
	LoopingAnim(playerid,"SWEET","Sweet_injuredloop",4.0,1,0,1,1,1);
    return 1;
}

CMD:saludar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /saludar [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 1, 1);
		case 7: LoopingAnim(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /saludar [1-7]");
	}
    return 1;
}

CMD:gangsta(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /gangsta [1-16]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: LoopingAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
		case 12: LoopingAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 13: LoopingAnim(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
		case 14: LoopingAnim(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
		case 15: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.1,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /gangsta [1-16]");
	}
    return 1;
}

CMD:chupete(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /chupete [1-12]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /chupete [1-12]");
	}
    return 1;
}

CMD:spray(playerid, params[])
{
	LoopingAnim(playerid,"SPRAYCAN","spraycan_full",4.0,1,1,1,1,1);
    return 1;
}

CMD:medico(playerid, params[])
{
	LoopingAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
    return 1;
}

CMD:golpeado(playerid, params[])
{
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,1);
    return 1;
}

CMD:saltovital(playerid, params[])
{
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,1);
    return 1;
}

CMD:cansado(playerid, params[])
{
	LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,1,1,1);
    return 1;
}

CMD:tortazo(playerid, params[])
{
	LoopingAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
    return 1;
}

CMD:rodar(playerid, params[])
{
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,1);
    return 1;
}

CMD:cacheado(playerid, params[])
{
	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,1);
    return 1;
}

CMD:bate(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /bate [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /bate [1-2]");
	}
    return 1;
}

CMD:boxing(playerid, params[])
{
	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,1);
    return 1;
}

CMD:animar(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
    return 1;
}

CMD:dedo(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
    return 1;
}

CMD:gritando(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,1,1,1,1);
    return 1;
}

CMD:esposado(playerid, params[])
{
	LoopingAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
    return 1;
}

CMD:basket(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /basket [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,0,1,1);
		case 2: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
		case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_idle",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"BSKTBALL","BBALL_idle2",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /basket [1-7]");
	}
    return 1;
}

CMD:caminar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /caminar [1-11]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"POOL","POOL_Walk",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /caminar [1-11]");
	}
    return 1;
}

CMD:azote(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /azote [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,0,0,1,1);
		case 4: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /azote [1-6]");
	}
    return 1;
}

CMD:trafico(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /trafico [1-4]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Away",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"POLICE","CopTraf_Left",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /trafico [1-4]");
	}
    return 1;
}

CMD:apuntar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /apuntar [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /apuntar [1-3]");
	}
    return 1;
}

CMD:apoyarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /apoyarse [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,1,1,1);
        case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,1,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /apoyarse [1-2]");
	}
    return 1;
}

CMD:beso(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /beso [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,0,0,1,1);
        case 2: LoopingAnim(playerid,"KISSING","Playa_Kiss_03",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /beso [1-2]");
	}
    return 1;
}

CMD:billar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /billar [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /billar [1-3]");
	}
    return 1;
}

CMD:correr(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /correr [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"PED","run_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","run_old",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","woman_run",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /correr [1-6]");
	}
    return 1;
}

CMD:no(playerid, params[])
{
	ClearAnimations(playerid);
	if(JugadorInfo[playerid][jHerido] == 1) return 1;
	OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:rascarse(playerid, params[])
{
	LoopingAnim(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1);
    return 1;
}

CMD:strip(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /strip [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7: LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		default: SendClientMessage(playerid, BLANCO, "USO: /strip [1-7]");
	}
    return 1;
}

CMD:tumbarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /tumbarse [1-5]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
	    case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /tumbarse [1-5]");
	}
    return 1;
}

CMD:coche(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /coche [1-7]");
	switch(animacion)
	{
		case 1: OnePlayAnim(playerid,"CAR","Sit_relaxed",4.1,0,0,0,1,0);
		case 2: OnePlayAnim(playerid,"LOWRIDER","lrgirl_hair",4.1,0,0,0,1,0);
		case 3: OnePlayAnim(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,1,0,0,1,0);
		case 4: LoopingAnim(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,0,0,1,0);
	    case 5: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
	    case 6: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,0,0,1,1);
	    case 7: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /coche [1-7]");
	}
    return 1;
}

CMD:mecanico(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /mecanico [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);
	    case 2: LoopingAnim(playerid,"CAR","Fixn_Car_Out",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /mecanico [1-2]");
	}
    return 1;
}

CMD:bailoteo(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /bailoteo [1-10]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.1,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.1,1,0,0,1,1);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.1,1,0,0,1,1);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.1,1,0,0,1,1);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_d",4.1,1,0,0,1,1);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_e",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /bailoteo [1-10]");
	}
    return 1;
}

CMD:consola(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /consola [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.1,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, BLANCO, "USO: /consola [1-3]");
	}
    return 1;
}

CMD:bailar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, BLANCO, "USO: /bailar [1-4]");
	switch(animacion)
	{
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
        case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, BLANCO, "USO: /bailar [1-4]");
	}
    return 1;
}

CMD:id(playerid, params[])
{
	new string[128];
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, AMARILLO, "Uso: {FFFFFF}/id [Nombre]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no está conectado.");
	format(string, sizeof(string), "ID: {1eb032}%d {FFFFFF}| Nombre: {1eb032}%s", params[0], NombreJugador(params[0]));
	SendClientMessage(playerid, BLANCO, string);
	return 1;
}

CMD:repostar(playerid, params[])
{
    if(EstaEnGasolinera(playerid))
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningún vehículo.");
        ShowPlayerDialog(playerid, GAS, DIALOG_STYLE_INPUT, "{FFFFFF}Gasolinera", "{FFFFFF}Ingrese la cantidad de litros que desea cargar", "Aceptar", "Cancelar");
    }
    else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en una gasolinera.");
    return 1;
}

CMD:forzar(playerid, params[])
{
	new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /forzar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Negocio, Maletero");
		return 1;
	}
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(JugadorInfo[playerid][jRango] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitar ser como mínimo rango 3 para poder forzar algo.");
    if(BolsilloID[playerid][11] != 91) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener una palanca en tu mano derecha.");
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < sizeof(CasaInfo); i++)
		{
			if(PlayerToPoint(playerid, 1, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
			{
			    if(CasaInfo[i][cAbierta] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta casa ya está abierta.");
			    {
			        new suerte = random(4);
					if(suerte == 0 || suerte == 2)
					{
				        CasaInfo[i][cAbierta] = 1;
				        SendClientMessage(playerid, CELESTE, "* Puerta rota, has forzado la puerta con éxito.");
				        GuardarCasa(i);
				        return 1;
					}
					else
					{
					    CasaInfo[i][cAbierta] = 0;
				        SendClientMessage(playerid, CELESTE, "* No has conseguido forzar la puerta.");
				        GuardarCasa(i);
					    return 1;
					}
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna casa.");
		return 1;
	}
	else if(strcmp(opcion, "negocio", true) == 0)
	{
	    for(new n = 0; n < sizeof(NegocioInfo); n++)
		{
			if(PlayerToPoint(playerid, 1.25, NegocioInfo[n][nEX], NegocioInfo[n][nEY], NegocioInfo[n][nEZ]))
			{
    			if(NegocioInfo[n][nCerrada] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Este negocio ya está abierto.");
				new suerte = random(4);
				if(suerte == 0 || suerte == 2)
				{
			        NegocioInfo[n][nCerrada] = 0;
			        SendClientMessage(playerid, CELESTE, "* Puerta rota, has forzado la puerta con éxito.");
			        GuardarNegocio(n);
			        return 1;
				}
				else
				{
				    NegocioInfo[n][nCerrada] = 1;
			        SendClientMessage(playerid, CELESTE, "* No has conseguido forzar la puerta.");
			        GuardarNegocio(n);
				    return 1;
				}
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningun negocio.");
		return 1;
	}
	else if(strcmp(opcion, "maletero", true) == 0)
	{
	    new coche = JugadorCercaVehiculo(playerid);
	    if(coche == 0) return 1;
	    new motor, luces, alarma, puertas, capo, maletero, objetivo;
	    GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
	    if(AutoInfo[coche][aMal] == 1)return SendClientMessage(playerid, ROJO_OSCURO ,"* El maletero del vehículo ya está abierto.");
        new suerte = random(4);
		if(suerte == 0 || suerte == 2)
		{
	        AutoInfo[coche][aMal] = 1;
	        SetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, AutoInfo[coche][aMal], objetivo);
	        SendClientMessage(playerid, CELESTE, "* Maletero roto, has forzado el maletero con éxito.");
			UpdateVehInteger(AutoInfo[coche][aID], "Mal", 1);
	        return 1;
		}
		else
		{
		    AutoInfo[coche][aMal] = 0;
	        SetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, AutoInfo[coche][aMal], objetivo);
			SendClientMessage(playerid, CELESTE, "* No has conseguido forzar el maletero.");
			UpdateVehInteger(AutoInfo[coche][aID], "Mal", 0);
		}
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /forzar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Negocio, Maletero");
	}
	return 1;
}

CMD:liberar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /liberar [ID]");
		return 1;
	}
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(JugadorInfo[playerid][jRango] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitar ser como mínimo rango 3 para poder liberar a alguien.");
	if(JugadorInfo[params[0]][jEncarcelado] > 10 && JugadorInfo[params[0]][jEncarcelado] < 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indiciado no está condenado.");
	new string[256];
	format(string, sizeof(string), "* %s te ha quitado tu condena. Ahora eres libre, ten más cuidado para la próxima", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has quitado la condena a %s.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	JugadorInfo[params[0]][jEncarcelado] = 0; JugadorInfo[params[0]][jTiempoEncarcelado] = 0;
	return 1;
}

CMD:condena(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /condena [ID]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(!IsPlayerInAnyVehicle(playerid) && !OficinasPD(playerid) && !PlayerToPoint(playerid, 20.0, 229.0191,-1096.6929,-90.5441)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un patrulla, en comisaría o en la prisión.");
	new string[256];
	SendClientMessage(playerid, ROJO, "_____| Información de la condena |_____");
	format(string, sizeof(string), "{FFFFFF}Nombre: {FF6347}%s", NombreJugador(params[0]));
	SendClientMessage(playerid, BLANCO, string);
	format(string, sizeof(string), "{FFFFFF}Tiempo restante: {FF6347}%d minutos", JugadorInfo[params[0]][jTiempoEncarcelado]);
	SendClientMessage(playerid, BLANCO, string);
	return 1;
}

CMD:marcar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2 && JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes marcar tu posición.");
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /marcar [Tipo]");
	    SendClientMessage(playerid, GRIS, "0: Apagar | 1: Facción | 2: LSED");
		return 1;
	}
	new string[128];
	if(params[0] == 0) {
	    if(SolicitandoRef[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No has pedido refuerzos aún.");
	    SolicitandoRef[playerid] = 0;
    	SendClientMessage(playerid, AZUL, "* Refuerzos cancelados.");
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if((JugadorInfo[i][jMiembro] == 1 || JugadorInfo[i][jMiembro] == 2 || JugadorInfo[i][jMiembro] == 3) && JugadorInfo[i][jServicio] == 1)
				{
					SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
		}
	}
	else if(params[0] == 1) {
	    if(SolicitandoRef[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás solicitando refuerzos.");
	    SolicitandoRef[playerid] = 1;
    	format(string, sizeof(string), "[Central] {FFFFFF}%s necesita más unidades en su posición, acudan lo más rápido posible, corto.", NombreJugador(playerid));
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if((JugadorInfo[i][jMiembro] == JugadorInfo[playerid][jMiembro]) && JugadorInfo[i][jServicio] == 1)
				{
					SetPlayerMarkerForPlayer(i, playerid, 0x1B37D2FF);
					SendClientMessage(i, AZUL, string);
				}
			}
		}
	}
	else if(params[0] == 2){
	    if(SolicitandoRef[playerid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás solicitando refuerzos.");
        SolicitandoRef[playerid] = 1;
		format(string, sizeof(string), "[Central LSED] {FFFFFF}%s necesita más unidades en su posición, acudan lo más rápido posible, corto.", NombreJugador(playerid));
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if((JugadorInfo[i][jMiembro] == 1 || JugadorInfo[i][jMiembro] == 2 || JugadorInfo[i][jMiembro] == 3) && JugadorInfo[i][jServicio] == 1)
				{
					SetPlayerMarkerForPlayer(i, playerid, 0xB40404FF);
					SendClientMessage(i, AZUL, string);
				}
			}
		}
	}
	return 1;
}

CMD:darplaca(playerid, params[])
{
	if(JugadorInfo[playerid][jLider] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres el lider de LSPD.");
    if(sscanf(params, "ui", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /darplaca [ID] [Identificación]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	JugadorInfo[params[0]][jPlaca] = params[1];
	new string[128];
	format(string, sizeof(string), "* %s te ha asignado el número de placa 'APD#%d'", NombreJugador(playerid), params[1]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has dado el número de placa 'APD#%d' al agente %s.", params[1], NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:mostrarplaca(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /mostrarplaca [ID]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	new string[128];
	format(string, sizeof(string), "{FFFFFF}Los Santos Police Department.\nNúmero de placa: {00FFFF}APD#%d{FFFFFF}.", JugadorInfo[playerid][jPlaca]);
	ShowPlayerDialog(params[0], 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Placa LSPD", string, "Cerrar", "");
	return 1;
}

CMD:radar(playerid, params[])
{
    if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /radar [Velocidad]");
		return 1;
	}
    if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
	    if(AutoInfo[vehicleid][aFaccionID] == 1)
	    {
		    new Float:x,Float:y,Float:z,Float:angle;
		    GetPlayerPos(playerid,x,y,z);GetPlayerFacingAngle(playerid,angle);
	        CrearRadar(x,y,z -3,angle,20,params[0],0,vehicleid);
	        SendClientMessage(playerid, CELESTE, "Radar colocado con éxito");
		}
		else
		{
		    SendClientMessage(playerid, ROJO_OSCURO, "* Este vehículo no dispone de un radar.");
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* Tienes que estar dentro del vehículo para activar el radar.");
	    return 1;
	}
    return 1;
}

CMD:quitar(playerid, params[])
{
    new opcion[16], string[128], opcion2[16], opcion3, opcion4;
    if(sscanf(params, "is[16]S()[16]I(-1)", opcion4, opcion, opcion2, opcion3))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /quitar [ID] [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto");
		return 1;
	}
	if(strcmp(opcion, "objeto", true) == 0)
	{
	    if(!IsPlayerConnected(opcion4)) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
		if(opcion4 == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
		if(!CercaJugador(5.0, playerid, opcion4)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
		if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	    if(sscanf(params, "is[9]i", opcion4, opcion, opcion3)) return SendClientMessage(playerid, GRIS, "Uso: /quitar [ID] objeto [1-12]");
		if(BolsilloID[opcion4][opcion3] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no tiene nada en ese espacio.");
		format(string, sizeof(string), "* %s quitó un %s a %s.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[opcion4][opcion3]), NombreJugador(opcion4));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		format(string, sizeof(string), "* Has quitado a %s un %s con %d unidades.", NombreJugador(opcion4), ObtenerNombreObjeto(BolsilloID[opcion4][opcion3]), BolsilloCantidad[opcion4][opcion3]);
		SendClientMessage(playerid, CELESTE, string);
		QuitarObjeto(opcion4, opcion3);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /quitar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto");
	}
	return 1;
}

CMD:vermatricula(playerid, params[]){
    new coche = JugadorCercaVehiculo(playerid);
    if(coche == 0) return 1;
	new string[128];
	format(string, sizeof(string), "~g~%d", AutoInfo[coche][aID]);
	GameTextForPlayer(playerid, string,5000, 3);
	return 1;
}

CMD:remolcar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new gruaid = GetPlayerVehicleID(playerid);
		if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes colocar remolcar sin ser policía.");
		if(GetVehicleModel(gruaid) == 525 && GetPlayerState(playerid) == 2)
		{
			new matricula;
			if(sscanf(params, "d", matricula)) return SendClientMessage(playerid, GRIS, "Uso: /remolcar [Matrícula]");
			if(matricula != AutoInfo[gruaid][aID])
			{
				new remolcado = GetPlayerVehicleByKey(matricula);
				new Float:GX, Float:GY, Float:GZ, Float:RX, Float:RY, Float:RZ;
				GetVehiclePos(gruaid, GX, GY, GZ);
				GetVehiclePos(remolcado, RX, RY, RZ);
				if(PointToPoint3D(7.0, GX, GY, GZ, RX, RY, RZ))
				{
					if(IsTrailerAttachedToVehicle(AutoInfo[gruaid][aID]))
					{
						DetachTrailerFromVehicle(AutoInfo[gruaid][aID]);
						return 1;
					}
					else
					{
						AttachTrailerToVehicle(remolcado, gruaid);
						SendClientMessage(playerid, CELESTE, "* Has remolcado correctamente el vehículo.");
						return 1;
					}
				}
				else return SendClientMessage(playerid, ROJO_OSCURO, "* El vehículo está demasiado lejos o la matrícula es incorrecta.");
			}
			else return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes remolcarte a ti mismo.");
		}
		else return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitas estar conduciendo una grúa para remolcar el vehículo.");
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* Necesitas estar conduciendo una grúa para remolcar el vehículo.");
}

CMD:cachear(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 1 || JugadorInfo[playerid][jTrabajo] == 8 || (JugadorInfo[playerid][jMiembro] == 4 && JugadorInfo[playerid][jRango] == 1 || JugadorInfo[playerid][jRango] == 3))
    {
	    if(sscanf(params, "u", params[0]))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /cachear [ID]");
		    return 1;
		}
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
		if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
		if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
		if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
		return MostrarCacheo(playerid, params[0]);
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando.");
}

CMD:qcables(playerid, params[]){
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
    if(!sscanf(params, "u", params[0])){
        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
		if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
		if(Paralizado[params[0]] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no está taseado.");
		SetTimerEx("LevantarseParalizado", 3000, false, "i", params[0]);
		new string[128];
		format(string, sizeof(string), "* %s le quitó los cables disparados por un táser a %s, quitándole el parálisis a éste.", NombreJugador(playerid), NombreJugador(params[0]));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}else SendClientMessage(playerid, GRIS, "Uso: /qcables [ID]");
	return 1;
}

CMD:rtaser(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(BolsilloID[playerid][11] != 23) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes un taser en tu mano derecha.");
	if(BolsilloCantidad[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Aún quedan cargas disponibles en el taser.");
 	BolsilloID[playerid][11] = 0;
	BolsilloTipo[playerid][11] = 0;
	BolsilloCantidad[playerid][11] = 0;
	GuardarBolsillos(playerid);
	UpdateAttach(playerid);
	DarObjeto(playerid, 23, 1, 2);
	new string[128];
	format(string, sizeof(string), "* %s carga su taser y lo prepara para usarlo.", NombreJugador(playerid));
	ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	return 1;
}

CMD:balasdegoma(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(BolsilloID[playerid][11] != 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes una escopeta en tu mano derecha.");
	if(BolasDeGoma[playerid] == 0) {
	    BolasDeGoma[playerid] = 1;
		SendClientMessage(playerid, CELESTE, "* Has activado el modo balas de goma para la escopeta.");
		return 1;
	}
	else {
	    BolasDeGoma[playerid] = 0;
	    SendClientMessage(playerid, CELESTE, "* Has desactivado el modo de balas de goma para la escopeta.");
	}
	return 1;
}

CMD:sir(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] == 1 || (JugadorInfo[playerid][jMiembro] == 4 && JugadorInfo[playerid][jRango] == 1 || JugadorInfo[playerid][jRango] == 3))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes ser el conductor del vehículo.");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(SirenaEncendida[vehicleid] == 0){
		    if(GetVehicleModel(vehicleid) == 490){
		        DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateObject(19419, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
				AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, 0.5, 1.1, 0, 0, 0);
				SendClientMessage(playerid, VERDE, "* Usted encendió la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 1;
				return 1;
		    }
		    if(GetVehicleModel(vehicleid) == 544){
		        DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateObject(19419, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
				AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, 2.9, 1.45, 0, 0, 0);
				SendClientMessage(playerid, VERDE, "* Usted encendió la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 1;
				return 1;
		    }
		    if(AutoInfo[vehicleid][aFaccionID] == 1){
		        if(GetVehicleModel(vehicleid) != 426 && GetVehicleModel(vehicleid) != 415) return 1;
	            DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
				SendClientMessage(playerid, VERDE, "* Usted encendió la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 1;
		    }
		    if(AutoInfo[vehicleid][aFaccionID] == 4){
		        if(GetVehicleModel(vehicleid) != 426) return 1;
	            DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
				SendClientMessage(playerid, VERDE, "* Usted encendió la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 1;
		    }
            if(AutoInfo[vehicleid][aFaccionID] == 1){
		        if(GetVehicleModel(vehicleid) != 560) return 1;
	            DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachDynamicObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
				SendClientMessage(playerid, VERDE, "* Usted encendió la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 1;
		    }
		    return 1;
		}
		else{
		    if(GetVehicleModel(vehicleid) == 490){
		        DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateObject(19420, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
				AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, 0.5, 1.1, 0, 0, 0);
				SendClientMessage(playerid, ROJO, "* Usted apagó la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 0;
				return 1;
		    }
		    if(GetVehicleModel(vehicleid) == 544){
		        DestroyObject(TieneSirena[vehicleid]);
		        TieneSirena[vehicleid] = CreateObject(19420, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
				AttachObjectToVehicle(TieneSirena[vehicleid], vehicleid, 0, 2.9, 1.45, 0, 0, 0);
				SendClientMessage(playerid, ROJO, "* Usted apagó la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 0;
				return 1;
		    }
		    if(AutoInfo[vehicleid][aFaccionID] == 1){
		        if(GetVehicleModel(vehicleid) != 426 && GetVehicleModel(vehicleid) != 415) return 1;
	            DestroyDynamicObject(TieneSirena[vehicleid]);
	            SendClientMessage(playerid, ROJO, "* Usted apagó la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 0;
		    }
		    if(AutoInfo[vehicleid][aFaccionID] == 4){
		        if(GetVehicleModel(vehicleid) != 426) return 1;
	            DestroyDynamicObject(TieneSirena[vehicleid]);
	            SendClientMessage(playerid, ROJO, "* Usted apagó la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 0;
		    }
		    if(AutoInfo[vehicleid][aFaccionID] == 1){
		        if(GetVehicleModel(vehicleid) != 560) return 1;
	            DestroyDynamicObject(TieneSirena[vehicleid]);
	            SendClientMessage(playerid, ROJO, "* Usted apagó la sirena del vehículo.");
				SirenaEncendida[vehicleid] = 0;
		    }
		}
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes colocar sirenas.");
	return 1;
}

CMD:b(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /b [Mensaje]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s ))",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "[/b] %s: (( %s ",NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, COLOR_OOCA, COLOR_OOCB, COLOR_OOCC, COLOR_OOCD, COLOR_OOCE);
		ProxDetector(15.0, playerid, string2, COLOR_OOCA, COLOR_OOCB, COLOR_OOCC, COLOR_OOCD, COLOR_OOCE);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "[/b] %s: (( %s ))",NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, COLOR_OOCA, COLOR_OOCB, COLOR_OOCC, COLOR_OOCD, COLOR_OOCE);
	}
	return 1;
}

CMD:s(playerid, params[]) return cmd_susurrar(playerid, params);
CMD:susurrar(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /susurrar [Mensaje]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "%s susurra: %s", NombreJugador(playerid), mensaje);
		ProxDetector(4.0, playerid, string, GRIS, GRIS, GRIS, GRIS, GRIS);
		ProxDetector(4.0, playerid, string2, GRIS, GRIS, GRIS, GRIS, GRIS);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "%s susurra: %s", NombreJugador(playerid), mensaje);
		ProxDetector(4.0, playerid, string, GRIS, GRIS, GRIS, GRIS, GRIS);
	}
	return 1;
}

CMD:decir(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /decir [Mensaje]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "%s dice: %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		ProxDetector(15.0, playerid, string2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "%s dice: %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	return 1;
}

CMD:g(playerid, params[]) return cmd_gritar(playerid, params);
CMD:gritar(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /gritar [Mensaje]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s!!",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "%s grita: ¡¡%s", NombreJugador(playerid), mensaje);
		ProxDetector(25.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		ProxDetector(25.0, playerid, string2, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "%s grita: ¡¡%s!!", NombreJugador(playerid), mensaje);
		ProxDetector(25.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	return 1;
}

CMD:ame(playerid, params[])
{
    if(sscanf(params, "s[128]", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /ame [Texto]");
	    return 1;
	}
	SetPlayerChatBubble(playerid, params[0], ROSA, 5.0, 6000);
	return 1;
}

CMD:do(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /do [Acción]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "[%s] %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96);
		ProxDetector(15.0, playerid, string2, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "[%s] %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96, 0xF5E7AD96);
	}
	return 1;
}

CMD:me(playerid, params[])
{
	new mensaje[128], string[256];
    if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /me [Acción]");
	    return 1;
	}
    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "* %s %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		ProxDetector(15.0, playerid, string2, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "* %s %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	return 1;
}

CMD:avisofd(playerid, params[])
{
    if(JugadorInfo[playerid][jServicio] == 0) { SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio."); return 1; }
	if(JugadorInfo[playerid][jMiembro] != 3) { SendClientMessage(playerid, ROJO_OSCURO, "* No eres perteneces a LSFD."); return 1; }
    new id;
    if(sscanf(params, "i", id))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /avisofd [ID]");
	    return 1;
	}
	if(InformesFD[id][ifdEstado] != 1) { SendClientMessage(playerid, ROJO_OSCURO, "* Informe inválido. Usa /avisosfd para mayor información."); return 1; }
	SendClientMessage(playerid, AZUL, "[Central]: {FFFFFF}Te hemos marcado la posición de la emergencia en el GPS.");
	SetPlayerCheckpoint(playerid, InformesFD[id][ifdX], InformesFD[id][ifdY], InformesFD[id][ifdZ], 8.0);
	EnInforme[playerid] = 16;
	InformesFD[id][ifdEstado] = 2;
	InformesFD[id][ifdMedico] = playerid;
	return 1;
}

CMD:avisosfd(playerid, params[])
{
	new string[256];
    if(JugadorInfo[playerid][jServicio] == 0) { SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio."); return 1; }
	if(JugadorInfo[playerid][jMiembro] != 3) { SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSFD."); return 1; }
	SendClientMessage(playerid, AMARILLO, "Avisos disponibles:");
    for(new i = 0; i < MAX_INFORMESFD; i++)
	{
		if(InformesFD[i][ifdEstado] > 0)
		{
			if(InformesFD[i][ifdEstado] == 1)
			{
				format(string, 128, "Aviso número: %d. En espera...", i);
				SendClientMessage(playerid, ROJO_OSCURO, string);
			}
			else if(InformesFD[i][ifdEstado] == 2)
			{
				format(string, 128, "Aviso número: %d. En Camino...", i);
				SendClientMessage(playerid, VERDE, string);
			}
		}
	}
	return 1;
}

CMD:rescatar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres bombero.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(BolsilloID[playerid][11] != 91) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener una palanca en tu mano derecha.");
	new giveplayerid, string[256];
    if(sscanf(params, "i", giveplayerid))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /rescatar [ID]");
	    return 1;
	}
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(giveplayerid == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
    if(!IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no está en un vehículo.");
    if(GetDistanceBetweenPlayers(playerid, giveplayerid) >= 5) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar más cerca de la persona a la que quieres rescatar.");
    TogglePlayerControllable(giveplayerid, true);
    format(string, sizeof(string), "* Has rescatado a %s de su vehículo.", NombreJugador(giveplayerid));
    SendClientMessage(playerid, CELESTE, string);
    format(string, sizeof(string), "* %s te ha rescatado de su vehículo.", NombreJugador(playerid));
    SendClientMessage(giveplayerid, CELESTE, string);
    for(new i; i < MAX_INFORMESFD; i++)
	{
		if(InformesFD[i][ifdPaciente] == giveplayerid)
		{
			InformesFD[i][ifdEstado] = 0;
			KillTimer(InformesFD[i][ifdTimer]);
			DisablePlayerCheckpoint(InformesFD[i][ifdMedico]);
			break;
		}
	}
    return 1;
}

CMD:escalera(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres bombero.");
	new opcion[32];
    if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /escalera [Opción]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: Poner, Quitar, Colocar");
	    return 1;
	}
	if(strcmp(opcion, "poner", true) == 0)
	{
	    new Float:Pos[3];
	    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    TotalEscaleras ++;
		EscaleraInfo[TotalEscaleras][escaX] = Pos[0];
		EscaleraInfo[TotalEscaleras][escaY] = Pos[1];
		EscaleraInfo[TotalEscaleras][escaZ] = Pos[2];
		EscaleraInfo[TotalEscaleras][escaXX] = 0;
		EscaleraInfo[TotalEscaleras][escaYY] = 0;
		EscaleraInfo[TotalEscaleras][escaZZ] = 0;
		EscaleraInfo[TotalEscaleras][escaObjeto] = CreateDynamicObject(1437, Pos[0], Pos[1], Pos[2], 0, 0, 0);
		SendClientMessage(playerid, CELESTE, "* Has cogido unas escaleras, usa '/escalera colocar' para ajustarla.");
		return 1;
	}
	if(strcmp(opcion, "quitar", true) == 0)
	{
	    for(new i = 0; i < sizeof(EscaleraInfo); i++)
		{
		    if(PlayerToPoint(playerid, 3.5, EscaleraInfo[i][escaX], EscaleraInfo[i][escaY], EscaleraInfo[i][escaZ]))
		    {
		        EscaleraInfo[i][escaX] = -1;
				EscaleraInfo[i][escaY] = -1;
				EscaleraInfo[i][escaZ] = -1;
				EscaleraInfo[i][escaXX] = -1;
				EscaleraInfo[i][escaYY] = -1;
				EscaleraInfo[i][escaZZ] = -1;
				DestroyDynamicObject(EscaleraInfo[i][escaObjeto]);
				SendClientMessage(playerid, CELESTE, "* Has quitado las escaleras.");
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No hay ninguna escalera cerca.");
		return 1;
	}
	if(strcmp(opcion, "colocar", true) == 0)
	{
	    for(new i = 0; i < sizeof(EscaleraInfo); i++)
		{
		    if(PlayerToPoint(playerid, 3.5, EscaleraInfo[i][escaX], EscaleraInfo[i][escaY], EscaleraInfo[i][escaZ]))
		    {
		        EditandoTipoObjeto[playerid] = 1;
				EditDynamicObject(playerid, EscaleraInfo[i][escaObjeto]);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No hay ninguna escalera cerca.");
		return 1;
	}
	return 1;
}

CMD:incendiar(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes permisos para usar este comando.");
	new opcion[32], opcion2, string[256];
	if(sscanf(params, "s[32]I", opcion, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /incendiar [Opción]");
	    SendClientMessage(playerid, GRIS, "Opciones disponibles: casa, negocio");
	    return 1;
	}
	if(!strcmp(opcion, "casa", true))
	{
		new casa = opcion2;
		if(casa > 0 && casa <= sizeof(CasaInfo))
		{
			if(CrearIncendio(casa, ObtenerSiguienteIncendio()) )
			{
				format(string, sizeof(string), "* Has incendiado la casa %d. La ID del incendio es la %d.", casa, ObtenerSiguienteIncendio());
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, ROJO_OSCURO, "* Se ha alcanzado el número máximo de incendios.");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, ROJO_OSCURO, "* No está disponible esa casa para incendiar.");
		    return 1;
		}
	}
	return 1;
}

CMD:serial(playerid, params[])
{
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /serial [ID]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está conectado.");
	new Float:Pos[3];
	GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	if(PlayerToPoint(playerid, 2.5, Pos[0], Pos[1], Pos[2]))
	{
        new string[256];
        if(!EsArma(BolsilloID[params[0]][11])) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no tiene un arma en su mano.");
        if(BolsilloTipo[params[0]][11] == 1)
        {
            format(string, sizeof(string), "* Serial del arma: Sin identificar.");
        }
        else
        {
			format(string, sizeof(string), "* Serial del arma: %d.", BolsilloTipo[params[0]][11]);
		}
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s revisa el serial del arma de %s.", NombreJugador(playerid), NombreJugador(params[0]));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	}
	return 1;
}

CMD:equipo(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] == 1)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 211.3206,183.9050,1003.0313)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la armería de LSPD.");
		if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
		ShowMenuForPlayer(ArmeriaSAPD, playerid);
		TogglePlayerControllable(playerid, false);
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás autorizado a equiparte.");
	}
	return 1;
}

CMD:irf(playerid, params[])
{
	new opcion[32];
	if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes permisos para usar este comando.");
	if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /irf [Lugar]");
        SendClientMessage(playerid, GRIS, "Facciones: LSPD - LSMD - Gobierno - LSRTV - LSFD- GN");
        SendClientMessage(playerid, GRIS, "Lugares: Prisión - Skate - Pi Pen - Librería - Grotti - Feria - Estación - Autoescuela - CC - ConcesionarioCommerce - ConcesionarioBeach");
        SendClientMessage(playerid, GRIS, "Barrios: ElCorona - Idlewood - Ganton - OceanDocks - Seville - LasColinas - GlenPark - Vinewood - Mulholland - Richman - Verona");
		SendClientMessage(playerid, GRIS, "Pueblos: Chiliad - AngelPine - Dillimore - Blueberry - Montgomery - PalominoCreek - Banco");
		return 1;
	}
	if(!strcmp(opcion, "lspd", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1411.8982,-1667.9940,13.5600);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 1411.8982,-1667.9940,13.5600);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado a LSPD.");
		return 1;
	}
	else if(!strcmp(opcion, "gn", true))
 	{
     	if(GetPlayerState(playerid) == 2)
	  	{
 			SetVehiclePos(GetPlayerVehicleID(playerid), 2753.4023,-2457.2991,13.6432);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2753.4023,-2457.2991,13.6432);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a la Guardia Nacional.");
	  	return 1;
 	}
	else if(!strcmp(opcion, "prision", true))
 	{
     	if(GetPlayerState(playerid) == 2)
	  	{
 			SetVehiclePos(GetPlayerVehicleID(playerid), 1804.7534,-1575.0465,13.4247);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1804.7534,-1575.0465,13.4247);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Prisión Federal.");
	  	return 1;
 	}
	else if(!strcmp(opcion, "skate", true))
 	{
  		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1859.0294,-1382.1084,13.5625);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1859.0294,-1382.1084,13.5625);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Skate Park.");
	  	return 1;
 	}
	else if(!strcmp(opcion, "motel", true))
	{
		if(GetPlayerState(playerid) == 2)
		{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2217.5176,-1146.5592,25.7796);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2217.5176,-1146.5592,25.7796);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Motel Jefferson.");
	  	return 1;
	}
 	else if(!strcmp(opcion, "pigpen", true))
 	{
  		if(GetPlayerState(playerid) == 2)
  		{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2414.5178,-1248.5793,23.8125);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2414.5178,-1248.5793,23.8125);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Pig Pen.");
	  	return 1;
	}
	else if(!strcmp(opcion, "littleitaly", true))
 	{
  		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2649.4810,-1422.1931,30.3545);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2649.4810,-1422.1931,30.3545);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Little Italy.");
	  	return 1;
	}
	else if(!strcmp(opcion, "libreria", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1315.6361,-911.4059,38.0444);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1315.6361,-911.4059,38.0444);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Librería.");
	  	return 1;
	}
	else if(!strcmp(opcion, "grotti", true))
 	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 555.7819,-1255.9644,17.0458);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
  		}
	  	else SetPlayerPos(playerid, 555.7819,-1255.9644,17.0458);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Grotti.");
	  	return 1;
 	}
	if(!strcmp(opcion, "rodeo", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 555.7819,-1255.9644,17.0458);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 555.7819,-1255.9644,17.0458);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Rodeo.");
	  	return 1;
	}
	else if(!strcmp(opcion, "feria", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 369.8739,-2041.1921,7.6719);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 369.8739,-2041.1921,7.6719);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Feria Santa María Beach.");
	  	return 1;
	}
	else if(!strcmp(opcion, "estacion", true))
	{
	    if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1812.5643,-1888.7537,13.4141);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1812.5643,-1888.7537,13.4141);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Estación Unity.");
	  	return 1;
	}
	else if(!strcmp(opcion, "autoescuela", true))
	{
 		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2065.7527,-1925.3297,13.5469);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
  		}
	  	else SetPlayerPos(playerid, 2065.7527,-1925.3297,13.5469);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Autoescuela.");
	  	return 1;
	}
	else if(!strcmp(opcion, "concesionariocommerce", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1685.8051,-1586.3472,13.5442);
   			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1685.8051,-1586.3472,13.5442);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Concesionario Commerce.");
	  	return 1;
	}
	else if(!strcmp(opcion, "cc", true))
 	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1133.0211,-1413.5629,13.6281);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1133.0211,-1413.5629,13.6281);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Centro Comercial.");
	  	return 1;
	}
	else if(!strcmp(opcion, "concesionariobeach", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 542.6783,-1811.0061,6.0625);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 542.6783,-1811.0061,6.0625);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Concesionario Beach.");
	  	return 1;
	}
	else if(!strcmp(opcion, "chiliad", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), -2798.5103,-1521.6863,139.2479);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, -2798.5103,-1521.6863,139.2479);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Mount Chiliad.");
	  	return 1;
	}
	else if(!strcmp(opcion, "angelpine", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), -2100.9036,-2455.9473,30.6250);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, -2100.9036,-2455.9473,30.6250);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Angel Pine.");
	  	return 1;
	}
	else if(!strcmp(opcion, "dillimore", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 681.5970,-479.3495,16.3359);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 681.5970,-479.3495,16.3359);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Dillimore.");
	  	return 1;
	}
	else if(!strcmp(opcion, "blueberry", true))
 	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 189.9855,-269.0321,1.5781);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 189.9855,-269.0321,1.5781);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Blueberry.");
	  	return 1;
	}
	else if(!strcmp(opcion, "montgomery", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1337.0079,249.7363,19.5547);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1337.0079,249.7363,19.5547);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Montgomery.");
	  	return 1;
	}
	else if(!strcmp(opcion, "palomino", true))
	{
	    if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2286.9280,33.4928,26.4844);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	 	else SetPlayerPos(playerid, 2286.9280,33.4928,26.4844);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Palomino Creek.");
	  	return 1;
	}
	else if(!strcmp(opcion, "aeropuerto", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1613.4373,-2326.7407,13.5469);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1613.4373,-2326.7407,13.5469);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Aeropuerto.");
	  	return 1;
	}
	else if(!strcmp(opcion, "elcorona", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1809.9083,-2112.8005,13.3828);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1809.9083,-2112.8005,13.3828);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a El Corona.");
	  	return 1;
	}
	else if(!strcmp(opcion, "idlewood", true))
	{
 		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2117.4050,-1760.5841,13.3984);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2117.4050,-1760.5841,13.3984);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Idlewood.");
	  	return 1;
	}
	if(!strcmp(opcion, "ganton", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2313.4758,-1746.1670,13.3839);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2313.4758,-1746.1670,13.3839);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Ganton.");
	  	return 1;
	}
	else if(!strcmp(opcion, "oceandocks", true))
 	{
  		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2282.9275,-2334.1064,13.5469);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2282.9275,-2334.1064,13.5469);
	  	SetPlayerInterior(playerid, 0);
	 	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Ocean Docks.");
	  	return 1;
	}
	else if(!strcmp(opcion, "seville", true))
	{
 		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2816.6392,-1856.6466,11.1641);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2816.6392,-1856.6466,11.1641);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Playa de Seville.");
	  	return 1;
	}
	else if(!strcmp(opcion, "lascolinas", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 2586.0720,-1040.7535,69.5781);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 2586.0720,-1040.7535,69.5781);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Las Colinas.");
	  	return 1;
	}
	else if(!strcmp(opcion, "glenpark", true))
	{
 		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1975.3361,-1191.0426,25.9240);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1975.3361,-1191.0426,25.9240);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Glen Park.");
	  	return 1;
	}
	else if(!strcmp(opcion, "market", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1039.1260,-1333.3546,13.5474);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
  		}
	  	else SetPlayerPos(playerid, 1039.1260,-1333.3546,13.5474);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Market.");
	  	return 1;
	}
	else if(!strcmp(opcion, "vinewood", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1005.6324,-952.5775,42.1931);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1005.6324,-952.5775,42.1931);
	 	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Vinewood.");
	  	return 1;
	}
	else if(!strcmp(opcion, "mulholland", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1240.4948,-741.0566,95.5515);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1240.4948,-741.0566,95.5515);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Mulholland.");
	  	return 1;
	}
	else if(!strcmp(opcion, "richman", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 355.1797,-1160.1345,77.9669);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 355.1797,-1160.1345,77.9669);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Richman.");
	  	return 1;
	}
	else if(!strcmp(opcion, "verona", true))
	{
		if(GetPlayerState(playerid) == 2)
	  	{
	   		SetVehiclePos(GetPlayerVehicleID(playerid), 1045.1533,-1794.0117,13.8352);
	   		LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
	  	}
	  	else SetPlayerPos(playerid, 1045.1533,-1794.0117,13.8352);
	  	SetPlayerInterior(playerid, 0);
	  	SendClientMessage(playerid, CELESTE, "* Te has teleportado a Verona Beach.");
	  	return 1;
	}
	else if(!strcmp(opcion, "lsfd", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1513.4877,-1584.2250,13.5469);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 1513.4877,-1584.2250,13.5469);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado a LSFD.");
		return 1;
	}
	else if(!strcmp(opcion, "lsmd", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1190.1277,-1323.6414,13.5668);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 1190.1277,-1323.6414,13.5668);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado a LSMD.");
		return 1;
	}
	else if(!strcmp(opcion, "gobierno", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1481.6412,-1740.3959,13.5469);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 1481.6412,-1740.3959,13.5469);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado al Gobierno.");
		return 1;
	}
	else if(!strcmp(opcion, "lsrtv", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 789.7711,-1345.6493,13.5469);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 789.7711,-1345.6493,13.5469);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado a LSRTV.");
		return 1;
	}
	else if(!strcmp(opcion, "banco", true))
	{
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1462.3574,-1026.0641,23.8281);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
		}
		else SetPlayerPos(playerid, 1462.3574,-1026.0641,23.8281);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, CELESTE, "* Te has teleportado al Banco.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /irf [Lugar]");
        SendClientMessage(playerid, GRIS, "Facciones: LSPD - LSMD - Gobierno - LSRTV - LSFD - GN");
        SendClientMessage(playerid, GRIS, "Lugares: Prisión - Skate - Pi Pen - Librería - Grotti - Feria - Estación - Autoescuela - CC - ConcesionarioCommerce - ConcesionarioBeach");
        SendClientMessage(playerid, GRIS, "Barrios: ElCorona - Idlewood - Ganton - OceanDocks - Seville - LasColinas - GlenPark - Vinewood - Mulholland - Richman - Verona");
		SendClientMessage(playerid, GRIS, "Pueblos: Chiliad - AngelPine - Dillimore - Blueberry - Montgomery - PalominoCreek");
	}
	return 1;
}

CMD:anuncio(playerid, params[])
{
	new string[256];
	if(TiempoAnuncio > 0){ format(string, sizeof(string), "* Debes esperar %d segundos para añadir el anuncio.", TiempoAnuncio); SendClientMessage(playerid, ROJO_OSCURO, string); return 1;}
	if(JugadorInfo[playerid][jDinero] < PrecioAnuncio) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes dinero suficiente para anunciarte.");
	if(!PlayerToPoint(playerid, 5.0, -2513.6125,-610.3277,45.9459)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la central de noticias.");
	if(sscanf(params, "is[128]", params[0], params[1]))
	{
        SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/anuncio [Teléfono] [Mensaje]");
        SendClientMessage(playerid, NARANJA, "Información: El número colocado, será el número que aparecerá en el anuncio.");
	    return 1;
	}
	if(params[0] < 99) return SendClientMessage(playerid, ROJO_OSCURO, "* El número de teléfono debe tener mínimo tres carácteres.");
	format(string, sizeof(string), "[{21D121}Anuncio{1eb032}] TLF: %d - %s", params[0], params[1]);
	SendClientMessageToAll(VERDE, string);
	format(string, sizeof(string), "Anuncio enviado por %s [ID: %d]", NombreJugador(playerid), playerid);
	ABroadCast(AMARILLO, string, 1);
	JugadorInfo[playerid][jDinero] -= PrecioAnuncio;
	CajasFuerte[1] += PrecioAnuncio;
	TiempoAnuncio = 60;
	return 1;
}

CMD:precioanuncio(playerid, params[])
{
    if(JugadorInfo[playerid][jLider] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV o no eres el lider.");
    new string[256];
    if(sscanf(params, "i", params[0]))
	{
        SendClientMessage(playerid, GRIS, "Uso: /precioanuncio [Cantidad]");
	    return 1;
	}
	if(params[0] < 0 || params[0] > 100) return SendClientMessage(playerid, ROJO_OSCURO, "* El precio del anuncio debe estar entre 0 y 100 dólares.");
	PrecioAnuncio = params[0];
	format(string, sizeof(string), "* Has modificado el precio del anuncio a $%d.", PrecioAnuncio);
	SendClientMessage(playerid, CELESTE, string);
	DestroyDynamic3DTextLabel(infoAnuncio);
	format(string, sizeof(string), "{00FFFF}Anuncios{FFFFFF}\nUsa {00FFFF}/anuncio{FFFFFF} para enviarlo. Coste {00FFFF}$%d{FFFFFF} el mensaje.", PrecioAnuncio);
	infoAnuncio = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, -2513.6125,-610.3277,45.9459, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Anuncios LSRTV
	return 1;
}

CMD:faros(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV.");
	new idcoche = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(idcoche) != 582) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en una News Van.");
    if(luzlanewestado[idcoche] == 0)
    {
        luzlanewestado[idcoche] = 1;
        luzlanews1[idcoche] = CreateObject(1215, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
        luzlanews2[idcoche] = CreateObject(1215, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
        luzlanews3[idcoche] = CreateObject(1215, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
        luzlanews4[idcoche] = CreateObject(1215, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
		AttachObjectToVehicle(luzlanews1[idcoche], idcoche, 0.7, -1.3, 0.85, 0, 0, 0);
		AttachObjectToVehicle(luzlanews2[idcoche], idcoche, 0.7, -2.7, 0.85, 0, 0, 0);
		AttachObjectToVehicle(luzlanews3[idcoche], idcoche, -0.75, -2.7, 0.85, 0, 0, 0);
		AttachObjectToVehicle(luzlanews4[idcoche], idcoche, -0.75, -1.3, 0.85, 0, 0, 0);
        return 1;
    }
    else
    {
        luzlanewestado[idcoche] = 0;
        DestroyObject(luzlanews1[idcoche]);
        DestroyObject(luzlanews2[idcoche]);
        DestroyObject(luzlanews3[idcoche]);
        DestroyObject(luzlanews4[idcoche]);
    }
    return 1;
}

CMD:entrevistar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV.");
    if(Entrevistando[playerid] != NOEXISTE)
    {
        SendClientMessage(playerid, CELESTE, "* Has terminado la entrevista en vivo de LSRTV.");
		SendClientMessage(Entrevistando[playerid], CELESTE, "* Ha terminado la entrevista en vivo de LSRTV.");
	    Entrevistando[Entrevistando[playerid]] = NOEXISTE;
		Entrevistando[playerid] = NOEXISTE;
		return 1;
    }
    if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /entrevistar [Jugador]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	Oferta[params[0]] = 4;
	OfertaCreador[params[0]] = playerid;
	new string[128];
	format(string, sizeof(string), "* %s te ha ofrecido una entrevista en directo para LSRTV.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	SendClientMessage(params[0], CELESTE, "* Usa '/aceptar' para aceptarla o '/rechazar' para rechazarla.");
	format(string, sizeof(string), "* Has ofrecido una entrevista en directo para LSRTV a %s.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:emitir(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV.");
	new coche = GetPlayerVehicleID(playerid);
	if(!PlayerToPoint(playerid, 5.0, -2525.6899,-651.5734,49.5459) && !PlayerToPoint(playerid, 5.0, -2513.7427,-667.2997,50.4119)
	&& AutoInfo[coche][aFaccionID] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes emitir noticias desde aquí.");
	if(EmitiendoCNN[playerid] == 0)
	{
	    EmitiendoCNN[playerid] = 1;
	    SendClientMessageToAll(NARANJA, "** Comienza la retransmisión de LSRTV **");
	    return 1;
	}
	else
	{
	    SendClientMessageToAll(NARANJA, "** Finaliza la retransmisión de LSRTV **");
	    EmitiendoCNN[playerid] = 0;
	}
	return 1;
}

CMD:cajafuerte(playerid, params[])
{
    if(JugadorInfo[playerid][jLider] == 4)
    {
	    if(!PlayerToPoint(playerid, 3.0, 365.3435,150.9420,1025.7891)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la caja fuerte.");
		new opcion[32], opcion2, string[128], sql[128];
		if(sscanf(params, "s[32]I(-1)", opcion, opcion2))
		{
		    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/cajafuerte [Opción]");
		    SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Retirar - Guardar - Información");
		    return 1;
		}
		if(!strcmp(opcion, "retirar", true))
		{
		    if(sscanf(params, "s[32]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /cajafuerte retirar [Cantidad]");
			if(opcion2 > CajasFuerte[0]) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay suficiente dinero en la caja fuerte. Use '/cajafuerte informacion' para ver los fondos.");
			if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
			CajasFuerte[0] -= opcion2;
			JugadorInfo[playerid][jDinero] += opcion2;
			format(string, sizeof(string), "* %s coge algo de dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(sql, sizeof(sql), "UPDATE varios SET CajaGobierno = %d WHERE id = 1", CajasFuerte[0]);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "guardar", true))
		{
		    if(sscanf(params, "s[32]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /cajafuerte guardar [Cantidad]");
			if(opcion2 > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
			CajasFuerte[0] += opcion2;
			JugadorInfo[playerid][jDinero] -= opcion2;
			format(string, sizeof(string), "* %s deja algo de dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(sql, sizeof(sql), "UPDATE varios SET CajaGobierno = %d WHERE id = 1", CajasFuerte[0]);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "informacion", true))
		{
		    format(string, sizeof(string), "Actualmente hay %d dólares disponibles en la caja fuerte del gobierno.", CajasFuerte[0]);
		    SendClientMessage(playerid, CELESTE, string);
		    format(string, sizeof(string), "* %s revisa el dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/cajafuerte [Opción]");
		    SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Retirar - Guardar - Información");
		    return 1;
		}
	}
	else if(JugadorInfo[playerid][jLider] == 5)
    {
	    if(!PlayerToPoint(playerid, 3.0, 365.3435,150.9420,1025.7891)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la caja fuerte.");
		new opcion[32], opcion2, string[128], sql[128];
		if(sscanf(params, "s[32]I(-1)", opcion, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /cajafuerte [Opción]");
		    SendClientMessage(playerid, GRIS, "Opciones disponibles: Retirar - Guardar - Información");
		    return 1;
		}
		if(!strcmp(opcion, "retirar", true))
		{
		    if(sscanf(params, "s[32]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /cajafuerte retirar [Cantidad]");
			if(opcion2 > CajasFuerte[1]) return SendClientMessage(playerid, ROJO_OSCURO, "* No hay suficiente dinero en la caja fuerte. Use '/cajafuerte informacion' para ver los fondos.");
			if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
			CajasFuerte[1] -= opcion2;
			JugadorInfo[playerid][jDinero] += opcion2;
			format(string, sizeof(string), "* %s coge algo de dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(sql, sizeof(sql), "UPDATE varios SET CajaLSRTV = %d WHERE id = 1", CajasFuerte[1]);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "guardar", true))
		{
		    if(sscanf(params, "s[32]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /cajafuerte guardar [Cantidad]");
			if(opcion2 > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	        if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
			CajasFuerte[1] += opcion2;
			JugadorInfo[playerid][jDinero] -= opcion2;
			format(string, sizeof(string), "* %s deja algo de dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			format(sql, sizeof(sql), "UPDATE varios SET CajaLSRTV = %d WHERE id = 1", CajasFuerte[1]);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "informacion", true))
		{
		    format(string, sizeof(string), "Actualmente hay %d dólares disponibles en la caja fuerte de LSRTV.", CajasFuerte[1]);
		    SendClientMessage(playerid, CELESTE, string);
		    format(string, sizeof(string), "* %s revisa el dinero de la caja fuerte.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, GRIS, "Uso: /cajafuerte [Opción]");
		    SendClientMessage(playerid, GRIS, "Opciones disponibles: Retirar - Guardar - Información");
		    return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar la caja fuerte.");
	}
	return 1;
}

CMD:impuestos(playerid, params[])
{
    if(JugadorInfo[playerid][jLider] == 4)
    {
		new opcion[32], opcion2, string[128], sql[128];
		if(sscanf(params, "s[32]i", opcion, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /impuestos [Tipo] [Precio]");
		    SendClientMessage(playerid, GRIS, "Tipos disponibles: Casa - Negocio - Coche");
		    return 1;
		}
		if(!strcmp(opcion, "casa", true))
		{
			if(opcion2 < 25 && opcion2 > 100) return SendClientMessage(playerid, ROJO_OSCURO, "* El impuesto sobre las casas ha de estar entre 25 y 100 dólares.");
			Impuestos[0] = opcion2;
			format(string, sizeof(string), "* Has modificado los impuestos de las casas a %d dólares.", opcion2);
			SendClientMessage(playerid, CELESTE, string);
			format(sql, sizeof(sql), "UPDATE varios SET ImpuestosCasa = %d WHERE id = 1", opcion2);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "negocio", true))
		{
			if(opcion2 < 50 && opcion2 > 250) return SendClientMessage(playerid, ROJO_OSCURO, "* El impuesto sobre los negocios ha de estar entre 50 y 250 dólares.");
			Impuestos[1] = opcion2;
			format(string, sizeof(string), "* Has modificado los impuestos de los negocios a %d dólares.", opcion2);
			SendClientMessage(playerid, CELESTE, string);
			format(sql, sizeof(sql), "UPDATE varios SET ImpuestosNegocio = %d WHERE id = 1", opcion2);
			mysql_query(database, sql, false);
			return 1;
		}
		else if(!strcmp(opcion, "coche", true))
		{
			if(opcion2 < 10 && opcion2 > 80) return SendClientMessage(playerid, ROJO_OSCURO, "* El impuesto sobre los coches ha de estar entre 10 y 80 dólares.");
			Impuestos[2] = opcion2;
			format(string, sizeof(string), "* Has modificado los impuestos de los coches a %d dólares.", opcion2);
			SendClientMessage(playerid, CELESTE, string);
			format(sql, sizeof(sql), "UPDATE varios SET ImpuestosCoche = %d WHERE id = 1", opcion2);
			mysql_query(database, sql, false);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, GRIS, "Uso: /impuestos [Tipo] [Precio]");
		    SendClientMessage(playerid, GRIS, "Tipos disponibles: Casa - Negocio - Coche");
		}
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces al gobierno.");
    return 1;
}

CMD:quimioterapia(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /quimioterapia [Jugador]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(!CamillasMD(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en las salas médicas.");
	if(JugadorInfo[params[0]][jEnfermedad] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* El paciente no está enfermo de cancer.");
	if(EnQuimioterapia[params[0]]== 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya se le está realizando una quimioterapia a ese paciente.");
	new string[126];
	if(PlayerToPoint(playerid, 15, -211.0295,-1751.7201,676.7153)) // Camilla box izquierdo
	{
	    EnQuimioterapia[params[0]] = 1;
	    SetPlayerPos(params[0], -211.0361,-1738.8424,676.7153);
	    LoopingAnim(params[0], "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
	    format(string, sizeof(string), "* %s comienza a realizarle la quimioterapia a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    SetTimerEx("Quimioterapia", 60000, 0, "dd", playerid, params[0]);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 15, 1491.6394,-1758.5957,3285.2859)) // Camilla box derecho
	{
	    EnQuimioterapia[params[0]] = 1;
	    SetPlayerPos(params[0], 1491.6394,-1758.5957,3285.2859);
	    LoopingAnim(params[0], "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
	    format(string, sizeof(string), "* %s comienza a realizarle la quimioterapia a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    SetTimerEx("Quimioterapia", 60000, 0, "dd", playerid, params[0]);
	    return 1;
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar cerca de una de las camillas de los box.");
}

CMD:recetar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
    new opcion[32];
	if(sscanf(params, "us[32]", params[0], opcion))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /recetar [Jugador] [ Parazetamol | Gelocatil | Ventolín ]");
	    SendClientMessage(playerid, GRIS, "Información: Gelocatil = Fiebre | Parazetamol = Gripe | Ventolín = Asma");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(!OficinasMD(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la recepción del hospital.");
	new string[126];
	if(!strcmp(opcion, "parazetamol", true))
	{
	    format(string, sizeof(string), "* El médico %s te ha dado una receta de parazetamol. Con este medicamento ayudarás a curar tu gripe.", NombreJugador(playerid));
	    SendClientMessage(params[0], CELESTE, string);
	    format(string, sizeof(string), "* Has recetado parazetamol al paciente %s. Recuerda añadirlo a su historial médico.", NombreJugador(params[0]));
	    SendClientMessage(playerid, CELESTE, string);
	    JugadorInfo[params[0]][jReceta] = 1;
	}
	else if(!strcmp(opcion, "gelocatil", true))
	{
	    format(string, sizeof(string), "* El médico %s te ha dado una receta de gelocatil. Con este medicamento ayudarás a curar tu fiebre.", NombreJugador(playerid));
	    SendClientMessage(params[0], CELESTE, string);
	    format(string, sizeof(string), "* Has recetado gelocatil al paciente %s. Recuerda añadirlo a su historial médico.", NombreJugador(params[0]));
	    SendClientMessage(playerid, CELESTE, string);
	    JugadorInfo[params[0]][jReceta] = 2;
	}
	else if(!strcmp(opcion, "ventolin", true))
	{
	    format(string, sizeof(string), "* El médico %s te ha dado una receta de ventolín. Con este medicamento ayudarás a curar tu asma.", NombreJugador(playerid));
	    SendClientMessage(params[0], CELESTE, string);
	    format(string, sizeof(string), "* Has recetado ventolín al paciente %s. Recuerda añadirlo a su historial médico.", NombreJugador(params[0]));
	    SendClientMessage(playerid, CELESTE, string);
	    JugadorInfo[params[0]][jReceta] = 3;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /recetar [Jugador] [ Parazetamol | Gelocatil | Ventolín ]");
	    SendClientMessage(playerid, GRIS, "Información: Gelocatil = Fiebre | Parazetamol = Gripe | Ventolín = Asma");
	}
	return 1;
}

CMD:examinar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /examinar [Jugador]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(!CamillasMD(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en las salas médicas.");
	new string[126];
	format(string, sizeof(string), "* %s comienza a examinar a %s en busca de alguna enfermedad.", NombreJugador(playerid), NombreJugador(params[0]));
	ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	SendClientMessage(playerid, CELESTE, "* Esto puede llevar unos segundos...");
	SetTimerEx("ExaminarEnfermedad", 60000, 0, "dd", playerid, params[0]);
	return 1;
}

CMD:curar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /curar [Jugador]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(!CamillasMD(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en las salas médicas.");
	SetPlayerHealthEx(params[0], 99);
	new string[128];
	format(string, sizeof(string), "* Has curado al paciente %s, recuerda añadirlo a su historial médico con '/informe'", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	format(string, sizeof(string), "* Has sido curado por el médico %s, ahora tu salud está perfecta.", NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	return 1;
}

CMD:reanimar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
	if(sscanf(params, "u", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /reanimar [Jugador]");
	    return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(2.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[params[0]][jHerido] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador no está herido.");
	new string[128];
	format(string, sizeof(string), "* %s comienza a reanimar a %s.", NombreJugador(playerid), NombreJugador(params[0]));
	ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	ClearAnimations(playerid);
	ClearAnimations(playerid);
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1,1);
	SetPlayerHealthEx(params[0], 35.0);
	TogglePlayerControllable(params[0], 1);
	JugadorInfo[params[0]][jHerido] = 0;
	KillTimer(TimerMuerto[params[0]]);
	return 1;
}

CMD:desbloquearveh(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando.");
	if(sscanf(params, "ui", params[0], params[1]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /desbloquearveh [Jugador] [Precio]");
	    return 1;
	}
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(1.5, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");

	new string[256];
	new coche = JugadorCercaVehiculo(playerid);
	if(AutoInfo[coche][aBloqueado] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El vehículo no tiene ningún cepo.");
	Oferta[params[0]] = 3;
	OfertaCreador[params[0]] = playerid;
	OfertaCantidad[params[0]] = coche;
	OfertaPrecio[params[0]] = params[1];
	format(string, sizeof(string), "* %s te ha ofrecido desbloquear el vehículo LS-%d por %d dólares. Usa '/aceptar' o '/rechazar'.", NombreJugador(playerid), AutoInfo[coche][aID], params[1]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has ofrecido a %s desbloquear el vehículo LS-%d por %d dólares.", NombreJugador(params[0]), AutoInfo[coche][aID], params[1]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:bloquearveh(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes colocar barreras.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	new coche = JugadorCercaVehiculo(playerid);
	if(coche == 0) return 1;

	new string[128];
	format(string, sizeof(string), "* %s coloca un cepo en la rueda del vehículo.", NombreJugador(playerid));
	ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	TogglePlayerControllable(playerid, 0);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0,1);
	ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0,1);
	SetTimerEx("BloqueandoVeh", 15000, 0, "dd", playerid, coche);
	return 1;
}

CMD:barrera(playerid, params[])
{
    new opcion[32];
	new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	GetPlayerFacingAngle(playerid,ploca);
	if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes colocar barreras.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	if(sscanf(params, "s[32]", opcion))
	{
	    SendClientMessage(playerid, 0x72B1FFFF, "Uso: {FFFFFF}/barrera [Opción]");
	    SendClientMessage(playerid, 0x72B1FFFF, "Opciones disponibles: {FFFFFF}barrera - valla - cono - clavo - desvio - prohibido - cerrado");
	    return 1;
	}
	if(!strcmp(opcion, "clavo", true))
	{
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes colocar clavos.");
		CrearObjetoPolicia(1,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	if(!strcmp(opcion, "cono", true))
	{
		CrearObjetoPolicia(2,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	if(!strcmp(opcion, "barrera", true))
	{
		CrearObjetoPolicia(3,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	if(!strcmp(opcion, "valla", true))
	{
		CrearObjetoPolicia(4,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	if(!strcmp(opcion, "desvio", true))
	{
		CrearObjetoPolicia(5,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
 	if(!strcmp(opcion, "prohibido", true))
	{
		CrearObjetoPolicia(6,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	if(!strcmp(opcion, "cerrado", true))
	{
		CrearObjetoPolicia(7,plocx,plocy,plocz,ploca,JugadorInfo[playerid][jMiembro]);
	}
	return 1;
}

CMD:qbarrera(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes quitar barreras.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	DeleteClosestObject(playerid);
	return 1;
}

CMD:m(playerid, params[]) return cmd_megafono(playerid, params);
CMD:megafono(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes usar este comando.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	new mensaje[256], string[256];
	if(sscanf(params, "s[256]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /megafono [Mensaje]");
	    return 1;
	}
	new coche = GetPlayerVehicleID(playerid);
	if(AutoInfo[coche][aFaccionID] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Este vehículo no tiene megáfono.");

    if(strlen(mensaje) > 75){
		new string2[128];
		format(string2,256,"... %s",mensaje[75]);
		strdel(mensaje,75,strlen(mensaje));
		format(string, sizeof(string), "[Megáfono] %s dice: %s...", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
		ProxDetector(15.0, playerid, string2, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
	}
	if(strlen(mensaje) < 75){
		format(string, sizeof(string), "[Megáfono] %s dice: %s", NombreJugador(playerid), mensaje);
		ProxDetector(15.0, playerid, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
	}
	return 1;
}

CMD:ordenador(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 1)
    {
	    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	    if(!IsPlayerInAnyVehicle(playerid) && !OficinasPD(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un patrulla o en comisaría.");
	    if(IsPlayerInAnyVehicle(playerid))
		{
			new coche = GetPlayerVehicleID(playerid);
			if(AutoInfo[coche][aFaccionID] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo de policía.");
	    }

	    if(MostrandoPCPD[playerid] == 1)
		{
			MostrandoPCPD[playerid] = 0;
			TextDrawHideForPlayer(playerid, pcpd0);
			TextDrawHideForPlayer(playerid, pcpd1);
			TextDrawHideForPlayer(playerid, pcpd2);
			TextDrawHideForPlayer(playerid, pcpd3);
			TextDrawHideForPlayer(playerid, pcpd4);
			TextDrawHideForPlayer(playerid, pcpd5);
			TextDrawHideForPlayer(playerid, pcpd6);
			TextDrawHideForPlayer(playerid, pcpd7);
			TextDrawHideForPlayer(playerid, pcpd8);
			TextDrawHideForPlayer(playerid, pcpd9);
			TextDrawHideForPlayer(playerid, pcpd11);
			CancelSelectTextDraw(playerid);
		}
		else
		{
			MostrandoPCPD[playerid] = 1;
			TextDrawShowForPlayer(playerid, pcpd0);
			TextDrawShowForPlayer(playerid, pcpd1);
			TextDrawShowForPlayer(playerid, pcpd2);
			TextDrawShowForPlayer(playerid, pcpd3);
			TextDrawShowForPlayer(playerid, pcpd4);
			TextDrawShowForPlayer(playerid, pcpd5);
			TextDrawShowForPlayer(playerid, pcpd6);
			TextDrawShowForPlayer(playerid, pcpd7);
			TextDrawShowForPlayer(playerid, pcpd8);
			TextDrawShowForPlayer(playerid, pcpd9);
			TextDrawShowForPlayer(playerid, pcpd11);
			SelectTextDraw(playerid, -1);
		}
		return 1;
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún ordenador.");
}

CMD:informe(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 1)
    {
	    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	    new opcion[35], opcion2[128];
	    if(sscanf(params, "s[35]s[128]", opcion, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /informe [Nombre_Apellidos] [Información]");
			return 1;
		}
		if(IsNumeric(opcion)) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes introducir un valor numérico en el nombre.");

		new sql[80], row[256], id;

		format(sql, 80, "INSERT INTO delitos (Reportador) VALUES ('%s')", NombreJugador(playerid));
		mysql_query(database, sql, false);

		format(sql, sizeof(sql), "SELECT MAX(id) FROM delitos");
		mysql_query(database, sql, true);
		cache_get_row(0, 0, row, database);
		id = strval(row);

		new fecha[50];
		new dia, mes, ano, hora, minuto, segundo;
		getdate(ano, mes, dia);
		gettime(hora, minuto, segundo);
		format(fecha, 50, "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);

		DelitoInfo[TotalDelitos][dID] = id;
		format(DelitoInfo[TotalDelitos][dNombre], 50, opcion);
		format(DelitoInfo[TotalDelitos][dInformacion], 128, opcion2);
		format(DelitoInfo[TotalDelitos][dFecha], 50, fecha);
		DelitoInfo[TotalDelitos][dResuelto] = 0;
		format(DelitoInfo[TotalDelitos][dReportador], 50, NombreJugador(playerid));

		GuardarDelito(TotalDelitos);

	    TotalDelitos++;
	    new string[400];
	    format(string, sizeof(string), "{FFFFFF}Información sobre el informe policial con identificación {00FFFF}%d{FFFFFF}.\n\n\t{00FFFF}# Sujeto:{FFFFFF}\t%s\n\t{00FFFF}# Información:{FFFFFF}\t%s\n\t{00FFFF}# Fecha:{FFFFFF}\t%s\n\t{00FFFF}# Reportador:{FFFFFF}\t%s", id, opcion, opcion2, fecha, NombreJugador(playerid));
	    ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{00FFFF}Informe LSPD", string, "Cerrar", "");
	    SendClientMessage(playerid, CELESTE, string);
	    return 1;
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSPD o LSMD.");
}

CMD:d(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2 && JugadorInfo[playerid][jMiembro] != 3 && JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes radio departamental.");
    new string[256], mensaje[128];
	if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /d [Mensaje]");
		return 1;
	}
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	new miembro, rango;
	miembro = JugadorInfo[playerid][jMiembro];
	rango = JugadorInfo[playerid][jRango];
	format(string, sizeof(string), "[Radio Departamental] {FFFFFF}%s %s dice: %s", ObtenerRango(miembro, rango), NombreJugador(playerid), mensaje);
	MensajeDeFaccion(1, ROJO, string);
	MensajeDeFaccion(2, ROJO, string);
	MensajeDeFaccion(3, ROJO, string);
	MensajeDeFaccion(4, ROJO, string);
	MensajeDeFaccion(5, ROJO, string);
	MensajeDeFaccion(6, ROJO, string);
	format(string, sizeof(string), "%s dice por radio: %s", NombreJugador(playerid), mensaje);
	ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:f(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a ninguna facción.");
    new string[256], mensaje[128];
	if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /f [Mensaje]");
		return 1;
	}
	new miembro;
	miembro = JugadorInfo[playerid][jMiembro];
	format(string, sizeof(string), "[Facción OOC] {FFFFFF}(( %s: %s ))", NombreJugador(playerid), mensaje);
	MensajeDeFaccionOOC(miembro, 0x2EA6B9AA, string);
	return 1;
}

CMD:r(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 2 && JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 3 && JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes una radio.");
    new string[256], mensaje[128];
	if(sscanf(params, "s[128]", mensaje))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /r [Mensaje]");
		return 1;
	}
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	new miembro, rango;
	miembro = JugadorInfo[playerid][jMiembro];
	rango = JugadorInfo[playerid][jRango];
	format(string, sizeof(string), "[Radio] {FFFFFF}%s %s dice: %s", ObtenerRango(miembro, rango), NombreJugador(playerid), mensaje);
	MensajeDeFaccion(miembro, 0x2EA6B9AA, string);
	format(string, sizeof(string), "%s dice por radio: %s", NombreJugador(playerid), mensaje);
	ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:esposar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 1 || (JugadorInfo[playerid][jMiembro] == 4 && JugadorInfo[playerid][jRango] == 1 || JugadorInfo[playerid][jRango] == 3) || JugadorInfo[playerid][jMiembro] == 6)
    {
		new string[256];
		if(sscanf(params, "u", params[0]))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /esposar [ID]");
			return 1;
		}
		if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
		if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
		if(!CercaJugador(1.5, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
		if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");

		if(Esposado[params[0]] == 0)
		{
		    Esposado[params[0]] = 1;
		    format(string, sizeof(string), "* %s coloca unas esposas a %s y las cierra.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			SetPlayerAttachedObject(params[0], 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000);
	  		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_CUFFED);
		    return 1;
		}
		else
		{
		    Esposado[params[0]] = 0;
		    format(string, sizeof(string), "* %s abre las esposas de %s y se las quita.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(params[0], 9);
		}
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes esposar.");
	return 1;
}

CMD:espalda(playerid, params[])
{
	new string[128];
	if(BolsilloID[playerid][11] < 0 || BolsilloID[playerid][11] > 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Lo que tienes en la mano es algo invalido.");

	if(ObjetoPesado(BolsilloID[playerid][11]) && BolsilloID[playerid][11] != 5)
	{
	    if(BolsilloID[playerid][10] == 0)
	    {
	    	BolsilloID[playerid][10] = BolsilloID[playerid][11];
	    	BolsilloTipo[playerid][10] = BolsilloTipo[playerid][11];
	    	BolsilloCantidad[playerid][10] = BolsilloCantidad[playerid][11];
	    	ResetPlayerWeapons(playerid);
	    	BolsilloID[playerid][11] = 0;
	    	BolsilloTipo[playerid][11] = 0;
	    	BolsilloCantidad[playerid][11] = 0;
	    	UpdateAttach(playerid);
	    	GuardarBolsillos(playerid);

	    	if(BolsilloID[playerid][10] >= 0 && BolsilloID[playerid][10] <= 103)
			{
				SetPlayerAttachedObject(playerid,ESPALDA,BolObjeto[BolsilloID[playerid][10]][0],1,-0.305999,-0.203000,0.097999,-170.500030,0.000000,0.000000,1.000000,1.000000,1.000000);
			}
			else
			{
				SendClientMessage(playerid, 0x0000FF00, "Oops, se produjo un error! El objeto que se quiere agregar es invalido.");
			}

	    	format(string, sizeof(string), "¡Has colocado un objeto en tu espalda! Usa /sespalda para sacarla de la espalda.");
			SendClientMessage(playerid, VERDE, string);
			SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
            GuardoArmaSegura[playerid] = 1;
			return 1;
		}
		else { SendClientMessage(playerid, ROJO, "¡Ya tienes algo en tu espalda puesto!"); }
	}
	else { SendClientMessage(playerid, ROJO, "¡Este objeto no se puede colocar ahí!"); }
	return 1;
}

CMD:sespalda(playerid, params[])
{
	new string[128];
 	if(BolsilloID[playerid][10] == 0){
  		SendClientMessage(playerid, ROJO_OSCURO, "¡La espalda está vacía!");
	}
	else{
	   if(BolsilloID[playerid][11] == 0){
	     BolsilloID[playerid][11] = BolsilloID[playerid][10];
		   BolsilloTipo[playerid][11] = BolsilloTipo[playerid][10];
		   BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][10];
		   BolsilloID[playerid][10] = 0;
		   BolsilloTipo[playerid][10] = 0;
		   BolsilloCantidad[playerid][10] = 0;
			if(EsArma(BolsilloID[playerid][11])){
				GivePlayerWeapon(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
			}
			UpdateAttach(playerid);
			GuardarBolsillos(playerid);
		    /*SaveValue(playerid, "EspaldaID", EspaldaID[playerid]);
		    SaveValue(playerid, "EspaldaTipo", EspaldaTipo[playerid]);
		    SaveValue(playerid, "EspaldaCantidad", EspaldaCantidad[playerid]);*/
		    RemovePlayerAttachedObject(playerid, ESPALDA);
			SendClientMessage(playerid, -1, "El objeto seleccionado ha sido colocado en su mano derecha.");
			format(string, sizeof(string), "Usted sacó de la espalda un/a %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
			SendClientMessage(playerid, VERDE, string);
			SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
            GuardoArmaSegura[playerid] = 1;
			return 1;
	    }
	    if(BolsilloID[playerid][12] == 0){
	     	BolsilloID[playerid][12] = BolsilloID[playerid][10];
		   	BolsilloTipo[playerid][12] = BolsilloTipo[playerid][10];
		   	BolsilloCantidad[playerid][12] = BolsilloCantidad[playerid][10];
		   	BolsilloID[playerid][10] = 0;
		    BolsilloTipo[playerid][10] = 0;
		    BolsilloCantidad[playerid][10] = 0;
			UpdateAttach(playerid);
			GuardarBolsillos(playerid);
		    /*SaveValue(playerid, "EspaldaID", EspaldaID[playerid]);
		    SaveValue(playerid, "EspaldaTipo", EspaldaTipo[playerid]);
		    SaveValue(playerid, "EspaldaCantidad", EspaldaCantidad[playerid]);*/
		    RemovePlayerAttachedObject(playerid, ESPALDA);
			SendClientMessage(playerid, -1, "El objeto seleccionado ha sido colocado en su mano derecha.");
			format(string, sizeof(string), "Usted sacó de la espalda un/a %s.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
			SendClientMessage(playerid, VERDE, string);
            SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
            GuardoArmaSegura[playerid] = 1;
			return 1;
	    }
	    else{
	        SendClientMessage(playerid, ROJO, "[ERROR] Usted debe tener al menos una mano desocupada.");
	    }
		}
		return 1;
}

CMD:gotopos(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "Comando solo autorizado para Josh Hawes.");
	new Float:PosX, Float:PosY, Float:PosZ;
	if(sscanf(params, "fff", PosX, PosY, PosZ)) return SendClientMessage(playerid, ROJO_OSCURO, "Uso: /gotopos x, y, z");
	if(JugadorInfo[playerid][jAdmin] < 1) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        SetVehiclePos(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
		}
		else
		{
			SetPlayerPos(playerid, PosX, PosY, PosZ);
		}
		SendClientMessage(playerid, ROJO_OSCURO, "   Teleportado !");
		SetPlayerInterior(playerid,0);
	}
	return 1;
}

CMD:encarcelar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	new string[256];
	if(sscanf(params, "uis[128]", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /encarcelar [ID] [Tiempo] [Razón]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!PlayerToPoint(playerid, 20.0, 229.0191,-1096.6929,-90.5441)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona de control de la prisión.");
	if(!CercaJugador(20.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
    EncarcelarJugador(params[0]);
	format(string, sizeof(string), "* %s te ha arrestado en prisión %d minutos. Razón: %s", NombreJugador(playerid), params[1], params[2]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has arrestado a %s en prisión durante %d minutos. Razón: %s", NombreJugador(params[0]), params[1], params[2]);
	SendClientMessage(playerid, CELESTE, string);
	JugadorInfo[params[0]][jEncarcelado] = 9; JugadorInfo[params[0]][jTiempoEncarcelado] = params[1];
	return 1;
}

CMD:arrestar(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	new string[256];
	if(sscanf(params, "uiis[128]", params[0], params[1], params[2], params[3]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /arrestar [ID] [Celda] [Tiempo] [Razón]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!PlayerToPoint(playerid, 30, 197.6745,175.0370,1003.0359)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en las celdas de comisaría.");
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(params[1] < 1 || params[1] > 6) return SendClientMessage(playerid, ROJO_OSCURO, "* La celda debe ser un valor entre 1 y 6, ambos incluidos.");
	if(params[2] < 0 || params[2] > 90) return SendClientMessage(playerid, ROJO_OSCURO, "* El tiempo de celda debe ser un valor entre 0 y 90, ambos incluidos.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");

	format(string, sizeof(string), "* %s te ha metido en las celdas durante %d minutos. Razón: %s", NombreJugador(playerid), params[2], params[3]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has metido a %s en las celdas durante %d minutos. Razón: %s", NombreJugador(params[0]), params[2], params[3]);
	SendClientMessage(playerid, CELESTE, string);
	JugadorInfo[params[0]][jEncarcelado] = params[1]; JugadorInfo[params[0]][jTiempoEncarcelado] = params[2];
	return 1;
}

CMD:multar(playerid, params[])
{
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	new string[256];
	if(sscanf(params, "uis[128]", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /multar [ID] [Cantidad] [Razón]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(params[1] < 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El importe de la multa ha de ser mayor a 0 dólares.");
    if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");

	format(string, sizeof(string), "* %s te ha puesto una multa de $%d. Razón: %s", NombreJugador(playerid), params[1], params[2]);
	SendClientMessage(params[0], CELESTE, string);
	SendClientMessage(params[0], CELESTE, "* Usa '/aceptar' para aceptarla o '/rechazar' para rechazarla.");
	format(string, sizeof(string), "* Has añadido una multa de $%d a %s. Razón: %s", params[1], NombreJugador(params[0]), params[2]);
	SendClientMessage(playerid, CELESTE, string);
	Oferta[params[0]] = 2;
	OfertaCreador[params[0]] = playerid;
	OfertaCantidad[params[0]] = params[1];
	return 1;
}

CMD:ascensor(playerid, params[])
{
    if(JugadorInfo[playerid][jMiembro] == 1)
	{
	    if(!PlayerToPoint(playerid, 3, 225.6828,171.0226,1003.0378) && !PlayerToPoint(playerid, 3, 112.3020,1098.7228,527.4371) && !PlayerToPoint(playerid, 3, 1375.9490,-1679.7460,49.6591) && !PlayerToPoint(playerid, 3, 1377.4895,-1691.5547,6.2116)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el ascensor.");
	    new piso;
	    if(sscanf(params, "i", piso))
		{
		    SendClientMessage(playerid, NARANJA, "Uso: /ascensor [Planta]");
		    SendClientMessage(playerid, NARANJA, "Plantas disponibles: {FFFFFF}0 - Garaje | 1 - Comisaría | 2 - Azotea");
		    return 1;
		}
		if(piso == 0)
		{
		    if(PlayerToPoint(playerid, 3, 1377.4895,-1691.5547,6.2116)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en el garaje.");
		    SetPlayerPos(playerid, 1377.4895,-1691.5547,6.2116);
		    SetPlayerFacingAngle(playerid, 270);
		    SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
		else if(piso == 1)
		{
		    if(PlayerToPoint(playerid, 3, 225.6828,171.0226,1003.0378)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en la primera planta.");
		    SetPlayerPos(playerid, 225.6828,171.0226,1003.0378);
		    SetPlayerFacingAngle(playerid, 270);
		    SetPlayerInterior(playerid, 3); SetPlayerVirtualWorld(playerid, 1);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
		else if(piso == 2)
		{
		    if(PlayerToPoint(playerid, 3, 1375.9490,-1679.7460,49.6591)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en la azotea.");
		    SetPlayerPos(playerid, 1375.9490,-1679.7460,49.6591);
		    SetPlayerFacingAngle(playerid, 270);
		    SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
	}
	else if(JugadorInfo[playerid][jMiembro] == 2)
	{
	    if(!PlayerToPoint(playerid, 3, 1149.4419,-1309.1937,13.6982) && !PlayerToPoint(playerid, 3, 1169.7452,-1352.4379,-7.4613) && !PlayerToPoint(playerid, 3, 1167.2177,-1353.0588,-1.6512) && !PlayerToPoint(playerid, 3, 1161.1812,-1329.2528,31.4977)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el ascensor.");
	    new piso;
	    if(sscanf(params, "i", piso))
		{
		    SendClientMessage(playerid, NARANJA, "Uso: /ascensor {FFFFFF}[Planta]");
		    SendClientMessage(playerid, NARANJA, "Plantas disponibles: {FFFFFF}0 - Garaje | 1 - Planta 1 | 2 - Planta 2 | 3 - Azotea");
		    return 1;
		}
		if(piso == 0)
		{
		    if(PlayerToPoint(playerid, 3, 1149.4419,-1309.1937,13.6982)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en el garaje.");
		    SetPlayerPos(playerid, 1149.4419,-1309.1937,13.6982);
		    SetPlayerFacingAngle(playerid, 90);
		    SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
		else if(piso == 1)
		{
		    if(PlayerToPoint(playerid, 3, 1169.7452,-1352.4379,-7.4613)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en la planta 1.");
		    SetPlayerPos(playerid, 1169.7452,-1352.4379,-7.4613);
		    SetPlayerFacingAngle(playerid, 0);
		    SetPlayerInterior(playerid, 6); SetPlayerVirtualWorld(playerid, 6);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
		else if(piso == 2)
		{
		    if(PlayerToPoint(playerid, 3, 1167.2177,-1353.0588,-1.6512)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en la planta 2.");
		    SetPlayerPos(playerid, 1167.2177,-1353.0588,-1.6512);
		    SetPlayerFacingAngle(playerid, 0);
		    SetPlayerInterior(playerid, 6); SetPlayerVirtualWorld(playerid, 6);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
		else if(piso == 3)
		{
		    if(PlayerToPoint(playerid, 3, 1161.1812,-1329.2528,31.4977)) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás en la azotea.");
		    SetPlayerPos(playerid, 1161.1812,-1329.2528,31.4977);
		    SetPlayerFacingAngle(playerid, 0);
		    SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
			return 1;
		}
	}
	return 1;
}

CMD:taquillas(playerid, params[])
{
	if(PlayerToPoint(playerid, 3.0, 219.3259,185.2902,1003.0313))
	{
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
		new opcion[16], string[128];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, BLANCO, "{72B1FF}Uso: /taquillas [ {FFFFFF}Servicio | Uniforme | Equipo | Ropa {72B1FF}]");
			return 1;
		}
	    if(!strcmp(opcion, "servicio", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0)
	        {
				format(string, sizeof(string), "* %s coge su placa de las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 1;
	            SendClientMessage(playerid, CELESTE, "* Te has puesto de servicio. Si deseas colocarte un uniforme usa '/taquillas uniforme'.");
	            return 1;
	        }
	        else
	        {
	            format(string, sizeof(string), "* %s deja su placa en las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 0;
	            SetPlayerArmourEx(playerid, 0);
	            SendClientMessage(playerid, CELESTE, "* Ya no estás de servicio.");
	            return 1;
	        }
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "uniforme", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowModelSelectionMenu(playerid, uniformesapd, "Uniformes");
	        return 1;
	    }
	    else if(!strcmp(opcion, "equipo", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowPlayerDialog(playerid, EquipoPD, DIALOG_STYLE_LIST, "{FFFFFF}Equipo policial", "{FFFFFF}Porra de policía\nSpray de pimienta\nDesert Eagle\nChaleco\nTaser", "Aceptar","Cerrar");
            return 1;
	    }
	    else return SendClientMessage(playerid, BLANCO, "{72B1FF}Uso: /taquillas [ {FFFFFF}Servicio | Uniforme | Equipo | Ropa {72B1FF}]");
	}
	else if(PlayerToPoint(playerid, 3.0, 1168.5054,-1366.9495,-7.4641))
	{
	    if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres médico.");
		new opcion[16], string[128];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, BLANCO, "{72B1FF}Uso: /taquillas [ {FFFFFF}Servicio | Uniforme | Ropa {72B1FF}]");
			return 1;
		}
	    if(!strcmp(opcion, "servicio", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0)
	        {
				format(string, sizeof(string), "* %s coge su equipo básico de las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 1;
	            SendClientMessage(playerid, CELESTE, "* Te has puesto de servicio. Si deseas colocarte un uniforme usa '/taquillas uniforme'.");
	            return 1;
	        }
	        else
	        {
	            format(string, sizeof(string), "* %s deja su equipo básico en las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 0;
	            SendClientMessage(playerid, CELESTE, "* Ya no estás de servicio.");
	            return 1;
	        }
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "uniforme", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowModelSelectionMenu(playerid, uniformelsmd, "Uniformes");
	        return 1;
	    }
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Ropa ]");
	}
	else if(PlayerToPoint(playerid, 3.0, 995.4824,1003.2812,1001.5000))
	{
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres militar.");
		new opcion[16], string[128];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Ropa ]");
			return 1;
		}
	    if(!strcmp(opcion, "servicio", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0)
	        {
				format(string, sizeof(string), "* %s coge su equipo básico de las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 1;
	            SendClientMessage(playerid, CELESTE, "* Te has puesto de servicio. Si deseas colocarte un uniforme usa '/taquillas uniforme'.");
	            return 1;
	        }
	        else
	        {
	            format(string, sizeof(string), "* %s deja su equipo básico en las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 0;
	            SendClientMessage(playerid, CELESTE, "* Ya no estás de servicio.");
	            return 1;
	        }
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "uniforme", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowModelSelectionMenu(playerid, uniformegn, "Uniformes");
	        return 1;
	    }
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Ropa ]");
	}
	else if(PlayerToPoint(playerid, 3.0, -2505.6377,-640.9767,49.5459))
	{
	    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV.");
		new opcion[16];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Uniforme | Equipo | Ropa ]");
			return 1;
		}
	    if(!strcmp(opcion, "uniforme", true))
	    {
	        ShowModelSelectionMenu(playerid, uniformelsrtv, "Uniformes");
	        return 1;
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "equipo", true))
	    {
			DarObjeto(playerid, 43, 10, 10);
			return 1;
	    }
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Uniforme | Equipo | Ropa ]");
	}
	else if(PlayerToPoint(playerid, 3.0, 364.2622,196.0245,1019.9844))
	{
	    if(JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces al gobierno.");
		new opcion[16], string[128];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Ropa ]");
			return 1;
		}
		if(!strcmp(opcion, "servicio", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0)
	        {
				format(string, sizeof(string), "* %s coge su equipo básico de las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 1;
	            SendClientMessage(playerid, CELESTE, "* Te has puesto de servicio. Si deseas colocarte un uniforme usa '/taquillas uniforme'.");
	            return 1;
	        }
	        else
	        {
	            format(string, sizeof(string), "* %s deja su equipo básico en las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 0;
	            SendClientMessage(playerid, CELESTE, "* Ya no estás de servicio.");
	            return 1;
	        }
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "uniforme", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowModelSelectionMenu(playerid, uniformegob, "Uniformes");
	        return 1;
	    }
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Ropa ]");
	}
	else if(PlayerToPoint(playerid, 3.0, -1825.0851,123.1737,-18.5041))
	{
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSFD.");
		new opcion[16], string[128];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Servicio | Uniforme | Equipo | Ropa ]");
			return 1;
		}
		if(!strcmp(opcion, "servicio", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0)
	        {
				format(string, sizeof(string), "* %s coge su equipo básico de las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 1;
	            BomberosOnline ++;
	            SendClientMessage(playerid, CELESTE, "* Te has puesto de servicio. Si deseas colocarte un uniforme usa '/taquillas uniforme'.");
	            return 1;
	        }
	        else
	        {
	            format(string, sizeof(string), "* %s deja su equipo básico en las taquillas.", NombreJugador(playerid));
				ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            JugadorInfo[playerid][jServicio] = 0;
	            BomberosOnline --;
	            SendClientMessage(playerid, CELESTE, "* Ya no estás de servicio.");
	            return 1;
	        }
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
	        SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
	        return 1;
	    }
	    else if(!strcmp(opcion, "uniforme", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
	        ShowModelSelectionMenu(playerid, uniformelsfd, "Uniformes");
	        return 1;
	    }
	    else if(!strcmp(opcion, "equipo", true))
	    {
	        if(JugadorInfo[playerid][jServicio] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás de servicio.");
			ShowPlayerDialog(playerid, EquipoLSFD, DIALOG_STYLE_LIST, "{FFFFFF}Taquillas - {00FFFF}LSFD", "{FFFFFF}Extintor\nPalanca", "Equipar", "Cancelar");
			return 1;
		}
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Uniforme | Equipo | Ropa ]");
	}
	else if(PlayerToPoint(playerid, 3.0, 756.5430,5.6205,1000.6993))
	{
	    new opcion[16];
		if(sscanf(params, "s[16]", opcion))
		{
			SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Ropa | Deportiva ]");
			return 1;
		}
	    if(!strcmp(opcion, "deportiva", true))
	    {
	        SendClientMessage(playerid, ROJO_OSCURO, "Esta función ha sido deshabilitada temporalmente");
	        //ShowModelSelectionMenu(playerid, ropagym, "Ropa deportiva");
	        return 1;
	    }
	    else if(!strcmp(opcion, "ropa", true))
	    {
			new string[128];
			format(string, sizeof(string), "* %s coge su ropa de calle de las taquillas y se la coloca.", NombreJugador(playerid));
			ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			SetPlayerSkin(playerid, JugadorInfo[playerid][jRopa]);
			return 1;
	    }
	    else return SendClientMessage(playerid, GRIS, "Uso: /taquillas [ Uniforme | Equipo ]");
	}
	else return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna taquilla.");
}

CMD:darrango(playerid, params[])
{
    if(JugadorInfo[playerid][jLider] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres lider de ninguna facción.");
	new string[256];
    if(sscanf(params, "ui", params[0], params[1]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /despedir [ID] [Rango (1 - 8)]");
		return 1;
	}
	if(params[1] < 1 || params[1] > 8) return SendClientMessage(playerid, ROJO_OSCURO, "* Los rangos han de estar entre 1 y 8.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	//if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[params[0]][jMiembro] != JugadorInfo[playerid][jLider]) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no pertenece a tu facción.");
	format(string, sizeof(string), "* %s te ha dado el rango %s.", NombreJugador(playerid), ObtenerRango(JugadorInfo[playerid][jLider], params[1]));
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has dado el rango %s a %s.", ObtenerRango(JugadorInfo[playerid][jLider], params[1]), NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	JugadorInfo[params[0]][jRango] = params[1];
	return 1;
}

CMD:despedir(playerid, params[])
{
    if(JugadorInfo[playerid][jLider] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres lider de ninguna facción.");
	new string[256];
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /despedir [ID]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");
	if(JugadorInfo[params[0]][jMiembro] != JugadorInfo[playerid][jLider]) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no pertenece a tu facción.");
	format(string, sizeof(string), "* Has sido expulsado de la facción %s por %s.", FaccionInfo[JugadorInfo[playerid][jLider]][fNombre], NombreJugador(playerid));
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has expulsado a %s de la facción.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	JugadorInfo[params[0]][jMiembro] = 0; JugadorInfo[params[0]][jRango] = 0;
	return 1;
}

CMD:rechazar(playerid, params[])
{
    if(Oferta[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna oferta para rechazar.");

	else if(Oferta[playerid] == 1)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado el contrato laboral.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado el contrato laboral que te ofreció %s.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 2)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado la multa.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado la multa que te ofreció %s.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 3)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado el desbloqueo del vehículo.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado el desbloqueo del vehículo.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 4)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado la entrevista.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado la entrevista.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 5)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado la factura.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado la factura.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 6)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado el teléfono móvil.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado el teléfono móvil.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 7)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
	    format(string, sizeof(string), "* %s ha rechazado el coche.", NombreJugador(playerid));
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has rechazado el coche.", NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	return 1;
}

CMD:aceptar(playerid, params[])
{
	if(Oferta[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna oferta para aceptar.");

	else if(Oferta[playerid] == 1)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
		JugadorInfo[playerid][jMiembro] = OfertaCantidad[playerid];
		JugadorInfo[playerid][jRango] = 1;
	    format(string, sizeof(string), "* %s ha aceptado el contrato laboral. Ahora forma parte de %s.", NombreJugador(playerid), FaccionInfo[OfertaCantidad[playerid]][fNombre]);
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has aceptado el contrato laboral. Ahora formas parte de %s con el rango %s.", FaccionInfo[OfertaCantidad[playerid]][fNombre], FaccionInfo[OfertaCantidad[playerid]][fRango1]);
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 2)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128], sql[128];
		CajasFuerte[0] += OfertaCantidad[playerid];
		format(sql, sizeof(sql), "UPDATE varios SET CajaGobierno = %d WHERE id = 1", CajasFuerte[0]);
		mysql_query(database, sql, false);
		JugadorInfo[playerid][jDinero] -= OfertaCantidad[playerid];
	    format(string, sizeof(string), "* %s ha pagado la multa de $%d.", NombreJugador(playerid), OfertaCantidad[playerid]);
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has pagado la multa de $%d.", OfertaCantidad[playerid]);
		SendClientMessage(playerid, CELESTE, string);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 3)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");
		if(OfertaPrecio[playerid] > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");

		new string[128];
		JugadorInfo[playerid][jDinero] -= OfertaPrecio[playerid];
		AutoInfo[OfertaCantidad[playerid]][aBloqueado] = 0;
	    format(string, sizeof(string), "* %s ha pagado el desbloqueo del vehículo LS-%d.", NombreJugador(playerid), AutoInfo[OfertaCantidad[playerid]][aID]);
	    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
	    format(string, sizeof(string), "* Has pagado el desbloqueo del vehículo LS-%d.", AutoInfo[OfertaCantidad[playerid]][aID]);
		SendClientMessage(playerid, CELESTE, string);
		ActualizarVeh(OfertaCantidad[playerid]);
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 4)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");

		new string[128];
		Entrevistando[playerid] = OfertaCreador[playerid];
		Entrevistando[OfertaCreador[playerid]] = playerid;
		SendClientMessage(playerid, CELESTE, "* Ahora estás en directo en LSRTV, todo lo que escribas saldrá en directo.");
		format(string, sizeof(string), "* %s aceptó la entrevista. Todo lo que escriban saldrá en directo.");
		SendClientMessage(OfertaCreador[playerid], CELESTE, string);
		SendClientMessage(OfertaCreador[playerid], CELESTE, "* Para terminar la entrevista, usa '/entrevistar'.");
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 5)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");
		if(OfertaCantidad[playerid] > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");

		new string[128];
		for(new i = 0; i < TotalTalleres; i++)
		{
			if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
		    {
		        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nDinero] += ((OfertaCantidad[playerid]*70) / 100);
		        JugadorInfo[OfertaCreador[playerid]][jDinero] += ((OfertaCantidad[playerid]*30) / 100);
				JugadorInfo[playerid][jDinero] -= OfertaCantidad[playerid];
			    format(string, sizeof(string), "* %s ha pagado la factura de $%d.", NombreJugador(playerid), OfertaCantidad[playerid]);
			    SendClientMessage(OfertaCreador[playerid], CELESTE, string);
			    format(string, sizeof(string), "* Has pagado la factura de $%d.", OfertaCantidad[playerid]);
				SendClientMessage(playerid, CELESTE, string);
				Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
				return 1;
		    }
		}
	}
	else if(Oferta[playerid] == 6)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");
		if(OfertaPrecio[playerid] > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
		if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacía.");
		DarObjeto(playerid, 104, OfertaCantidad[playerid], 1);
		new string[128];
		format(string, sizeof(string), "* %s te ha pagado $%d por un teléfono móvil.", NombreJugador(playerid), OfertaPrecio[playerid]);
		SendClientMessage(OfertaCreador[playerid], CELESTE, string);
		format(string, sizeof(string), "* Has pagado $%d a %s por el teléfono móvil.", OfertaPrecio[playerid], NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		JugadorInfo[playerid][jDinero] -= OfertaPrecio[playerid];
		JugadorInfo[OfertaCreador[playerid]][jDinero] += OfertaPrecio[playerid];
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	else if(Oferta[playerid] == 7)
	{
	    if(!CercaJugador(5.0, playerid, OfertaCreador[playerid])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador que realizó la oferta.");
		if(OfertaPrecio[playerid] > JugadorInfo[playerid][jDinero]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
		if(JugadorInfo[playerid][jCoches][0] != NOEXISTE && JugadorInfo[playerid][jCoches][1] != NOEXISTE && JugadorInfo[playerid][jCoches][2] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes todos los espacios de vehículos ocupados.");
		if(JugadorInfo[playerid][jCoches][0] == NOEXISTE) JugadorInfo[playerid][jCoches][0] = JugadorInfo[OfertaCreador[playerid]][jCoches][OfertaCantidad[playerid]];
		else if(JugadorInfo[playerid][jCoches][1] == NOEXISTE) JugadorInfo[playerid][jCoches][1] = JugadorInfo[OfertaCreador[playerid]][jCoches][OfertaCantidad[playerid]];
		else if(JugadorInfo[playerid][jCoches][2] == NOEXISTE) JugadorInfo[playerid][jCoches][2] = JugadorInfo[OfertaCreador[playerid]][jCoches][OfertaCantidad[playerid]];
        JugadorInfo[OfertaCreador[playerid]][jCoches][OfertaCantidad[playerid]] = NOEXISTE;
		new string[128];
		format(string, sizeof(string), "* %s te ha pagado %d dólares por tu coche.", NombreJugador(playerid), OfertaPrecio[playerid]);
		SendClientMessage(OfertaCreador[playerid], CELESTE, string);
		format(string, sizeof(string), "* Has pagado %d dólares a %s por su coche.", OfertaPrecio[playerid], NombreJugador(OfertaCreador[playerid]));
		SendClientMessage(playerid, CELESTE, string);
		JugadorInfo[playerid][jDinero] -= OfertaPrecio[playerid];
		JugadorInfo[OfertaCreador[playerid]][jDinero] += OfertaPrecio[playerid];
		Oferta[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCreador[playerid] = NOEXISTE;
		return 1;
	}
	return 1;
}

CMD:contratar(playerid, params[])
{
	if(JugadorInfo[playerid][jLider] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres lider de ninguna facción.");
	new string[256];
    if(sscanf(params, "u", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /contratar [ID]");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	if(JugadorInfo[params[0]][jMiembro] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador ya pertenece a una facción.");
	if(!CercaJugador(5.0, playerid, params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca del jugador.");

	format(string, sizeof(string), "* %s te ha invitado a formar parte de la facción %s. Usa '/aceptar' para unirte o '/rechazar' para rechazarla.", NombreJugador(playerid), FaccionInfo[JugadorInfo[playerid][jMiembro]][fNombre]);
	SendClientMessage(params[0], CELESTE, string);
	format(string, sizeof(string), "* Has invitado a %s a unirse a tu facción.", NombreJugador(params[0]));
	SendClientMessage(playerid, CELESTE, string);
	Oferta[params[0]] = 1;
	OfertaCreador[params[0]] = playerid;
	OfertaCantidad[params[0]] = JugadorInfo[playerid][jLider];
	return 1;
}

CMD:hacerlider(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);

    new string[128];
    if(sscanf(params, "ui", params[0], params[1]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /hacerlider [ID] [Facción]");
		SendClientMessage(playerid, GRIS, "Facciones disponibles: Usa '/verfacciones' para ver un listado de ellas.");
		return 1;
	}
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);

	if(JugadorInfo[params[0]][jLider] != params[1])
	{
	    new sql[256];
		format(FaccionInfo[JugadorInfo[params[0]][jLider]][fLider], MAX_PLAYER_NAME, "Nadie");
		format(sql, sizeof(sql), "UPDATE facciones SET `Lider` = '0' WHERE `id` = '%d'", JugadorInfo[params[0]][jLider]);
		mysql_query(database, sql, false);
	}

	JugadorInfo[params[0]][jLider] = 1;
	JugadorInfo[params[0]][jMiembro] = params[1];

	if(params[1] != 0)
	{
	    format(FaccionInfo[params[1]][fLider], MAX_PLAYER_NAME, "%s", NombreJugador(params[0]));
		JugadorInfo[params[0]][jRango] = 6;
		format(string, sizeof(string), "* %s te ha dado el liderazgo de la facción %s.", NombreJugador(playerid), FaccionInfo[params[1]][fNombre]);
		SendClientMessage(params[0], CELESTE, string);
		format(string, sizeof(string), "* Has dado a %s el liderazgo de la facción %s.", NombreJugador(params[0]), FaccionInfo[params[1]][fNombre]);
		SendClientMessage(playerid, CELESTE, string);
		new sql[256];
		format(sql, sizeof(sql), "UPDATE facciones SET `Lider` = '%d' WHERE `id` = '%d'", JugadorInfo[params[0]][jSQLID], NombreJugador(params[0]), params[1]);
		mysql_query(database, sql, false);
	}
    else
	{
		JugadorInfo[params[0]][jRango] = 0;
		JugadorInfo[params[0]][jLider] = 0;
		format(string, sizeof(string), "* %s te ha quitado de tu facción, ahora serás un civil.", NombreJugador(playerid));
		SendClientMessage(params[0], CELESTE, string);
		format(string, sizeof(string), "* Has quitado el liderazgo de facción a %s, ahora será un civil.", NombreJugador(params[0]));
		SendClientMessage(playerid, CELESTE, string);
	}
	return 1;
}

CMD:verfacciones(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 2) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);

	new dialog[2048], string[256];
	for(new i = 0; i < TotalFacciones; i ++)
	{
	    if(i == 0)
	    {
	        format(dialog,sizeof(dialog),"{FFFFFF}Información sobre las facciones activas en la comunidad "NOMBRE_COMUNIDAD".\n\n\t# ID Facción: {00FFFF}%d{FFFFFF}.\n\t# Nombre facción: {00FFFF}%s{FFFFFF}.\n\t# Lider facción: {00FFFF}%s{FFFFFF}.", FaccionInfo[i][fID], FaccionInfo[i][fNombre], FaccionInfo[i][fLider]);
			continue;
		}

	    format(string,sizeof(string),"\n\t----------------------------------------------------------------------------------\n\t# ID Facción: {00FFFF}%d{FFFFFF}.\n\t# Nombre facción: {00FFFF}%s{FFFFFF}.\n\t# Lider facción: {00FFFF}%s{FFFFFF}.", FaccionInfo[i][fID], FaccionInfo[i][fNombre], FaccionInfo[i][fLider]);
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Información de facciones", dialog, "Cerrar", "");
	return 1;
}

CMD:editarfaccion(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new id, opcion[30], opcion2[50], cantidad, string[128];
	if(sscanf(params, "is[30]S()[50]I(-1)", id, opcion, opcion2, cantidad))
	{
		SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Nombre, Rango[1-6], Sueldo[1-6], Lider");
		return 1;
	}
	if(strcmp(opcion, "nombre", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] nombre [ Nombre ]");
	    format(FaccionInfo[id][fNombre], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó la facción %d al nombre %s.", NombreJugador(playerid), id, opcion2);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "lider", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] lider [ Nombre ]");
	    format(FaccionInfo[id][fLider], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó el lider de la facción %d al nombre %s.", NombreJugador(playerid), id, opcion2);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo1", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo1 [ Cantidad ]");
	    FaccionInfo[id][fSueldo1] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo2", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo2 [ Cantidad ]");
	    FaccionInfo[id][fSueldo2] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo3", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo3 [ Cantidad ]");
	    FaccionInfo[id][fSueldo3] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo4", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo4 [ Cantidad ]");
	    FaccionInfo[id][fSueldo4] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo5", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo5 [ Cantidad ]");
	    FaccionInfo[id][fSueldo5] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "sueldo6", true) == 0)
	{
	    if(sscanf(params, "is[30]i", id, opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] sueldo6 [ Cantidad ]");
	    FaccionInfo[id][fSueldo6] = cantidad;
	    format(string, sizeof(string), "Administración: %s editó los sueldos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango1", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango1 [ Nombre ]");
	    format(FaccionInfo[id][fRango1], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango2", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango2 [ Nombre ]");
	    format(FaccionInfo[id][fRango2], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango3", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango3 [ Nombre ]");
	    format(FaccionInfo[id][fRango3], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango4", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango4 [ Nombre ]");
	    format(FaccionInfo[id][fRango4], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango5", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango5 [ Nombre ]");
	    format(FaccionInfo[id][fRango5], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango6", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango6 [ Nombre ]");
	    format(FaccionInfo[id][fRango6], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango7", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango7 [ Nombre ]");
	    format(FaccionInfo[id][fRango7], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else if(strcmp(opcion, "rango8", true) == 0)
	{
	    if(sscanf(params, "is[30]s[50]", id, opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [ID] rango8 [ Nombre ]");
	    format(FaccionInfo[id][fRango8], 50, opcion2);
	    format(string, sizeof(string), "Administración: %s editó los rangos de la facción %d.", NombreJugador(playerid), id);
		ABroadCast(ROJO, string, 1);
		GuardarFaccion(id);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarfaccion [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Nombre, Rango[1-8], Sueldo[1-8]");
	}
	return 1;
}

CMD:crearfaccion(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new nombre[50];
	if(sscanf(params, "s[50]", nombre))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /crearfaccion [ Nombre ]");
	    return 1;
	}
	new sql[80], row[256], id;

	format(sql, 80, "INSERT INTO facciones (`Nombre`) VALUES ('%s')", nombre);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "SELECT MAX(id) FROM facciones");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
	id = strval(row);

	FaccionInfo[TotalFacciones][fID] = id;
	format(FaccionInfo[TotalFacciones][fNombre], 50, nombre);
	format(FaccionInfo[TotalFacciones][fLider], 50, "Nadie");
	format(FaccionInfo[TotalFacciones][fRango1], 50, "Sin nombre (1)");
	format(FaccionInfo[TotalFacciones][fRango2], 50, "Sin nombre (2)");
	format(FaccionInfo[TotalFacciones][fRango3], 50, "Sin nombre (3)");
	format(FaccionInfo[TotalFacciones][fRango4], 50, "Sin nombre (4)");
	format(FaccionInfo[TotalFacciones][fRango5], 50, "Sin nombre (5)");
	format(FaccionInfo[TotalFacciones][fRango6], 50, "Sin nombre (6)");
	format(FaccionInfo[TotalFacciones][fRango7], 50, "Sin nombre (7)");
	format(FaccionInfo[TotalFacciones][fRango8], 50, "Sin nombre (8)");
	FaccionInfo[TotalFacciones][fSueldo1] = 50;
	FaccionInfo[TotalFacciones][fSueldo2] = 50;
	FaccionInfo[TotalFacciones][fSueldo3] = 50;
	FaccionInfo[TotalFacciones][fSueldo4] = 50;
	FaccionInfo[TotalFacciones][fSueldo5] = 50;
	FaccionInfo[TotalFacciones][fSueldo6] = 50;
	FaccionInfo[TotalFacciones][fSueldo7] = 50;
	FaccionInfo[TotalFacciones][fSueldo8] = 50;
	GuardarFaccion(TotalFacciones);
    TotalFacciones++;
    new string[128];
    format(string,sizeof(string),"* Facción %s (ID: %d) creada", nombre, id);
    SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:neg(playerid, params[])
{
    new opcion[32], opcion2, opcion3[128], string[128];
    if(sscanf(params, "s[32]S()[128]I(-1)", opcion, opcion3, opcion2))
	{
	    SendClientMessage(playerid, AMARILLO, "Uso: {FFFFFF}/neg [Opción]");
	    SendClientMessage(playerid, NARANJA, "Opciones disponible: {FFFFFF}Abrir - Nombre - Retirar - Guardar - Informacion - Musica - Pedido");
	    return 1;
	}
	if(strcmp(opcion, "abrir", true) == 0)
    {
        for(new h = 0; h < sizeof(NegocioInfo); h++)
        {
            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
        	{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
					if(NegocioInfo[h][nCerrada] == 0)
					{
					    NegocioInfo[h][nCerrada] = 1;
						GuardarNegocio(h);
						UpdateTextoNeg(h);
						GameTextForPlayer(playerid, "~w~¡Negocio ~r~cerrado~w~!", 3000, 6);
						return 1;
					}
					else if(NegocioInfo[h][nCerrada] == 1)
					{
					    NegocioInfo[h][nCerrada] = 0;
						GuardarNegocio(h);
						UpdateTextoNeg(h);
						GameTextForPlayer(playerid, "~w~¡Negocio ~g~abierto~w~!", 3000, 6);
						return 1;
					}
				}
				else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
        	}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
    }
    else if(strcmp(opcion, "nombre", true) == 0)
    {
        if(sscanf(params, "s[32]s[128]", opcion, opcion3)) return SendClientMessage(playerid, GRIS, "Uso: /neg nombre [ Nombre ]");
        for(new h = 0; h < sizeof(NegocioInfo); h++)
        {
            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
        	{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
		    	    format(string, sizeof(string), "* Has cambiado el nombre al negocio, ahora se llama '%s'.", opcion3);
		    	    SendClientMessage(playerid, CELESTE, string);
		    	    format(NegocioInfo[h][nNombre], 128, opcion3);
		    	    GuardarNegocio(h);
		    	    return 1;
				}
		    	else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
    }
    else if(strcmp(opcion, "pedido", true) == 0)
    {
        if(sscanf(params, "s[32]s[40]I(-1)", opcion, opcion3, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /neg pedido [ Solidos ($3/cu) | Liquidos ($2/cu) ] [ Cantidad ]");
        if(strcmp(opcion3, "solidos", true) == 0)
        {
            if(sscanf(params, "s[32]s[40]i", opcion, opcion3, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /neg pedido solidos [ Cantidad ]");
            for(new h = 0; h < sizeof(NegocioInfo); h++)
	        {
	            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
	        	{
				    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
			    	{
			    	    format(string, sizeof(string), "* Has comprado %d productos sólidos por %d dólares.", opcion2, (opcion2 * 3));
			    	    SendClientMessage(playerid, CELESTE, string);
			    	    SendClientMessage(playerid, CELESTE, "* El pedido llegará en unos 25 minutos, tenga espacio en el almacén para agilizar la descarga.");
			    	    SetTimerEx("RellenarSolidos", (60000*25), 0, "dd", h, opcion2);
			    	    return 1;
					}
			    	else
				    {
				        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
						return 1;
				    }
				}
			}
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
			return 1;
        }
        else if(strcmp(opcion3, "liquidos", true) == 0)
        {
            if(sscanf(params, "s[32]s[40]i", opcion, opcion3, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /neg pedido liquidos [ Cantidad ]");
            for(new h = 0; h < sizeof(NegocioInfo); h++)
	        {
	            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
	        	{
				    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
			    	{
			    	    format(string, sizeof(string), "* Has comprado %d productos líquidos por %d dólares.", opcion2, (opcion2 * 2));
			    	    SendClientMessage(playerid, CELESTE, string);
			    	    SendClientMessage(playerid, CELESTE, "* El pedido llegará en unos 25 minutos, tenga espacio en el almacén para agilizar la descarga.");
			    	    SetTimerEx("RellenarLiquidos", (60000*25), 0, "dd", h, opcion2);
			    	    return 1;
					}
			    	else
				    {
				        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
						return 1;
				    }
				}
			}
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
			return 1;
        }
        else
        {
            SendClientMessage(playerid, GRIS, "Uso: /neg pedido [ Solidos | Liquidos ] [ Cantidad ]");
        }
        return 1;
	}
    else if(strcmp(opcion, "informacion", true) == 0)
    {
        for(new h = 0; h < sizeof(NegocioInfo); h++)
        {
            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
        	{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
		    	    new string2[258];
				    format(string2,sizeof(string2),"{FFFFFF}Número del local:\t{00FFFF}%d{FFFFFF}\nNombre del local:\t{00FFFF}%s{FFFFFF}\n{FFFFFF}Propietario del local:\t{00FFFF}%s\n{FFFFFF}Productos líquidos:\t{00FFFF}%d\n{FFFFFF}Productos sólidos:\t{00FFFF}%d",NegocioInfo[h][nID],NegocioInfo[h][nNombre],NegocioInfo[h][nComprador],NegocioInfo[h][nProdSolidos],NegocioInfo[h][nProdLiquidos]);
				    ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Información negocio", string2, "Cerrar", "");
				    return 1;
				}
				else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
    }
    else if(strcmp(opcion, "guardar", true) == 0)
    {
        if(sscanf(params, "s[9]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /neg guardar [ Cantidad ]");
        for(new h = 0; h < sizeof(NegocioInfo); h++)
		{
	       	if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
			{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
				    if(JugadorInfo[playerid][jDinero] >= opcion2)
					{
					    if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
						JugadorInfo[playerid][jDinero] -= opcion2;
						NegocioInfo[h][nDinero] += opcion2;
						format(string, sizeof(string), "* Has guardado %d dólares en la caja fuerte. Ahora quedan %d dólares.", opcion2, NegocioInfo[h][nDinero]);
						SendClientMessage(playerid, CELESTE, string);
						GuardarNegocio(h);
						return 1;
					}
					else
				    {
				        SendClientMessage(playerid, ROJO_OSCURO, "* No tienes esa cantidad de dinero en mano.");
						return 1;
				    }
				}
				else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
    }
    else if(strcmp(opcion, "retirar", true) == 0)
    {
        if(sscanf(params, "s[9]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /neg retirar [ Cantidad ]");
        for(new h = 0; h < sizeof(NegocioInfo); h++)
		{
	       	if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
			{
                if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
				    if(NegocioInfo[h][nDinero] >= opcion2)
					{
					    if(opcion2 < 0) return SendClientMessage(playerid, ROJO_OSCURO, "* La cantidad tiene que ser mayor que 0 dólares.");
						JugadorInfo[playerid][jDinero] += opcion2;
						NegocioInfo[h][nDinero] -= opcion2;
						format(string, sizeof(string), "* Has sacado %d dólares en la caja fuerte. Ahora quedan %d dólares.", opcion2, NegocioInfo[h][nDinero]);
						SendClientMessage(playerid, CELESTE, string);
						GuardarNegocio(h);
						return 1;
					}
					else
				    {
				        SendClientMessage(playerid, ROJO_OSCURO, "* No hay esa cantidad en la caja fuerte.");
						return 1;
				    }
				}
				else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
    }
    else if(strcmp(opcion, "musica", true) == 0)
    {
        for(new h = 0; h < sizeof(NegocioInfo); h++)
		{
		    if(PlayerToPoint(playerid, 15.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]) && GetPlayerVirtualWorld(playerid) == h)
			{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
	     		{
				    ShowPlayerDialog(playerid, Musica, DIALOG_STYLE_LIST, "{FFFFFF}Seleccionar música",
					"Apagar\n60's\n70's\n80's\n90's\nBlues\nCountry\nDance\nDisco\nDubstep\nFunk\nHardcore\nHardstyle\nHouse\nJazz\nProgressive\nR&B\nBlackbeats FM\nRap Old School\nReggae\nReggaeton\nRock\nSalsa\nSoul\nTechno\nTrance", "Sintonizar", "Cerrar");
			        return 1;
                }
			    else
				{
				    SendClientMessage(playerid, ROJO_OSCURO, "* No eres el dueño de este negocio.");
				    return 1;
				}
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el interior de un negocio.");
	    return 1;
    }
    else
    {
        SendClientMessage(playerid, GRIS, "Uso: /neg [Opción]");
	    SendClientMessage(playerid, GRIS, "Opciones disponible: Abrir - Nombre - Retirar - Guardar - Informacion - Musica - Pedido");
    }
	return 1;
}

CMD:editarmenu(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	//ShowPlayerDialog(playerid, EDITNEG, DIALOG_STYLE_LIST, "{FFFFFF}Editar negocio", "Precio\nInterior\nNombre\nEstado", "Siguiente", "Cancelar");
	new opcion[32], opcion2, opcion3[40], string[128];
    if(sscanf(params, "s[32]I(-1)S()[40]", opcion, opcion2, opcion3))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarmenu [Opción] [Valor]");
	    SendClientMessage(playerid, GRIS, "Opciones disponible: Tipo - Negocio - Ver - Eliminar");
	    return 1;
	}
	if(strcmp(opcion, "ver", true) == 0)
	{
	    ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{00FFFF}Tipos de menu", "{FFFFFF}Los tipos de menu disponibles en el servidor son:\n\n1 Deportes | 2 Binco | 3 DS | 4 ZIP | 5 SubUrban | 6 Victim | 7 Ferretería\n8 24/7 | 9 Pizzería | 10 Clukin | 11 Burger | 12 Bar | 13 Armería | 14 Estanco\n15 Gasolinera | 16 Farmacia | 17 Italiano | 18 Chino | 19 Japonés | 20 Mexicano | 21 SexShop | 22 Electrónica", "Cerrar", "");
	}
	else if(strcmp(opcion, "negocio", true) == 0)
    {
        if(sscanf(params, "s[9]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarmenu negocio [ID]");
        for(new i = 0; i < sizeof(MenuInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, MenuInfo[i][mx], MenuInfo[i][my], MenuInfo[i][mz]))
        	{
        	    MenuInfo[i][mNegocio] = opcion2;
        	    SendClientMessage(playerid, CELESTE, "* Has editado el menu.");
             	GuardarMenu(i);
				UpdateTextoMenu(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un menu.");
		return 1;
	}
	else if(strcmp(opcion, "tipo", true) == 0)
    {
        if(sscanf(params, "s[9]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarmenu tipo [ID]");
        for(new i = 0; i < sizeof(MenuInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, MenuInfo[i][mx], MenuInfo[i][my], MenuInfo[i][mz]))
        	{
        	    MenuInfo[i][mTipo] = opcion2;
        	    SendClientMessage(playerid, CELESTE, "* Has editado el menu.");
             	GuardarMenu(i);
				UpdateTextoMenu(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un menu.");
		return 1;
	}
	else if(strcmp(opcion, "eliminar", true) == 0)
	{
	    for(new i = 0; i < sizeof(MenuInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, MenuInfo[i][mx], MenuInfo[i][my], MenuInfo[i][mz]))
        	{
        	    new sql[128];
			    format(sql, 128, "DELETE FROM negocios WHERE `ID` = '%d'", MenuInfo[i][mID]);
			    mysql_query(database, sql, false);
			    MenuInfo[i][mx] = NOEXISTE; MenuInfo[i][my] = NOEXISTE; MenuInfo[i][mz] = NOEXISTE;
			    DestroyDynamicPickup(MenuInfo[i][mPickup]);
			    DestroyDynamic3DTextLabel(MenuInfo[i][mTexto]);
        	    format(string, sizeof(string), "Administración: %s eliminó el menu %d.", NombreJugador(playerid), MenuInfo[i][mID]);
				ABroadCast(ROJO, string, 1);
             	GuardarMenu(i);
				UpdateTextoMenu(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un menu.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarmenu [Opción] [Valor]");
	    SendClientMessage(playerid, GRIS, "Opciones disponible: Tipo - Negocio - Ver - Eliminar");
	}
	return 1;
}

CMD:crearmenu(playerid, params[])
{
    new sql[80], row[256], string[256], id;
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(sscanf(params, "i", params[0]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /crearmenu [ID]");
	    return 1;
	}
	format(sql, 80, "INSERT INTO menus (Tipo) VALUES (1)");
	mysql_query(database, sql, false);
	format(sql, sizeof(sql), "SELECT MAX(id) FROM menus");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);

	id = strval(row);
	MenuInfo[TotalMenus][mID] = id;

	new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
	GetPlayerPos(playerid, X[playerid],Y[playerid],Z[playerid]);
	MenuInfo[TotalMenus][mx] = X[playerid];
	MenuInfo[TotalMenus][my] = Y[playerid];
	MenuInfo[TotalMenus][mz] = Z[playerid];
    MenuInfo[TotalMenus][mint] = GetPlayerInterior(playerid);
    MenuInfo[TotalMenus][mvw] = GetPlayerVirtualWorld(playerid);
    MenuInfo[TotalMenus][mTipo] = 1;
    MenuInfo[TotalMenus][mNegocio] = params[0];
	GuardarMenu(TotalMenus);

	MenuInfo[TotalMenus][mPickup] = CreateDynamicPickup(1239, 1, X[playerid], Y[playerid], Z[playerid], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	MenuInfo[TotalMenus][mTexto] = CreateDynamic3DTextLabel("", VERDE, MenuInfo[TotalMenus][mx], MenuInfo[TotalMenus][my], MenuInfo[TotalMenus][mz], 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, MenuInfo[TotalMenus][mvw], MenuInfo[TotalMenus][mint], -1, 100.0);
	UpdateTextoMenu(TotalMenus);
	TotalMenus++;
 	format(string, sizeof(string), "* Menu %d creado.", TotalMenus);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:editarneg(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	//ShowPlayerDialog(playerid, EDITNEG, DIALOG_STYLE_LIST, "{FFFFFF}Editar negocio", "Precio\nInterior\nNombre\nEstado", "Siguiente", "Cancelar");
	new opcion[128], opcion2, opcion3[128], string[128];
    if(sscanf(params, "s[128]I(-1)S()[40]", opcion, opcion2, opcion3))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarneg [Opción] [Valor]");
	    SendClientMessage(playerid, GRIS, "Opciones disponible: Interior - Interiores - Precio - Nombre - Abierto - Prodliq - Prodsol - Eliminar");
	    return 1;
	}
	if(strcmp(opcion, "interiores", true) == 0)
	{
	    SendClientMessage(playerid, AMARILLO, "__| Interiores de negocios |__");
		SendClientMessage(playerid, BLANCO, "0) Sin interior | 1) Interior oficina | 2) Bar billard | 3) Estudio radio | 4) Bar karaoke | 5) Estanco");
		SendClientMessage(playerid, BLANCO, "6) Electrónica | 7) Farmacia | 8) Rest. Lujo | 9) Rest. Lujo 2 | 10) Discoteca 1 | 11) Ferretería peq.");
		SendClientMessage(playerid, BLANCO, "12) Bar madera | 13) Teatro | 14-17) Comida rápida | 18) Armería | 19-24) Ropa | 25) Bar pobre");
		SendClientMessage(playerid, BLANCO, "26) Botellas verdes | 27) Ferretería grande | 28) Ferretería grande | 29) Sexshop | 30) 24/7");
	    return 1;
	}
	else if(strcmp(opcion, "eliminar", true) == 0)
    {
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    new sql[128];
			    format(sql, 128, "DELETE FROM negocios WHERE `ID` = '%d'", NegocioInfo[i][nID]);
			    mysql_query(database, sql, false);
			    NegocioInfo[i][nEX] = NOEXISTE; NegocioInfo[i][nEY] = NOEXISTE; NegocioInfo[i][nEZ] = NOEXISTE;
			    DestroyDynamicPickup(NegocioInfo[i][nPickup]);
			    DestroyDynamic3DTextLabel(NegocioInfo[i][nTexto]);
        	    format(string, sizeof(string), "Administración: %s eliminó el negocio %d.", NombreJugador(playerid), NegocioInfo[i][nID]);
				ABroadCast(ROJO, string, 1);
             	GuardarNegocio(i);
				UpdateTextoNeg(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "prodsol", true) == 0)
    {
        if(sscanf(params, "s[128]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarneg prodsol [Cantidad]");
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    NegocioInfo[i][nProdSolidos] = opcion2;
        	    format(string, sizeof(string), "Administración: %s editó los productos sólidos del negocio %d a %d.", NombreJugador(playerid), NegocioInfo[i][nID], opcion2);
				ABroadCast(ROJO, string, 1);
             	GuardarNegocio(i);
				UpdateTextoNeg(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "prodliq", true) == 0)
    {
        if(sscanf(params, "s[128]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarneg prodliq [Cantidad]");
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    NegocioInfo[i][nProdLiquidos] = opcion2;
        	    format(string, sizeof(string), "Administración: %s editó los productos líquidos del negocio %d a %d.", NombreJugador(playerid), NegocioInfo[i][nID], opcion2);
				ABroadCast(ROJO, string, 1);
             	GuardarNegocio(i);
				UpdateTextoNeg(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "abierto", true) == 0)
    {
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    if(NegocioInfo[i][nCerrada] == 0)
        	    {
        	        NegocioInfo[i][nCerrada] = 1;
        	        format(string, sizeof(string), "Administración: %s cerró el negocio %d.", NombreJugador(playerid), NegocioInfo[i][nID]);
					ABroadCast(ROJO, string, 1);
	             	GuardarNegocio(i);
					UpdateTextoNeg(i);
					return 1;
        	    }
        	    else
        	    {
        	        NegocioInfo[i][nCerrada] = 0;
        	        format(string, sizeof(string), "Administración: %s abrió el negocio %d.", NombreJugador(playerid), NegocioInfo[i][nID]);
					ABroadCast(ROJO, string, 1);
	             	GuardarNegocio(i);
					UpdateTextoNeg(i);
        	    }
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "precio", true) == 0)
    {
        if(sscanf(params, "s[128]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarneg precio [Cantidad]");
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    NegocioInfo[i][nPrecio] = opcion2;
        	    format(string, sizeof(string), "Administración: %s editó el precio del negocio %d a %d dólares.", NombreJugador(playerid), NegocioInfo[i][nID], opcion2);
				ABroadCast(ROJO, string, 1);
             	GuardarNegocio(i);
				UpdateTextoNeg(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "nombre", true) == 0)
    {
        if(sscanf(params, "s[128]I(-1)s[128]", opcion, opcion2, opcion3)) return SendClientMessage(playerid, GRIS, "Uso: /editarneg nombre [Nombre]");
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    format(NegocioInfo[i][nNombre], 128, opcion3);
        	    format(string, sizeof(string), "Administración: %s editó el nombre del negocio %d a %s.", NombreJugador(playerid), NegocioInfo[i][nID], opcion3);
				ABroadCast(ROJO, string, 1);
             	GuardarNegocio(i);
				UpdateTextoNeg(i);
				return 1;
        	}
 		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "interior", true) == 0)
    {
        if(sscanf(params, "s[128]i", opcion, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarneg interior [ID]");
        for(new i = 0; i < sizeof(NegocioInfo); i++)
        {
            if(PlayerToPoint(playerid, 1.5, NegocioInfo[i][nEX], NegocioInfo[i][nEY], NegocioInfo[i][nEZ]))
        	{
        	    switch(opcion2)
				{
				    // Interior oficina
				    case 1: NegocioInfo[i][nIX] = -644.3356, NegocioInfo[i][nIY] = 1595.5283, NegocioInfo[i][nIZ] = 1028.2859, NegocioInfo[i][nInterior] = 2; // Interior oficina
				    // Restaurantes y bares
                    case 2: NegocioInfo[i][nIX] = -456.3050, NegocioInfo[i][nIY] = -277.9839, NegocioInfo[i][nIZ] = 4021.8850, NegocioInfo[i][nInterior] = 10; // Bar billard
                    case 3: NegocioInfo[i][nIX] = 1443.5157, NegocioInfo[i][nIY] = -1069.4519, NegocioInfo[i][nIZ] = 218.0002, NegocioInfo[i][nInterior] = 8; // Estudio de radio
                    case 4: NegocioInfo[i][nIX] = -159.6974, NegocioInfo[i][nIY] = 1765.8761, NegocioInfo[i][nIZ] = -89.7741, NegocioInfo[i][nInterior] = 7; // Bar con escenario (Karaoke)
                    case 5: NegocioInfo[i][nIX] = -2107.2271, NegocioInfo[i][nIY] = 580.1500, NegocioInfo[i][nIZ] = 21.2659, NegocioInfo[i][nInterior] = 1; // Interior estanco
                    case 6: NegocioInfo[i][nIX] = -2271.3030, NegocioInfo[i][nIY] = -122.8274, NegocioInfo[i][nIZ] = 35.3959, NegocioInfo[i][nInterior] = 11; // Interior electrónica
                    case 7: NegocioInfo[i][nIX] = -2113.6421, NegocioInfo[i][nIY] = 266.2827, NegocioInfo[i][nIZ] = 22.2359, NegocioInfo[i][nInterior] = 6; // Interior farmacia
                    case 8: NegocioInfo[i][nIX] = 167.2955, NegocioInfo[i][nIY] = 1751.3861, NegocioInfo[i][nIZ] = 617.6660, NegocioInfo[i][nInterior] = 7; // Restaurante de lujo
                    case 9: NegocioInfo[i][nIX] = 1273.0547, NegocioInfo[i][nIY] = -1595.2631, NegocioInfo[i][nIZ] = 4001.0298, NegocioInfo[i][nInterior] = 3; // Restaurante de lujo 2
                    case 10: NegocioInfo[i][nIX] = 668.0551, NegocioInfo[i][nIY] = -2245.2673, NegocioInfo[i][nIZ] = 2810.0078, NegocioInfo[i][nInterior] = 5; // Discoteca Santa María Beach
                    case 11: NegocioInfo[i][nIX] = 3110.8245, NegocioInfo[i][nIY] = -1148.3193, NegocioInfo[i][nIZ] = 875.0078, NegocioInfo[i][nInterior] = 14; // Ferretería
                    case 12: NegocioInfo[i][nIX] = 1182.0588, NegocioInfo[i][nIY] = -1200.2686, NegocioInfo[i][nIZ] = -87.4165, NegocioInfo[i][nInterior] = 5; // Bar proyector
                    case 13: NegocioInfo[i][nIX] = 278.2448, NegocioInfo[i][nIY] = 239.1321, NegocioInfo[i][nIZ] = 1008.3859, NegocioInfo[i][nInterior] = 16; // Teatro
                    // Comida rápida
					case 14: NegocioInfo[i][nIX] = 362.8855, NegocioInfo[i][nIY] = -75.1039, NegocioInfo[i][nIZ] = 1001.5078, NegocioInfo[i][nInterior] = 10; // Burger
					case 15: NegocioInfo[i][nIX] = 364.8881, NegocioInfo[i][nIY] = -11.6040, NegocioInfo[i][nIZ] = 1001.8516, NegocioInfo[i][nInterior] = 9; // Clukin
					case 16: NegocioInfo[i][nIX] = 372.4163, NegocioInfo[i][nIY] = -133.3985, NegocioInfo[i][nIZ] = 1001.4922, NegocioInfo[i][nInterior] = 5; // Pizza
					case 17: NegocioInfo[i][nIX] = 377.2815, NegocioInfo[i][nIY] = -192.9495, NegocioInfo[i][nIZ] = 1000.6401, NegocioInfo[i][nInterior] = 17; // Donuts
					// Armerías
					case 18: NegocioInfo[i][nIX] = 286.148986, NegocioInfo[i][nIY] = -40.644397, NegocioInfo[i][nIZ] = 1001.515625, NegocioInfo[i][nInterior] = 1;
					// Ropas
					case 19: NegocioInfo[i][nIX] = 207.737991, NegocioInfo[i][nIY] = -109.019996, NegocioInfo[i][nIZ] = 1005.132812, NegocioInfo[i][nInterior] = 15; // Binco
					case 20: NegocioInfo[i][nIX] = 161.6299, NegocioInfo[i][nIY] = -96.1142, NegocioInfo[i][nIZ] = 1001.8047, NegocioInfo[i][nInterior] = 18; // Zip
					case 21: NegocioInfo[i][nIX] = 204.332992, NegocioInfo[i][nIY] = -166.694992, NegocioInfo[i][nIZ] = 1000.523437, NegocioInfo[i][nInterior] = 14; // DS
					case 22: NegocioInfo[i][nIX] = 226.293991, NegocioInfo[i][nIY] = -7.431529, NegocioInfo[i][nIZ] = 1002.210937, NegocioInfo[i][nInterior] = 5; // Victim
					case 23: NegocioInfo[i][nIX] = 203.777999, NegocioInfo[i][nIY] = -48.492397, NegocioInfo[i][nIZ] = 1001.804687, NegocioInfo[i][nInterior] = 1; // Suburban
					case 24: NegocioInfo[i][nIX] = 207.054992, NegocioInfo[i][nIY] = -138.80499, NegocioInfo[i][nIZ] = 1003.507812, NegocioInfo[i][nInterior] = 3; // Prolaps
                    case 25: NegocioInfo[i][nIX] = 460.4592, NegocioInfo[i][nIY] = -88.7668, NegocioInfo[i][nIZ] = 999.5547, NegocioInfo[i][nInterior] = 4; // Bar pobre
                    case 26: NegocioInfo[i][nIX] = 501.9810, NegocioInfo[i][nIY] = -69.1502, NegocioInfo[i][nIZ] = 998.757812, NegocioInfo[i][nInterior] = 11; // Ganton
                    case 27: NegocioInfo[i][nIX] = 2316.1089, NegocioInfo[i][nIY] = -1978.5079, NegocioInfo[i][nIZ] = -76.2341, NegocioInfo[i][nInterior] = 10; // Ferretería grande
                    case 28: NegocioInfo[i][nIX] = -25.884498, NegocioInfo[i][nIY] = -185.868988, NegocioInfo[i][nIZ] = 1003.546875, NegocioInfo[i][nInterior] = 17; // gasolinera
					case 29: NegocioInfo[i][nIX] = -100.3563, NegocioInfo[i][nIY] = -24.8839, NegocioInfo[i][nIZ] = 1000.7188, NegocioInfo[i][nInterior] = 3;// sexshop
					case 30: NegocioInfo[i][nIX] = 6.0968, NegocioInfo[i][nIY] = -31.2832, NegocioInfo[i][nIZ] = 1003.5494, NegocioInfo[i][nInterior] = 10;// 24/7
				}
				format(string, sizeof(string), "Administración: %s editó el interior del negocio %d a %d.", NombreJugador(playerid), NegocioInfo[i][nID], opcion2);
				ABroadCast(ROJO, string, 1);
				SendClientMessage(playerid, CELESTE, "* Has cambiado el interior de este negocio.");
				GuardarNegocio(i);
				UpdateTextoNeg(i);
        	    return 1;
        	}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
    }
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarneg [Opción] [Valor]");
	    SendClientMessage(playerid, GRIS, "Opciones disponible: Interior - Interiores - Precio - Nombre - Abierto - Prodliq - Prodsol - Eliminar");
	}
	return 1;
}

CMD:crearneg(playerid, params[])
{
    new sql[1024], row[1024], string[1024], id;
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	printf("1");
	format(sql, 80, "INSERT INTO negocios (Comprador) VALUES ('El Estado')");
	mysql_query(database, sql, false);
	printf("2");
	format(sql, sizeof(sql), "SELECT MAX(id) FROM negocios");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
    printf("3");
	id = strval(row);
	NegocioInfo[TotalNegocios][nID] = id;
	NegocioInfo[TotalNegocios][nCerrada] = 0;
	NegocioInfo[TotalNegocios][nPrecio] = 30000;
	NegocioInfo[TotalNegocios][nDinero] = 0;
	NegocioInfo[TotalNegocios][nComprada] = 0;
	format(NegocioInfo[TotalNegocios][nNombre], 128, "Negocio");
    printf("4");
	format(NegocioInfo[TotalNegocios][nComprador], 24, "El Estado");
	new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
	GetPlayerPos(playerid, X[playerid],Y[playerid],Z[playerid]);
	NegocioInfo[TotalNegocios][nEX] = X[playerid];
	NegocioInfo[TotalNegocios][nEY] = Y[playerid];
	NegocioInfo[TotalNegocios][nEZ] = Z[playerid];
    NegocioInfo[TotalNegocios][nIX] = -68.8769;
    NegocioInfo[TotalNegocios][nIY] = 1351.6051;
    NegocioInfo[TotalNegocios][nIZ] = 1080.2109;
    NegocioInfo[TotalNegocios][nInterior] = 6;
    NegocioInfo[TotalNegocios][nIntExt] = GetPlayerInterior(playerid);
	NegocioInfo[TotalNegocios][nVW] = GetPlayerVirtualWorld(playerid);
	printf("5");
 	GuardarNegocio(TotalNegocios);
    printf("6");
	NegocioInfo[TotalNegocios][nPickup] = CreateDynamicPickup(1272, 1, X[playerid], Y[playerid], Z[playerid]);
	NegocioInfo[TotalNegocios][nTexto] = CreateDynamic3DTextLabel("", VERDE, NegocioInfo[TotalNegocios][nEX], NegocioInfo[TotalNegocios][nEY], NegocioInfo[TotalNegocios][nEZ], 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	UpdateTextoNeg(TotalNegocios);
	TotalNegocios++;
 	format(string, sizeof(string), "* Negocio %d creado.", TotalNegocios);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}



CMD:crearciervos(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	CrearCiervo(15);
	return 1;
}

CMD:crearobjeto(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new string[128];
	if(sscanf(params, "iii", params[0], params[1], params[2]))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /crearobjeto [ID] [Tipo] [Cantidad]");
		return 1;
	}
	format(string, sizeof(string), "Administración: %s creó un %s con comando administrativo.",  NombreJugador(playerid), ObtenerNombreObjeto(params[0]));
	ABroadCast(ROJO, string, 1);
	DarObjeto(playerid, params[0], params[1], params[2]);
	return 1;
}

/*CMD:dar(playerid, params[])
{
    new opcion[16], string[128], opcion2, opcion3[16];
    if(sscanf(params, "us[16]S()[16]I(-1)", params[0], opcion, opcion3, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /dar [ID] [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto, Copia");
		return 1;
	}
    if(strcmp(opcion, "copia", true) == 0)
    {
        if(sscanf(params, "us[9]s[16]I(-1)", params[0], opcion, opcion3, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia [Casa | Coche]");
        if(strcmp(opcion3, "coche", true) == 0)
	    {
	        if(sscanf(params, "us[9]s[9]i", params[0], opcion, opcion3, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia coche [Espacio]");
	        new i = opcion2 - 1;
	        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	        if(JugadorInfo[playerid][jCoches][i] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún coche disponible en ese espacio.");

			for(new o = 0; o < 3; o++)
			{
			    if(JugadorInfo[params[0]][jCochesPrestado][o] == NOEXISTE)
			    {
			        JugadorInfo[params[0]][jCochesPrestado][o] = JugadorInfo[playerid][jCoches][i];
			        format(string, sizeof(string), "* %s te ha dado una copia de las llaves del vehículo %d.", NombreJugador(playerid), JugadorInfo[playerid][jCoches][i]);
			        SendClientMessage(playerid, CELESTE, string);
			        format(string, sizeof(string), "* %s entrega una copia de llaves de un vehículo a %s.", NombreJugador(playerid), NombreJugador(params[0]));
			        ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			        return 1;
			    }
			}
			SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene todas las llaves prestadas ocupadas.");
			return 1;
	    }
	    else if(strcmp(opcion3, "casa", true) == 0)
	    {
	        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	        if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa.");
	        if(JugadorInfo[params[0]][jCasaPrestada] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene una casa prestada.");
	        JugadorInfo[params[0]][jCasaPrestada] = JugadorInfo[playerid][jCasa];
	        format(string, sizeof(string), "* %s te ha dado una copia de llaves de la casa LS%d.", NombreJugador(playerid), JugadorInfo[playerid][jCasa]);
	        SendClientMessage(playerid, CELESTE, string);
			format(string, sizeof(string), "* %s entrega una copia de llaves de una casa a %s.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    }
	    else
	    {
	        SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia [Casa | Coche]");
	    }
        return 1;
    }
	else if(strcmp(opcion, "objeto", true) == 0)
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	    if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha para ceder.");
	    if(BolsilloID[params[0]][11] == 0)
	    {
	        if(EsArma(BolsilloID[playerid][11]))
			{
			    RemoverArmas(playerid);
			}
			BolsilloID[params[0]][11] = BolsilloID[playerid][11];
			BolsilloCantidad[params[0]][11] = BolsilloCantidad[playerid][11];
			BolsilloTipo[params[0]][11] = BolsilloTipo[playerid][11];
			if(EsArma(BolsilloID[params[0]][11]))
			{
			    DarArma(params[0], BolsilloID[params[0]][11], BolsilloCantidad[params[0]][11]);
			}
			BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
			format(string, sizeof(string), "* %s le pasó un(a) %s a %s.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[params[0]][11]), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			UpdateAttach(playerid); UpdateAttach(params[0]);
			return 1;
	    }
	    else if(BolsilloID[params[0]][12] == 0)
	    {
	        if(EsArma(BolsilloID[playerid][11]))
			{
			    RemoverArmas(playerid);
			}
			BolsilloID[params[0]][12] = BolsilloID[playerid][11];
			BolsilloCantidad[params[0]][12] = BolsilloCantidad[playerid][11];
			BolsilloTipo[params[0]][12] = BolsilloTipo[playerid][11];
			BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
			format(string, sizeof(string), "* %s le pasó un(a) %s a %s.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[params[0]][12]), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			UpdateAttach(playerid); UpdateAttach(params[0]);
			return 1;
	    }
	    else
	    {
			SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no tiene ninguna mano libre.");
	    }
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /dar [ID] [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto, Copia");
	}
	return 1;
}*/

CMD:darcopia(playerid, params[])
{
    new string[128], opcion1[128], opcion, opcion2, tmp[128], row[128];
    if(sscanf(params, "us[128]I(-1)", opcion, opcion1, opcion2))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/darcopia [ID] {ff9c00}[{FFFFFF}Coche | Casa{ff9c00}]");
		return 1;
	}
	if(strcmp(opcion1, "coche", true) == 0)
    {
        if(sscanf(params, "us[128]i", opcion, opcion1, opcion2)) return SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/darcopia [ID] coche [Slot 1-3]");
        new i = (opcion2 - 1);
        if(!IsPlayerConnected(opcion)) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
    	if(opcion == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
        if(JugadorInfo[playerid][jCoches][i] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún coche disponible en ese espacio.");

		for(new o = 0; o < 3; o++)
		{
		    if(JugadorInfo[opcion][jCochesPrestado][o] == NOEXISTE)
		    {
		        JugadorInfo[opcion][jCochesPrestado][o] = JugadorInfo[playerid][jCoches][i];
		        format(string, sizeof(string), "* %s te ha dado una copia de las llaves del vehículo %d.", NombreJugador(playerid), JugadorInfo[playerid][jCoches][i]);
		        SendClientMessage(opcion, CELESTE, string);
		        format(string, sizeof(string), "* %s entrega una copia de llaves de un vehículo a %s.", NombreJugador(playerid), NombreJugador(opcion));
		        ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene todas las llaves prestadas ocupadas.");
		return 1;
	}
    else if(strcmp(opcion1, "casa", true) == 0)
    {
        if(!IsPlayerConnected(opcion)) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
    	if(opcion == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
        if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa.");
        if(JugadorInfo[opcion][jCasaPrestada] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene una casa prestada.");
        JugadorInfo[opcion][jCasaPrestada] = JugadorInfo[playerid][jCasa];
        format(string, sizeof(string), "* %s te ha dado una copia de llaves de la casa LS%d.", NombreJugador(playerid), JugadorInfo[playerid][jCasa]);
        SendClientMessage(opcion, CELESTE, string);
		format(string, sizeof(string), "* %s entrega una copia de llaves de una casa a %s.", NombreJugador(playerid), NombreJugador(opcion));
		ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
    }
    else if(strcmp(opcion1, "cuentabancaria", true) == 0)
    {
        if(sscanf(params, "us[128]i", opcion, opcion1, opcion2))
		{
			SendClientMessage(playerid, GRIS, "Uso: /darcopia [ID] cuentabancaria [1-5]");
			for(new k = 0; k < MAX_CBANCARIAS; k++)
			{
			    if(JugadorInfo[playerid][jCuentasBancarias][k] != NOEXISTE)
			    {
					format(tmp, 128, "SELECT descripcion FROM cuentasbancarias WHERE numerocuenta = '%d' LIMIT 1", JugadorInfo[playerid][jCuentasBancarias][k]);
					mysql_query(database, tmp, true);
					cache_get_row(0, 0, row, database);
					new desc[255];
					format(desc, 255, "%s", row);
			        format(string, sizeof(string), "%d) Número de cuenta: %d | Descripción: %s.", k+1, JugadorInfo[playerid][jCuentasBancarias][k], desc);
			        SendClientMessage(playerid, BLANCO, string);
			    }
			}
			return 1;
		}
        new i = (opcion2 - 1);
        if(!IsPlayerConnected(opcion)) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
    	if(opcion == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
        if(JugadorInfo[playerid][jCuentasBancarias][i] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna cuenta bancaria disponible en ese espacio.");

		format(tmp, 128, "SELECT propietario FROM cuentasbancarias WHERE numerocuenta = '%d' LIMIT 1", JugadorInfo[playerid][jCuentasBancarias][i]);
		mysql_query(database, tmp, true);
		cache_get_row(0, 0, row, database);
		new propietario;
		propietario = strval(row);
		if(propietario != JugadorInfo[playerid][jSQLID]) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes dar una copia de esta cuenta bancaria ya que no eres el propietario.");
		for(new o = 0; o < MAX_CBANCARIAS; o++)
		{
		    if(JugadorInfo[opcion][jCuentasBancarias][o] == NOEXISTE)
		    {
		        JugadorInfo[opcion][jCuentasBancarias][o] = JugadorInfo[playerid][jCuentasBancarias][i];
		        format(string, sizeof(string), "* %s te ha dado una copia de la cuenta bancaria con número %d.", NombreJugador(playerid), JugadorInfo[playerid][jCuentasBancarias][i]);
		        SendClientMessage(opcion, CELESTE, string);
		        format(string, sizeof(string), "* %s entrega una copia de la cuenta bancaria a %s.", NombreJugador(playerid), NombreJugador(opcion));
		        ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		        SaveValues(opcion, "CuentasBancarias");
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene creadas todas las cuentas bancarias permitidas.");
		return 1;
    }
    else SendClientMessage(playerid, GRIS, "Uso: /darcopia [ID] [Coche | Casa | Cuentabancaria]");
	return 1;
}

CMD:dar(playerid, params[])
{
    new opcion[128], string[128], opcion2, opcion3[128];
    if(sscanf(params, "us[128]", params[0], opcion))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/dar [ID] [Objeto]");
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/darcopia");
		return 1;
	}
	if(IsPlayerNPC(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes dar nada a los bots.");
    if(strcmp(opcion, "copia", true) == 0)
    {
        if(sscanf(params, "us[128]s[128]I(-1)", params[0], opcion, opcion3, opcion2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia [Coche | Casa]");
			return 1;
		}
		if(strcmp(opcion3, "coche", true) == 0)
	    {
	        if(sscanf(params, "us[128]s[128]i", params[0], opcion, opcion3, opcion2))
			{
			    SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia coche [Espacio (1-3)]");
				return 1;
			}
	        new i = opcion2 - 1;
	        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	        if(JugadorInfo[playerid][jCoches][i] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún coche disponible en ese espacio.");

			for(new o = 0; o < 3; o++)
			{
			    if(JugadorInfo[params[0]][jCochesPrestado][o] == NOEXISTE)
			    {
			        JugadorInfo[params[0]][jCochesPrestado][o] = JugadorInfo[playerid][jCoches][i];
			        format(string, sizeof(string), "* %s te ha dado una copia de las llaves del vehículo %d.", NombreJugador(playerid), JugadorInfo[playerid][jCoches][i]);
			        SendClientMessage(playerid, CELESTE, string);
			        format(string, sizeof(string), "* %s entrega una copia de llaves de un vehículo a %s.", NombreJugador(playerid), NombreJugador(params[0]));
			        ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			        return 1;
			    }
			}
			SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene todas las llaves prestadas ocupadas.");
			return 1;
	    }
	    else if(strcmp(opcion3, "casa", true) == 0)
	    {
	        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    	if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	        if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa.");
	        if(JugadorInfo[params[0]][jCasaPrestada] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado ya tiene una casa prestada.");
	        JugadorInfo[params[0]][jCasaPrestada] = JugadorInfo[playerid][jCasa];
	        format(string, sizeof(string), "* %s te ha dado una copia de llaves de la casa LS%d.", NombreJugador(playerid), JugadorInfo[playerid][jCasa]);
	        SendClientMessage(playerid, CELESTE, string);
			format(string, sizeof(string), "* %s entrega una copia de llaves de una casa a %s.", NombreJugador(playerid), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    }
	    else
	    {
	        SendClientMessage(playerid, GRIS, "Uso: /dar [ID] copia [Casa | Coche]");
	    }
        return 1;
    }
	else if(strcmp(opcion, "objeto", true) == 0)
	{
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, ROJO_OSCURO, NO_CONECTADO);
	    if(params[0] == playerid) return SendClientMessage(playerid, ROJO_OSCURO, MISMA_ID);
	    if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en la mano derecha para ceder.");
	    if(BolsilloID[params[0]][11] == 0)
	    {
	        if(EsArma(BolsilloID[playerid][11]))
			{
			    RemoverArmas(playerid);
			}
			BolsilloID[params[0]][11] = BolsilloID[playerid][11];
			BolsilloCantidad[params[0]][11] = BolsilloCantidad[playerid][11];
			BolsilloTipo[params[0]][11] = BolsilloTipo[playerid][11];
			SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
			GuardoArmaSegura[playerid] = 1;
			if(EsArma(BolsilloID[params[0]][11]))
			{
			    DarArma(params[0], BolsilloID[params[0]][11], BolsilloCantidad[params[0]][11]);
			}
			BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
			format(string, sizeof(string), "* %s le pasó un(a) %s a %s.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[params[0]][11]), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			UpdateAttach(playerid); UpdateAttach(params[0]);
			return 1;
	    }
	    else if(BolsilloID[params[0]][12] == 0)
	    {
	        if(EsArma(BolsilloID[playerid][11]))
			{
			    RemoverArmas(playerid);
			}
			BolsilloID[params[0]][12] = BolsilloID[playerid][11];
			BolsilloCantidad[params[0]][12] = BolsilloCantidad[playerid][11];
			BolsilloTipo[params[0]][12] = BolsilloTipo[playerid][11];
			BolsilloID[playerid][11] = 0; BolsilloCantidad[playerid][11] = 0; BolsilloTipo[playerid][11] = 0;
			format(string, sizeof(string), "* %s le pasó un(a) %s a %s.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[params[0]][12]), NombreJugador(params[0]));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			UpdateAttach(playerid); UpdateAttach(params[0]);
			return 1;
	    }
	    else
	    {
			SendClientMessage(playerid, ROJO_OSCURO, "* El jugador indicado no tiene ninguna mano libre.");
	    }
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /dar [ID] [Copia | Objeto]");
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
    new opcion[16], string[128], opcion1, opcion2[16], opcion3, tmp[512], row[512];
    if(sscanf(params, "s[16]S()[16]I(-1)", opcion, opcion2, opcion3))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/tirar [Opción]");
		SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Objeto - Llaves - DNIfalso - CuentaBancaria");
		return 1;
	}
	if(strcmp(opcion, "objeto", true) == 0)
	{
	    if(BolsilloID[playerid][11] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes nada en esa mano.");
	    if(BolsilloID[playerid][11] < 0 || BolsilloID[playerid][11] > 103) return SendClientMessage(playerid, ROJO_OSCURO, "* Lo que tienes en la mano es algo invalido.");

		new f = MAX_OBJ+1;
		for(new a = 0; a < sizeof(ObjCoords); a++)
		{
			if(ObjCoords[a][0] == 0.0)
			{
				f = a;
				break;
			}
		}

		if(f > MAX_OBJ) return SendClientMessage(playerid, ROJO_OSCURO, "* Se ha llegado al máximo de objetos que se pueden tirar, avisa a un administrador.");

        if(EsArma(BolsilloID[playerid][11]))
		{
		    RemoverArmas(playerid);
		}

	    ObjectID2[f][0] = BolsilloID[playerid][11];
		ObjectID2[f][1] = BolsilloCantidad[playerid][11];
		ObjectID2[f][2] = BolsilloTipo[playerid][11];
		format(string, sizeof(string), "* Tiraste un/a %s al suelo.", ObtenerNombreObjeto(BolsilloID[playerid][11]));
		SendClientMessage(playerid, CELESTE, string);
		format(string, sizeof(string), "* %s tiró un/a %s al suelo.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);

		SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
		GuardoArmaSegura[playerid] = 1;

		GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);

		if(BolsilloID[playerid][11] >= 0 && BolsilloID[playerid][11] <= 103)
		{
			object[f] = CreateDynamicObject(BolObjeto[BolsilloID[playerid][11]][0], ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]-1, 93.7, 120.0, 120.0);
		}
		else
		{
			SendClientMessage(playerid, 0x0000FF00, "Oops, se produjo un error! El objeto que se quiere crear es invalido.");
		}

		BolsilloID[playerid][11] = 0;
		BolsilloTipo[playerid][11] = 0;
		BolsilloCantidad[playerid][11] = 0;

		RemovePlayerAttachedObject(playerid, 0);
		QuitarObjeto(playerid, 11);

		GuardarBolsillos(playerid);
		UpdateAttach(playerid);
		ClearAnimations(playerid);
		return 1;
	}
	else if(!strcmp(opcion, "dnifalso", true))
	{
		if(JugadorInfo[playerid][jDNIFalso] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún DNI falso.");
		JugadorInfo[playerid][jDNIFalso] = 0;
		SendClientMessage(playerid, CELESTE, "* Has tirado tu DNI falso.");
		format(string, sizeof(string), "* %s ha tirado su DNI falso al suelo.", NombreJugador(playerid));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	else if(strcmp(opcion, "llaves", true) == 0)
	{
	    if(sscanf(params, "s[9]s[9]I(-1)", opcion, opcion2, opcion3)) return SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/tirar llaves [Casa | Coche]");
	    if(strcmp(opcion2, "casa", true) == 0)
	    {
	        if(JugadorInfo[playerid][jCasaPrestada] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa prestada.");
	        JugadorInfo[playerid][jCasaPrestada] = NOEXISTE;
			format(string, sizeof(string), "* %s tiró unas llaves al suelo.", NombreJugador(playerid));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
		}
		else if(strcmp(opcion2, "coche", true) == 0)
	    {
	        if(sscanf(params, "s[9]s[9]i", opcion, opcion2, opcion3)) return SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/tirar llaves coche [ID]");
	        new i = opcion3 - 1;
	        if(JugadorInfo[playerid][jCochesPrestado][i] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes nigún coche prestado en ese espacio.");
	        JugadorInfo[playerid][jCochesPrestado][i] = NOEXISTE;
	        format(string, sizeof(string), "* %s tiró unas llaves al suelo.", NombreJugador(playerid));
			ProxDetector(15, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			return 1;
	    }
	    else
	    {
	        SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/tirar llaves [Casa | Coche]");
	    }
	    return 1;
	}
	else if(strcmp(opcion, "cuentabancaria", true) == 0)
    {
        if(sscanf(params, "s[128]i", opcion, opcion1))
		{
			SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/tirar cuentabancaria [1-5]");
			for(new k = 0; k < MAX_CBANCARIAS; k++)
			{
			    if(JugadorInfo[playerid][jCuentasBancarias][k] != NOEXISTE)
			    {
					format(tmp, 128, "SELECT descripcion FROM cuentasbancarias WHERE numerocuenta = '%d' LIMIT 1", JugadorInfo[playerid][jCuentasBancarias][k]);
					mysql_query(database, tmp, true);
					cache_get_row(0, 0, row, database);
					new desc[255];
					format(desc, 255, "%s", row);
			        format(string, sizeof(string), "%d) Número de cuenta: %d | Descripción: %s.", k+1, JugadorInfo[playerid][jCuentasBancarias][k], desc);
			        SendClientMessage(playerid, BLANCO, string);
			    }
			}
			return 1;
		}
        new i = (opcion1 - 1);
		JugadorInfo[playerid][jCuentasBancarias][i] = NOEXISTE;
		SendClientMessage(playerid, NARANJA, "* Has tirado la cuenta bancaria.");
		ReorganizarCuentasBancarias(playerid);
		return 1;
    }
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /tirar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto, Llaves, dnifalso, cuentabancaria");
	}
	return 1;
}

CMD:coger(playerid, params[])
{
	new opcion[16];
    if(sscanf(params, "s[16]", opcion))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/coger [Opción]");
		SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Objeto - PedidoArmas - Carne");
		return 1;
	}
	if(strcmp(opcion, "objeto", true) == 0)
	{
	    new string[256];
	    if(BolsilloID[playerid][11] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener la mano derecha vacia.");
	    new f = MAX_OBJ+1;
		for(new a = 0; a < sizeof(ObjCoords); a++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, ObjCoords[a][0], ObjCoords[a][1], ObjCoords[a][2]))
			{
				f = a;
				break;
			}
		}
		if(f > MAX_OBJ) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún objeto.");
		else
		{

		    ObjCoords[f][0] = 0.0;
			ObjCoords[f][1] = 0.0;
			ObjCoords[f][2] = 0.0;

			DestroyDynamicObject(object[f]);
			DarObjeto(playerid, ObjectID2[f][0], ObjectID2[f][2], ObjectID2[f][1]);
			format(string, sizeof(string), "* %s recoge un/a %s del suelo.", NombreJugador(playerid), ObtenerNombreObjeto(BolsilloID[playerid][11]));
			ProxDetector(15.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
			return 1;
		}
	}
	if(!strcmp(opcion, "carne", true))
	{
	    if(CarneObtenida[playerid] > 75) return SendClientMessage(playerid, ROJO_OSCURO, "* Has cogido suficiente carne por ahora, vé a venderla.");
	    if(IsPlayerInGangZoneCazadores(playerid))
		{
			if(Contador_Caza[playerid]== -1)
			{
				if(GetPlayerWeapon(playerid) == 4)
				{
					for(new i=0;i<MAX_CIERVOS;i++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 1.5 , NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]))
						{
							if(NumeroCiervosInfo[i][Ciervos_Muertos] == 1)
							{
								if(NumeroCiervosInfo[i][Ciervos_RecogiendoCarne] != 1)
								{
									GetPlayerPos(playerid, POSICIONPLAYER_X[playerid], POSICIONPLAYER_Y[playerid], POSICIONPLAYER_Z[playerid]);
									GetPlayerFacingAngle(playerid, POSICIONPLAYERANGULO[playerid]);

									ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.1, 1, 0, 0, 1, 0, 1);
									NumeroCiervosInfo[i][Ciervos_CarneRecogida] = 1;
									RecogerCarneCiervo(playerid, i);
									break;
								}
								else SendClientMessage(playerid, ROJO_OSCURO, "* Un jugador ya está recogiendo la carne de este ciervo.");
							}
						}
					}
				}
				else  SendClientMessage(playerid, ROJO_OSCURO, "* No tienes un cuchillo en la mano.");
			}
			else SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás recogiendo carne.");
		}
		else SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona de caza.");
		return 1;
	}
	if(!strcmp(opcion, "pedidoarmas", true))
	{
	    new string[256];
	    if(TraficandoArmas[playerid] >= 2 && TraficandoArmas[playerid] <= 7)
	    {
	        if(BolsilloID[playerid][11] != 0 || BolsilloID[playerid][12] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener ambas manos vacias.");
	        if(TraficandoArmasRecogio[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el punto de recogida.");
			if(TraficandoArmasRecogio[playerid] == 1)
	        {
	            TraficandoArmasRecogio[playerid] = 2;
	            if(TraficandoArmas[playerid] == 2) DarObjeto(playerid, 93, 1, 5);
	            else if(TraficandoArmas[playerid] == 3) DarObjeto(playerid, 94, 1, 5);
	            else if(TraficandoArmas[playerid] == 4) DarObjeto(playerid, 92, 1, 5);
	            else if(TraficandoArmas[playerid] == 5) DarObjeto(playerid, 95, 1, 5);
	            else if(TraficandoArmas[playerid] == 6) DarObjeto(playerid, 96, 1, 5);
	            else if(TraficandoArmas[playerid] == 7) DarObjeto(playerid, 97, 1, 5);
				format(string, sizeof(string), "* %s coge una caja del suelo con ayuda de ambas manos.", NombreJugador(playerid));
				ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				SendClientMessage(playerid, CELESTE, "* Has cogido la caja de las armas, déjala en un maletero y ven a por la de la munición.");
				return 1;
	        }
	        else
	        {
	            if(TraficandoArmas[playerid] == 2) DarObjeto(playerid, 99, 1, 5);
	            else if(TraficandoArmas[playerid] == 3) DarObjeto(playerid, 100, 1, 5);
	            else if(TraficandoArmas[playerid] == 4) DarObjeto(playerid, 98, 1, 5);
	            else if(TraficandoArmas[playerid] == 5) DarObjeto(playerid, 101, 1, 5);
	            else if(TraficandoArmas[playerid] == 6) DarObjeto(playerid, 102, 1, 5);
	            else if(TraficandoArmas[playerid] == 7) DarObjeto(playerid, 103, 1, 5);
	            TraficandoArmasRecogio[playerid] = NOEXISTE;
				format(string, sizeof(string), "* %s coge una caja del suelo con ayuda de ambas manos.", NombreJugador(playerid));
				ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				TraficandoArmas[playerid] = 0;
				return 1;
	        }
	    }
	    else
		{
		    SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún pedido pendiente.");
		}
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /coger [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Objeto, PedidoArmas, Carne");
	}
	return 1;
}

CMD:bol(playerid, params[])
{
	MostrarBolsillos(playerid, playerid);
	return 1;
}

CMD:usar(playerid, params[])
{
	#pragma unused params
	new Float:HP;
	GetPlayerHealth(playerid, HP);
	new bolid = BolsilloID[playerid][11];
	//new string[128];
	if(EsArma(bolid))
	{
	    if(BolsilloCantidad[playerid][11] > 0) return SendClientMessage(playerid, CELESTE, "* Para utilizar el arma debes apuntar con ~k~~PED_LOCK_TARGET~ y disparar con ~k~~PED_FIREWEAPON~.");
	    else return SendClientMessage(playerid, CELESTE, "* Para ponerle balas/silenciador a tu arma debes tener un cargador/silenciador en la mano derecha y la arma correspondiente en la mano izquierda.");
	}
	if(bolid == 77)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* %s bebe algo de refresco del vaso.", NombreJugador(playerid));
	    SetPlayerHealth(playerid, HP+5);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 78)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0; JugadorInfo[playerid][jEnergia] ++;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jAlcohol] ++;
	    format(string, sizeof(string), "* %s bebe la cerveza de la botella.", NombreJugador(playerid));
        SetPlayerDrunkLevel(playerid, 4000);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 79)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jHambre] ++;
	    format(string, sizeof(string), "* %s come un poco de comida rápida del brick.", NombreJugador(playerid));
		GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP+4);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	if(bolid == 80)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* %s bebe algo de agua del vaso.", NombreJugador(playerid));
     	SetPlayerHealth(playerid, HP+3);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 81)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* %s bebe algo de jugo del vaso.", NombreJugador(playerid));
     	SetPlayerHealth(playerid, HP+3);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 82)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    format(string, sizeof(string), "* %s bebe algo de la cerveza sin alcohol de la botella.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 83)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jEnergia] ++;
	    format(string, sizeof(string), "* %s bebe algo de redbull de la botella.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 84)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0; JugadorInfo[playerid][jEnergia] ++;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jAlcohol] += 2;
	    format(string, sizeof(string), "* %s bebe algo de whisky del vaso.", NombreJugador(playerid));
	    SetPlayerDrunkLevel(playerid, 7000);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 85)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0; JugadorInfo[playerid][jEnergia] ++;
	    new string[128];
        GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jAlcohol] += 2;
	    format(string, sizeof(string), "* %s bebe cubata del vaso.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 86)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0; JugadorInfo[playerid][jEnergia] ++;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jAlcohol] += 2;
	    format(string, sizeof(string), "* %s bebe whisky del vaso.", NombreJugador(playerid));
	    SetPlayerDrunkLevel(playerid, 7000);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 87)
	{
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] -= 1;
	    if(BolsilloCantidad[playerid][11] == 0) BolsilloID[playerid][11] = 0; JugadorInfo[playerid][jEnergia] ++;
	    new string[128];
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
	    JugadorInfo[playerid][jAlcohol] += 2;
	    format(string, sizeof(string), "* %s bebe whisky del vaso.", NombreJugador(playerid));
	    SetPlayerDrunkLevel(playerid, 7000);
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
	}
	if(bolid == 44)
	{
	    if(BolsilloID[playerid][12] != 22) return SendClientMessage(playerid, CELESTE, "* No tienes un 9mm en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la 9mm sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu 9mm.");
	}
	if(bolid == 45)
	{
	    if(BolsilloID[playerid][12] != 22) return SendClientMessage(playerid, CELESTE, "* No tienes un 9mm en tu mano izquierda para utilizar este silenciador o tienes una 9mm con silenciador.");
	    BolsilloID[playerid][12] = 23;
	    BolsilloID[playerid][11] = 0;
	    BolsilloTipo[playerid][11] = 0;
	    BolsilloCantidad[playerid][11] = 0;
	    GuardarBolsillos(playerid);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Colocaste un silenciador a tu 9mm.");
	}
	if(bolid == 46)
	{
	    if(BolsilloID[playerid][12] != 24) return SendClientMessage(playerid, CELESTE, "* No tienes una Desert Eagle en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la Desert Eagle sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu Desert Eagle.");
	}
	if(bolid == 47)
	{
	    if(BolsilloID[playerid][12] != 25) return SendClientMessage(playerid, CELESTE, "* No tienes una escopeta en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la escopeta sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu escopeta.");
	}
	if(bolid == 48)
	{
	    if(BolsilloID[playerid][12] != 26) return SendClientMessage(playerid, CELESTE, "* No tienes una escopeta recortada en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la escopeta recortada sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu escopeta recortada.");
	}
	if(bolid == 49)
	{
	    if(BolsilloID[playerid][12] != 27) return SendClientMessage(playerid, CELESTE, "* No tienes una escopeta de combate en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la escopeta de combate sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu escopeta de combate.");
	}
	if(bolid == 50)
	{
	    if(BolsilloID[playerid][12] != 28) return SendClientMessage(playerid, CELESTE, "* No tienes una Uzi en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la Uzi sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu Uzi.");
	}
	if(bolid == 51)
	{
	    if(BolsilloID[playerid][12] != 29) return SendClientMessage(playerid, CELESTE, "* No tienes una MP5 en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la MP5 sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu MP5.");
	}
	if(bolid == 52)
	{
	    if(BolsilloID[playerid][12] != 30) return SendClientMessage(playerid, CELESTE, "* No tienes una AK-47 en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la AK-47 sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu AK-47.");
	}
	if(bolid == 53)
	{
	    if(BolsilloID[playerid][12] != 31) return SendClientMessage(playerid, CELESTE, "* No tienes una M4 en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la M4 sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu M4.");
	}
	if(bolid == 54)
	{
	    if(BolsilloID[playerid][12] != 32) return SendClientMessage(playerid, CELESTE, "* No tienes una Tec-9 en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener la Tec-9 sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu Tec-9.");
	}
	if(bolid == 55)
	{
	    if(BolsilloID[playerid][12] != 33) return SendClientMessage(playerid, CELESTE, "* No tienes un Rifle en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener el Rifle sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu Rifle.");
	}
	if(bolid == 56)
	{
	    if(BolsilloID[playerid][12] != 34) return SendClientMessage(playerid, CELESTE, "* No tienes un francotirador en tu mano izquierda para utilizar este cargador.");
	    if(BolsilloCantidad[playerid][12] > 0) return SendClientMessage(playerid, CELESTE, "* Debes tener el francotirador sin balas para cargarla.");
	    BolsilloID[playerid][11] = BolsilloID[playerid][12];
	    BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	    BolsilloID[playerid][12] = 0;
	    BolsilloTipo[playerid][12] = 0;
	    BolsilloCantidad[playerid][12] = 0;
	    GuardarBolsillos(playerid);
	    RemoverArmas(playerid);
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	    UpdateAttach(playerid);
		SendClientMessage(playerid, VERDE, "* Usaste tu cargador y cargaste tu francotirador.");
	}
	return 1;
}

CMD:mano(playerid, params[])
{
	new Pertenencias[3];
	if(EsArma(BolsilloID[playerid][11]))
	{
	    RemoverArmas(playerid);
	}
	Pertenencias[0] = BolsilloID[playerid][11];
	Pertenencias[1] = BolsilloCantidad[playerid][11];
	Pertenencias[2] = BolsilloTipo[playerid][11];
	BolsilloID[playerid][11] = BolsilloID[playerid][12];
	BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][12];
	BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	BolsilloID[playerid][12] = Pertenencias[0];
	BolsilloCantidad[playerid][12] = Pertenencias[1];
	BolsilloTipo[playerid][12] = Pertenencias[2];
	SendClientMessage(playerid, CELESTE, "* Has cambiado los objetos de mano.");
	SetTimerEx("ArmaSegura", 4500, 0, "d", playerid);
	GuardoArmaSegura[playerid] = 1;
	if(EsArma(BolsilloID[playerid][11]))
	{
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	}
	UpdateAttach(playerid);
	GuardarBolsillos(playerid);
	return 1;
}

CMD:intermitentes(playerid, params[])
{
	new idcoche = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ningún vehículo.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
    	new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(idcoche,engine,lights,alarm,doors,bonnet,boot,objective);
     	if(IndicadoresEncendidos[idcoche] == 0)
        {
        	IndicadoresEncendidos[idcoche] = 1;
        	IndicadoresEncendidos2[idcoche] = 1;
	        SetVehicleParamsEx(idcoche,engine,IndicadoresEncendidos2[idcoche],alarm,doors,bonnet,boot,objective);
        }
        else
        {
            IndicadoresEncendidos[idcoche] = 0;
            SetVehicleParamsEx(idcoche,engine,0,alarm,doors,bonnet,boot,objective);
        }
        return 1;
     }
     else
     {
     	SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar subido como conductor del vehículo.");
        return 1;
     }
}

CMD:luces(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar subiendo en un vehículo.");
	new coche = GetPlayerVehicleID(playerid);
    new motor, luces, alarma, puertas, capo, maletero, objetivo;
	GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
	if(luces == 1)
	{
		SetVehicleParamsEx(coche, motor, false, alarma, puertas, capo, maletero, objetivo);
	}
	else
	{
		SetVehicleParamsEx(coche, motor, true, alarma, puertas, capo, maletero, objetivo);
	}
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo.");
	new coche = GetPlayerVehicleID(playerid);
	if(AutoInfo[coche][aMotor]==0)
		EncenderVehiculo(coche, playerid);
	else if(AutoInfo[coche][aMotor]==1)
	    ApagarVehiculo(coche, playerid);
	return 1;
}

CMD:editarveh(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new opcion[9], opcion1, opcion2, opcion3[50], string[256], vehicleid;
    if(IsPlayerInAnyVehicle(playerid)) vehicleid = GetPlayerVehicleID(playerid);
    else vehicleid = JugadorCercaVehiculo(playerid);
    if(sscanf(params, "s[16]S()[50]I(-1)I(-1)", opcion, opcion3, opcion1, opcion2))
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarveh [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Color, Descripcion, Spawn, Faccion, Trabajo, Reparar, Gasolina, Renta, Motor, Eliminar");
		return 1;
	}
	if(strcmp(opcion, "color", true) == 0)
	{
	    if(sscanf(params, "s[16]ii", opcion, opcion1, opcion2)) return SendClientMessage(playerid, GRIS, "Uso: /editarveh color [ID 1] [ID 2]");
        if(opcion1 < 0 || opcion1 > 256) return SendClientMessage(playerid, ROJO_OSCURO, "* El color debe estar entre 0 y 256.");
        if(opcion2 < 0 || opcion2 > 256) return SendClientMessage(playerid, ROJO_OSCURO, "* El color debe estar entre 0 y 256.");
        format(string, sizeof(string), "Administración: %s editó los colores del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		ChangeVehicleColor(vehicleid, opcion1, opcion2);
		AutoInfo[vehicleid][aColor1] = opcion1;
		AutoInfo[vehicleid][aColor2] = opcion2;
		UpdateVehInteger(AutoInfo[vehicleid][aID], "Color1", AutoInfo[vehicleid][aColor1]);
		UpdateVehInteger(AutoInfo[vehicleid][aID], "Color2", AutoInfo[vehicleid][aColor2]);
		return 1;
	}
	else if(strcmp(opcion, "descripcion", true) == 0)
	{
	    format(string, sizeof(string), "Administración: %s editó la descripción del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
	    format(AutoInfo[vehicleid][aDescripcion], 50, "%s", opcion3);
	    UpdateVehString(AutoInfo[vehicleid][aID], "Descripcion", opcion3);
	    return 1;
	}
	else if(strcmp(opcion, "spawn", true) == 0)
	{
	    format(string, sizeof(string), "Administración: %s editó el spawn del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
	    new Float:Pos[4];
	    GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
	    GetVehicleZAngle(vehicleid, Pos[3]);
	    AutoInfo[vehicleid][ax] = Pos[0]; AutoInfo[vehicleid][ay] = Pos[1]; AutoInfo[vehicleid][az] = Pos[2]; AutoInfo[vehicleid][aa] = Pos[3];
	    UpdateVehFloat(AutoInfo[vehicleid][aID], "X", Pos[0]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Y", Pos[1]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Z", Pos[2]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Angle", Pos[3]);
	    return 1;
	}
	else if(strcmp(opcion, "motor", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, opcion1)) return SendClientMessage(playerid, GRIS, "Uso: /editarveh motor");
        if(AutoInfo[vehicleid][aMotor] == 0) EncenderVehiculo(vehicleid, playerid);
		else ApagarVehiculo(vehicleid, playerid);
		return 1;
	}
	else if(strcmp(opcion, "faccion", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, opcion1)) return SendClientMessage(playerid, GRIS, "Uso: /editarveh faccion [ID]");
        format(string, sizeof(string), "Administración: %s editó la facción del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		AutoInfo[vehicleid][aFaccionID] = opcion1;
		ActualizarVeh(vehicleid);
		return 1;
	}
	else if(strcmp(opcion, "trabajo", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, opcion1)) return SendClientMessage(playerid, GRIS, "Uso: /editarveh trabajo [ID]");
        format(string, sizeof(string), "Administración: %s editó el trabajo del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		AutoInfo[vehicleid][aFaccionID] = (100+opcion1);
		ActualizarVeh(vehicleid);
		return 1;
	}
	else if(strcmp(opcion, "renta", true) == 0)
	{
        format(string, sizeof(string), "Administración: %s habilitó para alquilar el vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		AutoInfo[vehicleid][aFaccionID] = 997;
		ActualizarVeh(vehicleid);
		return 1;
	}
	else if(strcmp(opcion, "reparar", true) == 0)
	{
	    format(string, sizeof(string), "Administración: %s reparó el vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		SetVehicleHealthEx(vehicleid, 1000);
	    RepairVehicle(vehicleid);
	    AutoInfo[vehicleid][aRoto] = 0;
		ActualizarVeh(vehicleid);
		return 1;
	}
	else if(strcmp(opcion, "eliminar", true) == 0)
	{
	    DestroyVehicle(vehicleid);
	    EliminarVehiculo(vehicleid);
	    format(string, sizeof(string), "Administración: %s eliminó el vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		return 1;
	}
	else if(strcmp(opcion, "gasolina", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, opcion1)) return SendClientMessage(playerid, GRIS, "Uso: /editarveh gasolina [Cantidad]");
        if(opcion1 < 0 || opcion1 > 100) return SendClientMessage(playerid, ROJO_OSCURO, "* La gasolina ha de estar entre 0 y 100.");
        format(string, sizeof(string), "Administración: %s editó el nivel de gasolina del vehículo %d.",  NombreJugador(playerid), AutoInfo[vehicleid][aID]);
		ABroadCast(ROJO, string, 1);
		AutoInfo[vehicleid][aGasolina] = opcion1;
		ActualizarVeh(vehicleid);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarveh [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Color, Spawn, Faccion, Trabajo, Interior, Virtual, Reparar, Gasolina, Eliminar");
	}
	return 1;
}

CMD:crearveh(playerid, params[])
{
    new aNombre[24];
    GetPlayerName(playerid,aNombre,24);
    if(!strcmp(aNombre, "Josh_Hawes", true) || !strcmp(aNombre, "Mark_Hawes", true) || !strcmp(aNombre, "Josh_Hawes", true))
	{
	    if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
		new modelo = 3000, color1 = 3000, color2 = 3000;
	    if(sscanf(params, "iii", modelo, color1, color2))
		{
		    SendClientMessage(playerid, GRIS, "Uso: /crearveh [ID] [Color1] [Color2]");
		    return 1;
		}
		if(modelo < 400 || modelo > 611) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes introducir un modelo entre 400 y 600.");
		if(color1 < 0 || color1 > 256) return SendClientMessage(playerid, ROJO_OSCURO, "* El color debe estar entre 0 y 256.");
		if(color2 < 0 || color2 > 256) return SendClientMessage(playerid, ROJO_OSCURO, "* El color debe estar entre 0 y 256.");
	    new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		AgregarVehiculo(playerid, modelo, pos[0], pos[1], pos[2], 0, 0, color1, color2, 998, 100, 0);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* Comando deshabilitado temporalmente, uso restringido a Josh Hawes unicamente.");
	}
	return 1;
}

CMD:llaves(playerid, params[])
{
    new opcion[16];
    if(sscanf(params, "s[16]", opcion))
	{
	    SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/llaves [Opción]");
		SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Casa - Almacen - Vehiculo - Capo - Negocio - Taller - Garaje");
		return 1;
	}
	if(strcmp(opcion, "garaje", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 4, GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz]) || PlayerToPoint(playerid, 4, 1773.8281,-2399.1736,-91.4109) && GarajeInfo[i][gVW] == GetPlayerVirtualWorld(playerid))
		    {
		        if(JugadorInfo[playerid][jCasaPrestada] != GarajeInfo[i][gCasa] && JugadorInfo[playerid][jCasa] != GarajeInfo[i][gCasa] && JugadorInfo[playerid][jCasaAlq] != GarajeInfo[i][gCasa]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves del garaje.");
		        if(GarajeInfo[i][gAbierto] == 0)
		        {
                	GameTextForPlayer(playerid, "~w~¡Garaje ~g~abierto~w~!", 3000, 6);
                	GarajeInfo[i][gAbierto] = 1;
                	GuardarGaraje(i);
                	return 1;
		        }
		        else
		        {
		            GameTextForPlayer(playerid, "~w~¡Garaje ~r~cerrado~w~!", 3000, 6);
                	GarajeInfo[i][gAbierto] = 0;
                	GuardarGaraje(i);
                	return 1;
		        }
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún garaje.");
		return 1;
	}
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw] || PlayerToPoint(playerid, 1.5, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint2] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw2])
		    {
		        if(JugadorInfo[playerid][jCasa] != CasaInfo[i][cID] && JugadorInfo[playerid][jCasaAlq] != CasaInfo[i][cID] && JugadorInfo[playerid][jCasaPrestada] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de la casa.");
				if(CasaInfo[i][cAbierta] == 0)
				{
				    GameTextForPlayer(playerid, "~w~¡Casa ~g~abierta~w~!", 3000, 6);
				    CasaInfo[i][cAbierta] = 1;
				    GuardarCasa(i);
				    return 1;
				}
				else
				{
				    GameTextForPlayer(playerid, "~w~¡Casa ~r~cerrada~w~!", 3000, 6);
				    CasaInfo[i][cAbierta] = 0;
				    GuardarCasa(i);
				    return 1;
				}
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "almacen", true) == 0)
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alx], AlmacenInfo[i][aly], AlmacenInfo[i][alz]) || PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alxx], AlmacenInfo[i][alyy], AlmacenInfo[i][alzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		    {
		        if(JugadorInfo[playerid][jAlmacen] != AlmacenInfo[i][alID]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves del almacén.");
				if(AlmacenInfo[i][alEstado] == 0)
				{
				    GameTextForPlayer(playerid, "~w~¡Almacen ~g~abierto~w~!", 3000, 6);
				    AlmacenInfo[i][alEstado] = 1;
				    GuardarAlmacen(i);
				    return 1;
				}
				else
				{
				    GameTextForPlayer(playerid, "~w~¡Almacen ~r~cerrado~w~!", 3000, 6);
				    AlmacenInfo[i][alEstado] = 0;
				    GuardarAlmacen(i);
				    return 1;
				}
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún almacén.");
		return 1;
	}
	else if(strcmp(opcion, "taller", true) == 0)
	{
	    if(!PlayerToPoint(playerid, 10, 2524.1450,-1524.6024,23.7740) && !PlayerToPoint(playerid, 10, -0.6189,2742.6692,53.2997)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún taller.");
	    if(JugadorInfo[playerid][jTaller] != 25) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de este taller.");
		new string[128];
		if(TallerEast == 0)
	    {
	        TallerEast = 1;
	        format(string, sizeof(string), "~w~¡Taller ~g~abierto~w~!");
            GameTextForPlayer(playerid, string, 3000, 6);
			return 1;
		}
	    else
	    {
	        TallerEast = 0;
	        format(string, sizeof(string), "~w~¡Taller ~r~cerrado~w~!");
            GameTextForPlayer(playerid, string, 3000, 6);
	    }
	    return 1;
	}
	else if(strcmp(opcion, "vehiculo", true) == 0)
	{
	    new motor, luces, alarma, puertas, capo, maletero, objetivo, string[128];
	    new coche = JugadorCercaVehiculo(playerid);
	    if(coche == 0) return 1;
        if(ComprobarDueno(JugadorCercaVehiculo(playerid),playerid) || ComprobarPrestado(JugadorCercaVehiculo(playerid), playerid) || ComprobarRenta(JugadorCercaVehiculo(playerid), playerid))
        {
            if(AutoInfo[JugadorCercaVehiculo(playerid)][aCerrado] == 0)
            {
                AutoInfo[JugadorCercaVehiculo(playerid)][aCerrado] = 1;
                GetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, puertas, capo, maletero, objetivo);
				SetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, AutoInfo[JugadorCercaVehiculo(playerid)][aCerrado], capo, maletero, objetivo);
                format(string, sizeof(string), "~w~¡Vehiculo ~r~cerrado~w~!");
				format(string, sizeof(string), "* %s cerró su vehículo.", NombreJugador(playerid));
				ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
                GameTextForPlayer(playerid, string, 3000, 6);
                ActualizarVeh(JugadorCercaVehiculo(playerid));
				return 1;
			}
            else
            {
                AutoInfo[JugadorCercaVehiculo(playerid)][aCerrado] = 0;
                GetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, puertas, capo, maletero, objetivo);
				SetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, AutoInfo[JugadorCercaVehiculo(playerid)][aCerrado], capo, maletero, objetivo);
                format(string, sizeof(string), "~w~¡Vehiculo ~g~abierto~w~!");
				format(string, sizeof(string), "* %s abrió el vehículo.", NombreJugador(playerid));
				ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
                GameTextForPlayer(playerid, string, 3000, 6);
                ActualizarVeh(JugadorCercaVehiculo(playerid));
				return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves.");
        }
	    return 1;
	}
	else if(strcmp(opcion, "negocio", true) == 0)
	{
	    for(new h = 0; h < sizeof(NegocioInfo); h++)
        {
            if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]) || PlayerToPoint(playerid, 3.0, NegocioInfo[h][nIX], NegocioInfo[h][nIY], NegocioInfo[h][nIZ]))
        	{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
		    	{
					if(NegocioInfo[h][nCerrada] == 0)
					{
					    NegocioInfo[h][nCerrada] = 1;
						GuardarNegocio(h);
						UpdateTextoNeg(h);
						GameTextForPlayer(playerid, "~w~¡Negocio ~r~cerrado~w~!", 3000, 6);
						return 1;
					}
					else if(NegocioInfo[h][nCerrada] == 1)
					{
					    NegocioInfo[h][nCerrada] = 0;
						GuardarNegocio(h);
						UpdateTextoNeg(h);
						GameTextForPlayer(playerid, "~w~¡Negocio ~g~abierto~w~!", 3000, 6);
						return 1;
					}
				}
				else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
        	}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de un negocio.");
		return 1;
	}
	else if(strcmp(opcion, "capo", true) == 0)
	{
	    new coche = JugadorCercaVehiculo(playerid);
	    if(coche == 0) return 1;
	    if(ComprobarDueno(JugadorCercaVehiculo(playerid),playerid) || ComprobarPrestado(JugadorCercaVehiculo(playerid), playerid) || ComprobarRenta(JugadorCercaVehiculo(playerid), playerid))
	    {
		    new motor, luces, alarma, puertas, capo, maletero, objetivo, string[256];
		    GetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, puertas, capo, maletero, objetivo);
		    if(capo == 0)
		    {
		        SetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, puertas, 1, maletero, objetivo);
				format(string, sizeof(string), "* %s abre el capó del vehículo.", NombreJugador(playerid));
				ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
		    }
		    else
		    {
		        SetVehicleParamsEx(JugadorCercaVehiculo(playerid), motor, luces, alarma, puertas, 0, maletero, objetivo);
				format(string, sizeof(string), "* %s cierra el capó del vehículo.", NombreJugador(playerid));
				ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
				return 1;
		    }
		}
		else { SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves del vehículo."); return 1; }
	}
	else
	{
     SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/llaves [Opción]");
	 SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Casa - Almacen - Vehiculo - Capo - Negocio - Taller - Garaje");
	}
	return 1;
}

CMD:armario(playerid, params[])
{
	new opcion[32], string[256];
	if(sscanf(params, "s[32]", opcion))
	{
        SendClientMessage(playerid, GRIS, "Uso: /armario [Opción]");
        SendClientMessage(playerid, GRIS, "Opciones disponibles: abrir, ver");
	    return 1;
	}
	new casa = EstaEnCasa[playerid];
	if(casa == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en una casa.");
	if(!strcmp(opcion, "ver", true))
	{
		if(CasaInfo[casa][cArm] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El armario está cerrado.");
		MostrarArmario(casa, playerid);
		return 1;
	}
	if(!strcmp(opcion, "abrir", true))
	{
        if(CasaInfo[casa][cArm] == 0 && (CasaInfo[casa][cID] == JugadorInfo[playerid][jCasaPrestada] || CasaInfo[casa][cID] == JugadorInfo[playerid][jCasaAlq] || CasaInfo[casa][cID] == JugadorInfo[playerid][jCasa]))
	    {
	        CasaInfo[casa][cArm] = 1;
	        format(string, sizeof(string), "* %s abre el armario de la casa.", NombreJugador(playerid));
			ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			ActualizarArmario(casa);
			return 1;
	    }
	    else if(CasaInfo[casa][cArm] == 1 && (CasaInfo[casa][cID] == JugadorInfo[playerid][jCasaPrestada] || CasaInfo[casa][cID] == JugadorInfo[playerid][jCasaAlq] || CasaInfo[casa][cID] == JugadorInfo[playerid][jCasa]))
	    {
	        CasaInfo[casa][cArm] = 0;
	        format(string, sizeof(string), "* %s cierra el armario de la casa.", NombreJugador(playerid));
			ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
			ActualizarArmario(casa);
			return 1;
	    }
	}
	return 1;
}

CMD:casa(playerid, params[])
{
    if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa.");
	for(new i=0; i < MAX_CASAS; i++)
	{
	    if(CasaInfo[i][cID] == JugadorInfo[playerid][jCasa])
	    {
	        new ZoneName[128], string[128];
			GetPlayer2DZone(ZoneName, 128, CasaInfo[i][cx], CasaInfo[i][cy]);
			format(string, sizeof(string), "* Intentando recordar donde está tu casa, recuerdas que está en la zona de %s.", ZoneName);
			SendClientMessage(playerid, CELESTE, string);
			return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* Debe de existir un error, no se encuentra tu casa, contacta con la administración.");
	return 1;
}

CMD:mirilla(playerid, params[])
{
    new casa = EstaEnCasa[playerid];
    if(MirandoMirilla[playerid] == 0)
	{
	    if(PlayerToPoint(playerid, 1.5, CasaInfo[casa][cxx], CasaInfo[casa][cyy], CasaInfo[casa][czz]) && CasaInfo[casa][cvw2] == GetPlayerVirtualWorld(playerid) && CasaInfo[casa][cint2] == GetPlayerInterior(playerid))
	    {
	        TogglePlayerControllable(playerid, 0);
		    SetPlayerPos(playerid, CasaInfo[casa][cx], CasaInfo[casa][cy], CasaInfo[casa][cz]-50);
		    SetPlayerCameraPos(playerid, CasaInfo[casa][cmx], CasaInfo[casa][cmy], CasaInfo[casa][cmz]);
			new Float:pX, Float:pY;
			GetXYInFrontOfPoint2(CasaInfo[casa][cmx], CasaInfo[casa][cmy], pX, pY, CasaInfo[casa][cma], 5.0);
			SetPlayerCameraLookAt(playerid,pX, pY, CasaInfo[casa][cmz]);
			SendClientMessage(playerid, CELESTE, "* Para dejar de mirar por la mirilla usa de nuevo /mirilla.");
			MirandoMirilla[playerid] = 1;
			SetPlayerInterior(playerid,CasaInfo[casa][cint]);
			SetPlayerVirtualWorld(playerid, CasaInfo[casa][cvw]);
		    return 1;
        }
		else
		{
            SendClientMessage(playerid, ROJO_OSCURO, "* Tienes que estar situado delante de la puerta de tu casa.");
		    return 1;
		}
	}
	else if(MirandoMirilla[playerid] == 1)
	{
	    SetPlayerPos(playerid, CasaInfo[casa][cxx], CasaInfo[casa][cyy], CasaInfo[casa][czz]);
		SetPlayerInterior(playerid,CasaInfo[casa][cint2]);
		SetPlayerVirtualWorld(playerid, CasaInfo[casa][cvw2]);
		SetCameraBehindPlayer(playerid);
		MirandoMirilla[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		return 1;
	}
	return 1;
}

CMD:timbre(playerid, params[])
{
    for(new i=0; i < MAX_CASAS; i++)
	{
	    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
	    {
	        new string[128];
	        format(string, sizeof(string), "* %s toca el timbre de la casa.", NombreJugador(playerid));
	        ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	        for(new j=0; j < MAX_PLAYERS; j++)
	        {
	            if(GetPlayerVirtualWorld(j) == CasaInfo[i][cID] && GetPlayerInterior(j) == CasaInfo[i][cint2])
	            {
	                SendClientMessage(j, 0xacd62dFF, "[CASA] Se escucha el timbre de la casa.");
	            }
	        }
	        return 1;
	    }
	}
	return 1;
}

CMD:garaje(playerid, params[])
{
	//if(JugadorInfo[playerid][jCasa] == NOEXISTE && JugadorInfo[playerid][jCasaAlq] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa en propiedad o alquilada.");
	new opcion[9];
	if(sscanf(params, "s[9]", opcion))
	{
		SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/garaje [Opción]");
		SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Entrar - Salir");
		return 1;
	}
 if(strcmp(opcion, "abrir", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 4, GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz]) || PlayerToPoint(playerid, 4, 1773.8281,-2399.1736,-91.4109) && GarajeInfo[i][gVW] == GetPlayerVirtualWorld(playerid))
		    {
		        if(JugadorInfo[playerid][jCasaPrestada] != GarajeInfo[i][gCasa] && JugadorInfo[playerid][jCasa] != GarajeInfo[i][gCasa] && JugadorInfo[playerid][jCasaAlq] != GarajeInfo[i][gCasa]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves del garaje.");
		        if(GarajeInfo[i][gAbierto] == 0)
		        {
                	GameTextForPlayer(playerid, "~w~¡Garaje ~g~abierto~w~!", 3000, 6);
                	GarajeInfo[i][gAbierto] = 1;
                	GuardarGaraje(i);
                	return 1;
		        }
		        else
		        {
		            GameTextForPlayer(playerid, "~w~¡Garaje ~r~cerrado~w~!", 3000, 6);
                	GarajeInfo[i][gAbierto] = 0;
                	GuardarGaraje(i);
                	return 1;
		        }
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún garaje.");
		return 1;
	}
	else if(strcmp(opcion, "entrar", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 4, GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz]))
		    {
		        if(GarajeInfo[i][gAbierto] == 0) return GameTextForPlayer(playerid, "~w~¡Garaje ~r~cerrado~w~!", 3000, 6);
		        if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER){
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		        }
		        if(IsPlayerInAnyVehicle(playerid))
				{
					new coche = GetPlayerVehicleID(playerid);
					SetPlayerVirtualWorld(playerid, GarajeInfo[i][gVW]);
					SetPlayerInterior(playerid, GarajeInfo[i][gVW]);
				    SetVehiclePos(coche, 1773.8281,-2399.1736,-91.4109);
				    SetVehicleZAngle(coche, 360);
				    SetVehicleVirtualWorld(coche, GarajeInfo[i][gVW]);
				    LinkVehicleToInterior(coche, GarajeInfo[i][gVW]);
				    return 1;
				}
		        else
		        {
		            SetPlayerPos(playerid, 1773.8281,-2399.1736,-91.4109);
		            SetPlayerFacingAngle(playerid, 360);
		            SetPlayerInterior(playerid, GarajeInfo[i][gVW]); SetPlayerVirtualWorld(playerid, GarajeInfo[i][gVW]);
		            TogglePlayerControllable(playerid, false);
					SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
					AntiSobeit(playerid);
					return 1;
		        }
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún garaje.");
		return 1;
	}
	else if(strcmp(opcion, "salir", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 4, 1773.8281,-2399.1736,-91.4109) && GarajeInfo[i][gVW] == GetPlayerVirtualWorld(playerid))
		    {
		        if(GarajeInfo[i][gAbierto] == 0) return GameTextForPlayer(playerid, "~w~¡Garaje ~r~cerrado~w~!", 3000, 6);
		        if(IsPlayerInAnyVehicle(playerid))
				{
					new coche = GetPlayerVehicleID(playerid);
					SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
				    SetVehiclePos(coche, GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz]);
				    SetVehicleZAngle(coche, GarajeInfo[i][ga]);
				    SetVehicleVirtualWorld(coche, 0);
				    LinkVehicleToInterior(coche, 0);
				    return 1;
				}
		        else
		        {
		            SetPlayerPos(playerid, GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz]);
		            SetPlayerFacingAngle(playerid, GarajeInfo[i][ga]);
		            SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		            TogglePlayerControllable(playerid, false);
					SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
					AntiSobeit(playerid);
					return 1;
		        }
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de ningún garaje.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /garaje [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Abrir, Entrar, Salir");
	}
	return 1;
}

CMD:creargaraje(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	if(sscanf(params, "i", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /creargaraje [ID CASA]");
		return 1;
	}

	new sql[80], row[256], id;

	format(sql, 80, "INSERT INTO garajes (Casa) VALUES ('%d')", params[0]);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "SELECT MAX(id) FROM garajes");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
	id = strval(row);

	GarajeInfo[TotalGarajes][gID] = id;

	new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS], Float:A[MAX_PLAYERS];
	GetPlayerPos(playerid, X[playerid],Y[playerid],Z[playerid]);
	GetPlayerFacingAngle(playerid, A[playerid]);

	GarajeInfo[TotalGarajes][gx] = X[playerid];
	GarajeInfo[TotalGarajes][gy] = Y[playerid];
	GarajeInfo[TotalGarajes][gz] = Z[playerid];
    GarajeInfo[TotalGarajes][ga] = A[playerid];
    GarajeInfo[TotalGarajes][gAbierto] = 0;
    GarajeInfo[TotalGarajes][gCasa] = params[0];
    GarajeInfo[TotalGarajes][gVW] = id;

	GarajeInfo[TotalGarajes][gTexto] = CreateDynamic3DTextLabel("", VERDE, GarajeInfo[TotalGarajes][gx], GarajeInfo[TotalGarajes][gy], GarajeInfo[TotalGarajes][gz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    GarajeInfo[TotalGarajes][gPickup] = CreateDynamicPickup(1239, 1, X[playerid], Y[playerid], Z[playerid], 0, 0);
	GuardarGaraje(TotalGarajes);
    TotalGarajes++;
    new string[128];
    format(string,sizeof(string),"* Garaje %d creado", TotalGarajes);
    SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:noalquilar(playerid, params[])
{
    new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /noalquilar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Coche");
		return 1;
	}
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        if(JugadorInfo[playerid][jCasaAlq] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás alquilado en ninguna casa.");
		        if(JugadorInfo[playerid][jCasaAlq] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás alquilado en esta casa.");
		        JugadorInfo[playerid][jCasaAlq] = NOEXISTE;
		        CasaInfo[i][cInquilinos] -= 1;
		        SendClientMessage(playerid, CELESTE, "* Has dejado de alquilar esta casa.");
		        GuardarCasa(i);
		        SaveValues(i, "Casas");
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "coche", true) == 0)
	{
	    new coche = GetPlayerVehicleID(playerid);
	    if(VehRentado[playerid] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún coche alquilado.");
	    if(VehRentado[playerid] != AutoInfo[coche][aID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Este no es el coche que alquilaste.");
	    if(!PlayerToPoint(playerid, 5, 1556.8524,-2300.9736,13.5554) || !PlayerToPoint(playerid, 5, 1836.6875,-1853.2415,13.3897)) {
        SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el punto de entrega de vehículos de renta.");
		if(GetVehicleModel(coche) == 516) //Autos alquiler
	    {
			SetPlayerCheckpoint(playerid, 1836.6875,-1853.2415,13.3897, 5);
	    }
		else
		{
			SetPlayerCheckpoint(playerid, 1556.8524,-2300.9736,13.5554, 5);
		}
		return 1;
		}

		new Float: VidaVeh;
		GetVehicleHealth(coche, VidaVeh);
		if(VidaVeh > 900)
		{
			SendClientMessage(playerid, BLANCO, "Dependiente: Gracias por entregarnos el vehículo nuevamente en buen estado, ahí tienes tu fianza.");
			JugadorInfo[playerid][jDinero] += 200;
			for(new i = 0; i < MAX_VEHICLES; i++)
		    {
		        if(AutoInfo[i][aID] == VehRentado[playerid])
		        {
		            SetVehicleToRespawn(i);
		            AutoInfo[i][aCerrado] = 0;
		            VehAlquilado[i] = 0;
		        }
		    }
		    VehRentado[playerid] = NOEXISTE;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, BLANCO, "Dependiente: Gracias por entregarnos el vehículo pero este estado no es digno de ello, por lo que no te devolveremos la fianza.");
			for(new i = 0; i < MAX_VEHICLES; i++)
		    {
		        if(AutoInfo[i][aID] == VehRentado[playerid])
		        {
		            SetVehicleToRespawn(i);
		            AutoInfo[i][aCerrado] = 0;
		            VehAlquilado[i] = 0;
		        }
		    }
		    VehRentado[playerid] = NOEXISTE;
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /noalquilar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Coche");
	}
	return 1;
}

CMD:alquilar(playerid, params[])
{
    new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /alquilar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa");
		return 1;
	}
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        if(JugadorInfo[playerid][jCasaAlq] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya estás alquilado en una casa.");
		        if(JugadorInfo[playerid][jDinero] < CasaInfo[i][cPAlquiler]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
		        JugadorInfo[playerid][jDinero] -= CasaInfo[i][cPAlquiler];
		        JugadorInfo[playerid][jCasaAlq] = CasaInfo[i][cID];
		        CasaInfo[i][cInquilinos] += 1;
		        SendClientMessage(playerid, CELESTE, "* Has alquilado esta casa, usa '/ayuda casa' para ver los comandos.");
		        GuardarCasa(i);
		        SaveValues(i, "Casas");
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /alquilar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa");
	}
	return 1;
}

CMD:alquilable(playerid, params[])
{
    new opcion[16], cantidad;
	if(sscanf(params, "s[16]I(-1)", opcion, cantidad))
	{
		SendClientMessage(playerid, GRIS, "Uso: /alquilable [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Estado, Precio, Informacion");
		return 1;
	}
	if(strcmp(opcion, "precio", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /alquilable precio [Cantidad]");
	    if(cantidad <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El precio del alquiler debe ser mayor que 0.");
	    for(new i = 0; i < sizeof(CasaInfo); i++)
		{
			if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && CasaInfo[i][cvw] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint] == GetPlayerInterior(playerid) || PlayerToPoint(playerid, 1.5, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]) && CasaInfo[i][cvw2] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint2] == GetPlayerInterior(playerid))
		    {
		        if(JugadorInfo[playerid][jCasa] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta no es tu casa.");
		        CasaInfo[i][cPAlquiler] = cantidad;
		        GuardarCasa(i);
		        new string[75];
				format(string, sizeof(string), "* Has cambiado el precio del alquiler de la vivienda a %d dólares.", cantidad);
				SendClientMessage(playerid, CELESTE, string);
		        return 1;
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "informacion", true) == 0)
	{
	    for(new i = 0; i < sizeof(CasaInfo); i++)
		{
			if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && CasaInfo[i][cvw] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint] == GetPlayerInterior(playerid) || PlayerToPoint(playerid, 1.5, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]) && CasaInfo[i][cvw2] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint2] == GetPlayerInterior(playerid))
		    {
		        if(JugadorInfo[playerid][jCasa] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta no es tu casa.");
				new estado[14], string[40];
				if(CasaInfo[i][cAlquilable] == 0) estado = "No disponible";
				else estado = "Disponible";
				format(string, sizeof(string), "* Estado del alquiler: %s", estado);
				SendClientMessage(playerid, CELESTE, string);
				format(string, sizeof(string), "* Precio del alquiler: %d dólares", CasaInfo[i][cPAlquiler]);
				SendClientMessage(playerid, CELESTE, string);
				format(string, sizeof(string), "* Inquilinos: %d", CasaInfo[i][cInquilinos]);
				SendClientMessage(playerid, CELESTE, string);
				return 1;
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "estado", true) == 0)
	{
	    if(sscanf(params, "s[16]i", opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /alquilable estado [0 - No alquilable | 1 - Alquilable]");
		if(cantidad != 0 && cantidad != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El estado ha de ser 0 o 1. (0 - No alquilable | 1 - Alquilable)");
	    for(new i = 0; i < sizeof(CasaInfo); i++)
		{
			if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && CasaInfo[i][cvw] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint] == GetPlayerInterior(playerid) || PlayerToPoint(playerid, 1.5, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]) && CasaInfo[i][cvw2] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint2] == GetPlayerInterior(playerid))
		    {
		        if(JugadorInfo[playerid][jCasa] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta no es tu casa.");
		        CasaInfo[i][cAlquilable] = cantidad;
		        GuardarCasa(i);
		        if(cantidad == 0) SendClientMessage(playerid, CELESTE, "* Ahora nadie podrá alquilar esta casa.");
		        else SendClientMessage(playerid, CELESTE, "* Ahora podrán alquilar esta casa, recuerda establecer un precio de alquiler.");
		        return 1;
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /alquilable [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Precio, Inquilinos, Echar, Informacion");
	}
	return 1;
}

CMD:visitar(playerid, params[])
{
    for(new i = 0; i < sizeof(CasaInfo); i++)
	{
		if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && CasaInfo[i][cvw] == GetPlayerVirtualWorld(playerid) && CasaInfo[i][cint] == GetPlayerInterior(playerid))
	    {
	        if(CasaInfo[i][cComprada] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes ver esta casa, ya está comprada.");
	        SetPlayerInterior(playerid, CasaInfo[i][cint2]);
	        SetPlayerVirtualWorld(playerid, CasaInfo[i][cvw2]);
	        SetPlayerPos(playerid, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]);
	        TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			EstaEnCasa[playerid] = i;
			TimerVCasa[playerid] = SetTimerEx("ViendoCasa", 15000, 0, "d", playerid);
			SendClientMessage(playerid, CELESTE, "* Saldrás automáticamente de esta casa en 15 segundos.");
			return 1;
	    }
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	return 1;
}

CMD:vender(playerid, params[])
{
	new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, GRIS, "Uso: /vender [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Negocio, Objeto, Almacen, Carne, Pesca");
		return 1;
	}
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        if(JugadorInfo[playerid][jCasa] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna casa.");
		        if(JugadorInfo[playerid][jCasa] != CasaInfo[i][cID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta no es tu casa.");
		        JugadorInfo[playerid][jCasa] = NOEXISTE;
		        format(CasaInfo[i][cComprador], 50, "El Estado");
		        JugadorInfo[playerid][jDinero] += ((CasaInfo[i][cPrecio] / 4) * 3);
		        CasaInfo[i][cAbierta] = 0;
		        CasaInfo[i][cComprada] = 0;
		        new string[50];
		        format(string, sizeof(string), "* Has vendido tu casa por %d dólares.", ((CasaInfo[i][cPrecio] / 4) * 3));
		        DestroyDynamicPickup(CasaInfo[i][cPickup]);
    			CasaInfo[i][cPickup] = CreateDynamicPickup(1273, 1, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz], CasaInfo[i][cvw], CasaInfo[i][cint]);
		        SendClientMessage(playerid, CELESTE, string);
		        GuardarCasa(i);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	    return 1;
	}
	else if(strcmp(opcion, "almacen", true) == 0)
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alx], AlmacenInfo[i][aly], AlmacenInfo[i][alz]))
		    {
		        if(JugadorInfo[playerid][jAlmacen] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningun almacén.");
		        if(JugadorInfo[playerid][jAlmacen] != AlmacenInfo[i][alID]) return SendClientMessage(playerid, ROJO_OSCURO, "* Este no es tu almacén.");
		        JugadorInfo[playerid][jAlmacen] = NOEXISTE;
		        format(AlmacenInfo[i][alComprador], 50, "El Estado");
		        JugadorInfo[playerid][jDinero] += ((AlmacenInfo[i][alPrecio] / 4) * 3);
		        AlmacenInfo[i][alEstado] = 0;
		        AlmacenInfo[i][alComprado] = 0;
		        new string[50];
		        format(string, sizeof(string), "* Has vendido tu almacén por %d dólares.", ((AlmacenInfo[i][alPrecio] / 4) * 3));
		        SendClientMessage(playerid, CELESTE, string);
		        GuardarAlmacen(i);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de un almacén.");
	    return 1;
	}
	else if(strcmp(opcion, "pesca", true) == 0)
	{
	    if(!PlayerToPoint(playerid, 5, 2415.9924,-2229.4675,13.5469)) { SetPlayerCheckpoint(playerid, 2415.9924,-2229.4675,13.5469, 5); SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el puerto. Se ha marcado con un checkpoint."); return 1; }
		new kilos = 0, precio = 0, string[128];
		for(new i = 0; i < 5; i++)
	    {
	        if(HaPescado[playerid][i] != 0 && HaPescado[playerid][i] != 11 && HaPescado[playerid][i] != 12)
	        {
	            kilos += CantidadHaPescado[playerid][i];
	        }
	    }
	    precio = kilos * (random(2) + 1);
	    format(string, sizeof(string), "* Has vendido %d kilos de pescado por %d.", kilos, precio);
	    SendClientMessage(playerid, CELESTE, string);
	    format(string, sizeof(string), "* %s le da unos peces al marinero del puerto.", NombreJugador(playerid));
	    ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    for(new i = 0; i < 5; i++)
	    {
	        CantidadHaPescado[playerid][i] = 0;
	        HaPescado[playerid][i] = 0;
	    }
	    Pescando[playerid] = 0; HaLanzadoCana[playerid] = 0;
	    TiempoPesca[playerid] = 20;
		return 1;
	}
	else if(strcmp(opcion, "carne", true) == 0)
	{
	    for(new h = 0; h < sizeof(CarniceriaInfo); h++)
		{
	       	if(PlayerToPoint(playerid, 2.0, CarniceriaInfo[h][carnex], CarniceriaInfo[h][carney], CarniceriaInfo[h][carnez]))
			{
			    new string[128];
			    if(CarneObtenida[playerid] == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes carne para vender.");
				new importe; importe = (CarneObtenida[playerid] + random(50));
				JugadorInfo[playerid][jDinero] += importe;
				format(string, sizeof(string), "* Has vendido tus %d kilos de carne por %d dólares.", CarneObtenida[playerid], importe);
				SendClientMessage(playerid, CELESTE, string);
				CarneObtenida[playerid] = 0;
				return 1;
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna carnicería.");
		return 1;
	}
	else if(strcmp(opcion, "negocio", true) == 0)
	{
	    for(new h = 0; h < sizeof(NegocioInfo); h++)
		{
	       	if(PlayerToPoint(playerid, 2.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]))
			{
			    if(strcmp(NegocioInfo[h][nComprador], pNameEx(playerid)) == 0)
			    {
			        new calc = NegocioInfo[h][nPrecio] * 30 / 100;
					new dev = NegocioInfo[h][nPrecio] - calc;
					new string[128];
					NegocioInfo[h][nComprada] = 0;
					NegocioInfo[h][nCerrada] = 0;
					JugadorInfo[playerid][jNegocio] = NOEXISTE;
					strmid(NegocioInfo[h][nComprador], "El Estado", 0, strlen("El Estado"), 255);
					JugadorInfo[playerid][jDinero] += dev;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "~w~Has vendido tu negocio por ~n~~g~$%d", dev);
					GameTextForPlayer(playerid, string, 10000, 3);
					GuardarNegocio(h);
					return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, ROJO_OSCURO, "* No eres el propietario de este negocio.");
					return 1;
			    }
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
	}
	else if(strcmp(opcion, "objeto", true) == 0)
	{
	    if(PlayerToPoint(playerid, 2, 2507.3066,-1724.7253,13.5469) || PlayerToPoint(playerid, 2, 2723.8562,-2033.7394,13.5472) || PlayerToPoint(playerid, 2, 2423.4016,-1954.9388,13.5469))
	    {
	        new bolsillo = BolsilloID[playerid][11];
	        if(bolsillo == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningún objeto en tu mano derecha.");
	        if(bolsillo >= 108 && bolsillo <= 115)
	        {
	            new dinero, string[128];
	            if(bolsillo == 108) { dinero = 250; }
	            else if(bolsillo == 109) { dinero = 100; }
	            else if(bolsillo == 110) { dinero = 70; }
	            else if(bolsillo == 111) { dinero = 25; }
	            else if(bolsillo == 112) { dinero = 300; }
	            else if(bolsillo == 113) { dinero = 50; }
	            else if(bolsillo == 114) { dinero = 150; }
	            else if(bolsillo == 115) { dinero = 75; }
	            format(string, sizeof(string), "* Has ganado %d dólares por vender un %s.", dinero, ObtenerNombreObjeto(bolsillo));
	            SendClientMessage(playerid, CELESTE, string);
	            format(string, sizeof(string), "* %s entrega una %s al empleado de la casa de empeño.", NombreJugador(playerid), ObtenerNombreObjeto(bolsillo));
	            ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	            QuitarObjeto(playerid, 11);
	            RemovePlayerAttachedObject(playerid, 0);
	            JugadorInfo[playerid][jDinero] += dinero;
	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	            return 1;
	        }
	        else
	        {
				ProxDetector(5, playerid, "Empleado: Lo siento, no estamos interesado en ese objeto.", COLOR_FADE2, COLOR_FADE2, COLOR_FADE2, COLOR_FADE2, COLOR_FADE2);
	        }
	        return 1;
	    }
	    else
	    {
	        SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna casa de empeño.");
	    }
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /vender [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Negocio, Almacen, Objeto, Carne");
	}
	return 1;
}

CMD:comprar(playerid, params[])
{
    for(new i = 0; i < sizeof(MenuInfo); i++)
    {
        if(PlayerToPoint(playerid, 1.5, MenuInfo[i][mx], MenuInfo[i][my], MenuInfo[i][mz]))
        {
            MostrarMenu(playerid, MenuInfo[i][mTipo]);
            SendClientMessage(playerid, AMARILLO, "Para salir del menú seleccion con la tecla ESPACIO el botón 'Salir'.");
            SendClientMessage(playerid, AMARILLO, "Si presionar la tecla INTRO por error y quedas congelado, debes usar /comprar otra vez");
            SendClientMessage(playerid, AMARILLO, "y darle a 'Salir' con la tecla ESPACIO.");
            return 1;
        }
    }

	new opcion[16];
    if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, NARANJA, "Uso: {FFFFFF}/comprar [Opción]");
		SendClientMessage(playerid, NARANJA, "Opciones disponibles: {FFFFFF}Casa - Negocio - Licencia - Almacen");
		return 1;
	}
	if(strcmp(opcion, "casa", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        if(JugadorInfo[playerid][jCasa] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes una casa en propiedad, debes venderla primero.");
		        if(JugadorInfo[playerid][jDinero] < CasaInfo[i][cPrecio]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
		        if(CasaInfo[i][cComprada] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Esta casa ya está comprada.");
		        if(CasaInfo[i][cID] >= 739 && CasaInfo[i][cID] <= 802)
		        {
		            if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes comprar estas casas si no eres militar.");
		        }

		        new string[65];
		        JugadorInfo[playerid][jCasa] = CasaInfo[i][cID];
		        if(JugadorInfo[playerid][jPremium] == 0)
		        {
			        if(JugadorInfo[playerid][jDinero] < CasaInfo[i][cPrecio]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	                JugadorInfo[playerid][jDinero] -= CasaInfo[i][cPrecio];
				}
				else
				{
				    if(JugadorInfo[playerid][jDinero] < (CasaInfo[i][cPrecio] * 85 / 100)) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
	                JugadorInfo[playerid][jDinero] -= (CasaInfo[i][cPrecio] * 85 / 100);
	                SendClientMessage(playerid, CELESTE, "* Se ha descontado el 15%% del precio de la vivienda por ser usuario premium.");
				}
		        format(string, sizeof(string), "* ¡Felicidades! Has comprado esta casa por %d dólares.", CasaInfo[i][cPrecio]);
				SendClientMessage(playerid, CELESTE, string);
				SendClientMessage(playerid, CELESTE, "* Usa '/ayuda casa' para ver los comandos de las casas.");
				strmid(CasaInfo[i][cComprador], pNameEx(playerid), 0, strlen(pNameEx(playerid)), 255);
		        CasaInfo[i][cComprada] = 1;
		        GuardarCasa(i);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	    return 1;
	}
	else if(!strcmp(opcion, "licencia", true))
	{
	    if(!PlayerToPoint(playerid, 5, 2184.6653,-1952.9795,-60.6141)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en el centro de licencias.");
	    ShowPlayerDialog(playerid, CLicencias, DIALOG_STYLE_LIST, "{00FFFF}Autoescuela de Los Santos", "· Licencia de coches\n· Licencia de motos\n· Licencia de vuelo\n· Licencia de barco\n· Licencia de camión", "Siguiente", "Cancelar");
	    return 1;
	}
	else if(strcmp(opcion, "almacen", true) == 0)
	{
	    for(new i = 0; i < sizeof(AlmacenInfo); i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alx], AlmacenInfo[i][aly], AlmacenInfo[i][alz]))
		    {
		        if(JugadorInfo[playerid][jAlmacen] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un almacén en propiedad, debes venderla primero.");
		        if(JugadorInfo[playerid][jDinero] < AlmacenInfo[i][alPrecio]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero.");
		        if(AlmacenInfo[i][alComprado] > 0) return SendClientMessage(playerid, ROJO_OSCURO, "* Este almacén ya está comprada.");

		        new string[65];
		        JugadorInfo[playerid][jAlmacen] = AlmacenInfo[i][alID];
		        JugadorInfo[playerid][jDinero] -= AlmacenInfo[i][alPrecio];
		        format(string, sizeof(string), "* ¡Felicidades! Has comprado este almacén por %d dólares.", CasaInfo[i][cPrecio]);
				SendClientMessage(playerid, CELESTE, string);
				SendClientMessage(playerid, CELESTE, "* Usa '/ayuda almacen' para ver los comandos de los almacenes.");
				strmid(AlmacenInfo[i][alComprador], pNameEx(playerid), 0, strlen(pNameEx(playerid)), 255);
		        AlmacenInfo[i][alComprado] = 1;
		        GuardarAlmacen(i);
		        return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
	    return 1;
	}
	else if(strcmp(opcion, "negocio", true) == 0)
	{
	    for(new h = 0; h < sizeof(NegocioInfo); h++)
		{
	    	if(PlayerToPoint(playerid, 3.0, NegocioInfo[h][nEX], NegocioInfo[h][nEY], NegocioInfo[h][nEZ]))
			{
				if(NegocioInfo[h][nComprada] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Este negocio ya está comprado.");
				if(JugadorInfo[playerid][jNegocio] != NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes un negocio comprado.");
				if(JugadorInfo[playerid][jPremium] == 0)
				{
	            	if(JugadorInfo[playerid][jDinero] < NegocioInfo[h][nPrecio]) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes el dinero suficiente.");
                    JugadorInfo[playerid][jDinero] -= NegocioInfo[h][nPrecio];
				}
				else
				{
				    if(JugadorInfo[playerid][jDinero] < (NegocioInfo[h][nPrecio] * 85 / 100)) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes el dinero suficiente.");
					JugadorInfo[playerid][jDinero] -= (NegocioInfo[h][nPrecio] * 85 / 100);
					SendClientMessage(playerid, CELESTE, "* Se ha descontado el 15%% del precio del negocio por ser usuario premium.");
				}

				JugadorInfo[playerid][jDinero] -= NegocioInfo[h][nPrecio];
				NegocioInfo[h][nComprada] = 1;
				strmid(NegocioInfo[h][nComprador], pNameEx(playerid), 0, strlen(pNameEx(playerid)), 255);
				JugadorInfo[playerid][jDinero] -= NegocioInfo[h][nPrecio];
				JugadorInfo[playerid][jNegocio] = NegocioInfo[h][nID];
				SendClientMessage(playerid, CELESTE, "* Acabas de comprar un negocio, felicidades. Usa '/ayuda negocio'");
				GuardarNegocio(h);

				if(NegocioInfo[h][nID] == 25 || NegocioInfo[h][nID] == 26)
				{
					JugadorInfo[playerid][jTaller] = NegocioInfo[h][nID];
				}
				return 1;
			}
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás cerca de ningún negocio.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /comprar [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Casa, Negocio, Almacen");
	}
	return 1;
}

CMD:editarcasa(playerid, params[])
{
    if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
    new opcion[30], cantidad;
	if(sscanf(params, "s[30]I(-1)", opcion, cantidad))
	{
		SendClientMessage(playerid, GRIS, "Uso: /editarcasa [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Interior, Precio, Mirilla, Abierta, Informacion, Eliminar");
		return 1;
	}
	if(strcmp(opcion, "mirilla", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        new Float:Mirilla[3], Float:Angulo;
		        GetPlayerCameraPos(playerid, Mirilla[0], Mirilla[1], Mirilla[2]);
				CasaInfo[i][cmx] = Mirilla[0]; CasaInfo[i][cmy] = Mirilla[1]; CasaInfo[i][cmz] = Mirilla[2];
				GetPlayerFacingAngle(playerid, Angulo);
				CasaInfo[i][cma] = Angulo;
				SendClientMessage(playerid, CELESTE, "* Has editado la posición de la mirilla.");
				GuardarCasa(i);
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "interior", true) == 0)
	{
	    if(sscanf(params, "s[30]i", opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarcasa interior [ID]");
	    if(cantidad <= 0 && cantidad >= 48) return SendClientMessage(playerid, ROJO_OSCURO, "* El interior de la casa es válido desde el 1 hasta el 47.");
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        switch(cantidad)
				{
					//Interiores pequeños
					case 1: CasaInfo[i][cxx]=-68.8769, CasaInfo[i][cyy]=1351.6051, CasaInfo[i][czz]=1080.2109, CasaInfo[i][cint2]= 6;
					case 2: CasaInfo[i][cxx]=-42.5718, CasaInfo[i][cyy]=1405.4707, CasaInfo[i][czz]=1084.4297, CasaInfo[i][cint2]= 8;
					case 3: CasaInfo[i][cxx]=223.1618, CasaInfo[i][cyy]=1287.1193, CasaInfo[i][czz]=1082.1406, CasaInfo[i][cint2]= 1;
					case 4: CasaInfo[i][cxx]=221.8276, CasaInfo[i][cyy]=1140.5168, CasaInfo[i][czz]=1082.6094, CasaInfo[i][cint2]= 4;
					case 5: CasaInfo[i][cxx]=328.1076, CasaInfo[i][cyy]=1477.8431, CasaInfo[i][czz]=1084.4375, CasaInfo[i][cint2]= 15;
					case 6: CasaInfo[i][cxx]=22.9175, CasaInfo[i][cyy]=1403.5530, CasaInfo[i][czz]=1084.4297, CasaInfo[i][cint2]= 5;
					//Interiores medianos
					case 7: CasaInfo[i][cxx]=2365.0168, CasaInfo[i][cyy]=-1135.3094, CasaInfo[i][czz]=1050.8750, CasaInfo[i][cint2]= 8;
					case 8: CasaInfo[i][cxx]=2270.3882, CasaInfo[i][cyy]=-1210.2815, CasaInfo[i][czz]=1047.5625, CasaInfo[i][cint2]= 10;
					case 9: CasaInfo[i][cxx]=-260.5417, CasaInfo[i][cyy]=1456.2577, CasaInfo[i][czz]=1084.3672, CasaInfo[i][cint2]= 4;
					case 10: CasaInfo[i][cxx]=2333.2151, CasaInfo[i][cyy]=-1077.3209, CasaInfo[i][czz]=1049.0234, CasaInfo[i][cint2]= 6;
					case 11: CasaInfo[i][cxx]=260.8665, CasaInfo[i][cyy]=1284.5745, CasaInfo[i][czz]=1080.2578, CasaInfo[i][cint2]= 4;
					case 12: CasaInfo[i][cxx]=260.5428, CasaInfo[i][cyy]=1237.2369, CasaInfo[i][czz]=1084.2578, CasaInfo[i][cint2]= 9;
					case 13: CasaInfo[i][cxx]=386.9386, CasaInfo[i][cyy]=1471.8782, CasaInfo[i][czz]=1080.1875, CasaInfo[i][cint2]= 15;
					case 14: CasaInfo[i][cxx]=226.6141, CasaInfo[i][cyy]=1240.0334, CasaInfo[i][czz]=1082.1406, CasaInfo[i][cint2]= 2;
					case 15: CasaInfo[i][cxx]=23.9293, CasaInfo[i][cyy]=1340.2648, CasaInfo[i][czz]=1084.3750, CasaInfo[i][cint2]= 10;
					//Interiores grandes
					case 16: CasaInfo[i][cxx]=2324.1143, CasaInfo[i][cyy]=-1149.5406, CasaInfo[i][czz]=1050.710, CasaInfo[i][cint2]= 12;
					case 17: CasaInfo[i][cxx]=235.4422, CasaInfo[i][cyy]=1186.7810, CasaInfo[i][czz]=1080.2578, CasaInfo[i][cint2]= 3;
					case 18: CasaInfo[i][cxx]=490.9660, CasaInfo[i][cyy]=1398.7607, CasaInfo[i][czz]=1080.2578, CasaInfo[i][cint2]= 2;
					case 19: CasaInfo[i][cxx]=234.4409, CasaInfo[i][cyy]=1064.2129, CasaInfo[i][czz]=1084.2115, CasaInfo[i][cint2]= 6;
					case 20: CasaInfo[i][cxx]=226.5535, CasaInfo[i][cyy]=1114.1012, CasaInfo[i][czz]=1080.9943, CasaInfo[i][cint2]= 5;
					case 21: CasaInfo[i][cxx]=140.2069, CasaInfo[i][cyy]=1366.1321, CasaInfo[i][czz]=1083.8594, CasaInfo[i][cint2]= 5;
					case 22: CasaInfo[i][cxx]=225.7627, CasaInfo[i][cyy]=1021.7071, CasaInfo[i][czz]=1084.0170, CasaInfo[i][cint2]= 7;
					case 23: CasaInfo[i][cxx]=2317.4592, CasaInfo[i][cyy]=-1026.3820, CasaInfo[i][czz]=1050.2178, CasaInfo[i][cint2]= 9;
					case 24: CasaInfo[i][cxx]=446.8984, CasaInfo[i][cyy]=1397.0696, CasaInfo[i][czz]=1084.3047, CasaInfo[i][cint2]= 2;
					case 25: CasaInfo[i][cxx]=295.2993, CasaInfo[i][cyy]=1472.5591, CasaInfo[i][czz]=1080.2578, CasaInfo[i][cint2]= 15;
					case 26: CasaInfo[i][cxx]=83.3735, CasaInfo[i][cyy]=1322.2920, CasaInfo[i][czz]=1083.8662, CasaInfo[i][cint2]= 9;
					case 27: CasaInfo[i][cxx]=376.7856, CasaInfo[i][cyy]=1417.3190, CasaInfo[i][czz]=1081.328, CasaInfo[i][cint2]= 15;
					case 28: CasaInfo[i][cxx]=2496.3818,CasaInfo[i][cyy]=-1694.3456,CasaInfo[i][czz]=1014.7422,CasaInfo[i][cint2]= 3;
					//Interiores hoteles
					case 29: CasaInfo[i][cxx]=2218.2944, CasaInfo[i][cyy]=-1076.0085, CasaInfo[i][czz]=1050.4844, CasaInfo[i][cint2]=1;
					case 30: CasaInfo[i][cxx]=2233.5474, CasaInfo[i][cyy]=-1114.8636, CasaInfo[i][czz]=1050.8828, CasaInfo[i][cint2]=5;
					case 31: CasaInfo[i][cxx]=2365.2593, CasaInfo[i][cyy]=-1135.2416, CasaInfo[i][czz]=1050.8750, CasaInfo[i][cint2]=8;
					case 32: CasaInfo[i][cxx]=2237.2478, CasaInfo[i][cyy]=-1081.6407, CasaInfo[i][czz]=1049.0234, CasaInfo[i][cint2]=2;
					case 33: CasaInfo[i][cxx]=2282.8762, CasaInfo[i][cyy]=-1140.2819, CasaInfo[i][czz]=1050.8984, CasaInfo[i][cint2]=11;
					case 34: CasaInfo[i][cxx]=243.7287, CasaInfo[i][cyy]=305.4619, CasaInfo[i][czz]=999.1484, CasaInfo[i][cint2]=1;
					case 35: CasaInfo[i][cxx]=2317.8538, CasaInfo[i][cyy]=-1026.7557, CasaInfo[i][czz]=1050.2178, CasaInfo[i][cint2]=9;
					case 36: CasaInfo[i][cxx]=2308.6167, CasaInfo[i][cyy]=-1212.9283, CasaInfo[i][czz]=1049.0234, CasaInfo[i][cint2]=6;
					case 37: CasaInfo[i][cxx]=2270.2515, CasaInfo[i][cyy]=-1210.3717, CasaInfo[i][czz]=1047.5625, CasaInfo[i][cint2]=10;
					case 38: CasaInfo[i][cxx]=266.5029, CasaInfo[i][cyy]=304.8156, CasaInfo[i][czz]=999.1484, CasaInfo[i][cint2]=2;
					//Caravana
					case 39: CasaInfo[i][cxx]=2511.5339, CasaInfo[i][cyy]=-1754.8558, CasaInfo[i][czz]=778.9984, CasaInfo[i][cint2]=1;
					//Madd Dogg
					case 40: CasaInfo[i][cxx]=1261.3202,CasaInfo[i][cyy]=-785.4820,CasaInfo[i][czz]=1091.9063,CasaInfo[i][cint2]= 5;
					//Casas vacías
					case 41: CasaInfo[i][cxx]=1641.3145, CasaInfo[i][cyy]=-1800.6692, CasaInfo[i][czz]=4535.3071, CasaInfo[i][cint2]=2;
					case 42: CasaInfo[i][cxx]=1662.4003, CasaInfo[i][cyy]=-1849.1737, CasaInfo[i][czz]=4563.7998, CasaInfo[i][cint2]=11;
					case 43: CasaInfo[i][cxx]=1724.1134, CasaInfo[i][cyy]=-1805.7856, CasaInfo[i][czz]=4598.5391, CasaInfo[i][cint2]=1;
					case 44: CasaInfo[i][cxx]=1601.1101, CasaInfo[i][cyy]=-2168.3806, CasaInfo[i][czz]=4661.5615, CasaInfo[i][cint2]=9;
					case 45: CasaInfo[i][cxx]=1550.8912, CasaInfo[i][cyy]=-2135.2466, CasaInfo[i][czz]=4662.3076, CasaInfo[i][cint2]=6;
					case 46: CasaInfo[i][cxx]=1557.3828, CasaInfo[i][cyy]=-2236.9646, CasaInfo[i][czz]=4676.2153, CasaInfo[i][cint2]=10;
					case 47: CasaInfo[i][cxx]=1612.7126, CasaInfo[i][cyy]=-2052.1294, CasaInfo[i][czz]=4660.0000, CasaInfo[i][cint2]=2;
				}
				GuardarCasa(i);
				SendClientMessage(playerid, CELESTE, "* Has cambiado el interior de la casa.");
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "abierta", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        if(CasaInfo[i][cAbierta] == 0)
		        {
					CasaInfo[i][cAbierta] = 1;
					SendClientMessage(playerid, CELESTE, "* Has abierto la casa.");
					GuardarCasa(i);
					return 1;
				}
				else if(CasaInfo[i][cAbierta] == 1)
				{
					CasaInfo[i][cAbierta] = 0;
					SendClientMessage(playerid, CELESTE, "* Has cerrado la casa.");
					GuardarCasa(i);
					return 1;
				}
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "precio", true) == 0)
	{
	    if(sscanf(params, "s[30]i", opcion, cantidad)) return SendClientMessage(playerid, GRIS, "Uso: /editarcasa precio [Cantidad]");
	    if(cantidad <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El precio mínimo de la casa debe de ser 0 dólares.");
		for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        new string[53];
				CasaInfo[i][cPrecio] = cantidad;
				format(string, sizeof(string), "* Has editado el precio de la casa a %d dólares.", cantidad);
				SendClientMessage(playerid, CELESTE, string);
				GuardarCasa(i);
				return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "informacion", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        new string[60];
		        format(string, sizeof(string), "ID Casa: %d | Comprada: %d | Precio: %d", CasaInfo[i][cID], CasaInfo[i][cComprada], CasaInfo[i][cPrecio]);
		        SendClientMessage(playerid, CELESTE, string);
		 		return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else if(strcmp(opcion, "eliminar", true) == 0)
	{
	    for(new i = 0; i < MAX_CASAS; i ++)
		{
		    if(PlayerToPoint(playerid, 1.5, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		    {
		        new sql[128];
		        format(sql, sizeof(sql), "DELETE FROM casas WHERE `ID` = '%d'", CasaInfo[i][cID]);
		        mysql_query(database, sql, false);
		        CasaInfo[i][cx] = NOEXISTE;
		 		CasaInfo[i][cy] = NOEXISTE;
		 		CasaInfo[i][cz] = NOEXISTE;
		 		DestroyDynamicPickup(CasaInfo[i][cPickup]);
		 		DestroyDynamic3DTextLabel(CasaInfo[i][cTexto]);
		 		SendClientMessage(playerid, CELESTE, "* Has eliminado la casa.");
		 		return 1;
		    }
		}
		SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la puerta de una casa.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, GRIS, "Uso: /editarcasa [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: Interior, Precio, Mirilla, Abierta, Informacion, Eliminar");
	}
    return 1;
}

CMD:crearsenal(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 4) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new texto[32];
	if(sscanf(params, "iS()[32]", params[0], texto))
	{
		SendClientMessage(playerid, GRIS, "Uso: /crearseñal [Opción]");
		SendClientMessage(playerid, GRIS, "Opciones disponibles: 0 - Stop, 1 - Ceda el paso, 2 - Dirección prohibida, 3 - No aparcar, 4 - Paso de cebra, 5 - Límite de velocidad");
		return 1;
	}
	if(params[0] < 0 || params[0] > 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No es válida la opción introducida.");
	if(params[0] == 5)
	{
	    if(sscanf(params, "is[32]", params[0], texto))
		{
			SendClientMessage(playerid, GRIS, "Uso: /crearseñal 5 [Velocidad]");
			return 1;
		}
	}
	new sql[256], row[256], id;

	format(sql, 80, "INSERT INTO senales (id_senal) VALUES ('%d')", params[0]);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "SELECT MAX(id) FROM senales");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
	id = strval(row);

	SenalInfo[TotalSenales][senID] = id;
	format(SenalInfo[TotalSenales][sentexto], 35, texto);
	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

    SenalInfo[TotalSenales][senTipo] = params[0];
	SenalInfo[TotalSenales][senx] = Pos[0];
	SenalInfo[TotalSenales][seny] = Pos[1];
	SenalInfo[TotalSenales][senz] = Pos[2];
	SenalInfo[TotalSenales][senrz] = Pos[3];

	format(sql, 256, "UPDATE senales SET x = '%f', y = '%f', z = '%f', rz = '%f', texto = '%s', id_senal = '%d' WHERE id = '%d'", Pos[0], Pos[1], Pos[2], Pos[3], texto, params[0], id);
	mysql_query(database, sql, false);

    CreateTrafficSign(params[0], Pos[0], Pos[1], Pos[2], Pos[3], 200.0, texto);
    TotalSenales++;
    new string[128];
    format(string,sizeof(string),"* Señal %d creada",TotalSenales);
    SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:crearcasa(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new sql[80], row[256], id, Float:Mirilla[3], Float:Angulo;

	format(sql, 80, "INSERT INTO casas (Comprador) VALUES ('El Estado')");
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "SELECT MAX(id) FROM casas");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
	id = strval(row);

	CasaInfo[TotalCasas][cID] = id;
	CasaInfo[TotalCasas][cAbierta] = 0;
	CasaInfo[TotalCasas][cPrecio] = 25000;
	CasaInfo[TotalCasas][cComprada] = 0;

	format(CasaInfo[TotalCasas][cComprador], 50, "El Estado");
	new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
	GetPlayerPos(playerid, X[playerid],Y[playerid],Z[playerid]);

	CasaInfo[TotalCasas][cx] = X[playerid];
	CasaInfo[TotalCasas][cy] = Y[playerid];
	CasaInfo[TotalCasas][cz] = Z[playerid];
    CasaInfo[TotalCasas][cxx] = -68.8769;
    CasaInfo[TotalCasas][cyy] = 1351.6051;
    CasaInfo[TotalCasas][czz] = 1080.2109;
    CasaInfo[TotalCasas][cint] = GetPlayerInterior(playerid);
    CasaInfo[TotalCasas][cint2] = 6;
    CasaInfo[TotalCasas][cvw] = GetPlayerVirtualWorld(playerid);
	CasaInfo[TotalCasas][cvw2] = id;
	GetPlayerCameraPos(playerid, Mirilla[0], Mirilla[1], Mirilla[2]);
	CasaInfo[TotalCasas][cmx] = Mirilla[0];
	CasaInfo[TotalCasas][cmy] = Mirilla[1];
	CasaInfo[TotalCasas][cmz] = Mirilla[2];
	GetPlayerFacingAngle(playerid, Angulo);
	CasaInfo[TotalCasas][cma] = Angulo;

	GuardarCasa(TotalCasas);

	CasaInfo[TotalCasas][cTexto] = CreateDynamic3DTextLabel("", VERDE, CasaInfo[TotalCasas][cx], CasaInfo[TotalCasas][cy], CasaInfo[TotalCasas][cz],5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,CasaInfo[TotalCasas][cvw], CasaInfo[TotalCasas][cint]);
    CasaInfo[TotalCasas][cPickup] = CreateDynamicPickup(1273, 1, X[playerid], Y[playerid], Z[playerid], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	UpdateCasaLabel(TotalCasas);
    TotalCasas++;
    new string[128];
    format(string,sizeof(string),"* Casa %d creada",TotalCasas-1);
    SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:crearalmacen(playerid, params[])
{
	if(JugadorInfo[playerid][jAdmin] < 5) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	new sql[120], row[256], id;

	format(sql, 120, "INSERT INTO almacenes (`Comprador`) VALUES ('El Estado')");
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "SELECT MAX(id) FROM almacenes");
	mysql_query(database, sql, true);
	cache_get_row(0, 0, row, database);
	id = strval(row);

	AlmacenInfo[TotalAlmacenes][alID] = id;
	AlmacenInfo[TotalAlmacenes][alEstado] = 0;
	AlmacenInfo[TotalAlmacenes][alPrecio] = 30000;
	AlmacenInfo[TotalAlmacenes][alComprado] = 0;

	format(AlmacenInfo[TotalAlmacenes][alComprador], 50, "El Estado");
	new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
	GetPlayerPos(playerid, X[playerid],Y[playerid],Z[playerid]);

	AlmacenInfo[TotalAlmacenes][alx] = X[playerid];
	AlmacenInfo[TotalAlmacenes][aly] = Y[playerid];
	AlmacenInfo[TotalAlmacenes][alz] = Z[playerid];
    AlmacenInfo[TotalAlmacenes][alxx] = 2316.1089;
    AlmacenInfo[TotalAlmacenes][alyy] = -1978.5079;
    AlmacenInfo[TotalAlmacenes][alzz] = -76.2341;
    AlmacenInfo[TotalAlmacenes][alInt] = 10;
	AlmacenInfo[TotalAlmacenes][alVW] = id;

	GuardarAlmacen(TotalAlmacenes);

	AlmacenInfo[TotalAlmacenes][alTexto] = CreateDynamic3DTextLabel("", VERDE, X[playerid], Y[playerid], Z[playerid], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    AlmacenInfo[TotalAlmacenes][alPickup] = CreateDynamicPickup(1272, 1, X[playerid], Y[playerid], Z[playerid], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	UpdateAlmacenLabel(TotalCasas);
    TotalAlmacenes++;
    new string[128];
    format(string,sizeof(string),"* Almacen %d creado.",TotalAlmacenes);
    SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:bloquearpeajes(playerid, params[])
{
	new string[128];
	if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No eres policía.");
	if(BloqueoPeajes == 0)
	{
	    BloqueoPeajes = 1;
		format(string, sizeof(string), "[Central] {FFFFFF}Se ha dado la orden del cierre de peajes a mano del agente %s.", NombreJugador(playerid));
		MensajeDeFaccion(1, AZUL, string);
		return 1;
	}
	else
	{
	    format(string, sizeof(string), "[Central] {FFFFFF}Se ha dado la orden de la apertura de peajes a mano del agente %s.", NombreJugador(playerid));
		MensajeDeFaccion(1, AZUL, string);
	    BloqueoPeajes = 0;
	}
	return 1;
}

CMD:peaje(playerid, params[])
{
	new string[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar en un vehículo para pagar el peaje.");
	if(BloqueoPeajes == 1)
	{
		ProxDetector(15.0, playerid, "Empleado del peaje dice: Lo siento, los peajes están cerrados por orden policial.", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    return 1;
	}
	if(PlayerToPoint(playerid, 3.0, 60.4702,-1539.8301,4.5472))
	{
	    RotateObject(peaje[0], 0.00000, 0, 269.24200, 45, 25);
		SetTimer("CerrarPeaje0", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 40.5558,-1522.7487,4.6604))
	{
	    RotateObject(peaje[1], 0.00000, 0.24200, 87.74200, 45, 25);
		SetTimer("CerrarPeaje1", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, -166.4412,360.0411,11.5488))
	{
	    RotateObject(peaje[2], 0.00000, 0.00000, 345.00000, 45, 25);
		SetTimer("CerrarPeaje2", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 520.7970,466.0594,18.4004))
	{
	    RotateObject(peaje[3], 0.00000, 360.50000, 35.24700, 45, 25);
		SetTimer("CerrarPeaje3", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 522.9626,475.7883,18.4009))
	{
	    RotateObject(peaje[4], 0.00000, 0.49400, 36.00000, 45, 25);
		SetTimer("CerrarPeaje4", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, -175.0375,355.1147,11.5489))
	{
	    RotateObject(peaje[5], 0.00000, 0.00000, 163.99600, 45, 25);
		SetTimer("CerrarPeaje5", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 17.6285,-1345.3562,9.5793))
	{
	    RotateObject(peaje[6], 0.00000, 0.75000, 308.24701, 45, 25);
		SetTimer("CerrarPeaje6", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 624.6052,-1181.7723,18.8775))
	{
	    RotateObject(peaje[7], 0.00000, 0.74700, 29.24000, 45, 25);
		SetTimer("CerrarPeaje7", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 1648.1840,-21.3416,36.0451))
	{
	    RotateObject(peaje[8], 0.00000, 0.24700, 22.48600, 45, 25);
		SetTimer("CerrarPeaje8", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 1622.6194,5.0388,36.2188))
	{
	    RotateObject(peaje[9], 359.98901, 0.24200, 200.49001, 45, 25);
		SetTimer("CerrarPeaje9", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 2890.2400,-684.9766,10.3069))
	{
	    RotateObject(peaje[10], 359.99500, 0.74200, 178.98900, 45, 25);
		SetTimer("CerrarPeaje10", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 2899.3906,-685.6968,10.3124))
	{
	    RotateObject(peaje[11], 0.02100, 360.50000, 179.37199, 45, 25);
		SetTimer("CerrarPeaje11", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 2881.3938,-648.7559,10.3068))
	{
	    RotateObject(peaje[12], 0.01600, 360.50000, 179.86800, 45, 25);
		SetTimer("CerrarPeaje12", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else if(PlayerToPoint(playerid, 3.0, 2872.5625,-649.8116,10.3068))
	{
	    RotateObject(peaje[13], 359.99600, 0.74200, 178.48900, 45, 25);
		SetTimer("CerrarPeaje13", 3000, 0);
		format(string, sizeof(string), "* %s pasa unas monedas al empleado del peaje.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
		CobrarPeaje(playerid);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un peaje.");
	}
	return 1;
}

CMD:cazar(playerid, params[])
{
	if(EstaCazando[playerid] == 1)
 	{
 	    EstaCazando[playerid] = 0;
 	    GangZoneHideForPlayer(playerid, ZonaCaza);
 	    SendClientMessage(playerid, CELESTE, "* Has dejado de cazar. Si disparas ahora a los ciervos no tendrá ningún efecto.");
 	    return 1;
 	}
 	else
 	{
 	    if(CarneObtenida[playerid] > 75) return SendClientMessage(playerid, ROJO_OSCURO, "* Ya tienes suficiente carne por ahora. Vé a venderla primero.");
	    if(IsPlayerInGangZoneCazadores(playerid))
		{
		    EstaCazando[playerid] = 0;
		    SendClientMessage(playerid, CELESTE, "* Has comenzado a cazar. Ahora busca a los ciervos para conseguir carne.");
			GangZoneShowForPlayer(playerid, ZonaCaza, 0x8C5307A0);
			GangZoneFlashForPlayer(playerid, ZonaCaza, 0x8C5307A0);

			return 1;
		}
		else
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No estás en la zona de caza.");
			return 1;
		}
	}
}

CMD:guia(playerid, params[])
{
	if(!EstaEnGuia(playerid)) return SendClientMessage(playerid, ROJO_OSCURO, "* No estás en ninguna guía");
 	ShowPlayerDialog(playerid, GUIA, DIALOG_STYLE_LIST, "{FFFFFF}Guía de Los Santos", "{FFFFFF}Ayuntamiento\nComisaría\nHospital\nParque de bomberos\nLos Santos Radio Televisión\nU.S. Army\nDepósito\nAutoescuela\nJuzgados\nEstación de autobuses\nTaller de mecánica\n\t{00FFFF}Trabajos públicos\n{FFFFFF}Conductor de autobus\nMecánico\nAbogado\nBasurero\nBarrendero\nVendedor de móviles\nCamionero", "Ver info", "Cancelar");
  	return 1;
}

CMD:colores(playerid, params[])
{
	SendClientMessage(playerid, CELESTE, "Esta es una lista de todos los colores para vehículos, simplemente recuerda el número del color que te gusta.");
	Player_ShowColorList(playerid);
  	return 1;
}

Player_ShowColorList(playerid, msg[] = "")
{
    new color_string[3256];
    if(strlen(msg)) format(color_string, sizeof(color_string), "{E74C3C}%s\n\n", msg);
    for(new i; i < sizeof(ColorList); i++) format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, ColorList[i] >>> 8, i, ((i+1) % 10 == 0) ? ("\n") : (""));
    ShowPlayerDialog(playerid, DIALOG_COLORES, DIALOG_STYLE_MSGBOX, "{FFFFFF}ID de colores", color_string, "Ok", "Ok");
    return 1;
}

CMD:ayuda(playerid, params[])
{
	new opcion[16];
	if(sscanf(params, "s[16]", opcion))
	{
		SendClientMessage(playerid, AMARILLO, "{FFFF00}Uso: {FFFFFF}/ayuda{FFFF00} [Opción]");
		SendClientMessage(playerid, AMARILLO, "{FFFF00}Las opciones disponibles son: {FFFFFF}General  Casa  Negocio  Coche  Bolsillo  Líder  Premium  Facción  Banco  Chat");
		SendClientMessage(playerid, BLANCO, "Animaciones  Teléfono  Almacén  Trabajo  Caza  Duda.");
		return 1;
	}
	if(strcmp(opcion, "general", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda General]{FFFFFF} '/id' - '/yo' - '/documentacion' - '/comprar' - '/aceptar' - '/rechazar' - '/serial' - '/repostar' - '/heridas' - '/fumar'");
		SendClientMessage(playerid, NARANJA, "[Ayuda General]{FFFFFF} '/mostrar' - '/cinturon' - '/ccinturon' - '/catalogo' - '/peaje' - '/cuenta' - '/mp' - '/reportar' - '/duda' - '/radio'");
        SendClientMessage(playerid, NARANJA, "[Ayuda General]{FFFFFF} /admins - /vernombres - /pagar - /eliminarcp - /solicitar - /talleres - /desbug - /suerte");
	}
	else if(strcmp(opcion, "caza", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Caza]{FFFFFF} '/cazar' - '/coger carne' - '/vender carne'");
	}
	else if(strcmp(opcion, "duda", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Duda]{FFFFFF} Usa /duda <Pregunta> - Por ejemplo, '{309730}/duda ¿Cómo enciendo un coche?{FFFFFF}'");
	}
	else if(strcmp(opcion, "color", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Color]{FFFFFF} Cada color tiene una ID - Por ejemplo, La ID 1 es blanco y la ID {FFFF00}6 es amarillo.");
	    SendClientMessage(playerid, NARANJA, "[Ayuda Color]{FFFFFF}	A la hora de pintar un coche se debe colocar /pintar <ID> <ID>, el primer parámetro hace referencia");
	    SendClientMessage(playerid, NARANJA, "[Ayuda Color]{FFFFFF}	al color principal, y el segundo al color secundario, cabe destacar que algunos coches solo tienen 1 color.");
	    SendClientMessage(playerid, NARANJA, "[Ayuda Color]{FFFFFF}	Puedes consultar una lista de colores más extensa en el foro. Puedes consultar algunos colores con /colores");
	}
	else if(strcmp(opcion, "premium", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Premium]{FFFFFF} '/dejartrabajo' - '/premium' ");
	}
	else if(strcmp(opcion, "admin", true) == 0)
	{
	    if(JugadorInfo[playerid][jAdmin] == 0) return SendClientMessage(playerid, ROJO_OSCURO, SIN_PERMISOS);
	    if(JugadorInfo[playerid][jAdmin] == 1 || JugadorInfo[playerid][jAdmin] == 2)
	    {
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/plantainfo' - '/hequipo' - '/hprivados' - '/e' - '/limpiarchat' - '/noadmins' - '/silenciar' - '/tspect' - '/spect'");
	    }
	    else if(JugadorInfo[playerid][jAdmin] == 2)
	    {
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/plantainfo' - '/hequipo' - '/hprivados' - '/e' - '/aservicio' - '/limpiarchat' - '/congelar' - '/silenciar'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/verfacciones' - '/hadmin' - '/a' - '/traerveh' - '/irveh'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/tspect' - '/spect' - '/ir' - '/traer' - '/llevar' - '/advertir' - '/revivir' - '/ao' - '/darvida' - '/darint' - '/darvw'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/descongelar' - '/golpear' - '/sanu' - '/leermps' - '/verjail' - '/rtc' - '/noadmins' - '/llevarls' - '/malnombre'");
	    }
	    else if(JugadorInfo[playerid][jAdmin] == 3)
	    {
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/plantainfo' - '/hequipo' - '/hprivados' - '/e' - '/aservicio' - '/limpiarchat' - '/congelar' - '/silenciar'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/verfacciones' - '/incendiar' - '/hadmin' - '/a' - '/traerveh' - '/irveh'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/tspect' - '/spect' - '/ir' - '/traer' - '/llevar' - '/advertir' - '/revivir' - '/ao' - '/darvida' - '/darint' - '/darvw'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/descongelar' - '/golpear' - '/sanu' - '/leermps' - '/respawn' - '/ban' - '/vercuenta' - '/verjail' - '/rtc' - '/noadmins' - '/llevarls' - '/malnombre'");
	    }
	    else if(JugadorInfo[playerid][jAdmin] == 4)
	    {
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/plantainfo' - '/hequipo' - '/hprivados' - '/e' - '/aservicio' - '/limpiarchat' - '/congelar' - '/silenciar'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/verfacciones' - '/incendiar' - '/hadmin' - '/a' - '/traerveh' - '/irveh'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/tspect' - '/spect' - '/ir' - '/traer' - '/llevar' - '/advertir' - '/revivir' - '/ao' - '/darvida' - '/darint' - '/darvw'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/descongelar' - '/golpear' - '/sanu' - '/leermps' - '/ban' - '/noadmins' - '/llevarls' - '/malnombre'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/forzarservicio' - '/tban' - '/qban' - '/darstat' - '/tod' - '/clima' - '/qadvertencia' - '/respawn'");
	    }
	    else if(JugadorInfo[playerid][jAdmin] == 5)
	    {
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/plantainfo' - '/hequipo' - '/hprivados' - '/e' - '/aservicio' - '/limpiarchat'  - '/irveh' - '/silenciar'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/crearobjeto' - '/crearmenu' - '/editarmenu' - '/verfacciones' - '/incendiar' - '/hadmin' - '/a' - '/traerveh'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/tspect' - '/spect' - '/ir' - '/traer' - '/llevar' - '/advertir' - '/revivir' - '/ao' - '/darvida' - '/darint' - '/darvw'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/descongelar' - '/golpear' - '/sanu' - '/leermps' - '/ban' - '/crearneg' - '/editarneg' - '/congelar' - '/reestablecercoches'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/hacerlider' - '/crearlamacen' - '/crearcasa' - '/editarcasa' - '/creargaraje' - '/crearveh' - '/editarveh'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/forzarservicio' - '/tban' - '/qban' - '/darstat' - '/tod' - '/clima' - '/qadvertencia' - '/noadmins'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/crearfaccion' - '/editarfaccion' - '/hacerpremium' - '/noadmin' - '/noequipo' - '/respawn' - '/llevarls' - '/malnombre'");
	        SendClientMessage(playerid, NARANJA, "[Ayuda Admin]{FFFFFF} '/vaciarbolsillos' - '/expulsartodos' - '/dardinero' - '/reestablecercoches' - '/rtc' - '/verjail' - '/vercuenta' '/dwc' - '/qwc'");
	    }
	    return 1;
	}
	else if(strcmp(opcion, "almacen", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Almacén]{FFFFFF} '/llaves almacen' - '/comprar almacen' - '/vender almacen' - '/almacen'");
	}
	else if(strcmp(opcion, "animaciones", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Animaciones]{FFFFFF} '/animaciones'");
	}
	else if(strcmp(opcion, "chat", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Chat]{FFFFFF} '/me' - '/do' - '/decir' - '/gritar' - '/susurrar' - '/b'");
	}
	else if(strcmp(opcion, "banco", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Banco]{FFFFFF} '/banco' - '/cajero' - '/darcopia cuentabancaria' - '/tirar cuentabancaria' - '/selprincipal' - '/cuentasbancarias'");
	}
	else if(strcmp(opcion, "trabajo", true) == 0)
	{
	    if(JugadorInfo[playerid][jTrabajo] == 1)
	    {
			SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/trabajar' - '/ruta' - '/dejartrabajo' - '/tiempotrabajo'");
	    }
	    else if(JugadorInfo[playerid][jTrabajo] == 2)
	    {
	    	SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/trabajar' - '/reparar' - '/pintar' - '/factura' - '/llaves taller' - '/taller'");
            SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/modificar' - '/tunning' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 3)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/trabajar' - '/casos' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 4)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/traficararmas' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 5)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/agujero' - '/plantar' - '/recoger cosecha' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 6)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/creardnifalso' - '/licilegal' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 8)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/carterista' - '/robar' - '/cachear' - '/forzarladron' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 10)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/trabajar' - '/basura' - '/cogerbasura' - '/explorar' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 11)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/trabajar' - '/barrer' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 12)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/vendermovil' - '/dejartrabajo' - '/tiempotrabajo'");
		}
		else if(JugadorInfo[playerid][jTrabajo] == 14)
		{
		    SendClientMessage(playerid, NARANJA, "[Ayuda Trabajo]{FFFFFF} '/cargar' - '/dejartrabajo' - '/tiempotrabajo'");
		}
	}
	else if(strcmp(opcion, "faccion", true) == 0)
	{
	    if(JugadorInfo[playerid][jMiembro] == 1)
	    {
	    	SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} '/taquillas' - '/miembros' - '/ascensor' - '/multar' - '/arrestar' - '/esposar' - '/r' - '/d' - '/f' - '/incautar'");
	    	SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} '/ordenador' - '/informe' - '/megafono' - '/barrera' - '/qbarrera' - '/bloquearveh' - '/desbloquearveh'");
	    	SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} '/equipo' - '/sir' - '/balasdegoma' - '/rtaser' - '/remolcar' - '/cachear' - '/vermatricula' - '/quitar'");
            SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} '/radar' - '/darplaca' - '/mostrarplaca' - '/marcar' - '/condena' - '/liberar' - '/forzar' - '/bloquearpeajes'");
			SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} Abrir puertas: 'Y' - Cerrar puertas: 'N' - Sirena estática: '4 Numpad' - Sirena silenciosa: '6 Numpad'");
            SendClientMessage(playerid, AZUL, "[Ayuda LSPD]{FFFFFF} Alternación de luces: '8 numpad'");
            SendClientMessage(playerid, NARANJA, "[Ayuda PRISIÓN]{FFFFFF} '/celdas' - '/condenar' - '/puertapf' - '/encarcelar' - '/liberar' - '/condena'");
		}
		else if(JugadorInfo[playerid][jMiembro] == 2)
	    {
	    	SendClientMessage(playerid, VERDE, "[Ayuda LSMD]{FFFFFF} '/taquillas' - '/miembros' - '/reanimar' - '/curar' - '/r' - '/d' - '/f' - '/megafono' - '/barrera' - '/qbarrera'");
	    	SendClientMessage(playerid, VERDE, "[Ayuda LSMD]{FFFFFF} '/ascensor' - '/examinar' - '/recetar' - '/quimioterapia' - '/mostrar acreditacion'");
		}
		else if(JugadorInfo[playerid][jMiembro] == 3)
	    {
	    	SendClientMessage(playerid, ROJO, "[Ayuda LSFD]{FFFFFF} '/taquillas' - '/miembros' - '/d' - '/f' - '/escalera' - '/cajafuerte' - '/rescatar' - '/avisosfd' - '/avisofd'");
	    	SendClientMessage(playerid, ROJO, "[Ayuda LSFD]{FFFFFF} '/mostrar acreditacion'");
	    	SendClientMessage(playerid, ROJO, "[Ayuda LSFD]{FFFFFF} Abrir puertas: 'Y' - Cerrar puertas: 'N' - Sirena estática: '4 Numpad' - Sirena silenciosa: '6 Numpad'");
	    	SendClientMessage(playerid, ROJO, "[Ayuda LSFD]{FFFFFF} Alternación de luces: '8 numpad'");
	    }
		else if(JugadorInfo[playerid][jMiembro] == 4)
	    {
	    	SendClientMessage(playerid, ROJO, "[Ayuda Gobierno]{FFFFFF} '/miembros' - '/d' - '/f' - '/impuestos' - '/cajafuerte' - '/sir' - '/cachear' - '/esposar' - '/venderlicencia'");
	    	SendClientMessage(playerid, ROJO, "[Ayuda Gobierno]{FFFFFF} '/mostrar acreditacion'");
	    }
	    else if(JugadorInfo[playerid][jMiembro] == 5)
	    {
	    	SendClientMessage(playerid, NARANJA, "[Ayuda LSRTV]{FFFFFF} '/taquillas' - '/miembros' - '/f' - '/emitir' - '/entrevistar' - '/faros'");
	    	SendClientMessage(playerid, NARANJA, "[Ayuda LSRTV]{FFFFFF}  '/cajafuerte' - '/mostrar acreditacion' - '/precioanuncio'");
	    }
	    else if(JugadorInfo[playerid][jMiembro] == 6)
	    {
	    	SendClientMessage(playerid, VERDE, "[Ayuda US Army]{FFFFFF} '/taquillas' - '/miembros' - '/f' - '/r' - '/d' - '/esposar' - '/mostrar acreditacion'");
	    }
		else return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a ninguna facción.");
	}
	else if(strcmp(opcion, "lider", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Líder]{FFFFFF} '/contratar' - '/despedir' - '/darrango'");
	}
	else if(strcmp(opcion, "casa", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Casa]{FFFFFF} '/comprar casa' - '/vender casa' - '/visitar' - '/alquilable' - '/alquilar' - '/noalquilar casa' - '/garaje'");
	    SendClientMessage(playerid, NARANJA, "[Ayuda Casa]{FFFFFF} '/timbre' - '/mirilla' - '/casa' - '/armario' - '/llaves casa' - '/darcopia [ID] casa' - '/tirar llaves casa'");
	}
	else if(strcmp(opcion, "bolsillo", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Bolsillo]{FFFFFF} '/bol' - '/usar' - '/mano' - '/tirar objeto' - '/coger objeto' - '/dar objeto' - '/sacar' - '/guardar' - '/bolsillo'");
	}
	else if(strcmp(opcion, "negocio", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Negocio]{FFFFFF} '/comprar negocio' - '/vender negocio' - '/neg' - '/llaves negocio'");
		if(EsTaller(JugadorInfo[playerid][jNegocio])) SendClientMessage(playerid, GRIS, "[Ayuda negocio] '/tcontratar' - '/tdespedir'");
	}
	else if(strcmp(opcion, "coche", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Coche]{FFFFFF} '/motor' - '/luces' - '/noalquilar coche' - '/intermitentes' - '/llaves vehiculo' - '/llaves capo' - '/darcopia [ID] coche'");
	    SendClientMessage(playerid, NARANJA, "[Ayuda Coche]{FFFFFF} '/tirar llaves coche' - '/aparcar' - '/baul' - '/frenodemano' - '/venderveh' - '/venderveha' - '/buscar'");
	}
	else if(strcmp(opcion, "telefono", true) == 0)
	{
	    SendClientMessage(playerid, NARANJA, "[Ayuda Teléfono]{FFFFFF} '/llamar' - '/responder' - '/colgar' - '/sms' - '/vertelefono'");
	}
	else
	{
		SendClientMessage(playerid, AMARILLO, "{FFFF00}Uso: {FFFFFF}/ayuda{FFFF00} [Opción]");
		SendClientMessage(playerid, AMARILLO, "{FFFF00}Las opciones disponibles son: {FFFFFF}General  Casa  Negocio  Coche  Bolsillo  Líder  Premium  Facción  Banco  Chat");
		SendClientMessage(playerid, BLANCO, "Animaciones  Teléfono  Almacén  Trabajo  Caza  Duda.");
	}
	return 1;
}

/* FIN COMANDOS */

stock MySQLConectar(sqlhost[], sqluser[], sqlpass[], sqldb[])
{
	print("|=========================Database=========================\n");
	print("MYSQL: Conectando a servidor...\n");

	mysql_log(LOG_ERROR | LOG_WARNING | LOG_DEBUG);
	database = mysql_connect(sqlhost, sqluser, sqldb, sqlpass);

	if(!mysql_errno(database))
	{
		print("MYSQL: Conexión realizada.\n");
		print("|==========================================================\n");
		return 1;
	}
	else
	{
		print("MYSQL: Error de conexión, reconectando...\n");

		database = mysql_connect(sqlhost, sqluser, sqldb, sqlpass);

		if(!mysql_errno(database))
		{
			print("MYSQL: Reconexión realizada.\n");
			print("|==========================================================\n");
			return 1;
		}
		else
		{
			print("MYSQL: La conexión no se pudo realizar, saliendo...");

			SendRconCommand("exit");
			return 0;
		}
	}
}

public EsValido(playerid, campo[], cadena[])
{
	new tmp[100];
	new row[60];
	format(tmp, 100, "SELECT %s FROM usuarios WHERE Nombre = '%s' LIMIT 1", campo, pNameEx(playerid));
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);

	if(strcmp(row, cadena, true) == 0)
	{
		return 1;
	}
	return 0;
}

public GetValueFromName(playerid, campo[])
{
	new tmp[128];
	new row[60];
	format(tmp, 128, "SELECT %s FROM usuarios WHERE Nombre = '%s' LIMIT 1", campo, pNameEx(playerid));
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);
	new id;
	id = strval(row);
	return id;
}

public Float:GetFloatFromName(playerid, campo[])
{
	new tmp[128];
	new row[60];
	format(tmp, 128, "SELECT %s FROM usuarios WHERE Nombre = '%s' LIMIT 1", campo, pNameEx(playerid));
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);
	new Float:id = floatstr(row);
	return id;
}

public SaveValue(playerid, cadena[], valor)
{
	new string[256];
	format(string, 256, "UPDATE usuarios SET %s=%d WHERE id = %d", cadena, valor, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, string, false);
	return 0;
}

public SaveFloat(playerid, cadena[], Float:valor)
{
	new string[256];
	format(string, 256, "UPDATE usuarios SET %s=%f WHERE id = %d", cadena, valor, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, string, false);
	return 0;
}

stock pNameEx(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock ReiniciarVariables(playerid)
{
 	NoAparecerAdmins[playerid] = 0; EstaEstudiando[playerid] = 0; ViendoNombres[playerid] = 0; EstaAFK[playerid] = 0; GuardoArmaSegura[playerid] = 0;
    EstaFumando[playerid] = 0; CuentaElegida[playerid] = NOEXISTE; CuentaATransferir[playerid] = NOEXISTE; EnCatalogoVeh[playerid] = NOEXISTE; VehCatalogo[playerid] = NOEXISTE;
    Barriendo[playerid] = 0; Camionero[playerid] = 0; Contador_Caza[playerid] = NOEXISTE; CarneObtenida[playerid] = 0; EstaCazando[playerid] = 0;
    SolicitandoRef[playerid] = 0; RobandoDinero[playerid] = 0; RobandoNegocio[playerid] = 0; Basurero[playerid] = 0; TemporizadorBasura[playerid] = 0;
    EstaRobando[playerid] = 0; Robos[playerid][0] = NOEXISTE; Robos[playerid][1] = NOEXISTE; Robos[playerid][2] = NOEXISTE; Robos[playerid][3] = NOEXISTE;
    AdminServicio[playerid] = 0; Hablando[playerid] = NOEXISTE; OcultarChatAdmin[playerid] = 0; OcultarChatEquipo[playerid] = 0; NoMps[playerid] = 0; LeerMPS[playerid] = 0;
    PlantacionIncautadaID[playerid] = -1; LlamandoTraficantes[playerid] = 0; ExamenAutoescuela[playerid] = 0; TipoLicenciaAutoescuela[playerid] = 0; EstadoPractico[playerid] = 0; IntentosLicencia[playerid] = 0;
    LlamadaMovil[playerid] = -1; Trabajando[playerid] = 0; TraficandoArmasRecogio[playerid] = NOEXISTE; TraficandoArmas[playerid] = 0;
 	RutaAutobus[playerid] = 0; consultandomal[playerid] = 0; TieneCinturon[playerid] = 0;
	EscuchandoSonido[playerid] = 0; BolasDeGoma[playerid] = 0; Paralizado[playerid] = 0; DebilitoIncendio[playerid] = 1; EditandoTipoObjeto[playerid] = 0; EnInforme[playerid] = 0;
    EstaEnCheckpoint[playerid] = NOEXISTE; EmitiendoCNN[playerid] = 0; Entrevistando[playerid] = NOEXISTE; CantidadTransf[playerid] = 0;
  	Esposado[playerid] = 0; EstaEnCasa[playerid] = -1; MirandoMirilla[playerid] = 0; VehRentado[playerid] = NOEXISTE; EnQuimioterapia[playerid] = 0;
    IntentoDeLogear[playerid] = 0; OfertaCreador[playerid] = NOEXISTE; Oferta[playerid] = NOEXISTE; OfertaPrecio[playerid] = NOEXISTE; OfertaCantidad[playerid] = NOEXISTE;
	Registrado[playerid] = 0; EstaEnNegocio[playerid] = NOEXISTE; MostrandoPCPD[playerid] = 0; SolicitaAbogado[playerid] = NOEXISTE; CCB_Descripcion[playerid] = NOEXISTE; CCB_PIN[playerid] = NOEXISTE;

	for(new i = 1; i < 13; i++)
    {
        BolsilloID[playerid][i] = 0;
        BolsilloTipo[playerid][i] = 0;
        BolsilloCantidad[playerid][i] = 0;
    }

    for(new i = 0; i < 7; i++)
    {
        JugadorInfo[playerid][jHeridas][i] = 0;
    }

    for(new i = 0; i < 6; i++)
    {
        JugadorInfo[playerid][jIdiomas][i] = 0;
        JugadorInfo[playerid][jEIdiomas][i] = 0;
    }

	JugadorInfo[playerid][jFuerza] = 0; JugadorInfo[playerid][jResistencia] = 0;
	JugadorInfo[playerid][jEdad] = 18; JugadorInfo[playerid][jAdmin] = 0; JugadorInfo[playerid][jDinero] = 1000; JugadorInfo[playerid][jCasa] = NOEXISTE; JugadorInfo[playerid][jCasaPrestada] = NOEXISTE; JugadorInfo[playerid][jCasaAlq] = NOEXISTE;
	JugadorInfo[playerid][jNegocio] = NOEXISTE; JugadorInfo[playerid][jLider] = 0; JugadorInfo[playerid][jMiembro] = 0; JugadorInfo[playerid][jRango] = 0; JugadorInfo[playerid][jEncarcelado] = 0; JugadorInfo[playerid][jTiempoEncarcelado] = 0;
	JugadorInfo[playerid][jHerido] = 0; JugadorInfo[playerid][jEnfermedad] = 0; JugadorInfo[playerid][jReceta] = 0; JugadorInfo[playerid][jEnergia] = 100; JugadorInfo[playerid][jAlcohol] = 0; JugadorInfo[playerid][jHambre] = 0;
	JugadorInfo[playerid][jBaneado] = 0; JugadorInfo[playerid][jRopa] = 26; JugadorInfo[playerid][jVida] = 100; JugadorInfo[playerid][jChaleco] = 0; JugadorInfo[playerid][jPlaca] = 0; JugadorInfo[playerid][jDNI] = 0; JugadorInfo[playerid][jTiempoDNI] = 0; JugadorInfo[playerid][jSexo] = 1;
	JugadorInfo[playerid][jTrabajo] = 0; JugadorInfo[playerid][jTiempoTrabajo] = 0; JugadorInfo[playerid][jUltimoTrabajo] = 0; JugadorInfo[playerid][jTaller] = NOEXISTE; JugadorInfo[playerid][jAlmacen] = NOEXISTE; JugadorInfo[playerid][jServicio] = 0;
	JugadorInfo[playerid][jUniforme] = 29; JugadorInfo[playerid][jJugando] = 0; JugadorInfo[playerid][jDNIFalso] = 0; JugadorInfo[playerid][jBiblio] = 0; JugadorInfo[playerid][jPremium] = 0; JugadorInfo[playerid][jTiempoPremium] = 0; JugadorInfo[playerid][jAdvertencias] = 0;
	JugadorInfo[playerid][jPuntosRol][0] = 0; JugadorInfo[playerid][jPuntosRol][1] = 0; JugadorInfo[playerid][jNivel] = 1; JugadorInfo[playerid][jHorasJugadas] = 1; JugadorInfo[playerid][jRespeto] = 1; JugadorInfo[playerid][jTBan] = 0; JugadorInfo[playerid][jPayDay] = 1; JugadorInfo[playerid][jCuentaPrincipal] = 0;
	for(new i = 0; i < 7; i++)
	{
	    JugadorInfo[playerid][jIdiomas][i] = 0;
	    JugadorInfo[playerid][jEIdiomas][i] = 0;
	}
	for(new i = 0; i < 8; i++)
	{
	    JugadorInfo[playerid][jLicencias][i] = 0;
	    JugadorInfo[playerid][jFLicencia][i] = 0;
	}
	for(new i = 0; i < 3; i++)
	{
	    JugadorInfo[playerid][jCoches][i] = NOEXISTE;
	    JugadorInfo[playerid][jCochesPrestado][i] = NOEXISTE;
	}
	for(new i = 0; i < MAX_CBANCARIAS; i++)
	{
	    JugadorInfo[playerid][jCuentasBancarias][i] = NOEXISTE;
	}
	for(new i = 0; i < 9; i++)
	{
	    JugadorInfo[playerid][jHabilidad][i] = 0;
	}

	return 1;
}

stock NombreJugador(playerid)
{
    new aNombre[24];
    GetPlayerName(playerid,aNombre,24);
    new N[24];
    strmid(N,aNombre,0,strlen(aNombre),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (N[i] == '_') N[i] = ' ';
    }
    return N;
}

stock Expulsar(playerid, expulsador[], razon[])
{
	new dia, mes, ano, hora, minuto, segundo;
	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);
	new fecha[50];
	format(fecha, sizeof(fecha), "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);
	new sql[256];
	format(sql, sizeof(sql), "INSERT INTO expulsiones (Expulsado, Expulsador, Razon, Fecha) VALUES ('%s', '%s', '%s', '%s')", NombreJugador(playerid), expulsador, razon, fecha);
	mysql_query(database, sql, false);
	KickRetrasado(playerid);
}

stock KickRetrasado(playerid)
{
    GuardarCuenta(playerid);
    KillTimer(ckick[playerid]);
    ckick[playerid] = SetTimerEx("KickRetra", 100, false, "i", playerid);
    return 1;
}

forward KickRetra(playerid);
public KickRetra(playerid)
{
    if (!IsPlayerConnected(playerid)) return 1;
    Kick(playerid);
    GuardarCuenta(playerid);
    return 1;
}

stock CamaraAlAzar(playerid, lugar)
{
	switch(lugar)
	{
		case 0: { PlayCameraMover(playerid, CamaraInicio[0]); }
		case 1: { PlayCameraMover(playerid, CamaraInicio[1]); }
		case 2: { PlayCameraMover(playerid, CamaraInicio[2]); }
		case 3: { PlayCameraMover(playerid, CamaraInicio[3]); }
	}
	return 1;
}

forward PassValida(playerid, cadena[]);
public PassValida(playerid, cadena[])
{
//	if(IsValidNPC(playerid)) return 1;
	new query[1024];
    format(query, sizeof(query),"SELECT * FROM usuarios WHERE Nombre = '%s' AND Password = md5('%s')",pNameEx(playerid), cadena);
    mysql_query(database, query, true);

 	if(cache_get_row_count(database) != 0)
	{
		return 1;
	}
	return 0;
}

forward IsValid(playerid, campo[], cadena[]);
public IsValid(playerid, campo[], cadena[])
{
//	if(IsValidNPC(playerid)) return 1;
	new tmp[100];
	new row[60];
	format(tmp, 100, "SELECT %s FROM usuarios WHERE Nombre = '%s' LIMIT 1", campo, pNameEx(playerid));
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);

 	if(strcmp(row, cadena, true) == 0)
	{
		return 1;
	}
	return 0;
}

/*forward GetValues(playerid, cadena[]);
public GetValues(playerid, cadena[])
{
//	if(IsValidNPC(playerid)) return 0;
	new row[1000], string[1000], arrCoords[25][64];
	format(string, 1000, "SELECT %s FROM usuarios WHERE id = %d", cadena, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, string, true);
	cache_get_row(0, 0, row, database);
	split(row, arrCoords, ',');

	if(strcmp(cadena, "Posiciones", true) == 0)
	{
	    JugadorInfo[playerid][jPos_X] = floatstr(arrCoords[0]);
	    JugadorInfo[playerid][jPos_Y] = floatstr(arrCoords[1]);
	    JugadorInfo[playerid][jPos_Z] = floatstr(arrCoords[2]);
	    JugadorInfo[playerid][jPos_A] = floatstr(arrCoords[3]);
		JugadorInfo[playerid][jInt] = strval(arrCoords[4]);
		JugadorInfo[playerid][jVw] = strval(arrCoords[5]);
		SetPlayerInterior(playerid, JugadorInfo[playerid][jInt]);
		SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][jVw]);
		printf("LOGUEA: %f - %f - %f - %f - %d - %d", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);
	}
	else if(strcmp(cadena, "BolsilloID", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloID[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "BolsilloTipo", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloTipo[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "BolsilloCantidad", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloCantidad[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Datos", true) == 0)
	{
	    JugadorInfo[playerid][jEdad] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jSexo] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jNivel] = strval(arrCoords[2]);
	    JugadorInfo[playerid][jRespeto] = strval(arrCoords[3]);
		JugadorInfo[playerid][jPayDay] = strval(arrCoords[4]);
	}
	else if(strcmp(cadena, "Fisico", true) == 0)
	{
	    JugadorInfo[playerid][jFuerza] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jResistencia] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Casas", true) == 0)
	{
	    JugadorInfo[playerid][jCasa] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jCasaPrestada] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jCasaAlq] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Coches", true) == 0)
	{
	    for(new i = 0; i < 3; i ++)
	    {
		    JugadorInfo[playerid][jCoches][i] = strval(arrCoords[i]);
		    JugadorInfo[playerid][jCochesPrestado][i] = strval(arrCoords[i+3]);
		}
	}
	else if(strcmp(cadena, "CuentasBancarias", true) == 0)
	{
	    for(new i = 0; i < MAX_CBANCARIAS; i++)
	    {
		    JugadorInfo[playerid][jCuentasBancarias][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Faccion", true) == 0)
	{
	    JugadorInfo[playerid][jLider] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jMiembro] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jRango] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Carcel", true) == 0)
	{
	    JugadorInfo[playerid][jEncarcelado] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoEncarcelado] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Medicos", true) == 0)
	{
	    JugadorInfo[playerid][jHerido] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jEnfermedad] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jReceta] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Necesidades", true) == 0)
	{
	    JugadorInfo[playerid][jHambre] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jEnergia] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jAlcohol] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Documentacion", true) == 0)
	{
	    JugadorInfo[playerid][jDNI] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoDNI] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Trabajo", true) == 0)
	{
	    JugadorInfo[playerid][jTrabajo] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoTrabajo] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jUltimoTrabajo] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Servicio", true) == 0)
	{
	    JugadorInfo[playerid][jServicio] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jUniforme] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "DocFalsa", true) == 0)
	{
	    format(JugadorInfo[playerid][jNombreFalso],35,"%s", arrCoords[0]);
	    JugadorInfo[playerid][jDNIFalso] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Lenguajes", true) == 0)
	{
	    JugadorInfo[playerid][jBiblio] = strval(arrCoords[0]);
	    for(new i = 0; i < 7; i++)
	    {
	    	JugadorInfo[playerid][jIdiomas] = strval(arrCoords[i+1]);
	    	JugadorInfo[playerid][jEIdiomas] = strval(arrCoords[i+8]);
		}
	}
	else if(strcmp(cadena, "Premium", true) == 0)
	{
	    JugadorInfo[playerid][jPremium] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoPremium] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Habilidad", true) == 0)
	{
	    for(new i = 0; i < 9; i++)
	    {
	    	JugadorInfo[playerid][jHabilidad][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Licencias", true) == 0)
	{
	    for(new i = 0; i < 8; i++)
	    {
	    	JugadorInfo[playerid][jLicencias][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "LicenciasFalsas", true) == 0)
	{
	    for(new i = 0; i < 8; i++)
	    {
	    	JugadorInfo[playerid][jFLicencia][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "PuntosRol", true) == 0)
	{
	    JugadorInfo[playerid][jPuntosRol][0] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jPuntosRol][1] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Heridas", true) == 0)
	{
	    for(new i = 0; i < 7; i++)
	    {
	    	JugadorInfo[playerid][jHeridas][i] = strval(arrCoords[i]);
		}
	}
	return 0;
}*/

forward LoggedIn(playerid);
public LoggedIn(playerid)
{
    TextDrawHideForPlayer(playerid, Textdraw9);
	TextDrawHideForPlayer(playerid, Textdraw10);
	TextDrawHideForPlayer(playerid, Textdraw12);

	ExitCamera(playerid);

	ComprobarNivel(playerid);

	JugadorInfo[playerid][jJugando] = 1;
	SaveValue(playerid, "Jugando", 1);

	if(JugadorInfo[playerid][jBaneado] == 1) { SendClientMessage(playerid, ROJO_OSCURO, "* Su cuenta está baneada, vaya al PCU para más información."); KickRetrasado(playerid); }
	else if(JugadorInfo[playerid][jBaneado] == 2) { SendClientMessage(playerid, ROJO_OSCURO, "* Tienes que confirmar tu email."); KickRetrasado(playerid); }
	else if(JugadorInfo[playerid][jBaneado] == 3) { SendClientMessage(playerid, ROJO_OSCURO, "* El registro no está terminado."); KickRetrasado(playerid); }
	else if(JugadorInfo[playerid][jBaneado] == 4) { SendClientMessage(playerid, ROJO_OSCURO, "* El registro no está terminado."); KickRetrasado(playerid); }

	if(JugadorInfo[playerid][jTBan] > 0 && JugadorInfo[playerid][jTBan] <= gettime())
	{
	    JugadorInfo[playerid][jTBan] = 0;
		SaveValue(playerid, "BanTemporal", JugadorInfo[playerid][jTBan]);
	}

	if(JugadorInfo[playerid][jTBan] > 0 && JugadorInfo[playerid][jTBan] >= gettime())
	{
	    new restante_segundos = JugadorInfo[playerid][jTBan] - gettime();
		new restante_dias = ((restante_segundos /60) /60) /24;
	    restante_segundos -= restante_dias*24*60*60;
		new restante_horas = (restante_segundos /60) /60;
	    restante_segundos -= restante_horas*60*60;
		new restante_minutos = (restante_segundos /60);
		restante_segundos -= restante_minutos*60;
		new string[256];
		format(string, sizeof(string), "* Estás baneado temporalmente, te quedan {A71F26}%d días, %d horas, %d minutos y %d segundos.", restante_dias, restante_horas, restante_minutos, restante_segundos);
		SendClientMessage(playerid, BLANCO, string);
		KickRetrasado(playerid);
	}

	//TimerHack[playerid] = SetTimerEx("VerHack", 2000, true, "i", playerid);
	//TimerArmas[playerid] = SetTimerEx("CheckArmas", 1000, true, "i", playerid);

    new plrIP[16];
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
    new dia, mes, ano, hora, minuto, segundo;
	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);
	new fecha[50];
	format(fecha, sizeof(fecha), "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);
    new sql[256];
    format(sql, sizeof(sql), "INSERT INTO accesos (idjugador, Nombre, Ip, Fecha) VALUES ('%d', '%s', '%s', '%s')", JugadorInfo[playerid][jSQLID], NombreJugador(playerid), plrIP, fecha);
    mysql_query(database, sql, false);
    format(sql, sizeof(sql), "UPDATE pcu_usuarios SET ult_juego = '%s' WHERE UsuarioID = '%d'", fecha, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, sql, false);

	new string[128];
	format(string, sizeof(string), "Bienvenido a {00FFFF}"NOMBRE_COMUNIDAD"{FFFFFF}, {00FFFF}%s{FFFFFF}.", NombreJugador(playerid));
	SendClientMessage(playerid, BLANCO, string);
	SendClientMessage(playerid, BLANCO, "Recuerda visitar nuestra página web ({00FFFF}wattsrp.com{FFFFFF}) y el foro ({00FFFF}wattsrp.com/foro{FFFFFF})");
	SendClientMessage(playerid, BLANCO, "Usa {00FFFF}/duda{FFFFFF} si tienes alguna pregunta | Usa {00FFFF}/solicitar {FFFFFF}si precisas a un miembro del Staff.");
	SendClientMessage(playerid, BLANCO, "Usa {00FFFF}/ayuda {FFFFFF} para ver los comandos disponibles");
	SetPlayerColor(playerid, 0xFFFFFF00);
	SetSpawnInfo(playerid, 0, JugadorInfo[playerid][jRopa], JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], 0, 0, 0, 0, 0, 0);
	SetPlayerInterior(playerid, JugadorInfo[playerid][jInt]); SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][jVw]);

	//TimerPos[playerid] = SetTimerEx("FuncPos", 3000, true, "i", playerid);
	AntiSobeit(playerid);
	SpawnPlayer(playerid);

	//Aparecer objetos en la mano
	new Pertenencias[3];
	if(EsArma(BolsilloID[playerid][11]))
	{
	    RemoverArmas(playerid);
	}

	Pertenencias[0] = BolsilloID[playerid][11];
	Pertenencias[1] = BolsilloCantidad[playerid][11];
	Pertenencias[2] = BolsilloTipo[playerid][11];
	BolsilloID[playerid][11] = BolsilloID[playerid][12];
	BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][12];
	BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	BolsilloID[playerid][12] = Pertenencias[0];
	BolsilloCantidad[playerid][12] = Pertenencias[1];
	BolsilloTipo[playerid][12] = Pertenencias[2];

	UpdateAttach(playerid);

	if(BolsilloID[playerid][10] >= 0 && BolsilloID[playerid][10] <= 103)
	{
		SetPlayerAttachedObject(playerid,ESPALDA,BolObjeto[BolsilloID[playerid][10]][0],1,-0.305999,-0.203000,0.097999,-170.500030,0.000000,0.000000,1.000000,1.000000,1.000000);
	}
	else
	{
		SendClientMessage(playerid, 0x0000FF00, "Oops, se produjo un error! El objeto que se quiere agregar es invalido.");
	}

	GuardarBolsillos(playerid);

	if(EsArma(BolsilloID[playerid][11]))
	{
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	}

	UpdateAttach(playerid);
	GuardarBolsillos(playerid);

	if(EsArma(BolsilloID[playerid][11]))
	{
	    RemoverArmas(playerid);
	}

	Pertenencias[0] = BolsilloID[playerid][11];
	Pertenencias[1] = BolsilloCantidad[playerid][11];
	Pertenencias[2] = BolsilloTipo[playerid][11];
	BolsilloID[playerid][11] = BolsilloID[playerid][12];
	BolsilloCantidad[playerid][11] = BolsilloCantidad[playerid][12];
	BolsilloTipo[playerid][11] = BolsilloTipo[playerid][12];
	BolsilloID[playerid][12] = Pertenencias[0];
	BolsilloCantidad[playerid][12] = Pertenencias[1];
	BolsilloTipo[playerid][12] = Pertenencias[2];

	if(EsArma(BolsilloID[playerid][11]))
	{
	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
	}

	UpdateAttach(playerid);
	GuardarBolsillos(playerid);
	return 1;
}

forward FuncPos(playerid);
public FuncPos(playerid)
{
    new query[600];
    new Float:PosX, Float:PosY, Float:PosZ, Float:PosA;
    GetPlayerPos(playerid, PosX, PosY, PosZ);
    GetPlayerFacingAngle(playerid, PosA);
    JugadorInfo[playerid][jPos_X] = PosX; JugadorInfo[playerid][jPos_Y] = PosY; JugadorInfo[playerid][jPos_Z] = PosZ; JugadorInfo[playerid][jPos_A] = PosA;
    JugadorInfo[playerid][jInt] = GetPlayerInterior(playerid); JugadorInfo[playerid][jVw] = GetPlayerVirtualWorld(playerid);
    printf("POSX: %d",JugadorInfo[playerid][jPos_X]);
    format(query, sizeof(query), "UPDATE usuarios SET Posiciones = '%f,%f,%f,%f,%d,%d' WHERE Nombre = '%s'", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt],JugadorInfo[playerid][jVw], pNameEx(playerid));
    mysql_query(database, query, false);
	return 1;
}

forward split(const strsrc[], strdest[][], delimiter);
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}



public LimpiarConsolaATodos(lines)
{
	for(new i=0; i<lines; i++)
	{
		SendClientMessageToAll(0x000000FF, " ");
	}
	return 1;
}

public LimpiarConsola(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, 0x000000FF, " ");
		}
	}
	return 1;
}

CargarGarajes()
{
	new sql[80], row[512], arrCoords[8][64], temp_data[128], rows, fields;
    TotalGarajes = 0;

    format(sql, sizeof(sql), "SELECT * FROM garajes");
	mysql_query(database, sql, true);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			GarajeInfo[idx][gID] = strval(arrCoords[0]);
			GarajeInfo[idx][gCasa] = strval(arrCoords[1]);
			GarajeInfo[idx][gx] = floatstr(arrCoords[2]);
			GarajeInfo[idx][gy] = floatstr(arrCoords[3]);
			GarajeInfo[idx][gz] = floatstr(arrCoords[4]);
			GarajeInfo[idx][ga] = floatstr(arrCoords[5]);
			GarajeInfo[idx][gVW] = strval(arrCoords[6]);
			GarajeInfo[idx][gAbierto] = strval(arrCoords[7]);

			GarajeInfo[idx][gPickup] = CreateDynamicPickup(1239, 1, GarajeInfo[idx][gx], GarajeInfo[idx][gy], GarajeInfo[idx][gz], 0, 0);
			GarajeInfo[idx][gTexto] = CreateDynamic3DTextLabel("", VERDE, GarajeInfo[idx][gx], GarajeInfo[idx][gy], GarajeInfo[idx][gz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			UpdateGarajeLabel(idx);

	        TotalGarajes++;
		}
	}

    printf("Garajes Totales: %d (MAX: %d)", TotalGarajes, MAX_GARAJES);
	return 1;
}

UpdateGarajeLabel(h)
{
    new string[256];
    if(GarajeInfo[h][gAbierto] == 0)
    {
        format(string,sizeof(string),"{00FFFF}Garaje privado{FFFFFF}\nEstado: {00FFFF}Cerrado{FFFFFF}.");
    }
	else
    {
        format(string,sizeof(string),"{00FFFF}Garaje privado{FFFFFF}\nEstado: {00FFFF}Abierto{FFFFFF}.");
    }
    UpdateDynamic3DTextLabelText(GarajeInfo[h][gTexto],VERDE,string);
}

GuardarGaraje(i)
{
	new sql[600];
	format(sql, sizeof(sql), "UPDATE garajes SET `Casa` = '%d', `x` = '%f', `y` = '%f', `z` = '%f', `a` = '%f', `VW` = '%d', `Abierto` = '%d' WHERE `id` = '%d'",
	GarajeInfo[i][gCasa], GarajeInfo[i][gx], GarajeInfo[i][gy], GarajeInfo[i][gz], GarajeInfo[i][ga], GarajeInfo[i][gVW], GarajeInfo[i][gAbierto], GarajeInfo[i][gID]);
	mysql_query(database, sql, false);

    UpdateGarajeLabel(i);
    return 1;
}

CargarFacciones()
{
    new sql[80], row[512], arrCoords[25][64], temp_data[128], rows, fields;
    TotalFacciones = 0;

    format(sql, sizeof(sql), "SELECT * FROM facciones ");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			FaccionInfo[idx][fID] = strval(arrCoords[0]);
			format(FaccionInfo[idx][fNombre], 50, "%s", arrCoords[1]);
			format(FaccionInfo[idx][fRango1], 50, "%s", arrCoords[2]);
			format(FaccionInfo[idx][fRango2], 50, "%s", arrCoords[3]);
			format(FaccionInfo[idx][fRango3], 50, "%s", arrCoords[4]);
			format(FaccionInfo[idx][fRango4], 50, "%s", arrCoords[5]);
			format(FaccionInfo[idx][fRango5], 50, "%s", arrCoords[6]);
			format(FaccionInfo[idx][fRango6], 50, "%s", arrCoords[7]);
			format(FaccionInfo[idx][fRango7], 50, "%s", arrCoords[8]);
			format(FaccionInfo[idx][fRango8], 50, "%s", arrCoords[9]);
			FaccionInfo[idx][fSueldo1] = strval(arrCoords[10]);
			FaccionInfo[idx][fSueldo2] = strval(arrCoords[11]);
			FaccionInfo[idx][fSueldo3] = strval(arrCoords[12]);
			FaccionInfo[idx][fSueldo4] = strval(arrCoords[13]);
			FaccionInfo[idx][fSueldo5] = strval(arrCoords[14]);
			FaccionInfo[idx][fSueldo6] = strval(arrCoords[15]);
			FaccionInfo[idx][fSueldo7] = strval(arrCoords[16]);
			FaccionInfo[idx][fSueldo8] = strval(arrCoords[17]);
			FaccionInfo[idx][fLider] = strval(arrCoords[18]);
			TotalFacciones++;
		}
	}

    printf("Facciones Totales: %d (MAX: %d)",TotalFacciones,MAX_FACCIONES);
	return 1;
}

stock GuardarFaccion(i)
{
	new sql[256];
	format(sql, sizeof(sql), "UPDATE facciones SET `Nombre` = '%s' WHERE `id` = '%d'",
	    FaccionInfo[i][fNombre],
	    FaccionInfo[i][fID]);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "UPDATE facciones SET `Rango1` = '%s', `Rango2` = '%s', `Rango3` = '%s', `Rango4` = '%s', `Rango5` = '%s', `Rango6` = '%s', `Rango7` = '%s', `Rango8` = '%s' WHERE `id` = '%d'",
        FaccionInfo[i][fRango1], FaccionInfo[i][fRango2], FaccionInfo[i][fRango3], FaccionInfo[i][fRango4], FaccionInfo[i][fRango5], FaccionInfo[i][fRango6], FaccionInfo[i][fRango7], FaccionInfo[i][fRango8],
		FaccionInfo[i][fID]);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "UPDATE facciones SET `Sueldo1` = '%d', `Sueldo2` = '%d', `Sueldo3` = '%d', `Sueldo4` = '%d', `Sueldo5` = '%d', `Sueldo6` = '%d', `Sueldo7` = '%d', `Sueldo8` = '%d' WHERE `id` = '%d'",
	    FaccionInfo[i][fSueldo1], FaccionInfo[i][fSueldo2], FaccionInfo[i][fSueldo3], FaccionInfo[i][fSueldo4], FaccionInfo[i][fSueldo5], FaccionInfo[i][fSueldo6], FaccionInfo[i][fSueldo7], FaccionInfo[i][fSueldo8],
	    FaccionInfo[i][fID]);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "UPDATE facciones SET `Lider` = '%d' WHERE `id` = '%d'",
	    FaccionInfo[i][fLider],
	    FaccionInfo[i][fID]);
	mysql_query(database, sql, false);
}

CargarVarios()
{
	new sql[80], row[512], arrCoords[6][64], temp_data[128], rows, fields;
    format(sql, sizeof(sql), "SELECT * FROM varios");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			Impuestos[0] = strval(arrCoords[1]); // Casa
			Impuestos[1] = strval(arrCoords[2]); // Negocio
			Impuestos[2] = strval(arrCoords[3]); // Coche
			CajasFuerte[0] = strval(arrCoords[4]); // Gobierno
			CajasFuerte[1] = strval(arrCoords[5]); // LSRTV
		}
	}

    printf("Varios cargados");
	return 1;
}

CargarAlmacenes()
{
	new sql[80], row[512], arrCoords[19][64], temp_data[128], rows, fields;
    TotalAlmacenes = 0;

    format(sql, sizeof(sql), "SELECT * FROM almacenes ");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			AlmacenInfo[idx][alID] = strval(arrCoords[0]);
			AlmacenInfo[idx][alx] = floatstr(arrCoords[1]);
			AlmacenInfo[idx][aly] = floatstr(arrCoords[2]);
			AlmacenInfo[idx][alz] = floatstr(arrCoords[3]);
			AlmacenInfo[idx][alxx] = floatstr(arrCoords[4]);
			AlmacenInfo[idx][alyy] = floatstr(arrCoords[5]);
			AlmacenInfo[idx][alzz] = floatstr(arrCoords[6]);
			AlmacenInfo[idx][alxxx] = floatstr(arrCoords[7]);
			AlmacenInfo[idx][alyyy] = floatstr(arrCoords[8]);
			AlmacenInfo[idx][alzzz] = floatstr(arrCoords[9]);
			AlmacenInfo[idx][alInt] = strval(arrCoords[10]);
			AlmacenInfo[idx][alVW] = strval(arrCoords[11]);
			format(AlmacenInfo[idx][alOIDs], 350, "%s", arrCoords[12]);
			format(AlmacenInfo[idx][alOCAs], 350, "%s", arrCoords[13]);
			format(AlmacenInfo[idx][alOTIs], 350, "%s", arrCoords[14]);
			AlmacenInfo[idx][alEstado] = strval(arrCoords[15]);
			AlmacenInfo[idx][alPrecio] = strval(arrCoords[16]);
			AlmacenInfo[idx][alComprado] = strval(arrCoords[17]);
			format(AlmacenInfo[idx][alComprador], 50, "%s", arrCoords[18]);

			new Ids[30][16];
	        new Tipos[30][16];
	        new Cantidades[30][16];
	        split(AlmacenInfo[idx][alOIDs], Ids,',');
	        split(AlmacenInfo[idx][alOCAs], Tipos,',');
	        split(AlmacenInfo[idx][alOTIs], Cantidades,',');

	        for(new i = 0; i < 30; i++)
	        {
	            AlmacenInfo[idx][alOID][i] = strval(Ids[i]);
	            AlmacenInfo[idx][alOCA][i] = strval(Tipos[i]);
	            AlmacenInfo[idx][alOTI][i] = strval(Cantidades[i]);
	        }

			AlmacenInfo[idx][alPickup] = CreateDynamicPickup(1272, 1, AlmacenInfo[idx][alx], AlmacenInfo[idx][aly], AlmacenInfo[idx][alz], 0, 0);
			AlmacenInfo[idx][alTexto] = CreateDynamic3DTextLabel("", VERDE, AlmacenInfo[idx][alx], AlmacenInfo[idx][aly], AlmacenInfo[idx][alz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			UpdateAlmacenLabel(idx);

	        TotalAlmacenes++;
		}
	}

    printf("Almacenes Totales: %d (MAX: %d)",TotalAlmacenes,MAX_ALMACENES);
	return 1;
}

CargarSenales()
{
    new sql[80], row[512], arrCoords[7][64], temp_data[128], rows, fields;
    TotalSenales = 0;

    format(sql, sizeof(sql), "SELECT * FROM senales ");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			SenalInfo[idx][senID] = strval(arrCoords[0]);
			SenalInfo[idx][senTipo] = strval(arrCoords[1]);
			SenalInfo[idx][senx] = floatstr(arrCoords[2]);
			SenalInfo[idx][seny] = floatstr(arrCoords[3]);
			SenalInfo[idx][senz] = floatstr(arrCoords[4]);
			SenalInfo[idx][senrz] = floatstr(arrCoords[5]);
			format(SenalInfo[idx][sentexto], 35, "%s", arrCoords[6]);

			CreateTrafficSign(SenalInfo[idx][senTipo], SenalInfo[idx][senx], SenalInfo[idx][seny], SenalInfo[idx][senz], SenalInfo[idx][senrz], 200.0, SenalInfo[idx][sentexto]);
			TotalSenales++;
		}
	}

    printf("Señales totales: %d (MAX: %d)", TotalSenales, MAX_SENALES);
	return 1;
}

CargarBasuras()
{
    new sql[80], row[512], arrCoords[4][64], temp_data[128], rows, fields;
    TotalBasuras = 0;

    format(sql, sizeof(sql), "SELECT * FROM basuras ");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			BasuraInfo[idx][baid] = strval(arrCoords[0]);
			BasuraInfo[idx][bax] = floatstr(arrCoords[1]);
			BasuraInfo[idx][bay] = floatstr(arrCoords[2]);
			BasuraInfo[idx][baz] = floatstr(arrCoords[3]);

	        for(new i = 0; i < MAX_ESPACIOSBASURA; i++)
	        {
	            BasuraInfo[idx][baid][i] = 0;
	            BasuraInfo[idx][bacantidad][i] = 0;
	            BasuraInfo[idx][batipo][i] = 0;
	        }

			BasuraInfo[idx][bapickup] = CreateDynamicPickup(1239, 1, BasuraInfo[idx][bax], BasuraInfo[idx][bay], BasuraInfo[idx][baz]);
			BasuraInfo[idx][batexto] = CreateDynamic3DTextLabel("{00FFFF}Contenedor de basura{FFFFFF}\nUsa {00FFFF}/tirarbasura{FFFFFF} o {00FFFF}/explorar{FFFFFF} para buscar en la basura.", 0xFFFFFFFF, BasuraInfo[idx][bax], BasuraInfo[idx][bay], BasuraInfo[idx][baz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	        TotalBasuras++;
		}
	}

    printf("Basuras totales: %d (MAX: %d)", TotalBasuras, MAX_BASURA);
	return 1;
}

CargarCasas()
{
	new sql[80], row[512], arrCoords[28][64], temp_data[128], rows, fields;
	TotalCasas = 0;

    format(sql, sizeof(sql), "SELECT * FROM casas");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			CasaInfo[idx][cID] = strval(arrCoords[0]);
			CasaInfo[idx][cx] = floatstr(arrCoords[1]);
			CasaInfo[idx][cy] = floatstr(arrCoords[2]);
			CasaInfo[idx][cz] = floatstr(arrCoords[3]);
			CasaInfo[idx][cxx] = floatstr(arrCoords[4]);
			CasaInfo[idx][cyy] = floatstr(arrCoords[5]);
			CasaInfo[idx][czz] = floatstr(arrCoords[6]);
			CasaInfo[idx][cmx] = floatstr(arrCoords[7]);
			CasaInfo[idx][cmy] = floatstr(arrCoords[8]);
			CasaInfo[idx][cmz] = floatstr(arrCoords[9]);
			CasaInfo[idx][cma] = floatstr(arrCoords[10]);
			CasaInfo[idx][cint] = strval(arrCoords[11]);
			CasaInfo[idx][cint2] = strval(arrCoords[12]);
			CasaInfo[idx][cvw] = strval(arrCoords[13]);
			CasaInfo[idx][cvw2] = strval(arrCoords[14]);
			CasaInfo[idx][cAbierta] = strval(arrCoords[15]);
			CasaInfo[idx][cComprada] = strval(arrCoords[16]);
			format(CasaInfo[idx][cComprador], MAX_PLAYER_NAME, "%s", arrCoords[17]);
			CasaInfo[idx][cAlquilable] = strval(arrCoords[18]);
			CasaInfo[idx][cPAlquiler] = strval(arrCoords[19]);
			CasaInfo[idx][cInquilinos] = strval(arrCoords[20]);
			CasaInfo[idx][cPrecio] = strval(arrCoords[21]);
			CasaInfo[idx][cArm] = strval(arrCoords[22]);
			format(CasaInfo[idx][cArmIDs],128,"%s", arrCoords[23]);
	   		format(CasaInfo[idx][cArmTipos],128,"%s", arrCoords[24]);
	   		format(CasaInfo[idx][cArmCantidads],128,"%s", arrCoords[25]);
	   		CasaInfo[idx][cCerradura] = strval(arrCoords[26]);
	   		CasaInfo[idx][cAlarma] = strval(arrCoords[27]);

			new AIDs[5][32];
	        new ATIPOs[5][32];
	        new ACANTIDADs[5][32];
	        split(CasaInfo[idx][cArmIDs],AIDs,',');
	        split(CasaInfo[idx][cArmTipos],ATIPOs,',');
	        split(CasaInfo[idx][cArmCantidads],ACANTIDADs,',');
	        for(new i = 0; i < 5; i++)
	        {
	            CasaInfo[idx][cArmID][i] = strval(AIDs[i]);
	            CasaInfo[idx][cArmTipo][i] = strval(ATIPOs[i]);
	            CasaInfo[idx][cArmCantidad][i] = strval(ACANTIDADs[i]);
	        }

	        if(CasaInfo[idx][cComprada] == 0)
	    	{
	        CasaInfo[idx][cPickup] = CreateDynamicPickup(1273, 1, CasaInfo[idx][cx], CasaInfo[idx][cy], CasaInfo[idx][cz], CasaInfo[idx][cvw], CasaInfo[idx][cint]);
	    	}
	    	if(CasaInfo[idx][cComprada] == 1)
	    	{
	        //CasaInfo[idx][cPickup] = CreateDynamicPickup(19524, 1, CasaInfo[idx][cx], CasaInfo[idx][cy], CasaInfo[idx][cz], CasaInfo[idx][cvw], CasaInfo[idx][cint]);
	        DestroyDynamicPickup(CasaInfo[idx][cPickup]);
			}
			CasaInfo[idx][cTexto] = CreateDynamic3DTextLabel("", VERDE, CasaInfo[idx][cx], CasaInfo[idx][cy], CasaInfo[idx][cz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CasaInfo[idx][cvw], CasaInfo[idx][cint]);
			UpdateCasaLabel(idx);

	        TotalCasas++;
		}
	}

    printf("Casas Totales: %d (MAX: %d)",TotalCasas,MAX_CASAS);
	return 1;
}

CargarTalleres()
{
	new sql[80], row[512], arrCoords[11][64], temp_data[128], rows, fields;
    TotalTalleres = 0;

    format(sql, sizeof(sql), "SELECT * FROM talleres");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			TallerInfo[idx][tID] = strval(arrCoords[0]);
			format(TallerInfo[idx][tNombre], 50, "%s", arrCoords[1]);
			TallerInfo[idx][tNegocio] = strval(arrCoords[2]);
			TallerInfo[idx][tx] = floatstr(arrCoords[3]);
			TallerInfo[idx][ty] = floatstr(arrCoords[4]);
			TallerInfo[idx][tz] = floatstr(arrCoords[5]);
			TallerInfo[idx][tInt] = strval(arrCoords[6]);
			TallerInfo[idx][tVw] = strval(arrCoords[7]);
			TallerInfo[idx][txx] = floatstr(arrCoords[8]);
			TallerInfo[idx][tyy] = floatstr(arrCoords[9]);
			TallerInfo[idx][tzz] = floatstr(arrCoords[10]);

			TallerInfo[idx][tPickup] = CreateDynamicPickup(1239, 1, TallerInfo[idx][tx], TallerInfo[idx][ty], TallerInfo[idx][tz], TallerInfo[idx][tVw], TallerInfo[idx][tInt]);
			TallerInfo[idx][tTexto] = CreateDynamic3DTextLabel("", VERDE, TallerInfo[idx][tx], TallerInfo[idx][ty], TallerInfo[idx][tz], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TallerInfo[idx][tVw], TallerInfo[idx][tInt]);
			UpdateTallerLabel(idx);

	        TotalTalleres++;
		}
	}

    printf("Talleres Totales: %d (MAX: %d)",TotalTalleres,MAX_TALLERES);
	return 1;
}

CargarDelitos()
{
	new sql[80], row[512], arrCoords[6][64], temp_data[128], rows, fields;
    TotalDelitos = 0;

    format(sql, sizeof(sql), "SELECT * FROM delitos");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			DelitoInfo[idx][dID] = strval(arrCoords[0]);
			format(DelitoInfo[idx][dNombre], MAX_PLAYER_NAME, "%s", arrCoords[1]);
			format(DelitoInfo[idx][dInformacion], 128, "%s", arrCoords[2]);
			format(DelitoInfo[idx][dFecha], MAX_PLAYER_NAME, "%s", arrCoords[3]);
			DelitoInfo[idx][dResuelto] = strval(arrCoords[4]);
			format(DelitoInfo[idx][dReportador], MAX_PLAYER_NAME, "%s", arrCoords[5]);

	        TotalDelitos++;
		}
	}

    printf("Delitos Totales: %d (MAX: %d)", TotalDelitos, MAX_DELITOS);
	return 1;
}

UpdateTallerLabel(h)
{
    new Descripcion[128];
    format(Descripcion, sizeof(Descripcion), "{FFFFFF}Taller %s", TallerInfo[h][tNombre]);
    UpdateDynamic3DTextLabelText(TallerInfo[h][tTexto], VERDE, Descripcion);
}

UpdateAlmacenLabel(h)
{
    new string[256];
    if(AlmacenInfo[h][alComprado] == 0)
    {
        format(string,sizeof(string),"{00FFFF}Almacén en venta{FFFFFF}\nPrecio del almacén: {00FFFF}$%d{FFFFFF}\nUsa {00FFFF}/comprar almacen{FFFFFF} para comprarlo.", AlmacenInfo[h][alPrecio]);
    }
    else
    {
        if(AlmacenInfo[h][alEstado] == 0)
        {
            format(string,sizeof(string),"{FFFFFF}Almacén {00FFFF}cerrado{FFFFFF}.");
        }
        else
        {
            format(string,sizeof(string),"{FFFFFF}Almacén {00FFFF}abierto{FFFFFF}.\nAprieta {00FFFF}INTRO{FFFFFF} entrar.");
        }
    }
    UpdateDynamic3DTextLabelText(AlmacenInfo[h][alTexto],VERDE,string);
}

UpdateCasaLabel(h)
{
    new string[256], Descripcion[128];
    format(Descripcion, sizeof(Descripcion), "{FFFFFF}Dueño: {00FFFF}%s\n{FFFFFF}Casa {00FFFF}LS%d", CasaInfo[h][cComprador],CasaInfo[h][cID]);
   	if(CasaInfo[h][cComprada] == 1)
   	{
   	DestroyDynamicPickup(CasaInfo[h][cPickup]);
    //CasaInfo[h][cPickup] = CreateDynamicPickup(19524, 1, CasaInfo[h][cx], CasaInfo[h][cy], CasaInfo[h][cz], CasaInfo[h][cvw], CasaInfo[h][cint]);
   	}
    if(CasaInfo[h][cComprada] == 0)
    {
        format(string,sizeof(string),"{00FFFF}%s{FFFFFF}\nPrecio de la casa: {00FFFF}$%d{FFFFFF}\nUsa {00FFFF}/visitar{FFFFFF} para ver  su interior.\nUsa {00FFFF}/comprar casa{FFFFFF} para comprarla.", Descripcion, CasaInfo[h][cPrecio]);
        CasaInfo[h][cPickup] = CreateDynamicPickup(1273, 1, CasaInfo[h][cx], CasaInfo[h][cy], CasaInfo[h][cz], CasaInfo[h][cvw], CasaInfo[h][cint]);
	}
	else
    {
        if(CasaInfo[h][cAlquilable] == 0)
        {
	        if(CasaInfo[h][cAbierta] == 0)
	        {
	            format(string,sizeof(string),"{00FFFF}%s{FFFFFF}\nCasa {00FFFF}cerrada{FFFFFF}", Descripcion);
	        }
	        else
	        {
	            format(string,sizeof(string),"{00FFFF}%s{FFFFFF}\nCasa {00FFFF}abierta{FFFFFF}.\nAprieta {00FFFF}INTRO{FFFFFF} entrar.", Descripcion);
	        }
		}
		else
		{
		    if(CasaInfo[h][cAbierta] == 0)
	        {
	            format(string,sizeof(string),"{00FFFF}%s{FFFFFF}\nCasa {00FFFF}cerrada{FFFFFF}\nAlquilable por {00FFFF}%d{FFFFFF} dólares.\nUsa {00FFFF}/alquilar casa{FFFFFF} para rentarla.", Descripcion, CasaInfo[h][cPAlquiler]);
	        }
	        else
	        {
	            format(string,sizeof(string),"{00FFFF}%s{FFFFFF}\nCasa {00FFFF}abierta{FFFFFF}.\nAprieta {00FFFF}INTRO{FFFFFF} entrar.\nAlquilable por {00FFFF}%d{FFFFFF} dólares.\nUsa {00FFFF}/alquilar casa{FFFFFF} para rentarla.", Descripcion, CasaInfo[h][cPAlquiler]);
	        }
		}
    }
    UpdateDynamic3DTextLabelText(CasaInfo[h][cTexto],VERDE,string);
}

GuardarAlmacen(idx)
{
    new sql[1200];
	format(sql, sizeof(sql), "UPDATE almacenes SET `x`='%f', `y`='%f', `z`='%f', `xx`='%f', `yy`='%f', `zz`='%f', `xxx`='%f', `yyy`='%f', `zzz`='%f', `Interior`='%d', `VW`='%d' WHERE `id`='%d'",
		AlmacenInfo[idx][alx],
		AlmacenInfo[idx][aly],
		AlmacenInfo[idx][alz],
		AlmacenInfo[idx][alxx],
		AlmacenInfo[idx][alyy],
		AlmacenInfo[idx][alzz],
		AlmacenInfo[idx][alxxx],
		AlmacenInfo[idx][alyyy],
		AlmacenInfo[idx][alzzz],
		AlmacenInfo[idx][alInt],
		AlmacenInfo[idx][alVW],
		AlmacenInfo[idx][alID]
	);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "UPDATE almacenes SET `Precio`='%d', `Comprado`='%d', `Comprador`='%s', `Estado`='%d' WHERE `id`='%d'",
        AlmacenInfo[idx][alPrecio],
        AlmacenInfo[idx][alComprado],
        AlmacenInfo[idx][alComprador],
        AlmacenInfo[idx][alEstado],
        AlmacenInfo[idx][alID]
	);
	mysql_query(database, sql, false);

    format(AlmacenInfo[idx][alOIDs], 350, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	    AlmacenInfo[idx][alOID][0], AlmacenInfo[idx][alOID][1], AlmacenInfo[idx][alOID][2], AlmacenInfo[idx][alOID][3], AlmacenInfo[idx][alOID][4], AlmacenInfo[idx][alOID][5], AlmacenInfo[idx][alOID][6], AlmacenInfo[idx][alOID][7], AlmacenInfo[idx][alOID][8],
        AlmacenInfo[idx][alOID][9], AlmacenInfo[idx][alOID][10], AlmacenInfo[idx][alOID][11], AlmacenInfo[idx][alOID][12], AlmacenInfo[idx][alOID][13], AlmacenInfo[idx][alOID][14], AlmacenInfo[idx][alOID][15], AlmacenInfo[idx][alOID][16], AlmacenInfo[idx][alOID][17],
        AlmacenInfo[idx][alOID][18], AlmacenInfo[idx][alOID][19], AlmacenInfo[idx][alOID][20], AlmacenInfo[idx][alOID][21], AlmacenInfo[idx][alOID][22], AlmacenInfo[idx][alOID][23], AlmacenInfo[idx][alOID][24], AlmacenInfo[idx][alOID][25], AlmacenInfo[idx][alOID][26],
        AlmacenInfo[idx][alOID][27], AlmacenInfo[idx][alOID][28], AlmacenInfo[idx][alOID][29]
	);

	format(AlmacenInfo[idx][alOCAs], 350, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	    AlmacenInfo[idx][alOCA][0], AlmacenInfo[idx][alOCA][1], AlmacenInfo[idx][alOCA][2], AlmacenInfo[idx][alOCA][3], AlmacenInfo[idx][alOCA][4], AlmacenInfo[idx][alOCA][5], AlmacenInfo[idx][alOCA][6], AlmacenInfo[idx][alOCA][7], AlmacenInfo[idx][alOCA][8],
        AlmacenInfo[idx][alOCA][9], AlmacenInfo[idx][alOCA][10], AlmacenInfo[idx][alOCA][11], AlmacenInfo[idx][alOCA][12], AlmacenInfo[idx][alOCA][13], AlmacenInfo[idx][alOCA][14], AlmacenInfo[idx][alOCA][15], AlmacenInfo[idx][alOCA][16], AlmacenInfo[idx][alOCA][17],
        AlmacenInfo[idx][alOCA][18], AlmacenInfo[idx][alOCA][19], AlmacenInfo[idx][alOCA][20], AlmacenInfo[idx][alOCA][21], AlmacenInfo[idx][alOCA][22], AlmacenInfo[idx][alOCA][23], AlmacenInfo[idx][alOCA][24], AlmacenInfo[idx][alOCA][25], AlmacenInfo[idx][alOCA][26],
        AlmacenInfo[idx][alOCA][27], AlmacenInfo[idx][alOCA][28], AlmacenInfo[idx][alOCA][29]
	);

	format(AlmacenInfo[idx][alOTIs], 350, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	    AlmacenInfo[idx][alOTI][0], AlmacenInfo[idx][alOTI][1], AlmacenInfo[idx][alOTI][2], AlmacenInfo[idx][alOTI][3], AlmacenInfo[idx][alOTI][4], AlmacenInfo[idx][alOTI][5], AlmacenInfo[idx][alOTI][6], AlmacenInfo[idx][alOTI][7], AlmacenInfo[idx][alOTI][8],
        AlmacenInfo[idx][alOTI][9], AlmacenInfo[idx][alOTI][10], AlmacenInfo[idx][alOTI][11], AlmacenInfo[idx][alOTI][12], AlmacenInfo[idx][alOTI][13], AlmacenInfo[idx][alOTI][14], AlmacenInfo[idx][alOTI][15], AlmacenInfo[idx][alOTI][16], AlmacenInfo[idx][alOTI][17],
        AlmacenInfo[idx][alOTI][18], AlmacenInfo[idx][alOTI][19], AlmacenInfo[idx][alOTI][20], AlmacenInfo[idx][alOTI][21], AlmacenInfo[idx][alOTI][22], AlmacenInfo[idx][alOTI][23], AlmacenInfo[idx][alOTI][24], AlmacenInfo[idx][alOTI][25], AlmacenInfo[idx][alOTI][26],
        AlmacenInfo[idx][alOTI][27], AlmacenInfo[idx][alOTI][28], AlmacenInfo[idx][alOTI][29]
	);

	format(sql, sizeof(sql), "UPDATE almacenes SET `OIDs`='%s', `OCAs`='%s', `OTIs`='%s' WHERE `id`='%d'",
	    AlmacenInfo[idx][alOIDs],
	    AlmacenInfo[idx][alOCAs],
	    AlmacenInfo[idx][alOTIs],
	    AlmacenInfo[idx][alID]
	);
	mysql_query(database, sql, false);

	UpdateAlmacenLabel(idx);
	return 1;
}

GuardarCasa(idx)
{
	new sql[1200];
	format(sql, sizeof(sql), "UPDATE casas SET `x`='%f', `y`='%f', `z`='%f', `xx`='%f', `yy`='%f', `zz`='%f', `mx`='%f', `my`='%f', `mz`='%f', `ma`='%f' WHERE `ID`='%d'",
		CasaInfo[idx][cx],
		CasaInfo[idx][cy],
		CasaInfo[idx][cz],
		CasaInfo[idx][cxx],
		CasaInfo[idx][cyy],
		CasaInfo[idx][czz],
		CasaInfo[idx][cmx],
		CasaInfo[idx][cmy],
		CasaInfo[idx][cmz],
		CasaInfo[idx][cma],
		CasaInfo[idx][cID]
	);
	mysql_query(database, sql, false);

	format(sql, sizeof(sql), "UPDATE casas SET `int`='%d', `int2`='%d', `vw`='%d', `vw2`='%d', `Precio`='%d', `Comprada`='%d', `Comprador`='%s', `Abierta`='%d', `Alquilable`='%d', `PAlquiler`='%d', `Inquilinos`='%d', `Cerradura`='%d', `Alarma`='%d' WHERE `ID`='%d'",
        CasaInfo[idx][cint],
        CasaInfo[idx][cint2],
        CasaInfo[idx][cvw],
        CasaInfo[idx][cvw2],
        CasaInfo[idx][cPrecio],
        CasaInfo[idx][cComprada],
        CasaInfo[idx][cComprador],
        CasaInfo[idx][cAbierta],
        CasaInfo[idx][cAlquilable],
        CasaInfo[idx][cPAlquiler],
        CasaInfo[idx][cInquilinos],
        CasaInfo[idx][cCerradura],
        CasaInfo[idx][cAlarma],
        CasaInfo[idx][cID]
	);
	mysql_query(database, sql, false);

	UpdateCasaLabel(idx);
	return 1;
}

forward Desfrizear(playerid);
public Desfrizear(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

forward ArmaSegura(playerid);
public ArmaSegura(playerid)
{
	GuardoArmaSegura[playerid] = 0;
	return 1;
}

forward LevantarRejasCam1(playerid);
public LevantarRejasCam1(playerid)
{
	RotateObject(rejacam1, 0.00000, -90.00000, -90.08000,10,10);
	return 1;
}
forward LevantarRejasCam2(playerid);
public LevantarRejasCam2(playerid)
{
	RotateObject(rejacam2, 0.00000, -90.00000, 89.96000,10,10);
	return 1;
}

stock ComprobarEntradas(playerid)
{
    /* Entradas y salidas de comisaría */
	if(PlayerToPoint(playerid, 1.5, 1395.4467,-1669.3635,13.5600))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 238.6438,139.2395,1003.0234);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 360);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 238.6438,139.2395,1003.0234))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1395.4467,-1669.3635,13.5600);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 270);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1402.1504,-1677.5054,6.1569)) // Garaje - Comisaría
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 202.1060,180.5154,1003.0346);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 202.1060,180.5154,1003.0346)) // Comisaría - Garaje
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1402.1504,-1677.5054,6.1569);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 90);
	    return 1;
	}
	/* Guardia nacional */
	else if(PlayerToPoint(playerid, 1.5, 1777.3148,-1721.3660,13.5469))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1486.6864,-799.0255,1085.6998);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 3);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1486.6864,-799.0255,1085.6998))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1777.3148,-1721.3660,13.5469);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 2737.7168,-2448.1086,14.2259)) // CUARTEL DE LA BASE
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 988.8917,1000.1093,1001.5000);
	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, 5);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 988.8917,1000.1093,1001.5000))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 2737.7168,-2448.1086,14.2259);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 270);
	    return 1;
	}
	/* Entrada garaje CNN */
	if(PlayerToPoint(playerid, 5, 759.2063,-1370.8650,13.8239))
	{
	    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar al garaje.");
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SetPlayerPos(playerid, 770.3700,-1389.8593,-15.5754);
	        SetPlayerFacingAngle(playerid, 180);
	        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
	    }
	}
	if(PlayerToPoint(playerid, 5, 784.9937,-1387.9502,-15.5962))
	{
	    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar al garaje.");
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			SetPlayerPos(playerid, 759.6904,-1380.6534,13.8206);
	        SetPlayerFacingAngle(playerid, 270);
	        SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
			GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
	    }
	}
	/* Entrada Torre Control US Army */
	if(PlayerToPoint(playerid, 5, 2809.0859,-2431.4893,13.6285))
	{
     	SetPlayerPos(playerid, 2808.5488,-2440.7673,67.8400);
     	SetPlayerFacingAngle(playerid, 180);
     	SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
	}
	if(PlayerToPoint(playerid, 5, 2808.5488,-2440.7673,67.8400))
	{
		SetPlayerPos(playerid, 2809.0859,-2431.4893,13.6285);
  		SetPlayerFacingAngle(playerid, 270);
    	SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos...", 2000, 5);
	}
	/* Grotti */
	else if(PlayerToPoint(playerid, 1.5, 542.0348,-1293.0002,17.5149)) // Entrada grotti
	{
	    SetPlayerPos(playerid, 541.6243,-1296.1862,17.3059);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 541.6243,-1296.1862,17.3059)) // Salida grotti
	{
	    SetPlayerPos(playerid, 542.0348,-1293.0002,17.5149);
	    SetPlayerFacingAngle(playerid, 2);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Entrada carcel desde calle */
	else if(PlayerToPoint(playerid, 1.5, 1798.0630,-1578.8143,14.0912)) // Entrada prision
	{
	    SetPlayerPos(playerid, 210.1253,-1071.6482,-94.0300);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 18);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 210.1253,-1071.6482,-94.0300)) // Salida prision
	{
	    SetPlayerPos(playerid, 1798.0630,-1578.8143,14.0912);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Juzgados */
	else if(PlayerToPoint(playerid, 1.5, 1554.1772,-1675.6061,16.1953)) // Entrada juzgado
	{
	    SetPlayerPos(playerid, -707.6747,2339.9878,91.7865+0.5);
	    SetPlayerFacingAngle(playerid, 90);
	    SetPlayerInterior(playerid, 4);
	    SetPlayerVirtualWorld(playerid, 4);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -707.6747,2339.9878,91.7865)) // Salida juzgado
	{
	    SetPlayerPos(playerid, 1554.1772,-1675.6061,16.1953);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Pasar de parking a patio de prisión */
	else if(PlayerToPoint(playerid, 1.5, 1782.0931,-1538.5858,9.8722)) // lado parking
	{
	    SetPlayerPos(playerid, 1780.3003,-1539.2384,9.9016);
	    SetPlayerFacingAngle(playerid, 306);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1780.3003,-1539.2384,9.9016)) // lado patio
	{
	    SetPlayerPos(playerid, 1782.0931,-1538.5858,9.8722);
	    SetPlayerFacingAngle(playerid, 274);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}

	/* Autoescuela */
	if(PlayerToPoint(playerid, 1.5, 2053.5649,-1908.0745,13.9943)) // Entrada autoescuela
	{
	    SetPlayerPos(playerid, 2184.0579,-1957.8829,-60.6141+0.5);
	    SetPlayerFacingAngle(playerid, 360);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 3);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	if(PlayerToPoint(playerid, 1.5, 2184.0579,-1957.8829,-60.6141)) // Salida autoescuela
	{
	    SetPlayerPos(playerid, 2053.5649,-1908.0745,13.9943);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}

	/* Zona de control de la carcel */
	else if(PlayerToPoint(playerid, 1.5, 223.6860,-1092.6305,-94.0300)) // Subida
	{
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    SetPlayerPos(playerid, 231.0880,-1093.9061,-90.5441);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 231.0880,-1093.9061,-90.5441)) // Bajada
	{
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    SetPlayerPos(playerid, 223.6860,-1092.6305,-94.0300);
	    SetPlayerFacingAngle(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Recepción de carcel a celdas */
	else if(PlayerToPoint(playerid, 1.5, 225.5269,-1070.1876,-94.0300)) // Recepción -> Carcel
	{
	    SetPlayerPos(playerid, 228.8934,-1074.7865,-94.0300);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 228.8934,-1074.7865,-94.0300)) // Carcel -> Recepción
	{
	    SetPlayerPos(playerid, 225.5269,-1070.1876,-94.0300);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Entrada carcel desde calle */
	else if(PlayerToPoint(playerid, 1.5, 1798.0630,-1578.8143,14.0912)) // Entrada prision
	{
	    SetPlayerPos(playerid, 210.1253,-1071.6482,-94.0300);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 18);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 210.1253,-1071.6482,-94.0300)) // Salida prision
	{
	    SetPlayerPos(playerid, 1798.0630,-1578.8143,14.0912);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Entrada carcel desde patio */
	else if(PlayerToPoint(playerid, 1.5, 1772.3335,-1548.1348,9.9063)) // Entrada prision
	{
	    SetPlayerPos(playerid, 214.6162,-1090.9647,-94.0300);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 18);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 214.6162,-1090.9647,-94.0300)) // Salida prision
	{
	    SetPlayerPos(playerid, 1772.3335,-1548.1348,9.9063);
	    SetPlayerFacingAngle(playerid, 41);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Comedor social */
	else if(PlayerToPoint(playerid, 1.5, 1378.9515,-1794.3083,13.5446)) // Entrada comedor
	{
	    SetPlayerPos(playerid, 3221.1147,-1194.2338,897.5187);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 3221.1147,-1194.2338,897.5187)) // Salida comedor
	{
	    SetPlayerPos(playerid, 1378.9515,-1794.3083,13.5446);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Iglesia */
	else if(PlayerToPoint(playerid, 1.5, 2232.9048,-1333.2749,23.9816)) // Entrada Iglesia
	{
	    SetPlayerPos(playerid, 1964.0344,-350.2046,1092.9436);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 16);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1964.0344,-350.2046,1092.9436)) // Salida Iglesia
	{
	    SetPlayerPos(playerid, 2232.9048,-1333.2749,23.9816);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Asuntos internos */
	else if(PlayerToPoint(playerid, 1.5, 1685.0588,-1343.3066,17.4350)) // Entrada asuntos internos
	{
	    SetPlayerPos(playerid, 1240.1462,-1685.0177,-17.7241);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerInterior(playerid, 6);
	    SetPlayerVirtualWorld(playerid, 0);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1240.1462,-1685.0177,-17.7241)) // Salida asuntos internos
	{
	    SetPlayerPos(playerid, 1685.0588,-1343.3066,17.4350);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Caja fuerte banco */
	else if(PlayerToPoint(playerid, 1, -2757.4678,371.4011,-17.6441)) // Entrada caja fuerte banco
	{
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar por esta puerta.");
	    SetPlayerPos(playerid, -2754.0398,370.3316,-16.7201+0.5);
	    SetPlayerFacingAngle(playerid, 360);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, -2754.0398,370.3316,-16.7201)) // Salida caja fuerte banco
	{
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No puedes entrar por esta puerta.");
	    SetPlayerPos(playerid, -2757.4678,371.4011,-17.6441);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Banco LS */
	else if(PlayerToPoint(playerid, 1.5, 1465.1200,-1010.9224,26.8438)) // Entrada banco
	{
	    SetPlayerPos(playerid, -2785.9270,379.9103,-17.6441);
	    SetPlayerFacingAngle(playerid, 270);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 3);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -2785.9270,379.9103,-17.6441)) // Salida banco
	{
	    SetPlayerPos(playerid, 1465.1200,-1010.9224,26.8438);
	    SetPlayerFacingAngle(playerid, 180);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Concesionarios */
	else if(PlayerToPoint(playerid, 1, 533.1853,-1811.3259,6.5781)) // Entrada concesionario barcos
	{
	    SetPlayerPos(playerid, 531.4771,-1811.2632,6.5859);
	    SetPlayerFacingAngle(playerid, 90);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, 531.4771,-1811.2632,6.5859)) // Salida concesionario barcos
	{
	    SetPlayerPos(playerid, 533.1853,-1811.3259,6.5781);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, 1671.0542,-1582.2064,13.5469)) // Entrada concesionario comisaría
	{
	    SetPlayerPos(playerid, 1671.1327,-1580.3041,13.5659);
	    SetPlayerFacingAngle(playerid, 360);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, 1671.1327,-1580.3041,13.5659)) // Salida concesionario comisaría
	{
	    SetPlayerPos(playerid, 1671.0542,-1582.2064,13.5469);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 180);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, 1261.1017,-1266.7994,13.5600)) // Entrada concesionario hospital
	{
	    SetPlayerPos(playerid, 1262.8365,-1266.7981,13.5600);
	    SetPlayerFacingAngle(playerid, 270);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1, 1262.8365,-1266.7981,13.5600)) // Salida concesionario hospital
	{
	    SetPlayerPos(playerid, 1261.1017,-1266.7994,13.5600);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 2000, 0, "d", playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	/* Entradas y salidas del gimnasio */
	else if(PlayerToPoint(playerid, 1.5, 2229.4873,-1721.7747,13.5662))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 772.3606,-4.9995,1000.7289);
	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 356);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 772.3606,-4.9995,1000.7289))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 2229.4873,-1721.7747,13.5662);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 136);
	    return 1;
	}
	/* Entradas y salidas de bomberos */
	else if(PlayerToPoint(playerid, 1.5, 1492.6252,-1567.7634,14.1366))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, -1830.5303,162.9309,-18.5041);
	    SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -1830.5303,162.9309,-18.5041))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1492.6252,-1567.7634,14.1366);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 270);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1472.2441,-1560.0710,14.1396)) //LATERAL
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, -1835.5858,121.7149,-18.5041);
	    SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 270);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -1835.5858,121.7149,-18.5041))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1472.2441,-1560.0710,14.1396);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 0);
	    return 1;
	}
	/* Entradas y salidas del hospital */
	else if(PlayerToPoint(playerid, 1.5, 1172.4344,-1325.2883,15.4055))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1190.8556,-1350.6112,-7.4613);
	    SetPlayerInterior(playerid, 6);
	    SetPlayerVirtualWorld(playerid, 6);
	    SetPlayerFacingAngle(playerid, 47);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 1190.8556,-1350.6112,-7.4613))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1172.4344,-1325.2883,15.4055);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 270);
	    return 1;
	}
	/* Entradas y salidas del gobierno */
	else if(PlayerToPoint(playerid, 1.5, 1481.0533,-1771.5319,18.7958))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 376.6566,173.7177,1008.3859);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 1);
	    SetPlayerFacingAngle(playerid, 90);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 376.6566,173.7177,1008.3859))
	{
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
	    SetPlayerPos(playerid, 1481.0533,-1771.5319,18.7958);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerFacingAngle(playerid, 1);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 340.4102,169.6145,1019.9912)) // Entrada armería
	{
	    SetPlayerPos(playerid, 340.2478,167.8281,1019.9912);
	    SetPlayerFacingAngle(playerid, 180);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 340.2478,167.8281,1019.9912)) // Salida armería
	{
	    SetPlayerPos(playerid, 340.4102,169.6145,1019.9912);
	    SetPlayerFacingAngle(playerid, 0);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 360.5312,169.6194,1008.3893)) // Entrada mostrador
	{
	    SetPlayerPos(playerid, 355.2565,169.6684,1008.3859);
	    SetPlayerFacingAngle(playerid, 0);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 355.2565,169.6684,1008.3859)) // Salida mostrador
	{
	    SetPlayerPos(playerid, 360.5312,169.6194,1008.3893);
	    SetPlayerFacingAngle(playerid, 0);
	    return 1;
	}
	/* LSRTV */
	else if(PlayerToPoint(playerid, 1.5, -2520.5364,-642.1064,49.5459)) // Entrada estudio LSRTV
	{
	    SetPlayerPos(playerid, -2517.7610,-642.1486,49.5459+0.5);
	    SetPlayerFacingAngle(playerid, 270);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -2517.7610,-642.1486,49.5459)) // Salida estudio LSRTV
	{
	    SetPlayerPos(playerid, -2520.5364,-642.1064,49.5459);
	    SetPlayerFacingAngle(playerid, 90);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 755.5757,-1363.1271,13.5683)) // Subida azotea LSRTV
	{
	    if(JugadorInfo[playerid][jMiembro] != 5) return SendClientMessage(playerid, ROJO_OSCURO, "* No perteneces a LSRTV.");
	    SetPlayerPos(playerid, 732.8156,-1369.2651,21.4914+0.5);
	    SetPlayerFacingAngle(playerid, 270);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 732.8156,-1369.2651,21.4914)) // Bajada azotea LSRTV
	{
	    SetPlayerPos(playerid, 755.5757,-1363.1271,13.5683);
	    SetPlayerFacingAngle(playerid, 270);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, 732.9965,-1345.1364,13.5683)) // Entrada LSRTV
	{
	    SetPlayerPos(playerid, -2513.7378,-604.6734,45.9459+0.5);
	    SetPlayerFacingAngle(playerid, 180);
	    SetPlayerInterior(playerid, 2);
	    SetPlayerVirtualWorld(playerid, 2);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}
	else if(PlayerToPoint(playerid, 1.5, -2513.7378,-604.6734,45.9459)) // Salida LSRTV
	{
	    SetPlayerPos(playerid, 732.9965,-1345.1364,13.5683);
	    SetPlayerFacingAngle(playerid, 270);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    TogglePlayerControllable(playerid, false);
		SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
		AntiSobeit(playerid);
		GameTextForPlayer(playerid, "~w~Cargando objetos", 2000, 5);
	    return 1;
	}

	/* Entradas y salidas de casas */
    for(new i = 0; i < sizeof(CasaInfo); i++)
	{
		if(PlayerToPoint(playerid, 1, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw])
		{
		    if(CasaInfo[i][cAbierta] == 0) return GameTextForPlayer(playerid, "~r~Cerrada", 5000, 1);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 4000, 0, "d", playerid);
			AntiSobeit(playerid);
			EstaEnCasa[playerid] = i;
			SetPlayerInterior(playerid,CasaInfo[i][cint2]);
			SetPlayerPos(playerid, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]);
			SetPlayerVirtualWorld(playerid, CasaInfo[i][cvw2]);
			//FuncPos(playerid);
			return 1;
		}
		else if(PlayerToPoint(playerid, 1, CasaInfo[i][cxx], CasaInfo[i][cyy], CasaInfo[i][czz]) && GetPlayerInterior(playerid) == CasaInfo[i][cint2] && GetPlayerVirtualWorld(playerid) == CasaInfo[i][cvw2])
		{
		    if(CasaInfo[i][cAbierta] == 0) return GameTextForPlayer(playerid, "~r~Cerrada", 5000, 1);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 4000, 0, "d", playerid);
			AntiSobeit(playerid);
			EstaEnCasa[playerid] = NOEXISTE;
			SetPlayerInterior(playerid, CasaInfo[i][cint]);
			SetPlayerPos(playerid, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]);
			SetPlayerVirtualWorld(playerid, CasaInfo[i][cvw]);
//			FuncPos(playerid);
			return 1;
		}
	}

	/* Entradas y salidas de almacenes */
    for(new i = 0; i < sizeof(AlmacenInfo); i++)
	{
		if(PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alx], AlmacenInfo[i][aly], AlmacenInfo[i][alz]))
		{
		    if(AlmacenInfo[i][alEstado] == 0) return GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			EstaEnCasa[playerid] = i;
			SetPlayerInterior(playerid, 10);
			SetPlayerPos(playerid, AlmacenInfo[i][alxx], AlmacenInfo[i][alyy], AlmacenInfo[i][alzz]);
			SetPlayerVirtualWorld(playerid, AlmacenInfo[i][alVW]);
//			FuncPos(playerid);
			return 1;
		}
		else if(PlayerToPoint(playerid, 1.5, AlmacenInfo[i][alxx], AlmacenInfo[i][alyy], AlmacenInfo[i][alzz]) && GetPlayerVirtualWorld(playerid) == AlmacenInfo[i][alVW])
		{
		    if(AlmacenInfo[i][alEstado] == 0) return GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
		    TogglePlayerControllable(playerid, false);
			SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
			AntiSobeit(playerid);
			EstaEnCasa[playerid] = NOEXISTE;
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, AlmacenInfo[i][alx], AlmacenInfo[i][aly], AlmacenInfo[i][alz]);
			SetPlayerVirtualWorld(playerid, 0);
//			FuncPos(playerid);
			return 1;
		}
	}

	/* Entradas y salidas de negocios */
	for(new n = 0; n < sizeof(NegocioInfo); n++)
	{
		if(PlayerToPoint(playerid, 1.25, NegocioInfo[n][nEX], NegocioInfo[n][nEY], NegocioInfo[n][nEZ]))
		{
			if(NegocioInfo[n][nCerrada] == 1)
			{
			    GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
				return 1;
			}
			else
			{
			    TogglePlayerControllable(playerid, false);
			    SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
				AntiSobeit(playerid);
				EstaEnNegocio[playerid] = n;
				SetPlayerPos(playerid,NegocioInfo[n][nIX],NegocioInfo[n][nIY],NegocioInfo[n][nIZ]);
				SetPlayerInterior(playerid,NegocioInfo[n][nInterior]);
				SetPlayerVirtualWorld(playerid, NegocioInfo[n][nID]);
				ComenzarMusica(playerid, NegocioInfo[n][nTipo]);
//				FuncPos(playerid);
				return 1;
			}
		}
		if(PlayerToPoint(playerid, 1.25, NegocioInfo[n][nIX], NegocioInfo[n][nIY], NegocioInfo[n][nIZ]))
		{
		    if(EstaEnNegocio[playerid] == n)
		    {
		        EstaEnNegocio[playerid] = NOEXISTE;
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,NegocioInfo[n][nEX], NegocioInfo[n][nEY], NegocioInfo[n][nEZ]);
				SetPlayerVirtualWorld(playerid, 0);
				StopAudioStreamForPlayer(playerid);
//				FuncPos(playerid);
				return 1;
			}
		}
	}
	return 1;
}

forward ViendoCasa(playerid);
public ViendoCasa(playerid)
{
	new i = EstaEnCasa[playerid];
	SetPlayerInterior(playerid, CasaInfo[i][cint]);
	SetPlayerVirtualWorld(playerid, CasaInfo[i][cvw]);
	SetPlayerPos(playerid, CasaInfo[i][cx], CasaInfo[i][cy], CasaInfo[i][cz]);
	EstaEnCasa[playerid] = NOEXISTE;
	SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
	AntiSobeit(playerid);
//	FuncPos(playerid);
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					SendClientMessage(i, col2, string);
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					SendClientMessage(i, col3, string);
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					SendClientMessage(i, col4, string);
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col5, string);
				}
			}
		}
	}
	return 1;
}

stock GetXYInFrontOfPoint2(Float:x,Float:y,&Float:x2,&Float:y2,Float:A,Float:distance)
{
	x2 = x + (distance * floatsin(-A,degrees));
	y2 = y + (distance * floatcos(-A,degrees));
}

stock GetPlayer2DZone(zone[], len, Float:x, Float:y)
{
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock ResetWeapon(playerid, weaponid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	new Armas[12], Municiones[12];
	if(weaponid < 0 || weaponid == 19 || weaponid == 20 || weaponid == 21 || weaponid > 46) return 0;
	for(new W = 0; W < 12; W++)
	{
	    GetPlayerWeaponData(playerid, W, Armas[W], Municiones[W]);
	}
    Armas[GetWeaponSlot(weaponid)] = 0;
    Municiones[GetWeaponSlot(weaponid)] = 0;
    RemoverArmas(playerid);
	for(new W = 0; W < 12; W++)
	{
	    DarArma(playerid, Armas[W], Municiones[W]);
	}
	return 1;
}

stock GetWeaponSlot(WeaponId)
{
	switch(WeaponId)
	{
	    case 0,1: return 0;
		case 2..9: return 1;
		case 10..15: return 10;
		case 16..18,39: return 8;
		case 22..24: return 2;
		case 25..27: return 3;
		case 28,29,32: return 4;
		case 30,31: return 5;
		case 33,34: return 6;
		case 35..38: return 7;
		case 40: return 12;
		case 41..43: return 9;
		case 44..46: return 11;
	}
	return 0;
}

stock CargarVehiculos()
{
	new data[512], temp_data[128], rows, fields;
	mysql_query(database, "SELECT * FROM vehiculos", true);

	cache_get_data(rows, fields);

	if(rows)
	{
	    for(new a = 0; a < rows; a ++)
		{
			data[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(a, b, temp_data);

				if(b != 0)
				{
					strcat(data, "#");
					strcat(data, temp_data);
				}
				else
				{
					strcat(data, temp_data);
				}
			}

			//print(data);

		    new temp[aInfo];
		    new panels, doors, lights, tires, Float:vida;
		    new motor, luces, alarma, puertas, capo, maletero, objetivo;
		    new job, paintjob, componentes[92];

		    if(sscanf(data, "p<#>ddffffdddddfddddddds[92]s[32]dddddds[50]s[128]s[128]s[128]",temp[aID], temp[aModelo], temp[ax], temp[ay], temp[az], temp[aa], temp[aColor1], temp[aColor2], temp[aFaccionID], temp[aInteriorID], temp[aVirtualID], vida, panels, doors, lights, tires, temp[aGasolina], job, paintjob,componentes, temp[aOwner], temp[aMotor], temp[aCerrado], temp[aRoto],
				temp[aMal], temp[aMulta], temp[aBloqueado], temp[aDescripcion], temp[aMalIDs], temp[aMalTipos], temp[aMalCantidads]) == 0)
		    {
				new ret = AddStaticVehicleEx(temp[aModelo], temp[ax], temp[ay], temp[az], temp[aa], temp[aColor1], temp[aColor2], 999999);
				AutoInfo[ret] = temp;
				UpdateVehicleDamageStatus(ret, panels, doors, lights, tires);
				if(vida < 325){ vida = 325; }
				SetVehicleHealthEx(ret, vida);
				GetVehicleParamsEx(ret, motor, luces, alarma, puertas, capo, maletero, objetivo);
				SetVehicleParamsEx(ret, 0, luces, alarma, temp[aCerrado], capo, maletero, objetivo);
				if(strcmp(componentes, "no", true))
				{
					new comps[14];
				    if(sscanf(componentes, "A<i>(0)[14]", comps) == 0)
				    {
				        for(new i; i<14; i++)
				            if(comps[i] != 0)
				            	AddVehicleComponent(ret, comps[i]);
				    }
				    if(paintjob != -1) ChangeVehiclePaintjob(ret, paintjob);
			    }

	            new Ids[10][32];
		        new Tipos[10][32];
		        new Cantidades[10][32];
		        split(AutoInfo[ret][aMalIDs], Ids,',');
		        split(AutoInfo[ret][aMalTipos], Tipos,',');
		        split(AutoInfo[ret][aMalCantidads], Cantidades,',');

		        for(new i = 0; i < 10; i++)
		        {
		            AutoInfo[ret][aMalID][i] = strval(Ids[i]);
		            AutoInfo[ret][aMalTipo][i] = strval(Tipos[i]);
		            AutoInfo[ret][aMalCantidad][i] = strval(Cantidades[i]);
		        }

	            new matricula[40];
				format(matricula, sizeof(matricula), "LS-%d", AutoInfo[ret][aID]);
				SetVehicleNumberPlate(ret, matricula);
	            Remolcado[ret] = NOEXISTE;
	            FrenodeMano[ret] = 0;
	            AutoInfo[ret][aMotor] = 0;

				if(AutoInfo[ret][aModelo] == 560 && AutoInfo[ret][aFaccionID] == 1)
				{
					TieneSirena[ret] = CreateObject(19420, 0.0,0.0,0.0,0.0,0.0,0.0);
					AttachObjectToVehicle(TieneSirena[ret], ret, 0, -0.25, 0.83, 0, 0, 0);
				}

				VehAlquilado[ret] = 0;
				CargaDelCamion[ret] = 0;
		    }
		}
	}
}

stock AgregarVehiculo(playerid, modelo, Float:coord_x, Float:coord_y, Float:coord_z, Float:angulo, inter, color_1, color_2, fac_id, gas, job, owner[]="Admin")
{
    if(fac_id == 8888)
	{
	    if(JugadorInfo[playerid][jCoches][0] != NOEXISTE && JugadorInfo[playerid][jCoches][1] != NOEXISTE && JugadorInfo[playerid][jCoches][2] != NOEXISTE)
		{
			SendClientMessage(playerid, ROJO_OSCURO, "* No te quedan slots de coches disponibles.");
			return 1;
		}
	}

	new ret = CreateVehicle(modelo, coord_x, coord_y, coord_z, angulo, color_1, color_2, 3000000);
	LinkVehicleToInterior(ret, inter);

	new panels,doors,lights,tires;
	GetVehicleDamageStatus(ret,panels,doors,lights,tires);
	//printf("Panels: %d | Doors: %d | Lights: %d | Tires: %d", panels, doors, lights, tires);
	new query[512];
	format(query, 512, "INSERT INTO vehiculos (Modelo, X, Y, Z, Angle, Color1, Color2, FaccionID, Interior, Vida, panels, doors, lights, tires, Gasolina, Job, Paintjob, Componentes, Dueno, Roto) VALUES (%d, %f, %f, %f, %f, %d, %d, %d, %d, %f, %d, %d, %d, %d, %d, %d, -1, '', '%s', 0)", modelo, coord_x, coord_y, coord_z, angulo, color_1, color_2, fac_id, inter, 1000.0, panels, doors, lights, tires, gas, job, owner);
	mysql_query(database, query, false);

	AutoInfo[ret][aID] = cache_insert_id();
	AutoInfo[ret][aModelo] = modelo;
	AutoInfo[ret][ax] = coord_x;
	AutoInfo[ret][ay] = coord_y;
	AutoInfo[ret][az] = coord_z;
	AutoInfo[ret][aa] = angulo;
	AutoInfo[ret][aColor1] = color_1;
	AutoInfo[ret][aColor2] = color_2;
	AutoInfo[ret][aFaccionID] = fac_id;
	AutoInfo[ret][aInteriorID] = inter;
	AutoInfo[ret][aVirtualID] = GetPlayerVirtualWorld(playerid);
	AutoInfo[ret][aGasolina] = gas;
	AutoInfo[ret][aMotor] = 0;
	AutoInfo[ret][aCerrado] = 0;
	AutoInfo[ret][aRoto] = 0;
	format(AutoInfo[ret][aOwner], 32, "%s", owner);
	AutoInfo[ret][aMal] = 0;
	AutoInfo[ret][aMulta] = 0;
	AutoInfo[ret][aBloqueado] = 0;
	AutoInfo[ret][aDano] = 1000;
	format(AutoInfo[ret][aDescripcion], 50, "%s", NombreCoche(ret));
	UpdateVehString(AutoInfo[ret][aID], "Descripcion", NombreCoche(ret));
	Remolcado[ret] = NOEXISTE;
	FrenodeMano[ret] = 0;
	CargaDelCamion[ret] = 0;

	SetVehicleHealthEx(ret, 1000);

	for(new i=0; i < 10; i++)
	{
	    AutoInfo[ret][aMalID][i] = 0;
	    AutoInfo[ret][aMalCantidad][i] = 0;
	    AutoInfo[ret][aMalTipo][i] = 0;
	}

	VehAlquilado[ret] = 0;
	LucesAlternes[ret] = 0;

	new matricula[40];
	format(matricula, sizeof(matricula), "LS-%d", AutoInfo[ret][aID]);
	SetVehicleNumberPlate(ret, matricula);

	if(fac_id == 8888)
	{
		if(JugadorInfo[playerid][jCoches][0] == NOEXISTE)
		{
		    JugadorInfo[playerid][jCoches][0] = AutoInfo[ret][aID];
		    return 1;
		}
		else if(JugadorInfo[playerid][jCoches][1] == NOEXISTE)
		{
		    JugadorInfo[playerid][jCoches][1] = AutoInfo[ret][aID];
		    return 1;
		}
		else if(JugadorInfo[playerid][jCoches][2] == NOEXISTE)
		{
		    JugadorInfo[playerid][jCoches][2] = AutoInfo[ret][aID];
		    return 1;
		}
	}
	return 1;
}

public ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(JugadorInfo[i][jAdmin] >= level && OcultarChatAdmin[i] == 0 && OcultarChatEquipo[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock EliminarVehiculo(vehicleid)
{
	new query[128];
	format(query, 128, "DELETE FROM vehiculos WHERE ID = %d", AutoInfo[vehicleid][aID]);
	mysql_query(database, query, false);
}

public CargarLabels()
{
    /* Cajeros */
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 1787.3000488,-1867.3000488,13.1999998, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 2139.3999023,-1186.0999756,23.6000004, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 1154.6999512,-1461.9000244,15.3999996, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 1593.1999512,-2335.5000000,13.1999998, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 599.5999756,-1244.8000488,17.8999996, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 2177.8994141,-1767.8994141,13.1999998, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 590.2999878,-1248.5000000,17.7000008, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 2303.6000977,2.4000001,26.1000004, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 661.2999878,-553.2000122,16.0000000, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 1389.0000000,256.0996094,19.2000008, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{00FFFF}Cajero{FFFFFF}\nUsa {00FFFF}/cajero{FFFFFF} para hacer transacciones.", 0xFFFFFFFF, 1113.8812,-1526.8271,15.7969, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	/* Camionero Entrada */
	CreateDynamic3DTextLabel("{00FFFF}Barrera{FFFFFF}\nPresiona {00FFFF}Y{FFFFFF} para abrirlo.", 0xFFFFFFFF, 918.8986,-1226.4083,16.9766, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{00FFFF}Barrera{FFFFFF}\nPresiona {00FFFF}Y{FFFFFF} para abrirlo.", 0xFFFFFFFF, 926.1478,-1215.7080,16.9671, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

    /* Talleres */
    //CreateDynamic3DTextLabel("{00FFFF}Taller{FFFFFF}\nUsa {00FFFF}/modificar{FFFFFF} - {00FFFF}/tunning{FFFFFF}\n{00FFFF}/reparar{FFFFFF} - {00FFFF}/pintar{FFFFFF}.", 0xFFFFFFFF, 2312.6636,-1981.9938,13.5695, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
   // CreateDynamic3DTextLabel("{00FFFF}Taller{FFFFFF}\nUsa {00FFFF}/modificar{FFFFFF} - {00FFFF}/tunning{FFFFFF}\n{00FFFF}/reparar{FFFFFF} - {00FFFF}/pintar{FFFFFF}.", 0xFFFFFFFF, 2530.5293,-1524.9912,24.0535, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
    //CreateDynamic3DTextLabel("{00FFFF}Taller{FFFFFF}\nUsa {00FFFF}/modificar{FFFFFF} - {00FFFF}/tunning{FFFFFF}\n{00FFFF}/reparar{FFFFFF} - {00FFFF}/pintar{FFFFFF}.", 0xFFFFFFFF, 1041.6848,-1029.6130,32.1016, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

	/* Vender coche */
	CreateDynamic3DTextLabel("{00FFFF}Venta de vehículos{FFFFFF}\nUsa {00FFFF}/venderveh{FFFFFF} para vender tu vehículo.", 0xFFFFFFFF, 369.1873,-1347.9966,14.5174, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Venta de vehículos

	/* Obras unity */
	CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nAprieta {00FFFF}Y{FFFFFF} para usar el ascensor", 0xFFFFFFFF, 1776.1543,-1774.4171,13.5407, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); //
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nAprieta {00FFFF}Y{FFFFFF} para usar el ascensor", 0xFFFFFFFF, 1776.1543,-1774.4171,42.6567, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); //

	/* Casa de empeño */
	CreateDynamic3DTextLabel("{00FFFF}Casa de empeño{FFFFFF}\nUsa {00FFFF}/vender objeto{FFFFFF} para empeñarlo.", 0xFFFFFFFF, 2507.3066,-1724.7253,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); //
    CreateDynamic3DTextLabel("{00FFFF}Casa de empeño{FFFFFF}\nUsa {00FFFF}/vender objeto{FFFFFF} para empeñarlo.", 0xFFFFFFFF, 2723.8562,-2033.7394,13.5472, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); //
    CreateDynamic3DTextLabel("{00FFFF}Casa de empeño{FFFFFF}\nUsa {00FFFF}/vender objeto{FFFFFF} para empeñarlo.", 0xFFFFFFFF, 2423.4016,-1954.9388,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); //

	/* Biblioteca */
	CreateDynamic3DTextLabel("{00FFFF}Biblioteca{FFFFFF}\nUsa {00FFFF}/inscripcion{FFFFFF} para inscribirte en la biblioteca.", 0xFFFFFFFF, 1319.2466,-896.4209,39.6559, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Apuntarse biblioteca

    /* Autoescuela */
	CreateDynamic3DTextLabel("{00FFFF}Autoescuela{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 2053.5649,-1908.0745,13.9943, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada autoescuela
	CreateDynamic3DTextLabel("{00FFFF}Licencias{FFFFFF}\nUsa {00FFFF}/comprar licencia{FFFFFF} para ver los tipos disponibles.", 0xFFFFFFFF, 2184.6653,-1952.9795,-60.6141, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Comprar licencias

	/* Taller Jefferson */
	CreateDynamic3DTextLabel("{00FFFF}Taller Jefferson{FFFFFF}\nEspera aquí a un mecánico para entrar.", 0xFFFFFFFF, 2524.1450,-1524.6024,23.7740, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada taller jefferson

	/* Juzgados */
	CreateDynamic3DTextLabel("{00FFFF}Juzgados{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1554.1772,-1675.6061,16.1953, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada juzgados

	/* Guardia Nacional */
	CreateDynamic3DTextLabel("{00FFFF}US Army{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1777.3148,-1721.3660,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada gn
	CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, 995.4824,1003.2812,1001.5000, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas gn

	/* Banco */
	CreateDynamic3DTextLabel("{00FFFF}Banco de Los Santos{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1465.1200,-1010.9224,26.8438, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada banco
	CreateDynamic3DTextLabel("{00FFFF}Caja fuerte{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, -2757.4678,371.4011,-17.6441, 2, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada caja fuerte
	CreateDynamic3DTextLabel("{00FFFF}Banco{FFFFFF}\nUsa {00FFFF}/banco{FFFFFF} para ver las opciones.", 0xFFFFFFFF, -2776.3823,376.4218,-17.6441, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Banco
	CreateDynamic3DTextLabel("{00FFFF}Banco{FFFFFF}\nUsa {00FFFF}/banco{FFFFFF} para ver las opciones.", 0xFFFFFFFF, -2776.7131,383.4497,-17.6441, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Banco
	CreateDynamic3DTextLabel("{00FFFF}Banco{FFFFFF}\nUsa {00FFFF}/banco{FFFFFF} para ver las opciones.", 0xFFFFFFFF, -2776.5684,380.0213,-17.6441, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Banco

	/* LSRTV */
	new string[256];
	format(string, sizeof(string), "{00FFFF}Anuncios{FFFFFF}\nUsa {00FFFF}/anuncio{FFFFFF} para enviarlo. Coste {00FFFF}$%d{FFFFFF} el mensaje.", PrecioAnuncio);
	infoAnuncio = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, -2513.6125,-610.3277,45.9459, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Anuncios LSRTV
	CreateDynamic3DTextLabel("{00FFFF}Los Santos Radio Televisión{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 732.9965,-1345.1364,13.5683, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada LSRTV
	CreateDynamic3DTextLabel("{00FFFF}Estudio de televisión{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, -2517.7610,-642.1486,49.5459, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Estudio TV
	CreateDynamic3DTextLabel("{00FFFF}Garaje LSRTV{FFFFFF}\nAprieta {00FFFF}ESPACIO{FFFFFF} para entrar.", 0xFFFFFFFF, 759.2063,-1370.8650,13.8239, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada garaje LSRTV
	CreateDynamic3DTextLabel("{00FFFF}Garaje LSRTV{FFFFFF}\nAprieta {00FFFF}ESPACIO{FFFFFF} para salir.", 0xFFFFFFFF, 784.9937,-1387.9502,-15.5962, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Salida garaje LSRTV
	CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para subir.", 0xFFFFFFFF, 755.5757,-1363.1271,13.5683, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor TV
	CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para bajar.", 0xFFFFFFFF, 732.8156,-1369.2651,21.4914, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor bajar TV
	CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, -2505.6377,-640.9767,49.5459, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas LSRTV

	/* Trabajos */
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 1753.1427,-1894.0850,13.5572, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Conductor de autobuses
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 2211.1897,-2046.0941,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Vendedor de licencias ilegales
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte\n{00FFFF}/trabajar {FFFFFF}para comenzar.\n{00FFFF}/ropa {FFFFFF}para ponerte tu ropa.", 0xFFFFFFFF, 2148.1677,-2191.6311,13.5544, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Basurero
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 2170.8396,-2175.6587,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Barrendero
	//CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 358.6755,182.8890,1008.3859, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Abogado
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 1649.2026,-1493.9423,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // V. Móviles
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 2381.7891,286.4539,19.5806, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ladrón
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 2273.9412,-2355.8669,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Mecánico
	CreateDynamic3DTextLabel("{00FFFF}Trabajo disponible{FFFFFF}\nUsa {00FFFF}/trabajo{FFFFFF} para informarte.", 0xFFFFFFFF, 891.3534,-1271.4711,14.9527, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Camionero

	/* Alquiler de vehículos aeropuerto */
	CreateDynamic3DTextLabel("{00FFFF}Alquiler de vehículos{FFFFFF}\nAquí podrás encontrar los vehículos\ndisponibles para alquilar en la ciudad.", 0xFFFFFFFF, 1551.7753,-2294.3044,13.4750, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Información

	/* Gobierno */
	CreateDynamic3DTextLabel("{00FFFF}Gobierno{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1481.0533,-1771.5319,18.7958, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada gobierno
	CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, 364.2622,196.0245,1019.9844, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas gobierno
	CreateDynamic3DTextLabel("{00FFFF}Caja fuerte{FFFFFF}\nUsa {00FFFF}/cajafuerte{FFFFFF} para usarla.", 0xFFFFFFFF, 365.3435,150.9420,1025.7891, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Caja fuerte gobierno
    CreateDynamic3DTextLabel("{00FFFF}Documentación nacional{FFFFFF}\nUsa {00FFFF}/documentacion{FFFFFF}.", 0xFFFFFFFF, 358.6739,178.8037,1008.3859, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Documentación gobierno
    CreateDynamic3DTextLabel("{00FFFF}Transferir dinero{FFFFFF}\nUsa {00FFFF}/transferirestado{FFFFFF}.", 0xFFFFFFFF, 358.7913,187.5178,1008.3859, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Transferir estado

	/* LSPD */
	CreateDynamic3DTextLabel("{00FFFF}Comisaría{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1395.4467,-1669.3635,13.5600, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada comisaría
	CreateDynamic3DTextLabel("{00FFFF}Garaje{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para bajar.", 0xFFFFFFFF, 202.1060,180.5154,1003.0346, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Salida garaje
    CreateDynamic3DTextLabel("{00FFFF}Comisaría{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para subir.", 0xFFFFFFFF, 1402.1504,-1677.5054,6.1569, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Garaje comisaría
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1375.9490,-1679.7460,49.6591, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Azotea comisaría
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1377.4895,-1691.5547,6.2116, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor garaje
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 225.6828,171.0226,1003.0378, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor comisaría
    CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, 219.3259,185.2902,1003.0313, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas comisaría
    CreateDynamic3DTextLabel("{00FFFF}Equipación{FFFFFF}\nUsa {00FFFF}/equipo{FFFFFF} para equiparte.", 0xFFFFFFFF, 211.3206,183.9050,1003.0313, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Equipo
    CreateDynamic3DTextLabel("{00FFFF}Depósito{FFFFFF}\nUsa {00FFFF}/tirarobjeto{FFFFFF} para deshacerte de un objeto.", 0xFFFFFFFF, 215.5868,185.3376,1003.0313, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Equipo


	/* LSMD */
	CreateDynamic3DTextLabel("{00FFFF}Hospital{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1172.4344,-1325.2883,15.4055, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada hospital
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1169.7452,-1352.4379,-7.4613, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor hospital planta 1
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1167.2177,-1353.0588,-1.6512, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Ascensor hospital planta 2
    CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, 1168.5054,-1366.9495,-7.4641, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas hospital
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1161.1812,-1329.2528,31.4977, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Azotea hospital
    CreateDynamic3DTextLabel("{00FFFF}Ascensor{FFFFFF}\nUsa {00FFFF}/ascensor{FFFFFF} para usarlo.", 0xFFFFFFFF, 1149.4419,-1309.1937,13.6982, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Garaje hospital

    /* LSFD */
	CreateDynamic3DTextLabel("{00FFFF}Parque de bomberos{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1492.6252,-1567.7634,14.1366, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada LSFD
    CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, -1825.0851,123.1737,-18.5041, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas
    CreateDynamic3DTextLabel("{00FFFF}Caja fuerte{FFFFFF}\nUsa {00FFFF}/cajafuerte{FFFFFF} para usarla.", 0xFFFFFFFF, -1822.8693,146.6131,-18.5041, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Caja fuerte gimnasio
    CreateDynamic3DTextLabel("{00FFFF}Parque de bomberos{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1472.2441,-1560.0710,14.1396, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada lateral LSFD

    /* Gimnasio */
	CreateDynamic3DTextLabel("{00FFFF}Gimnasio{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 2229.4873,-1721.7747,13.5662, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada gymnasio
    CreateDynamic3DTextLabel("{00FFFF}Taquillas{FFFFFF}\nUsa {00FFFF}/taquillas{FFFFFF} para usarlas.", 0xFFFFFFFF, 756.5430,5.6205,1000.6993, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Taquillas gimnasio
    CreateDynamic3DTextLabel("{00FFFF}Press banca{FFFFFF}\nUsa {00FFFF}/pressbanca{FFFFFF} para hacer ejercicio.", 0xFFFFFFFF, 772.1621,1.4262,1000.7215, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Pressbanca
    CreateDynamic3DTextLabel("{00FFFF}Bicicleta{FFFFFF}\nUsa {00FFFF}/bicicleta{FFFFFF} para hacer subirte.", 0xFFFFFFFF, 772.3157,8.3222,1000.7079, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Bicicleta
    CreateDynamic3DTextLabel("{00FFFF}Elíptica{FFFFFF}\nUsa {00FFFF}/caminadora{FFFFFF} para correr en la caminadora.", 0xFFFFFFFF, 773.5044,-1.1028,1000.7255, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Elíptica
    CreateDynamic3DTextLabel("{00FFFF}Mancuernas{FFFFFF}\nUsa {00FFFF}/mancuernas{FFFFFF} para hacer subirte.", 0xFFFFFFFF, 770.3371,5.4284,1000.7150, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Mancuernas

    /* Concesionarios */
	CreateDynamic3DTextLabel("{00FFFF}Concesionario{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1671.0542,-1582.2064,13.5469, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada concesionario comisaría
	CreateDynamic3DTextLabel("{00FFFF}Concesionario{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1261.1017,-1266.7994,13.5600, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada concesionario hospital
	CreateDynamic3DTextLabel("{00FFFF}Concesionario{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 533.1853,-1811.3259,6.5781, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada concesionario barcos

	/* Iglesia */
	CreateDynamic3DTextLabel("{00FFFF}Iglesia{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 2232.9048,-1333.2749,23.9816, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada iglesia

	/* Asuntos Internos */
	CreateDynamic3DTextLabel("{00FFFF}Asuntos Internos del Gobierno{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1685.0588,-1343.3066,17.4350, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada asuntos internos

	/* Comedor social */
	CreateDynamic3DTextLabel("{00FFFF}Comedor social{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1378.9515,-1794.3083,13.5446, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada comedor social

	/* Comedor social */
	CreateDynamic3DTextLabel("{00FFFF}US Army{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 2737.7168,-2448.1086,14.2259, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // US Army

	/* Carcel */
	CreateDynamic3DTextLabel("{00FFFF}Prisión de Los Santos{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1798.0630,-1578.8143,14.0912, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada carcel
	CreateDynamic3DTextLabel("{00FFFF}Patio de la prisión{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para salir.", 0xFFFFFFFF, 214.6162,-1090.9647,-94.0300, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Entrada desde patio
	CreateDynamic3DTextLabel("{00FFFF}Prisión de Los Santos{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", 0xFFFFFFFF, 1772.3335,-1548.1348,9.9063, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Salida al patio
}

public CargarMapIcons()
{
    CreateDynamicMapIcon(891.3534,-1271.4711,14.9527, 61, -1, -1, -1, -1, 1000);
	return 1;
}

public CargarPickups()
{
    CreateDynamicPickup(1239, 1, 1551.7753,-2294.3044,13.4750, -1, -1, -1, 100.0); // Alquiler de vehículos aeropuerto

    /* Venta de vehículos */
    CreateDynamicPickup(1239, 1, 369.1873,-1347.9966,14.5174, -1, -1, -1, 100.0); // Venta de vehículos

    /* Casa de empeño */
    CreateDynamicPickup(1212, 1, 2507.3066,-1724.7253,13.5469, -1, -1, -1, 100.0); //
    CreateDynamicPickup(1212, 1, 2723.8562,-2033.7394,13.5472, -1, -1, -1, 100.0); //
    CreateDynamicPickup(1212, 1, 2423.4016,-1954.9388,13.5469, -1, -1, -1, 100.0); //

    /* Radar y armas militares */
    CreateDynamicPickup(3884, 1, 2824.1000000,-2482.0000000,19.0000000, -1, -1, -1, 100.0); // Anti aereo
    CreateDynamicPickup(3884, 1, 2824.7000000,-2413.3000000,16.3000000, -1, -1, -1, 100.0); // Anti aereo

    /* US Army */
    CreateDynamicPickup(1239, 1, 2737.7168,-2448.1086,14.2259, -1, -1, -1, 100.0); // Entrada US Army
    CreateDynamicPickup(1239, 1, 988.8917,1000.1093,1001.5000, -1, -1, -1, 100.0); // Salida US Army
    CreateDynamicPickup(1239, 1, 995.4824,1003.2812,1001.5000, -1, -1, -1, 100.0); // Taquillas US Army

    /* Biblioteca */
    CreateDynamicPickup(1239, 1, 1319.2466,-896.4209,39.6559, -1, -1, -1, 100.0); // Inscripción biblioteca

    /* Autoescuela */
    CreateDynamicPickup(1239, 1, 2053.5649,-1908.0745,13.9943, -1, -1, -1, 100.0); // Entrada autoescuela
	CreateDynamicPickup(1239, 1, 2184.0579,-1957.8829,-60.6141, 3, 3, -1, 100.0); // Salida autoescuela
	CreateDynamicPickup(1239, 1, 2184.6653,-1952.9795,-60.6141, -1, -1, -1, 100.0); // Comprar autoescuela

    /* Guardia Nacional */
    CreateDynamicPickup(1239, 1, 1777.3148,-1721.3660,13.5469, -1, -1, -1, 100.0); // Entrada reclutamiento
    CreateDynamicPickup(1239, 1, 1486.6864,-799.0255,1085.6998, -1, -1, -1, 100.0); // Salida reclutamiento

    /* Carcel */
    CreateDynamicPickup(1239, 1, 1798.0630,-1578.8143,14.0912, -1, -1, -1, 100.0); // Entrada carcel desde calle
    CreateDynamicPickup(1239, 1, 1772.3335,-1548.1348,9.9063, -1, -1, -1, 100.0); // Entrada carcel desde patio
    CreateDynamicPickup(1239, 1, 210.1253,-1071.6482,-94.0300, -1, -1, -1, 100.0); // Salida carcel desde calle
    CreateDynamicPickup(1239, 1, 214.6162,-1090.9647,-94.0300, -1, -1, -1, 100.0); // Salida carcel desde patio
    CreateDynamicPickup(1239, 1, 223.6860,-1092.6305,-94.0300, -1, -1, -1, 100.0); // Subida zona de control
    CreateDynamicPickup(1239, 1, 231.0880,-1093.9061,-90.5441, -1, -1, -1, 100.0); // Bajada zona de control

    /* Taller Jefferson */
    CreateDynamicPickup(1239, 1, 2524.1450,-1524.6024,23.7740, -1, -1, -1, 100.0); // Entrada taller

    /* Asuntos internos */
    CreateDynamicPickup(1239, 1, 1685.0588,-1343.3066,17.4350, -1, -1, -1, 100.0); // Entrada asuntos
    CreateDynamicPickup(1239, 1, 1240.1462,-1685.0177,-17.7241, -1, -1, -1, 100.0); // Salida asuntos

    /* Comedor social */
    CreateDynamicPickup(1239, 1, 1378.9515,-1794.3083,13.5446, -1, -1, -1, 100.0); // Entrada comedor
    CreateDynamicPickup(1239, 1, 3221.1147,-1194.2338,897.5187, -1, -1, -1, 100.0); // Salida comedor

    /* Iglesia */
    CreateDynamicPickup(1239, 1, 2232.9048,-1333.2749,23.9816, -1, -1, -1, 100.0); // Entrada iglesia
    CreateDynamicPickup(1239, 1, 1964.0344,-350.2046,1092.9436, -1, -1, -1, 100.0); // Salida iglesia

    /* Jobs */
    CreateDynamicPickup(1274, 1, 1753.1427,-1894.0850,13.5572, -1, -1, -1, 100.0); // Conductor de autobuses
    CreateDynamicPickup(1274, 1, 2211.1897,-2046.0941,13.5469, -1, -1, -1, 100.0); // Vendedor de licencias
    CreateDynamicPickup(1274, 1, 2148.1677,-2191.6311,13.5544, -1, -1, -1, 100.0); // Basurero
    CreateDynamicPickup(1274, 1, 1649.2026,-1493.9423,13.5469, -1, -1, -1, 100.0); // V. Móviles
    CreateDynamicPickup(1274, 1, 2273.9412,-2355.8669,13.5469, -1, -1, -1, 100.0); // Mecánico
    CreateDynamicPickup(1274, 1, 2170.8396,-2175.6587,13.5469, -1, -1, -1, 100.0); // Barrendero
    CreateDynamicPickup(1274, 1, 2381.7891,286.4539,19.5806, -1, -1, -1, 100.0); // Ladrón
    //CreateDynamicPickup(1274, 1, 358.6755,182.8890,1008.3859, -1, -1, -1, 100.0); // Abogado
    CreateDynamicPickup(1274, 1, 891.3534,-1271.4711,14.9527, -1, -1, -1, 100.0); // Camionero

    /* Juzgados */
    CreateDynamicPickup(1239, 1, 1554.1772,-1675.6061,16.1953, -1, -1, -1, 100.0); // Entrada juzgado
	CreateDynamicPickup(1239, 1, -707.6747,2339.9878,91.7865, 4, 4, -1, 100.0); // Salida juzgado

	/* Gimnasio */
	CreateDynamicPickup(1239, 1, 2229.4873,-1721.7747,13.5662, -1, -1, -1, 100.0); // Entrada gimnasio
    CreateDynamicPickup(1239, 1, 772.3606,-4.9995,1000.7289, -1, -1, -1, 100.0); // Salida gimnasio
    CreateDynamicPickup(1239, 1, 772.1621,1.4262,1000.7215, -1, -1, -1, 100.0); // Pressbanca
    CreateDynamicPickup(1239, 1, 772.3157,8.3222,1000.7079, -1, -1, -1, 100.0); // Bicicleta
    CreateDynamicPickup(1239, 1, 756.5430,5.6205,1000.6993, -1, -1, -1, 100.0); // Taquillas
    CreateDynamicPickup(1239, 1, 773.5044,-1.1028,1000.7255, -1, -1, -1, 100.0); // Elíptica
    CreateDynamicPickup(1239, 1, 770.3371,5.4284,1000.7150, -1, -1, -1, 100.0); // Mancuernas

    /* LSFD */
	CreateDynamicPickup(1239, 1, 1492.6252,-1567.7634,14.1366, -1, -1, -1, 100.0); // Entrada LSFD
    CreateDynamicPickup(1239, 1, -1830.5303,162.9309,-18.5041, -1, -1, -1, 100.0); // Salida LSFD
    CreateDynamicPickup(1239, 1, -1825.0851,123.1737,-18.5041, -1, -1, -1, 100.0); // Taquillas LSFD
    CreateDynamicPickup(1239, 1, -1822.8693,146.6131,-18.5041, -1, -1, -1, 100.0); // Caja fuerte LSFD
    CreateDynamicPickup(1239, 1, 1472.2441,-1560.0710,14.1396, -1, -1, -1, 100.0); // Entrada lateral LSFD
    CreateDynamicPickup(1239, 1, -1835.5858,121.7149,-18.5041, -1, -1, -1, 100.0); // Salida lateral LSFD

    /* Gobierno */
	CreateDynamicPickup(1239, 1, 1481.0533,-1771.5319,18.7958, -1, -1, -1, 100.0); // Entrada gobierno
    CreateDynamicPickup(1239, 1, 376.6566,173.7177,1008.3859, -1, -1, -1, 100.0); // Salida gobierno
    CreateDynamicPickup(1239, 1, 365.3435,150.9420,1025.7891, -1, -1, -1, 100.0); // Caja fuerte
    CreateDynamicPickup(1239, 1, 364.2622,196.0245,1019.9844, -1, -1, -1, 100.0); // Taquillas
    CreateDynamicPickup(1239, 1, -2513.6125,-610.3277,45.9459, -1, -1, -1, 100.0); // Anuncios
    CreateDynamicPickup(1239, 1, 358.7913,187.5178,1008.3859, -1, -1, -1, 100.0); // Transferir estado
    CreateDynamicPickup(1239, 1, 358.6739,178.8037,1008.3859, -1, -1, -1, 100.0); // Coger documentación


    /* LSRTV */
    CreateDynamicPickup(1239, 1, 732.9965,-1345.1364,13.5683, -1, -1, -1, 100.0); // Entrada LSRTV
	CreateDynamicPickup(1239, 1, -2513.7378,-604.6734,45.9459, -1, -1, -1, 100.0); // Salida LSRTV
	CreateDynamicPickup(1239, 1, -2517.7610,-642.1486,49.5459, -1, -1, -1, 100.0); // Entrada estudio LSRTV
	CreateDynamicPickup(1239, 1, -2520.5364,-642.1064,49.5459, -1, -1, -1, 100.0); // Salida estudio LSRTV
	CreateDynamicPickup(1239, 1, 759.2063,-1370.8650,13.8239, -1, -1, -1, 100.0); // Entrada garaje LSRTV
	CreateDynamicPickup(1239, 1, 784.9937,-1387.9502,-15.5962, -1, -1, -1, 100.0); // Salida garaje LSRTV
	CreateDynamicPickup(1239, 1, 755.5757,-1363.1271,13.5683, -1, -1, -1, 100.0); // Ascensor LSRTV
	CreateDynamicPickup(1239, 1, 732.8156,-1369.2651,21.4914, -1, -1, -1, 100.0); // Azotea LSRTV
	CreateDynamicPickup(1239, 1, -2505.6377,-640.9767,49.5459, -1, -1, -1, 100.0); // Taquillas LSRTV

    /* Concesionarios */
    CreateDynamicPickup(1239, 1, 542.0348,-1293.0002,17.5149, -1, -1, -1, 100.0); // Grotti

    /* LSPD */
    CreateDynamicPickup(1247, 1, 1395.4467,-1669.3635,13.5600, -1, -1, -1, 100.0); // Entrada LSPD
	CreateDynamicPickup(1239, 1, 238.6438,139.2395,1003.0234, -1, -1, -1, 100.0); // Salida LSPD
	CreateDynamicPickup(1239, 1, 1375.9490,-1679.7460,49.6591, -1, -1, -1, 100.0); // Azotea LSPD
	CreateDynamicPickup(1239, 1, 1377.4895,-1691.5547,6.2116, -1, -1, -1, 100.0); // Ascensor garaje
	CreateDynamicPickup(1239, 1, 202.1060,180.5154,1003.0346, -1, -1, -1, 100.0); // Salida garaje LSPD
	CreateDynamicPickup(1239, 1, 225.6828,171.0226,1003.0378, -1, -1, -1, 100.0); // Ascensor planta 1 LSPD
	CreateDynamicPickup(1239, 1, 219.3259,185.2902,1003.0313, -1, -1, -1, 100.0); // Taquillas LSPD
	CreateDynamicPickup(1239, 1, 1402.1504,-1677.5054,6.1569, -1, -1, -1, 100.0); // Garaje -> celdas
    CreateDynamicPickup(1239, 1, 211.3206,183.9050,1003.0313, -1, -1, -1, 100.0); // Coger cosas armería
    CreateDynamicPickup(1239, 1, 215.5868,185.3376,1003.0313, -1, -1, -1, 100.0); // /tirarobjeto

	/* LSMD */
	CreateDynamicPickup(1239, 1, 1172.4344,-1325.2883,15.4055, -1, -1, -1, 100.0); // Entrada LSMD
	CreateDynamicPickup(1239, 1, 1190.8556,-1350.6112,-7.4613, -1, -1, -1, 100.0); // Salida LSMD
	CreateDynamicPickup(1239, 1, 1168.5054,-1366.9495,-7.4641, -1, -1, -1, 100.0); // Taquillas LSMD
	CreateDynamicPickup(1239, 1, 1169.7452,-1352.4379,-7.4613, -1, -1, -1, 100.0); // Ascensor LSMD planta 1
	CreateDynamicPickup(1239, 1, 1167.2177,-1353.0588,-1.6512, -1, -1, -1, 100.0); // Ascensor LSMD planta 2
	CreateDynamicPickup(1239, 1, 1161.1812,-1329.2528,31.4977, -1, -1, -1, 100.0); // Azotea LSMD
	CreateDynamicPickup(1239, 1, 1149.4419,-1309.1937,13.6982, -1, -1, -1, 100.0); // Garaje LSMD

	/* Catalogos */
	CreateDynamicPickup(1239, 1, 1671.0542,-1582.2064,13.5469, -1, -1, -1, 100.0); // Entrada concesionario comisaría
	CreateDynamicPickup(1239, 1, 1671.1327,-1580.3041,13.5659, -1, -1, -1, 100.0); // Salida concesionario comisaría
	CreateDynamicPickup(1239, 1, 1670.7625,-1565.1042,16.0459, -1, -1, -1, 100.0); // Catalogo comisaría
	CreateDynamicPickup(1239, 1, 1261.1017,-1266.7994,13.5600, -1, -1, -1, 100.0); // Entrada consecionario hospital
	CreateDynamicPickup(1239, 1, 1262.8365,-1266.7981,13.5600, -1, -1, -1, 100.0); // Salida consecionario hospital
	CreateDynamicPickup(1239, 1, 1280.0261,-1259.1881,16.7959, -1, -1, -1, 100.0); // Catalogo hospital
	CreateDynamicPickup(1239, 1, 560.0290,-1299.9962,20.5759, -1, -1, -1, 100.0); // Catalogo Grotti
	CreateDynamicPickup(1239, 1, 2205.0068,-2533.8125,13.5469, -1, -1, -1, 100.0); // Catalogo Camiones
	CreateDynamicPickup(1239, 1, 533.1853,-1811.3259,6.5781, -1, -1, -1, 100.0); // Entrada concesionario barcos
	CreateDynamicPickup(1239, 1, 531.4771,-1811.2632,6.5859, -1, -1, -1, 100.0); // Salida concesionario barcos
	CreateDynamicPickup(1239, 1, 523.2498,-1818.8574,6.5859, -1, -1, -1, 100.0); // Catalogo Barcos
	CreateDynamicPickup(1239, 1, 953.8035,-1035.6334,30.2422, -1, -1, -1, 100.0); // Catalogo Motos
	CreateDynamicPickup(1239, 1, 2131.8774,-1150.4095,24.1612, -1, -1, -1, 100.0); // Catalogo Otros

	/* Banco */
	CreateDynamicPickup(1239, 1, 1465.1200,-1010.9224,26.8438, -1, -1, -1, 100.0); // Entrada banco
	CreateDynamicPickup(1239, 1, -2785.9270,379.9103,-17.6441, -1, -1, -1, 100.0); // Salida Banco
	CreateDynamicPickup(1239, 1, -2757.4678,371.4011,-17.6441, -1, -1, -1, 100.0); // Entrada caja fuerte banco
	CreateDynamicPickup(1239, 1, -2754.0398,370.3316,-16.7201, -1, -1, -1, 100.0); // Salida caja fuerte banco
	CreateDynamicPickup(1239, 1, -2776.3823,376.4218,-17.6441, -1, -1, -1, 100.0); // Banco
	CreateDynamicPickup(1239, 1, -2776.7131,383.4497,-17.6441, -1, -1, -1, 100.0); // Banco
	CreateDynamicPickup(1239, 1, -2776.5684,380.0213,-17.6441, -1, -1, -1, 100.0); // Banco
}

stock UpdateVehInteger(index, varname[], new_val)
{
	new query[128];
	format(query, 128, "UPDATE vehiculos SET %s=%d WHERE ID=%d", varname, new_val, index);
	mysql_query(database, query, false);
}

stock UpdateVehFloat(index, varname[], Float:new_val)
{
	new query[128];
	format(query, 128, "UPDATE vehiculos SET %s=%f WHERE ID=%d", varname, new_val, index);
	mysql_query(database, query, false);
}

stock UpdateVehString(index, varname[], new_val[])
{
    new query[128];
	format(query, 128, "UPDATE vehiculos SET %s='%s' WHERE ID=%d", varname, new_val, index);
	mysql_query(database, query, false);
}

stock EncenderVehiculo(vehicleid, playerid)
{
    if(ComprobarAutoescuela(vehicleid,playerid) || ComprobarDueno(vehicleid,playerid) || ComprobarPrestado(vehicleid, playerid) || ComprobarRenta(vehicleid,playerid) || ComprobarFaccion(vehicleid, playerid) || ComprobarTrabajo(vehicleid, playerid))
	{
	    if(AutoInfo[vehicleid][aGasolina] <= 0) return SendClientMessage(playerid, ROJO_OSCURO, "* El vehículo no tiene gasolina.");
	    if(AutoInfo[vehicleid][aRoto] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El motor del vehículo está roto, llama un mecánico.");
		if(AutoInfo[vehicleid][aBloqueado] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* El vehículo tiene un cepo, llama a la policía para retirarlo.");
        if(FrenodeMano[vehicleid] == 1) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes quitar el freno de mano para encender el vehículo.");
        new Rcocheroto = random(100);
        switch(Rcocheroto)
        {
         	case 3, 88:
         	{
         		AutoInfo[GetPlayerVehicleID(playerid)][aRoto] = 1;
         		SendClientMessage(playerid, ROJO_OSCURO, "* ¡Vaya! Parece que el motor del coche se ha averiado.");
				return 1;
      		}
        }
		GameTextForPlayer(playerid,"~r~Encendiendo motor...",1000,1);
        SetTimerEx("EncenderVehiculo2",3500,0,"ic",vehicleid,playerid);
		new string[100];
		format(string, sizeof(string), "* %s encendió su vehículo.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	else
	{
		SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves.");
	}
	return 1;
}

forward EncenderVehiculo2(vehicleid, playerid);
public EncenderVehiculo2(vehicleid, playerid)
{
    AutoInfo[vehicleid][aMotor] = 1;
    new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	return 1;
}

stock ApagarVehiculo(vehicleid, playerid)
{
	new string[128];
	if(AutoInfo[vehicleid][aMotor])
	{
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    AutoInfo[vehicleid][aMotor] = 0;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, objective);
		format(string, sizeof(string), "* %s apagó el motor de su vehículo.", NombreJugador(playerid));
		ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		if(AutoInfo[vehicleid][aFaccionID] == 8888)
		{
			new Float:Pos[4];
		    GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
		    GetVehicleZAngle(vehicleid, Pos[3]);
		    AutoInfo[vehicleid][ax] = Pos[0]; AutoInfo[vehicleid][ay] = Pos[1]; AutoInfo[vehicleid][az] = Pos[2]; AutoInfo[vehicleid][aa] = Pos[3];
		    UpdateVehFloat(AutoInfo[vehicleid][aID], "X", Pos[0]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Y", Pos[1]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Z", Pos[2]); UpdateVehFloat(AutoInfo[vehicleid][aID], "Angle", Pos[3]);
		}
		ActualizarVeh(vehicleid);
	}
	return 1;
}

stock NombreVeh(idcoche) //Trenico
{
	new texto[30];
	switch (idcoche)
	{
	    case 400: texto = "Landstalker";
	    case 401: texto = "Bravura";
	    case 402: texto = "Buffalo";
	    case 403: texto = "Linerunner";
	    case 404: texto = "Perenniel";
	    case 405: texto = "Sentinel";
	    case 407: texto = "Bomberos";
	    case 408: texto = "Basurero";
	    case 409: texto = "Stretch";
	    case 410: texto = "Manana";
	    case 411: texto = "Infernus";
	    case 412: texto = "Voodo";
	    case 413: texto = "Pony";
     	case 414: texto = "Mule";
	    case 415: texto = "Cheetah";
     	case 416: texto = "la ambulancia";
      	case 417: texto = "Leviathan";
	    case 418: texto = "Moonbeam";
	    case 419: texto = "Esperanto";
	    case 420: texto = "Taxi";
	    case 421: texto = "Washington";
	    case 422: texto = "Bobcat";
	    case 423: texto = "Mr Whoopee";
	    case 424: texto = "BF Injection";
	    case 425: texto = "Hunter";
	    case 426: texto = "Premier";
	    case 427: texto = "Enforcer";
	    case 428: texto = "Securicar";
	    case 429: texto = "Banshee";
	    case 430: texto = "Predator";
	    case 431: texto = "Bus";
	    case 432: texto = "Rhino";
	    case 433: texto = "Barracks";
	    case 435: texto = "Trailer";
	    case 436: texto = "Previon";
	    case 437: texto = "Coach";
	    case 438: texto = "Cabbie";
	    case 439: texto = "Stallion";
	    case 440: texto = "Rumpo";
	    case 442: texto = "Romero";
	    case 443: texto = "Packer";
	    case 444: texto = "Monster";
	    case 445: texto = "Admiral";
	    case 446: texto = "Squallo";
	    case 448: texto = "Pizza";
	    case 449: texto = "Tram";
	    case 451: texto = "Turismo";
	    case 452: texto = "Speeder";
	    case 453: texto = "Reefer";
	    case 454: texto = "Tropic";
	    case 455: texto = "Flatbed";
	    case 456: texto = "Yankee";
	    case 457: texto = "Caddy";
	    case 458: texto = "Solair";
	    case 459: texto = "Berkley's RC Van";
	    case 460: texto = "Skimmer";
	    case 461: texto = "PCJ-600";
	    case 462: texto = "Faggio";
	    case 463: texto = "Freeway";
	    case 466: texto = "Glendale";
	    case 467: texto = "Oceanic";
	    case 468: texto = "Sanchez";
	    case 469: texto = "Sparrow";
	    case 471: texto = "Patriot";
	    case 472: texto = "Quad";
	    case 473: texto = "Dinghy";
	    case 474: texto = "Hermes";
	    case 475: texto = "Sabre";
	    case 477: texto = "ZR-350";
	    case 478: texto = "Walton";
	    case 479: texto = "Regina";
	    case 480: texto = "Comet";
	    case 481: texto = "BMX";
	    case 482: texto = "Burrito";
	    case 483: texto = "Camper";
	    case 484: texto = "Marquis";
	    case 485: texto = "Baggage";
	    case 486: texto = "Dozer";
	    case 487: texto = "Maverick";
	    case 488: texto = "News Maverick";
	    case 489: texto = "Rancher";
	    case 490: texto = "Rancher";
	    case 491: texto = "Virgo";
	    case 492: texto = "Greenwood";
	    case 493: texto = "Jetmax";
	    case 494: texto = "Hotring Racer";
	    case 495: texto = "Sandking";
	    case 496: texto = "Blista Compact";
	    case 497: texto = "Poli Maverick";
	    case 498: texto = "BoxVille";
	    case 499: texto = "Benson";
	    case 500: texto = "Mesa";
	    case 505: texto = "Rancher";
	    case 506: texto = "Super GT";
	    case 507: texto = "Elegant";
	    case 508: texto = "Journey";
	    case 516: texto = "Nebula";
	    case 517: texto = "Majestic";
	    case 518: texto = "Buccaneer";
	    case 519: texto = "Shamal";
	    case 520: texto = "Hydra";
	    case 521: texto = "FCR-900";
	    case 522: texto = "NRG-500";
	    case 523: texto = "HPV1000";
	    case 524: texto = "Cemento";
	    case 525: texto = "Grua";
	    case 526: texto = "Fortune";
	    case 527: texto = "Cadrona";
	    case 528: texto = "FBI Coche";
	    case 529: texto = "Willard";
	    case 530: texto = "Forklift";
	    case 531: texto = "Tractor";
	    case 532: texto = "Cultivadora";
	    case 533: texto = "Feltzer";
	    case 534: texto = "Remington";
	    case 535: texto = "Slamvan";
	    case 536: texto = "Blade";
	    case 540: texto = "Vincent";
	    case 541: texto = "Bullet";
	    case 542: texto = "Clover";
	    case 543: texto = "Sadler";
	    case 544: texto = "PBomberos";
	    case 545: texto = "Hustler";
	    case 546: texto = "Intruder";
	    case 547: texto = "Primo";
	    case 548: texto = "Nevada";
	    case 549: texto = "Tampa";
	    case 550: texto = "Sunrise";
	    case 551: texto = "Merit";
	    case 553: texto = "Nevada";
	    case 554: texto = "Yosemite";
	    case 555: texto = "Windsor";
	    case 556: texto = "Monster";
	    case 557: texto = "Monster";
	    case 558: texto = "Uranus";
	    case 559: texto = "Jester";
	    case 560: texto = "Sultan";
	    case 561: texto = "Stratum";
	    case 562: texto = "Elegy";
	    case 563: texto = "Raindance";
	    case 565: texto = "Flash";
	    case 566: texto = "Tahoma";
	    case 567: texto = "Savanna";
	    case 568: texto = "Bandito";
	    case 571: texto = "Kart";
	    case 572: texto = "Mower";
	    case 573: texto = "Dune";
	    case 574: texto = "Sweeper";
	    case 575: texto = "Broadway";
	    case 576: texto = "Tornado";
	    case 577: texto = "AT400";
	    case 578: texto = "DFT-30";
	    case 579: texto = "Huntley";
	    case 580: texto = "Stafford";
	    case 581: texto = "BF-400";
	    case 582: texto = "NewsVan";
	    case 584: texto = "Trailer";
	    case 585: texto = "Emperor";
	    case 586: texto = "Wayfarer";
	    case 587: texto = "Euros";
	    case 588: texto = "HotDog";
	    case 589: texto = "Club";
	    case 590: texto = "Box Trailer";
	    case 591: texto = "Trailer";
	    case 592: texto = "Andromada";
	    case 593: texto = "Dodo";
	    case 594: texto = "RC Cam";
	    case 595: texto = "Launch";
	    case 596: texto = "Patrulla de Los Santos";
	    case 597: texto = "Patrulla de San Fierro";
	    case 598: texto = "Patrulla de Las Venturas";
	    case 599: texto = "RangerPo";
	    case 600: texto = "Picador";
	    case 601: texto = "S.W.A.T";
	    case 602: texto = "Alpha";
	    case 603: texto = "Phoenix";
	    case 604: texto = "Glendale";
	    case 605: texto = "Sadler";
	    case 609: texto = "Boxville";
	}
	return texto;
}

stock NombreCoche(idcoche) //Trenico
{
	new texto[30];
	switch (GetVehicleModel(idcoche))
	{
	    case 400: texto = "Landstalker";
	    case 401: texto = "Bravura";
	    case 402: texto = "Buffalo";
	    case 403: texto = "Linerunner";
	    case 404: texto = "Perenniel";
	    case 405: texto = "Sentinel";
	    case 407: texto = "Bomberos";
	    case 408: texto = "Basurero";
	    case 409: texto = "Stretch";
	    case 410: texto = "Manana";
	    case 411: texto = "Infernus";
	    case 412: texto = "Voodo";
	    case 413: texto = "Pony";
     	case 414: texto = "Mule";
	    case 415: texto = "Cheetah";
     	case 416: texto = "Ambulancia";
      	case 417: texto = "Leviathan";
	    case 418: texto = "Moonbeam";
	    case 419: texto = "Esperanto";
	    case 420: texto = "Taxi";
	    case 421: texto = "Washington";
	    case 422: texto = "Bobcat";
	    case 423: texto = "Mr Whoopee";
	    case 424: texto = "BF Injection";
	    case 425: texto = "Hunter";
	    case 426: texto = "Premier";
	    case 427: texto = "Enforcer";
	    case 428: texto = "Securicar";
	    case 429: texto = "Banshee";
	    case 430: texto = "Predator";
	    case 431: texto = "Bus";
	    case 432: texto = "Rhino";
	    case 433: texto = "Barracks";
	    case 435: texto = "Trailer";
	    case 436: texto = "Previon";
	    case 437: texto = "Coach";
	    case 438: texto = "Cabbie";
	    case 439: texto = "Stallion";
	    case 440: texto = "Rumpo";
	    case 442: texto = "Romero";
	    case 443: texto = "Packer";
	    case 444: texto = "Monster";
	    case 445: texto = "Admiral";
	    case 446: texto = "Squallo";
	    case 448: texto = "Pizza";
	    case 449: texto = "Tram";
	    case 451: texto = "Turismo";
	    case 452: texto = "Speeder";
	    case 453: texto = "Reefer";
	    case 454: texto = "Tropic";
	    case 455: texto = "Flatbed";
	    case 456: texto = "Yankee";
	    case 457: texto = "Caddy";
	    case 458: texto = "Solair";
	    case 459: texto = "Berkley's RC Van";
	    case 460: texto = "Skimmer";
	    case 461: texto = "PCJ-600";
	    case 462: texto = "Faggio";
	    case 463: texto = "Freeway";
	    case 466: texto = "Glendale";
	    case 467: texto = "Oceanic";
	    case 468: texto = "Sanchez";
	    case 469: texto = "Sparrow";
	    case 471: texto = "Patriot";
	    case 472: texto = "Quad";
	    case 473: texto = "Dinghy";
	    case 474: texto = "Hermes";
	    case 475: texto = "Sabre";
	    case 477: texto = "ZR-350";
	    case 478: texto = "Walton";
	    case 479: texto = "Regina";
	    case 480: texto = "Comet";
	    case 481: texto = "BMX";
	    case 482: texto = "Burrito";
	    case 483: texto = "Camper";
	    case 484: texto = "Marquis";
	    case 485: texto = "Baggage";
	    case 486: texto = "Dozer";
	    case 487: texto = "Maverick";
	    case 488: texto = "News Maverick";
	    case 489: texto = "Rancher";
	    case 490: texto = "FBI Rancher";
	    case 491: texto = "Virgo";
	    case 492: texto = "Greenwood";
	    case 493: texto = "Jetmax";
	    case 494: texto = "Hotring Racer";
	    case 495: texto = "Sandking";
	    case 496: texto = "Blista Compact";
	    case 497: texto = "Poli Maverick";
	    case 498: texto = "BoxVille";
	    case 499: texto = "Benson";
	    case 500: texto = "Mesa";
	    case 505: texto = "Rancher";
	    case 506: texto = "Super GT";
	    case 507: texto = "Elegant";
	    case 508: texto = "Journey";
	    case 516: texto = "Nebula";
	    case 517: texto = "Majestic";
	    case 518: texto = "Buccaneer";
	    case 519: texto = "Shamal";
	    case 520: texto = "Hydra";
	    case 521: texto = "FCR-900";
	    case 522: texto = "NRG-500";
	    case 523: texto = "HPV1000";
	    case 524: texto = "Cemento";
	    case 525: texto = "Grua";
	    case 526: texto = "Fortune";
	    case 527: texto = "Cadrona";
	    case 528: texto = "FBI Coche";
	    case 529: texto = "Willard";
	    case 530: texto = "Forklift";
	    case 531: texto = "Tractor";
	    case 532: texto = "Cultivadora";
	    case 533: texto = "Feltzer";
	    case 534: texto = "Remington";
	    case 535: texto = "Slamvan";
	    case 536: texto = "Blade";
	    case 540: texto = "Vincent";
	    case 541: texto = "Bullet";
	    case 542: texto = "Clover";
	    case 543: texto = "Sadler";
	    case 544: texto = "PBomberos";
	    case 545: texto = "Hustler";
	    case 546: texto = "Intruder";
	    case 547: texto = "Primo";
	    case 548: texto = "Nevada";
	    case 549: texto = "Tampa";
	    case 550: texto = "Sunrise";
	    case 551: texto = "Merit";
	    case 553: texto = "Nevada";
	    case 554: texto = "Yosemite";
	    case 555: texto = "Windsor";
	    case 556: texto = "Monster";
	    case 557: texto = "Monster";
	    case 558: texto = "Uranus";
	    case 559: texto = "Jester";
	    case 560: texto = "Sultan";
	    case 561: texto = "Stratum";
	    case 562: texto = "Elegy";
	    case 563: texto = "Raindance";
	    case 565: texto = "Flash";
	    case 566: texto = "Tahoma";
	    case 567: texto = "Savanna";
	    case 568: texto = "Bandito";
	    case 571: texto = "Kart";
	    case 572: texto = "Mower";
	    case 573: texto = "Dune";
	    case 574: texto = "Sweeper";
	    case 575: texto = "Broadway";
	    case 576: texto = "Tornado";
	    case 577: texto = "AT400";
	    case 578: texto = "DFT-30";
	    case 579: texto = "Huntley";
	    case 580: texto = "Stafford";
	    case 581: texto = "BF-400";
	    case 582: texto = "NewsVan";
	    case 584: texto = "Trailer";
	    case 585: texto = "Emperor";
	    case 586: texto = "Wayfarer";
	    case 587: texto = "Euros";
	    case 588: texto = "HotDog";
	    case 589: texto = "Club";
	    case 590: texto = "Box Trailer";
	    case 591: texto = "Trailer";
	    case 592: texto = "Andromada";
	    case 593: texto = "Dodo";
	    case 594: texto = "RC Cam";
	    case 595: texto = "Launch";
	    case 596: texto = "patrulla";
	    case 597: texto = "patrulla";
	    case 598: texto = "patrulla";
	    case 599: texto = "RangerPo";
	    case 600: texto = "Picador";
	    case 601: texto = "S.W.A.T";
	    case 602: texto = "Alpha";
	    case 603: texto = "Phoenix";
	    case 604: texto = "Glendale";
	    case 605: texto = "Sadler";
	    case 609: texto = "Boxville";
	}
	return texto;
}

stock ComprobarAutoescuela(vehicleid, playerid)
{
	if(AutoInfo[vehicleid][aFaccionID] == 888 && ExamenAutoescuela[playerid] > 0 && TipoLicenciaAutoescuela[playerid] > 0) return 1;
	return 0;
}

stock ComprobarDueno(vehicleid, playerid)
{
	//printf("%s - %s", AutoInfo[vehicleid][aOwner], pNameEx(playerid));
	if(strcmp(AutoInfo[vehicleid][aOwner], pNameEx(playerid)) == 0)return 1;
	return 0;
}

stock ComprobarPrestado(vehicleid, playerid)
{
	for(new i = 0; i < 3; i++){
		if(JugadorInfo[playerid][jCochesPrestado][i] == AutoInfo[vehicleid][aID]) return 1;
	}
	return 0;
}

stock ComprobarFaccion(vehicleid, playerid)
{
	if(JugadorInfo[playerid][jMiembro] == AutoInfo[vehicleid][aFaccionID]) return 1;
	return 0;
}

stock ComprobarRenta(vehicleid, playerid)
{
	if(VehRentado[playerid] == AutoInfo[vehicleid][aID]) return 1;
	return 0;
}

stock ComprobarTrabajo(vehicleid, playerid)
{
    if(JugadorInfo[playerid][jTrabajo] == (AutoInfo[vehicleid][aFaccionID]-100)) return 1;
	return 0;
}

public Intermitentes()
{
    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(IndicadoresEncendidos[i] == 1)
	    {
	        new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
	        if(IndicadoresEncendidos2[i] == 0)
	        {
		    	IndicadoresEncendidos2[i] = 1;
				SetVehicleParamsEx(i,engine,IndicadoresEncendidos2[i],alarm,doors,bonnet,boot,objective);
			}
			else
			{
			    IndicadoresEncendidos2[i] = 0;
				SetVehicleParamsEx(i,engine,IndicadoresEncendidos2[i],alarm,doors,bonnet,boot,objective);
			}
		}
	}
	return 1;
}

public JugadorCercaVehiculo(playerid)
{
	if ( !IsPlayerInAnyVehicle(playerid) )
	{
	    new TheVehicle;
	    new i;
	    new Float:RangoC;
	    new Float:X, Float:Y, Float:Z;
	    do
	    {
		    RangoC++;
			i = 1;
			for (; i <= MAX_VEHICLES; i++)
			{
			    GetVehiclePos(i, X, Y, Z);
				if (IsPlayerInRangeOfPoint(playerid, RangoC, X, Y, Z))
				{
				    TheVehicle = i;
				    RangoC = 5.0;
				    break;
				}
			}
		}
		while( RangoC != 5.0 );

		if ( TheVehicle )
		{
		    return TheVehicle;
		}
		else
		{
		    SendClientMessage(playerid, ROJO_OSCURO, "* No hay ningún vehículo cerca.");
		}
		return 0;
	}
	else
	{
		return GetPlayerVehicleID(playerid);
	}
}

stock ActualizarVeh(vehicleid)
{
    new index = AutoInfo[vehicleid][aID];
	new Float:vida, panels,doors,lights,tires;
	GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);

	GetVehicleHealth(vehicleid, vida);

	UpdateVehFloat(index, "Vida", vida);
	UpdateVehInteger(index, "panels", panels);
	UpdateVehInteger(index, "doors", doors);
	UpdateVehInteger(index, "lights", lights);
	UpdateVehInteger(index, "tires", tires);
	UpdateVehInteger(index, "Motor", AutoInfo[vehicleid][aMotor]);
	UpdateVehInteger(index, "Cerrado", AutoInfo[vehicleid][aCerrado]);
	UpdateVehInteger(index, "Gasolina", AutoInfo[vehicleid][aGasolina]);
	UpdateVehInteger(index, "Roto", AutoInfo[vehicleid][aRoto]);
	UpdateVehInteger(index, "FaccionID", AutoInfo[vehicleid][aFaccionID]);

	new str[92];
	for(new o; o<14; o++)
	{
		new tmp[14];
		valstr(tmp, GetVehicleComponentInSlot(vehicleid, o));
		if(tmp[o] != 13)strcat(tmp, " ");
		strcat(str, tmp);
	}
	UpdateVehString(index, "Componentes", str);
	UpdateVehInteger(index, "Color1", AutoInfo[vehicleid][aColor1]);
	UpdateVehInteger(index, "Color2", AutoInfo[vehicleid][aColor2]);
	UpdateVehInteger(index, "Interior", AutoInfo[vehicleid][aInteriorID]);
	UpdateVehInteger(index, "Virtual", AutoInfo[vehicleid][aVirtualID]);

	new query[800];
	strcat(query, "UPDATE `vehiculos` SET ");
	strcat_format(query, sizeof(query), "`MalID` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", AutoInfo[vehicleid][aMalID][0], AutoInfo[vehicleid][aMalID][1], AutoInfo[vehicleid][aMalID][2], AutoInfo[vehicleid][aMalID][3], AutoInfo[vehicleid][aMalID][4], AutoInfo[vehicleid][aMalID][5], AutoInfo[vehicleid][aMalID][6], AutoInfo[vehicleid][aMalID][7], AutoInfo[vehicleid][aMalID][8], AutoInfo[vehicleid][aMalID][9]);
	strcat_format(query, sizeof(query), "`MalTipo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", AutoInfo[vehicleid][aMalTipo][0], AutoInfo[vehicleid][aMalTipo][1], AutoInfo[vehicleid][aMalTipo][2], AutoInfo[vehicleid][aMalTipo][3], AutoInfo[vehicleid][aMalTipo][4], AutoInfo[vehicleid][aMalTipo][5], AutoInfo[vehicleid][aMalTipo][6], AutoInfo[vehicleid][aMalTipo][7], AutoInfo[vehicleid][aMalTipo][8], AutoInfo[vehicleid][aMalTipo][9]);
	strcat_format(query, sizeof(query), "`MalCantidad` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d'", AutoInfo[vehicleid][aMalCantidad][0], AutoInfo[vehicleid][aMalCantidad][1], AutoInfo[vehicleid][aMalCantidad][2], AutoInfo[vehicleid][aMalCantidad][3], AutoInfo[vehicleid][aMalCantidad][4], AutoInfo[vehicleid][aMalCantidad][5], AutoInfo[vehicleid][aMalCantidad][6], AutoInfo[vehicleid][aMalCantidad][7], AutoInfo[vehicleid][aMalCantidad][8], AutoInfo[vehicleid][aMalCantidad][9]);
	strcat_format(query, sizeof(query), " WHERE `id` = '%d'", AutoInfo[vehicleid][aID]);
	mysql_query(database, query, false);
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == uniformelsrtv || listid == uniformelsmd || listid == uniformegn || listid == uniformelsfd || listid == uniformegob || listid == uniformesapd)
	{
	    if(!response) return 1;
	    JugadorInfo[playerid][jUniforme] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    return 1;
	}
	if(ropa_binco || ropa_prolaps || ropa_ds || ropa_victim || ropa_zip || ropa_suburban)
	{
	    if(!response) return 1;
	    JugadorInfo[playerid][jDinero] -= 40;
	    JugadorInfo[playerid][jRopa] = modelid;
	    SetPlayerSkin(playerid, modelid);
	}
	if(listid == ropagym || listid == uniformemeca)
	{
	    if(!response) return 1;
	    SetPlayerSkin(playerid, modelid);
	    return 1;
	}
	return 1;
}

stock PrecioCoche(id)
{
	new precio;
	// Precios 4x4 en venta
	if(id == 424) precio = 25000;
	else if(id == 579) precio = 76000;
	else if(id == 400) precio = 48000;
	else if(id == 500) precio = 12000;
	else if(id == 489) precio = 55000;
	else if(id == 495) precio = 85000;
	// Precios deportivos
	else if(id == 602) precio = 50000;
	else if(id == 429) precio = 400000;
	else if(id == 496) precio = 22000;
	else if(id == 402) precio = 140000;
	else if(id == 541) precio = 500000;
	else if(id == 415) precio = 350000;
	else if(id == 589) precio = 17000;
	else if(id == 587) precio = 70000;
	else if(id == 565) precio = 45000;
	else if(id == 411) precio = 600000;
	else if(id == 559) precio = 75000;
	else if(id == 603) precio = 75000;
	else if(id == 475) precio = 18000;
	else if(id == 506) precio = 300000;
	else if(id == 558) precio = 45000;
	else if(id == 477) precio = 80000;
	// Precios camiones
	else if(id == 499) precio = 39500;
	else if(id == 422) precio = 26000;
	else if(id == 482) precio = 17000;
	else if(id == 498) precio = 26700;
	else if(id == 578) precio = 35000;
	else if(id == 455) precio = 56000;
	else if(id == 403) precio = 78000;
	else if(id == 414) precio = 29400;
	else if(id == 514) precio = 82000;
	else if(id == 443) precio = 101000;
	else if(id == 413) precio = 33500;
	else if(id == 515) precio = 115000;
	else if(id == 600) precio = 17000;
	else if(id == 440) precio = 16000;
	else if(id == 543) precio = 13500;
	else if(id == 459) precio = 17000;
	else if(id == 531) precio = 6500;
	else if(id == 552) precio = 15600;
	else if(id == 478) precio = 13500;
	else if(id == 456) precio = 19000;
	else if(id == 554) precio = 32000;
	else if(id == 508) precio = 50000;
	// Precios salón
	else if(id == 445) precio = 21000;
	else if(id == 504) precio = 45000;
	else if(id == 401) precio = 15000;
	else if(id == 518) precio = 14000;
	else if(id == 527) precio = 12000;
	else if(id == 542) precio = 13500;
	else if(id == 507) precio = 26000;
	else if(id == 562) precio = 75000;
	else if(id == 585) precio = 17000;
	else if(id == 419) precio = 13500;
	else if(id == 526) precio = 13000;
	else if(id == 466) precio = 15000;
	else if(id == 492) precio = 16000;
	else if(id == 474) precio = 12000;
	else if(id == 546) precio = 16000;
	else if(id == 517) precio = 16000;
	else if(id == 410) precio = 12000;
	else if(id == 551) precio = 27000;
	else if(id == 516) precio = 17000;
	else if(id == 467) precio = 13000;
	else if(id == 426) precio = 26000;
	else if(id == 436) precio = 13500;
	else if(id == 547) precio = 16000;
	else if(id == 405) precio = 33000;
	else if(id == 580) precio = 52000;
	else if(id == 560) precio = 110000;
	else if(id == 550) precio = 17000;
	else if(id == 549) precio = 13500;
	else if(id == 540) precio = 16000;
	else if(id == 491) precio = 13500;
	else if(id == 529) precio = 16000;
	else if(id == 421) precio = 62000;
	else if(id == 480) precio = 180000;
	else if(id == 533) precio = 32000;
	else if(id == 439) precio = 26000;
	else if(id == 555) precio = 135000;
	else if(id == 545) precio = 60000;
	// Blade
	else if(id == 536) precio = 32000;
	else if(id == 575) precio = 22000;
	else if(id == 534) precio = 18000;
	else if(id == 567) precio = 31000;
	else if(id == 535) precio = 46000;
	else if(id == 566) precio = 16000;
	else if(id == 576) precio = 22000;
	else if(id == 412) precio = 16000;
	else if(id == 418) precio = 29500;
	else if(id == 404) precio = 18500;
	else if(id == 479) precio = 16000;
	else if(id == 458) precio = 21000;
	else if(id == 561) precio = 50000;
	else if(id == 483) precio = 17000;
	// Barcos
	else if(id == 473) precio = 4000;
	else if(id == 493) precio = 425000;
	else if(id == 484) precio = 375000;
	else if(id == 453) precio = 200000;
	else if(id == 452) precio = 400000;
	else if(id == 446) precio = 410000;
	else if(id == 454) precio = 380000;
	// Motos
	else if(id == 462) precio = 3500;
	else if(id == 581) precio = 55000;
	else if(id == 522) precio = 465000;
    else if(id == 461) precio = 65000;
	else if(id == 521) precio = 80000;
	else if(id == 463) precio = 22000;
	else if(id == 586) precio = 22000;
	else if(id == 468) precio = 26000;
	else if(id == 471) precio = 7000;

	return precio;
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(AutoInfo[vehicleid][aID], oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

stock ComprarVeh(playerid)
{
    if(JugadorInfo[playerid][jCoches][0] != NOEXISTE && JugadorInfo[playerid][jCoches][1] != NOEXISTE && JugadorInfo[playerid][jCoches][2] != NOEXISTE) return 1;
	else return 0;
}

stock UpdateAttach(playerid)
{
	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	for(new i = 11; i < 13; i++)
	{
	    new id = BolsilloID[playerid][i];
	    if(i == 11)
	    {
	        if(id == 1 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 331, 6);
	        if(id == 2 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 333, 6);
	        if(id == 3 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 334, 6);
	        if(id == 4 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 335, 6);
	        if(id == 5 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 336, 6);
	        if(id == 6 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 337, 6);
	        if(id == 7 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 338, 6);
	        if(id == 8 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 339, 6);
	        if(id == 9 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 341, 6);
	        if(id == 10 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 321, 6);
	        if(id == 11 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 322, 6);
	        if(id == 12 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 323, 6);
	        if(id == 13 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 324, 6);
	        if(id == 14 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 325, 6);
	        if(id == 15 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 326, 6);
	        if(id == 16 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 342, 6);
	        if(id == 17 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 343, 6);
	        if(id == 18 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 344, 6);
	        if(id == 22 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 346, 6);
	        if(id == 23 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 347, 6);
	        if(id == 24 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 348, 6);
	        if(id == 25 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 349, 6);
	        if(id == 26 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 350, 6);
	        if(id == 27 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 351, 6);
	        if(id == 28 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 352, 6);
	        if(id == 29 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 353, 6);
	        if(id == 30 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 355, 6);
	        if(id == 31 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 356, 6);
	        if(id == 32 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 372, 6);
	        if(id == 33 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 357, 6);
	        if(id == 34 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 358, 6);
	        if(id == 35 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 359, 6);
	        if(id == 36 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 360, 6);
	        if(id == 37 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 361, 6);
	        if(id == 38 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 362, 6);
	        if(id == 39 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 363, 6);
	        if(id == 40 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 364, 6);
	        if(id == 41 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 365, 6);
	        if(id == 42 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 366, 6);
	        if(id == 43 && BolsilloCantidad[playerid][i] == 0) SetPlayerAttachedObject(playerid, 0, 367, 6);
	        if(id >= 44 && id <= 56) SetPlayerAttachedObject(playerid,0,2039,6,0.065000,0.029999,0.016999,10.800001,-103.099998,0.000000,0.649999,0.910999,0.476999);
	        if(id == 57) SetPlayerAttachedObject(playerid,0,1242,6,0.215000,0.000000,0.056999,-10.599992,-103.600021,-7.000000,1.000000,1.000000,1.000000);
	        if(id == 58) SetPlayerAttachedObject(playerid,0,2702,6,0.160999,0.038999,0.048000,-2.700039,-17.899940,-86.799949,1.000000,1.000000,1.000000);
	        if(id == 69) SetPlayerAttachedObject(playerid,0,327,6);
	        if(id == 71) SetPlayerAttachedObject(playerid,0,2039,6,0.065000,0.029999,0.016999,10.800001,-103.099998,0.000000,0.649999,0.910999,0.476999);
	        if(id >= 80 && id <= 87 || id == 77) SetPlayerAttachedObject(playerid,0,1546,6,0.094999,0.043000,0.000000,0.000000,0.000000,180.000000,1.000000,1.000000,1.000000);
			if(id == 78 || id == 82) SetPlayerAttachedObject(playerid,0,1544,6,0.103000,0.057999,0.046000,0.000000,0.000000,180.000000,1.000000,1.000000,1.000000);
			if(id == 88) SetPlayerAttachedObject(playerid,0,2102,6,0.350999,-0.023000,0.048000,0.000000,-97.699989,0.000000,1.000000,1.000000,1.000000);
			if(id == 89) SetPlayerAttachedObject(playerid,0,2226,6,0.384000,-0.004999,0.037999,0.000000,-98.100006,0.000000,1.000000,1.000000,1.000000);
			if(id >= 92 && id <= 103) {SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); SetPlayerAttachedObject(playerid,0,2358,6,-0.017999,0.044999,-0.211000,-109.200012,-10.599999,82.600028,1.000000,1.000000,1.000000);}
			if(id == 108)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 2028, 5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 ); // SWANK_CONSOLE - playcheta
			}
			if(id == 109)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 1719, 5, 0.006234, 0.035772, 0.196366, 279.749847, 352.300628, 102.611846, 1.000000, 1.000000, 1.000000 ); // LOW_CONSOLE - playghetto
			}
			if(id == 110)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 1790, 5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000 ); // SWANK_VIDEO_3 - videocheta
			}
			if(id == 111)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 1788, 5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000 ); // SWANK_VIDEO_1 - videoghetto
			}
			if(id == 112)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 2190, 5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000 ); // PC_1 - PC
			}
			if(id == 113)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 2912, 5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000 ); // temp_crate1 - ??
			}
			if(id == 114)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 1518, 5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104 ); // DYN_TV_2 - telecheta
			}
			if(id == 115)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(playerid, 0, 1429, 5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149 ); // DYN_TV - teleghetto
			}

		}
	    if(i == 12)
	    {
	        if(id == 1) SetPlayerAttachedObject(playerid,1,331,5,0.024999,0.000000,-0.005999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
	        if(id == 2) SetPlayerAttachedObject(playerid,1,333,5,-0.040000,0.067000,-0.003000,-29.899999,152.000000,176.000030,1.000000,1.000000,1.000000);
	        if(id == 3) SetPlayerAttachedObject(playerid,1,334,5,0.000000,0.059999,-0.022000,161.599990,10.700001,5.800002,1.000000,1.000000,1.000000);
	        if(id == 4) SetPlayerAttachedObject(playerid,1,335,5,0.180999,0.000000,0.017999,0.000000,177.800018,-8.799996,1.000000,1.000000,1.000000);
	        if(id == 5) SetPlayerAttachedObject(playerid,1,336,5,0.135999,0.030999,0.053999,-17.900001,153.800018,0.000000,1.000000,1.000000,1.000000);
	        if(id == 6) SetPlayerAttachedObject(playerid,1,337,5,0.041999,0.051999,-0.080000,-27.899986,155.800018,-167.499938,1.000000,1.000000,1.000000);
	        if(id == 7) SetPlayerAttachedObject(playerid,1,338,5,0.156999,0.092000,0.071999,-25.099998,172.899963,-19.899995,1.000000,1.000000,1.000000);
	        if(id == 8) SetPlayerAttachedObject(playerid,1,339,5,0.058000,0.008000,-0.109000,-27.999998,155.100036,172.699966,1.000000,1.000000,1.000000);
	        if(id == 9) SetPlayerAttachedObject(playerid,1,341,5,0.000000,0.078999,-0.009000,155.599990,7.200000,4.800000,1.000000,1.000000,1.000000);
	        if(id == 10) SetPlayerAttachedObject(playerid,1,321,5,0.015000,0.041000,-0.068000,-25.599971,162.900054,-175.300018,1.000000,1.000000,1.000000);
	        if(id == 11) SetPlayerAttachedObject(playerid,1,322,5,0.023999,0.052999,-0.041999,157.899978,2.499999,0.000000,1.000000,1.000000,1.000000);
	        if(id == 12) SetPlayerAttachedObject(playerid,1,323,5,-0.002000,0.074000,0.001000,151.200042,23.000000,-9.100001,1.000000,1.000000,1.000000);
	        if(id == 13) SetPlayerAttachedObject(playerid,1,324,5,0.017999,0.003999,-0.047999,168.200012,18.300003,-27.900005,1.000000,1.000000,1.000000);
	        if(id == 14) SetPlayerAttachedObject(playerid,1,325,5,0.176000,0.000000,-0.011000,-23.399999,160.599990,-6.399995,1.000000,1.000000,1.000000);
	        if(id == 15) SetPlayerAttachedObject(playerid,1,326,5,0.008999,-0.018999,-0.047999,-33.199996,159.900085,156.399902,1.000000,1.000000,1.000000);
	        if(id == 16) SetPlayerAttachedObject(playerid,1,342,5,0.019000,0.047000,-0.021000,164.499984,0.000000,-17.599994,1.000000,1.000000,1.000000);
	        if(id == 17) SetPlayerAttachedObject(playerid,1,343,5,0.034000,0.063000,-0.037999,164.500000,14.599996,-4.700009,1.000000,1.000000,1.000000);
	        if(id == 18) SetPlayerAttachedObject(playerid,1,344,5,0.022999,0.039000,-0.125999,165.700012,0.000000,0.000000,1.000000,1.000000,1.000000);
	        if(id == 22) SetPlayerAttachedObject(playerid,1,346,5,0.033000,0.057999,-0.017999,146.299987,14.999998,-4.700002,1.000000,1.000000,1.000000);
	        if(id == 23) SetPlayerAttachedObject(playerid,1,347,5,0.050999,0.038000,-0.021999,144.500015,9.100000,-11.600002,1.000000,1.000000,1.000000);
	        if(id == 24) SetPlayerAttachedObject(playerid,1,348,5,0.041000,0.038000,-0.026999,173.899963,0.000000,1.799999,1.000000,1.000000,1.000000);
	        if(id == 25) SetPlayerAttachedObject(playerid,1,349,5,0.000000,0.089000,0.000000,153.500015,10.000001,4.800000,1.000000,1.000000,1.000000);
	        if(id == 26) SetPlayerAttachedObject(playerid,1,350,5,0.040000,0.026000,0.011000,-156.300003,0.000000,2.600000,1.000000,1.000000,1.000000);
	        if(id == 27) SetPlayerAttachedObject(playerid,1,351,5,0.023000,0.048999,-0.013000,172.200012,14.400005,0.599999,1.000000,1.000000,1.000000);
	        if(id == 28) SetPlayerAttachedObject(playerid,1,352,5,0.024999,0.048000,-0.012000,172.000076,-3.099988,-2.099991,1.000000,1.000000,1.000000);
	        if(id == 29) SetPlayerAttachedObject(playerid,1,353,5,0.005000,0.065000,-0.016000,162.399963,9.599999,8.400000,1.000000,1.000000,1.000000);
	        if(id == 30) SetPlayerAttachedObject(playerid,1,355,5,0.057999,0.076999,-0.023999,162.799942,14.399999,0.000000,1.000000,1.000000,1.000000);
	        if(id == 31) SetPlayerAttachedObject(playerid,1,356,5,0.043999,0.028999,-0.038000,167.499969,15.999998,0.000000,1.000000,1.000000,1.000000);
	        if(id == 32) SetPlayerAttachedObject(playerid,1,372,5,0.048000,0.049999,0.011000,-172.600006,-2.299995,5.999999,1.000000,1.000000,1.000000);
	        if(id == 33) SetPlayerAttachedObject(playerid,1,357,5,-0.043000,0.065999,-0.044999,167.499954,17.399999,0.000000,1.000000,1.000000,1.000000);
	        if(id == 34) SetPlayerAttachedObject(playerid,1,358,5,-0.018000,0.085000,0.033000,167.399978,12.200000,-0.299997,1.000000,1.000000,1.000000);
	        if(id == 35) SetPlayerAttachedObject(playerid,1,359,5,-0.002000,0.031000,-0.064000,146.000061,17.700002,-6.700002,1.000000,1.000000,1.000000);
	        if(id == 36) SetPlayerAttachedObject(playerid,1,360,5,0.002000,0.032000,-0.071000,154.699981,16.600000,-9.000000,1.000000,1.000000,1.000000);
	        if(id == 37) SetPlayerAttachedObject(playerid,1,361,5,0.048000,0.038999,-0.091000,160.500045,27.300014,-3.600001,1.000000,1.000000,1.000000);
	        if(id == 38) SetPlayerAttachedObject(playerid,1,362,5,0.031000,0.030000,-0.105000,148.300064,28.699989,-0.700000,1.000000,1.000000,1.000000);
	        if(id == 39) SetPlayerAttachedObject(playerid,1,363,5,-0.022000,0.087999,0.006999,154.899978,20.799997,-0.300001,1.000000,1.000000,1.000000);
	        if(id == 40) SetPlayerAttachedObject(playerid,1,364,5,0.047000,0.057000,-0.038000,133.699981,17.199989,2.099999,1.000000,1.000000,1.000000);
	        if(id == 41) SetPlayerAttachedObject(playerid,1,365,5,0.036999,0.026999,-0.079999,152.899993,14.900004,-0.400000,1.000000,1.000000,1.000000);
	        if(id == 42) SetPlayerAttachedObject(playerid,1,366,5,0.004000,0.061999,-0.063999,126.599990,33.099998,2.200000,1.000000,1.000000,1.000000);
	        if(id == 43) SetPlayerAttachedObject(playerid,1,367,5,0.018000,0.062999,0.074999,-109.400039,0.000000,0.000000,1.000000,1.000000,1.000000);
	        if(id >= 44 && id <= 56) SetPlayerAttachedObject(playerid,1,2039,5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999);
			if(id == 57) SetPlayerAttachedObject(playerid,1,1242,5,0.255000,0.000000,0.000000,-1.300001,-101.699958,16.500001,1.000000,1.000000,1.000000);
			if(id == 58) SetPlayerAttachedObject(playerid,1,2702,5,0.193999,0.054000,0.000000,-29.899995,4.000002,-96.200019,1.000000,1.000000,1.000000);
            if(id == 69) SetPlayerAttachedObject(playerid,1,327,5);
            if(id == 71) SetPlayerAttachedObject(playerid,1,2039,5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999);
            if(id >= 80 && id <= 87 || id == 77) SetPlayerAttachedObject(playerid,1,1546,5,0.123000,0.025000,-0.009999,158.499969,-1.000000,-177.599990,1.000000,1.000000,0.991999);
            if(id == 78 || id == 82) SetPlayerAttachedObject(playerid,1,1509,5,0.108999,0.026000,-0.019000,158.399978,0.000000,180.000000,1.000000,1.000000,1.000000);
            if(id == 88) SetPlayerAttachedObject(playerid,1,2102,5,0.350999,-0.023000,0.048000,0.000000,-97.699989,0.000000,1.000000,1.000000,1.000000);
			if(id == 89) SetPlayerAttachedObject(playerid,1,2226,5,0.412999,-0.001999,0.000000,-30.699991,-96.799980,0.000000,1.000000,1.000000,1.000000);
		}
	}
	return 1;
}

stock EsArma(id)
{
	if(id >= 1 && id <= 43) return 1;
	return 0;
}

stock ObjetoPesado(id)
{
	if(id >= 1 && id <= 24) return LIVIANO;
	if(id >= 25 && id <= 27) return PESADO;
	if(id >= 28 && id <= 29) return LIVIANO;
	if(id >= 30 && id <= 31) return PESADO;
	if(id == 32) return LIVIANO;
	if(id >= 33 && id <= 40) return PESADO;
	if(id == 41) return LIVIANO;
	if(id == 42) return PESADO;
	if(id >= 43 && id <= 57) return LIVIANO;
	if(id >= 69 && id <= 87) return LIVIANO;
	if(id >= 88 && id <= 89) return PESADO;
	if(id >= 90 && id <= 91) return LIVIANO;
	if(id >= 92 && id <= 103) return PESADO;
	if(id == 104) return LIVIANO;
	if(id == 105 || id == 107) return PESADO;
	if(id == 106) return LIVIANO;
	if(id >= 108 && id <= 116) return PESADO;
	if(id >= 117 && id <= 127) return LIVIANO;
	if(id == 126) return PESADO;
	return -1;
}

stock DarObjeto(playerid, id, tipo, cantidad)
{
    for(new i = 11; i < 13; i++)
    {
        if(BolsilloID[playerid][i] == 0)
        {
			BolsilloID[playerid][i] = id;
			BolsilloTipo[playerid][i] = tipo;
			BolsilloCantidad[playerid][i] = cantidad;
			if(i == 11 && EsArma(id))
			{
				DarArma(playerid, id, cantidad);

			}
			SetPlayerArmedWeapon(playerid, id);
			UpdateAttach(playerid);
            GuardarBolsillos(playerid);
			return 1;
        }
    }
    if(ObjetoPesado(id) == PESADO)
    {
        SendClientMessage(playerid, ROJO_OSCURO, "* Debes tener alguna mano desocupada.");
        return 0;
    }
	for(new i = 1; i < 11; i++)
    {
        if(BolsilloID[playerid][i] == 0)
        {
            new string[64];
			BolsilloID[playerid][i] = id;
			BolsilloTipo[playerid][i] = tipo;
			BolsilloCantidad[playerid][i] = cantidad;
			format(string, sizeof(string), "* El objeto ha sido colocado en el bolsillo %d.", i);
			SendClientMessage(playerid, CELESTE, string);
            GuardarBolsillos(playerid);
			return 1;
        }
    }
	return 0;
}

stock QuitarObjeto(playerid, bolsillo)
{
    if(EsArma(BolsilloID[playerid][bolsillo]))
	{
	    RemoverArmas(playerid);
	}
	BolsilloID[playerid][bolsillo] = 0;
	BolsilloTipo[playerid][bolsillo] = 0;
	BolsilloCantidad[playerid][bolsillo] = 0;
	UpdateAttach(playerid);
	GuardarBolsillos(playerid);
	return 1;
}

stock MostrarBolsillos(playerid, playerid1)
{
    new dialog[1024], string[128];
	for(new i = 1; i < 13; i++)
	{
		if(i == 1)
		{
		    if(BolsilloID[playerid1][i] != 0) format(dialog, sizeof(dialog), "{FFFFFF}1) - {00FFFF}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[playerid1][1]), BolsilloCantidad[playerid1][1]);
		    else format(dialog, sizeof(dialog), "{FFFFFF}1) - Bolsillo vacío.");
		    continue;
		}
		if(i == 11)
		{
			strcat(dialog, "\n|--------------------------------------------------------------|");
			if(BolsilloID[playerid1][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano derecha - {00FFFF}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[playerid1][i]), BolsilloCantidad[playerid1][i]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano derecha - desocupada.");
  			strcat(dialog, string);
  			continue;
		}
		if(i == 12)
		{
			if(BolsilloID[playerid1][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano izquierda - {00FFFF}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[playerid1][i]), BolsilloCantidad[playerid1][i]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano izquierda - desocupada.");
  			strcat(dialog, string);
  			break;
		}
		if(BolsilloID[playerid1][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%d) - {00FFFF}%s {FFFFFF}({00FFFF}%d{FFFFFF})", i, ObtenerNombreObjeto(BolsilloID[playerid1][i]), BolsilloCantidad[playerid1][i]);
  		else format(string, sizeof(string), "\n{FFFFFF}%d) - Bolsillo vacío.", i);
  		strcat(dialog, string);
	}
	format(string, sizeof(string), "{FFFFFF}Bolsillos de %s", NombreJugador(playerid1));
	ShowPlayerDialog(playerid, BOLSILLO, DIALOG_STYLE_LIST, string, dialog, "Seleccionar", "Salir");
	return 1;
}

forward GetValues(playerid, cadena[]);
public GetValues(playerid, cadena[])
{
//	if(IsValidNPC(playerid)) return 0;
	new row[1000], string[1000], arrCoords[25][64];
	format(string, 1000, "SELECT %s FROM usuarios WHERE id = %d", cadena, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, string, true);
	cache_get_row(0, 0, row, database);
	split(row, arrCoords, ',');

	if(strcmp(cadena, "Posiciones", true) == 0)
	{
	    JugadorInfo[playerid][jPos_X] = floatstr(arrCoords[0]);
	    JugadorInfo[playerid][jPos_Y] = floatstr(arrCoords[1]);
	    JugadorInfo[playerid][jPos_Z] = floatstr(arrCoords[2]);
	    JugadorInfo[playerid][jPos_A] = floatstr(arrCoords[3]);
		JugadorInfo[playerid][jInt] = strval(arrCoords[4]);
		JugadorInfo[playerid][jVw] = strval(arrCoords[5]);
		SetPlayerInterior(playerid, JugadorInfo[playerid][jInt]);
		SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][jVw]);
		printf("LOGUEA: %f - %f - %f - %f - %d - %d", JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);
	}
	else if(strcmp(cadena, "BolsilloID", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloID[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "BolsilloTipo", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloTipo[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "BolsilloCantidad", true) == 0)
	{
		for(new i=0; i < 13; i++)
		{
		    BolsilloCantidad[playerid][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Datos", true) == 0)
	{
	    JugadorInfo[playerid][jEdad] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jSexo] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jNivel] = strval(arrCoords[2]);
	    JugadorInfo[playerid][jRespeto] = strval(arrCoords[3]);
		JugadorInfo[playerid][jPayDay] = strval(arrCoords[4]);
	}
	else if(strcmp(cadena, "Fisico", true) == 0)
	{
	    JugadorInfo[playerid][jFuerza] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jResistencia] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Casas", true) == 0)
	{
	    JugadorInfo[playerid][jCasa] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jCasaPrestada] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jCasaAlq] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Coches", true) == 0)
	{
	    for(new i = 0; i < 3; i ++)
	    {
		    JugadorInfo[playerid][jCoches][i] = strval(arrCoords[i]);
		    JugadorInfo[playerid][jCochesPrestado][i] = strval(arrCoords[i+3]);
		}
	}
	else if(strcmp(cadena, "CuentasBancarias", true) == 0)
	{
	    for(new i = 0; i < MAX_CBANCARIAS; i++)
	    {
		    JugadorInfo[playerid][jCuentasBancarias][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Faccion", true) == 0)
	{
	    JugadorInfo[playerid][jLider] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jMiembro] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jRango] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Carcel", true) == 0)
	{
	    JugadorInfo[playerid][jEncarcelado] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoEncarcelado] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Medicos", true) == 0)
	{
	    JugadorInfo[playerid][jHerido] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jEnfermedad] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jReceta] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Necesidades", true) == 0)
	{
	    JugadorInfo[playerid][jHambre] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jEnergia] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jAlcohol] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Documentacion", true) == 0)
	{
	    JugadorInfo[playerid][jDNI] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoDNI] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Trabajo", true) == 0)
	{
	    JugadorInfo[playerid][jTrabajo] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoTrabajo] = strval(arrCoords[1]);
	    JugadorInfo[playerid][jUltimoTrabajo] = strval(arrCoords[2]);
	}
	else if(strcmp(cadena, "Servicio", true) == 0)
	{
	    JugadorInfo[playerid][jServicio] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jUniforme] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "DocFalsa", true) == 0)
	{
	    format(JugadorInfo[playerid][jNombreFalso],35,"%s", arrCoords[0]);
	    JugadorInfo[playerid][jDNIFalso] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Lenguajes", true) == 0)
	{
	    JugadorInfo[playerid][jBiblio] = strval(arrCoords[0]);
	    for(new i = 0; i < 7; i++)
	    {
	    	JugadorInfo[playerid][jIdiomas] = strval(arrCoords[i+1]);
	    	JugadorInfo[playerid][jEIdiomas] = strval(arrCoords[i+8]);
		}
	}
	else if(strcmp(cadena, "Premium", true) == 0)
	{
	    JugadorInfo[playerid][jPremium] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jTiempoPremium] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Habilidad", true) == 0)
	{
	    for(new i = 0; i < 9; i++)
	    {
	    	JugadorInfo[playerid][jHabilidad][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "Licencias", true) == 0)
	{
	    for(new i = 0; i < 8; i++)
	    {
	    	JugadorInfo[playerid][jLicencias][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "LicenciasFalsas", true) == 0)
	{
	    for(new i = 0; i < 8; i++)
	    {
	    	JugadorInfo[playerid][jFLicencia][i] = strval(arrCoords[i]);
		}
	}
	else if(strcmp(cadena, "PuntosRol", true) == 0)
	{
	    JugadorInfo[playerid][jPuntosRol][0] = strval(arrCoords[0]);
	    JugadorInfo[playerid][jPuntosRol][1] = strval(arrCoords[1]);
	}
	else if(strcmp(cadena, "Heridas", true) == 0)
	{
	    for(new i = 0; i < 7; i++)
	    {
	    	JugadorInfo[playerid][jHeridas][i] = strval(arrCoords[i]);
		}
	}
	return 0;
}

forward SaveValues(playerid, cadena[]);
public SaveValues(playerid, cadena[])
{
	//if(IsValidNPC(playerid)) return 0;
	new tmp[350];
	if(strcmp(cadena, "Posiciones", true) == 0)
	{
		format(tmp, 350, "%f,%f,%f,%f,%d,%d",
			JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z], JugadorInfo[playerid][jPos_A], JugadorInfo[playerid][jInt], JugadorInfo[playerid][jVw]);
	}
	else if(strcmp(cadena, "Datos", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jEdad], JugadorInfo[playerid][jSexo], JugadorInfo[playerid][jNivel], JugadorInfo[playerid][jRespeto], JugadorInfo[playerid][jPayDay]);
	}
	else if(strcmp(cadena, "Fisico", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jFuerza], JugadorInfo[playerid][jResistencia]);
	}
	else if(strcmp(cadena, "Casas", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d",
			JugadorInfo[playerid][jCasa], JugadorInfo[playerid][jCasaPrestada], JugadorInfo[playerid][jCasaAlq]);
	}
	else if(strcmp(cadena, "Coches", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jCoches][0], JugadorInfo[playerid][jCoches][1], JugadorInfo[playerid][jCoches][2],
			JugadorInfo[playerid][jCochesPrestado][0], JugadorInfo[playerid][jCochesPrestado][1], JugadorInfo[playerid][jCochesPrestado][2]);
	}
	else if(strcmp(cadena, "CuentasBancarias", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jCuentasBancarias][0], JugadorInfo[playerid][jCuentasBancarias][1], JugadorInfo[playerid][jCuentasBancarias][2], JugadorInfo[playerid][jCuentasBancarias][3], JugadorInfo[playerid][jCuentasBancarias][4]);
	}
	else if(strcmp(cadena, "Faccion", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d",
			JugadorInfo[playerid][jLider], JugadorInfo[playerid][jMiembro], JugadorInfo[playerid][jRango]);
	}
	else if(strcmp(cadena, "Carcel", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jEncarcelado], JugadorInfo[playerid][jTiempoEncarcelado]);
	}
	else if(strcmp(cadena, "Medicos", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d",
			JugadorInfo[playerid][jHerido], JugadorInfo[playerid][jEnfermedad], JugadorInfo[playerid][jReceta]);
	}
	else if(strcmp(cadena, "Necesidades", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d",
			JugadorInfo[playerid][jHambre], JugadorInfo[playerid][jEnergia], JugadorInfo[playerid][jAlcohol]);
	}
	else if(strcmp(cadena, "Documentacion", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jDNI], JugadorInfo[playerid][jTiempoDNI]);
	}
	else if(strcmp(cadena, "Trabajo", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d",
			JugadorInfo[playerid][jTrabajo], JugadorInfo[playerid][jTiempoTrabajo], JugadorInfo[playerid][jUltimoTrabajo]);
	}
	else if(strcmp(cadena, "Servicio", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jServicio], JugadorInfo[playerid][jUniforme]);
	}
	else if(strcmp(cadena, "Licencias", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jLicencias][0], JugadorInfo[playerid][jLicencias][1], JugadorInfo[playerid][jLicencias][2], JugadorInfo[playerid][jLicencias][3], JugadorInfo[playerid][jLicencias][4],
			JugadorInfo[playerid][jLicencias][5], JugadorInfo[playerid][jLicencias][6], JugadorInfo[playerid][jLicencias][7]);
	}
	else if(strcmp(cadena, "DocFalsa", true) == 0)
	{
		format(tmp, 350, "%s,%d",
			JugadorInfo[playerid][jNombreFalso], JugadorInfo[playerid][jDNIFalso]);
	}
	else if(strcmp(cadena, "LicenciasFalsas", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jFLicencia][0], JugadorInfo[playerid][jFLicencia][1], JugadorInfo[playerid][jFLicencia][2], JugadorInfo[playerid][jFLicencia][3], JugadorInfo[playerid][jFLicencia][4],
			JugadorInfo[playerid][jFLicencia][5], JugadorInfo[playerid][jFLicencia][6], JugadorInfo[playerid][jFLicencia][7]);
	}
	else if(strcmp(cadena, "Lenguajes", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jBiblio], JugadorInfo[playerid][jIdiomas][0], JugadorInfo[playerid][jIdiomas][1], JugadorInfo[playerid][jIdiomas][2], JugadorInfo[playerid][jIdiomas][3],
			JugadorInfo[playerid][jIdiomas][4], JugadorInfo[playerid][jIdiomas][5], JugadorInfo[playerid][jIdiomas][6], JugadorInfo[playerid][jEIdiomas][0], JugadorInfo[playerid][jEIdiomas][1],
			JugadorInfo[playerid][jEIdiomas][2], JugadorInfo[playerid][jEIdiomas][3], JugadorInfo[playerid][jEIdiomas][4], JugadorInfo[playerid][jEIdiomas][5], JugadorInfo[playerid][jEIdiomas][6]);
	}
	else if(strcmp(cadena, "Premium", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jPremium], JugadorInfo[playerid][jTiempoPremium]);
	}
	else if(strcmp(cadena, "PuntosRol", true) == 0)
	{
		format(tmp, 350, "%d,%d",
			JugadorInfo[playerid][jPuntosRol][0], JugadorInfo[playerid][jPuntosRol][1]);
	}
	else if(strcmp(cadena, "Habilidad", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jHabilidad][0], JugadorInfo[playerid][jHabilidad][1], JugadorInfo[playerid][jHabilidad][2], JugadorInfo[playerid][jHabilidad][3], JugadorInfo[playerid][jHabilidad][4],
			JugadorInfo[playerid][jHabilidad][5], JugadorInfo[playerid][jHabilidad][6], JugadorInfo[playerid][jHabilidad][7], JugadorInfo[playerid][jHabilidad][8], JugadorInfo[playerid][jHabilidad][9]);
	}
	else if(strcmp(cadena, "Heridas", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,%d,%d",
			JugadorInfo[playerid][jHeridas][0], JugadorInfo[playerid][jHeridas][1], JugadorInfo[playerid][jHeridas][2], JugadorInfo[playerid][jHeridas][3], JugadorInfo[playerid][jHeridas][4],
			JugadorInfo[playerid][jHeridas][5], JugadorInfo[playerid][jHeridas][6]);
	}
	else if(strcmp(cadena, "CuentasBancarias", true) == 0)
	{
		format(tmp, 350, "%d,%d,%d,%d,%d,",
			JugadorInfo[playerid][jCuentasBancarias][0], JugadorInfo[playerid][jCuentasBancarias][1], JugadorInfo[playerid][jCuentasBancarias][2], JugadorInfo[playerid][jCuentasBancarias][3], JugadorInfo[playerid][jCuentasBancarias][4]);
	}
	else if(strcmp(cadena, "BolsilloID", true) == 0)
	{
		format(tmp, 256, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
			BolsilloID[playerid][0], BolsilloID[playerid][1], BolsilloID[playerid][2], BolsilloID[playerid][3],
			BolsilloID[playerid][4], BolsilloID[playerid][5], BolsilloID[playerid][6], BolsilloID[playerid][7],
			BolsilloID[playerid][8], BolsilloID[playerid][9], BolsilloID[playerid][10], BolsilloID[playerid][11], BolsilloID[playerid][12]);
	}
	else if(strcmp(cadena, "BolsilloTipo", true) == 0)
	{
		format(tmp, 256, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
			BolsilloTipo[playerid][0], BolsilloTipo[playerid][1], BolsilloTipo[playerid][2], BolsilloTipo[playerid][3],
			BolsilloTipo[playerid][4], BolsilloTipo[playerid][5], BolsilloTipo[playerid][6], BolsilloTipo[playerid][7],
			BolsilloTipo[playerid][8], BolsilloTipo[playerid][9], BolsilloTipo[playerid][10], BolsilloTipo[playerid][11], BolsilloTipo[playerid][12]);
	}
	else if(strcmp(cadena, "BolsilloCantidad", true) == 0)
	{
		format(tmp, 256, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
			BolsilloCantidad[playerid][0], BolsilloCantidad[playerid][1], BolsilloCantidad[playerid][2], BolsilloCantidad[playerid][3],
			BolsilloCantidad[playerid][4], BolsilloCantidad[playerid][5], BolsilloCantidad[playerid][6], BolsilloCantidad[playerid][7],
			BolsilloCantidad[playerid][8], BolsilloCantidad[playerid][9], BolsilloCantidad[playerid][10], BolsilloCantidad[playerid][11], BolsilloCantidad[playerid][12]);
	}
	new sql[350];
	format(sql, 350, "UPDATE usuarios SET %s = '%s' WHERE id = %d", cadena, tmp, JugadorInfo[playerid][jSQLID]);
	mysql_query(database, sql, false);
	return 0;
}

stock GuardarBolsillos(playerid)
{
	new query[800];
	strcat(query, "UPDATE `usuarios` SET ");
	strcat_format(query, sizeof(query), "`BolsilloID` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", BolsilloID[playerid][0], BolsilloID[playerid][1], BolsilloID[playerid][2], BolsilloID[playerid][3], BolsilloID[playerid][4], BolsilloID[playerid][5], BolsilloID[playerid][6], BolsilloID[playerid][7], BolsilloID[playerid][8], BolsilloID[playerid][9], BolsilloID[playerid][10], BolsilloID[playerid][11], BolsilloID[playerid][12]);
	strcat_format(query, sizeof(query), "`BolsilloTipo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", BolsilloTipo[playerid][0], BolsilloTipo[playerid][1], BolsilloTipo[playerid][2], BolsilloTipo[playerid][3], BolsilloTipo[playerid][4], BolsilloTipo[playerid][5], BolsilloTipo[playerid][6], BolsilloTipo[playerid][7], BolsilloTipo[playerid][8], BolsilloTipo[playerid][9], BolsilloTipo[playerid][10], BolsilloTipo[playerid][11], BolsilloTipo[playerid][12]);
	strcat_format(query, sizeof(query), "`BolsilloCantidad` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d'", BolsilloCantidad[playerid][0], BolsilloCantidad[playerid][1], BolsilloCantidad[playerid][2], BolsilloCantidad[playerid][3], BolsilloCantidad[playerid][4], BolsilloCantidad[playerid][5], BolsilloCantidad[playerid][6], BolsilloCantidad[playerid][7], BolsilloCantidad[playerid][8], BolsilloCantidad[playerid][9], BolsilloCantidad[playerid][10], BolsilloCantidad[playerid][11], BolsilloCantidad[playerid][12]);
	strcat_format(query, sizeof(query), " WHERE `id` = '%d'", JugadorInfo[playerid][jSQLID]);
	mysql_query(database, query, false);

	//printf("%s", query);
	return 1;
}

stock EsObjetoValido(id)
{
	new nombre[64];
	format(nombre, sizeof(nombre), ObtenerNombreObjeto(id));
	if(!strcmp(nombre, "Objeto desconocido", false)) return 0;
	else return 1;
}

stock ObtenerNombreObjeto(id)
{
	new nombre[64] = "Objeto desconocido";
	if(id == 0) nombre = "Vacío";
	if(id == 1) nombre = "Manopla";
	if(id == 2) nombre = "Palo de golf";
	if(id == 3) nombre = "Porra policía";
	if(id == 4) nombre = "Cuchillo";
	if(id == 5) nombre = "Bate de béisbol";
	if(id == 6) nombre = "Pala";
	if(id == 7) nombre = "Taco de billar";
	if(id == 8) nombre = "Katana";
	if(id == 9) nombre = "Motosierra";
	if(id == 10) nombre = "Consolador doble";
	if(id == 11) nombre = "Consolador";
	if(id == 12) nombre = "Consolador vibrador";
	if(id == 13) nombre = "Consolador vibrador pequeño";
	if(id == 14) nombre = "Flores";
	if(id == 15) nombre = "Bastón";
	if(id == 16) nombre = "Granada";
	if(id == 17) nombre = "Gas lacrimógeno";
	if(id == 18) nombre = "Coctel motolov";
	if(id == 22) nombre = "9mm";
	if(id == 23) nombre = "Taser";
	if(id == 24) nombre = "Desert Eagle";
	if(id == 25) nombre = "Escopeta";
	if(id == 26) nombre = "Escopeta recortada";
	if(id == 27) nombre = "Escopeta de combate";
	if(id == 28) nombre = "Uzi";
	if(id == 29) nombre = "MP5";
	if(id == 30) nombre = "AK-47";
	if(id == 31) nombre = "M4";
	if(id == 32) nombre = "Tec-9";
	if(id == 33) nombre = "Rifle";
	if(id == 34) nombre = "Francotirador";
	if(id == 35) nombre = "RPG";
	if(id == 36) nombre = "Lanzamisiles";
	if(id == 37) nombre = "Lanzallamas";
	if(id == 38) nombre = "Minigun";
	if(id == 39) nombre = "Bomba a distancia";
	if(id == 40) nombre = "Detonador";
	if(id == 41) nombre = "Spray";
	if(id == 42) nombre = "Extintor";
	if(id == 43) nombre = "Cámara fotográfica";
	if(id == 44) nombre = "Cargador de 9mm";
	if(id == 45) nombre = "Silenciador de 9mm";
	if(id == 46) nombre = "Cargador de Desert Eagle";
	if(id == 47) nombre = "Cargador de Escopeta";
	if(id == 48) nombre = "Cargador de Escopeta recortada";
	if(id == 49) nombre = "Cargador de Escopeta de combate";
	if(id == 50) nombre = "Cargador de Uzi";
	if(id == 51) nombre = "Cargador de MP5";
	if(id == 52) nombre = "Cargador de AK-47";
	if(id == 53) nombre = "Cargador de M4";
	if(id == 54) nombre = "Cargador de Tec-9";
	if(id == 55) nombre = "Cargador de Rifle";
	if(id == 56) nombre = "Cargador de Francotirador";
	if(id == 57) nombre = "Chaleco";
	if(id == 58) nombre = "Pizza";
	if(id == 59) nombre = "Hamburguesa";
	if(id == 60) nombre = "Kebab";
	if(id == 61) nombre = "Mechero";
	if(id == 62) nombre = "Botella de vino";
	if(id == 63) nombre = "Botella de cerveza";
	if(id == 64) nombre = "Vaso de agua";
	if(id == 65) nombre = "Vaso de refresco";
	if(id == 66) nombre = "Perro caliente";
	if(id == 67) nombre = "Ganzúas"; // SIN USO
	if(id == 68) nombre = "Mismo objeto";
	if(id == 69) nombre = "Semillas marihuana";
	if(id == 70) nombre = "Marihuana";
    if(id == 71) nombre = "Materiales";
    if(id == 72) nombre = "Cuerda";
    if(id == 74) nombre = "Máscara";
    if(id == 75) nombre = "Tabaco";
    if(id == 76) nombre = "Mechero";
    if(id == 77) nombre = "Refresco";
    if(id == 78) nombre = "Cerveza";
    if(id == 79) nombre = "Comida rápida";
    if(id == 80) nombre = "Agua";
    if(id == 81) nombre = "Zumo";
    if(id == 82) nombre = "Cerveza 0%";
    if(id == 83) nombre = "RedBull";
    if(id == 84) nombre = "Whisky";
    if(id == 85) nombre = "Ron + Refresco";
    if(id == 86) nombre = "Whisky + Agua";
    if(id == 87) nombre = "Vodka";
    if(id == 88) nombre = "Radio vieja";
    if(id == 89) nombre = "Radio potente";
    if(id == 90) nombre = "Ganzúa";
    if(id == 91) nombre = "Palanca";
    if(id == 92) nombre = "Caja de AK-47";
    if(id == 93) nombre = "Caja de glock";
    if(id == 94) nombre = "Caja de eagle";
    if(id == 95) nombre = "Caja de uzi";
    if(id == 96) nombre = "Caja de escopeta";
    if(id == 97) nombre = "Caja de sniper";
    if(id == 98) nombre = "Cargadores AK-47";
    if(id == 99) nombre = "Cargadores glock";
    if(id == 100) nombre = "Cargadores eagle";
    if(id == 101) nombre = "Cargadores uzi";
    if(id == 102) nombre = "Cargadores escopeta";
    if(id == 103) nombre = "Cargadores sniper";
    if(id == 104) nombre = "Teléfono móvil";
    if(id == 105) nombre = "Escopeta balas de goma";
    if(id == 106) nombre = "Hachís";
    if(id == 107) nombre = "Fardo de cocaína";
    if(id == 108) nombre = "PlayStation";
    if(id == 109) nombre = "PlayStation rota";
    if(id == 110) nombre = "Video";
    if(id == 111) nombre = "Video roto";
    if(id == 112) nombre = "Ordenador";
    if(id == 113) nombre = "Caja";
    if(id == 114) nombre = "TV";
    if(id == 115) nombre = "TV rota";
    if(id == 116) nombre = "Caña de pescar";
    if(id == 117) nombre = "GPS";
    if(id == 118) nombre = "Walkie Talkie";
    if(id == 119) nombre = "Trapo";
    if(id == 120) nombre = "Papelillo";
    if(id == 121) nombre = "Preservativo";
    if(id == 122) nombre = "Tirita";
    if(id == 123) nombre = "Gelocatil";
    if(id == 124) nombre = "Parazetamol";
    if(id == 125) nombre = "Ventolín";
    if(id == 126) nombre = "Lata de gasolina";
	return nombre;
}

forward CheckArmas(playerid);
public CheckArmas(playerid)
{
    new weapons[13][2];
    //new string[128];
    for(new i = 0; i < 13; i++)
	{
    	GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
    	if(weapons[i][0] == 46 && BolsilloID[playerid][11] != 46 && EsArma(BolsilloID[playerid][11]))
    	{
    	    RemoverArmas(playerid);
    	    DarArma(playerid, BolsilloID[playerid][11], BolsilloCantidad[playerid][11]);
    	    return 1;
    	}
    	if(weapons[i][0] == 46 && BolsilloID[playerid][11] != 46)
		{
			RemoverArmas(playerid);
			return 1;
		}

    	/*if(weapons[i][0] != 0 && weapons[i][0] != BolsilloID[playerid][11])
    	{
    	    if(BolsilloID[playerid][11] == 39 && weapons[i][0] == 40) { }
    	    else
    	    {
    	        new arma[32];
    	        GetWeaponName(weapons[i][0], arma, sizeof(arma));
    	    	SendClientMessage(playerid, ROJO, "** Fuiste kickeado por un posible intento de hack de armas.");
    	    	format(string, sizeof(string), "** %s fue kickeado del servidor por obtener un/a %s.", NombreJugador(playerid), arma);
				ABroadCast(ROJO, string, 1);
    	    	Expulsar(playerid, "ANTICHEAT", "Cheat de armas");
    	    	return 1;
			}
    	}
    	if(weapons[i][0] == BolsilloID[playerid][11] && (BolsilloCantidad[playerid][11] < weapons[i][1] || weapons[i][1] < 0))
    	{
    	    SendClientMessage(playerid, ROJO, "** Fuiste kickeado por un posible intento de hack de armas.");
    	    format(string, sizeof(string), "** %s fue kickeado del servidor por cambiar sus balas de %d a %d.", NombreJugador(playerid), BolsilloCantidad[playerid][11], weapons[i][1]);
			ABroadCast(ROJO, string, 1);
    	    Expulsar(playerid, "ANTICHEAT", "Cheat de armas");
    	    return 1;
    	}*/
    	if(weapons[i][0] == BolsilloID[playerid][11] && BolsilloCantidad[playerid][11] > weapons[i][1])
    	{
    	    BolsilloCantidad[playerid][11] = weapons[i][1];
    	    if(BolsilloCantidad[playerid][11] == 0) UpdateAttach(playerid);
    	}
	}
	return 1;
}

CargarMenus()
{
	new sql[80], row[512], arrCoords[19][64], temp_data[128], rows, fields;
    TotalMenus = 0;

    format(sql, sizeof(sql), "SELECT * FROM menus");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			MenuInfo[idx][mID] = strval(arrCoords[0]);
			MenuInfo[idx][mx] = floatstr(arrCoords[1]);
			MenuInfo[idx][my] = floatstr(arrCoords[2]);
			MenuInfo[idx][mz] = floatstr(arrCoords[3]);
			MenuInfo[idx][mint] = strval(arrCoords[4]);
			MenuInfo[idx][mvw] = strval(arrCoords[5]);
			MenuInfo[idx][mTipo] = strval(arrCoords[6]);
			MenuInfo[idx][mNegocio] = strval(arrCoords[7]);

	        TotalMenus++;
	        MenuInfo[idx][mPickup] = CreateDynamicPickup(1239, 1, MenuInfo[idx][mx], MenuInfo[idx][my], MenuInfo[idx][mz], MenuInfo[idx][mvw], MenuInfo[idx][mint]);
	        MenuInfo[idx][mTexto] = CreateDynamic3DTextLabel("", VERDE, MenuInfo[idx][mx], MenuInfo[idx][my], MenuInfo[idx][mz], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, MenuInfo[idx][mvw], MenuInfo[idx][mint]);
			UpdateTextoMenu(idx);
		}
	}

    printf("Menus cargados: %d (MAX: %d)",TotalMenus, MAX_MENUSNEG);
	return 1;
}

CargarNegocios()
{
	new sql[80], row[512], arrCoords[22][64], temp_data[128], rows, fields;
    TotalNegocios = 0;

    format(sql, sizeof(sql), "SELECT * FROM negocios ");
	mysql_query(database, sql, true);

	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx = 0; idx < rows; idx ++)
		{
			row[0] = EOS;

			for(new b = 0; b < fields; b ++)
			{
				cache_get_row(idx, b, temp_data);

				if(b != 0)
				{
					strcat(row, "|");
					strcat(row, temp_data);
				}
				else
				{
					strcat(row, temp_data);
				}
			}

			//print(row);

			split(row, arrCoords, '|');
			NegocioInfo[idx][nID] = strval(arrCoords[0]);
			format(NegocioInfo[idx][nNombre],128,"%s", arrCoords[1]);
			NegocioInfo[idx][nEX] = floatstr(arrCoords[2]);
			NegocioInfo[idx][nEY] = floatstr(arrCoords[3]);
			NegocioInfo[idx][nEZ] = floatstr(arrCoords[4]);
			NegocioInfo[idx][nIX] = floatstr(arrCoords[5]);
			NegocioInfo[idx][nIY] = floatstr(arrCoords[6]);
			NegocioInfo[idx][nIZ] = floatstr(arrCoords[7]);
			NegocioInfo[idx][nInterior] = strval(arrCoords[8]);
			NegocioInfo[idx][nIntExt] = strval(arrCoords[9]);
			NegocioInfo[idx][nVW] = strval(arrCoords[10]);
			NegocioInfo[idx][nComprada] = strval(arrCoords[11]);
			format(NegocioInfo[idx][nComprador],24,"%s", arrCoords[12]);
			NegocioInfo[idx][nPrecio] = strval(arrCoords[13]);
			NegocioInfo[idx][nCerrada] = strval(arrCoords[14]);
			NegocioInfo[idx][nDinero] = strval(arrCoords[15]);
			NegocioInfo[idx][nProdSolidos] = strval(arrCoords[16]);
			NegocioInfo[idx][nProdLiquidos] = strval(arrCoords[17]);
			NegocioInfo[idx][nTipo] = strval(arrCoords[18]);
			NegocioInfo[idx][nCerradura] = strval(arrCoords[19]);
			NegocioInfo[idx][nAlarma] = strval(arrCoords[20]);
			NegocioInfo[idx][nCamara] = strval(arrCoords[21]);

	        TotalNegocios++;
	        NegocioInfo[idx][nPickup] = CreateDynamicPickup(1272, 1, NegocioInfo[idx][nEX], NegocioInfo[idx][nEY], NegocioInfo[idx][nEZ], NegocioInfo[idx][nVW], NegocioInfo[idx][nIntExt]);
	        NegocioInfo[idx][nTexto] = CreateDynamic3DTextLabel("", VERDE, NegocioInfo[idx][nEX], NegocioInfo[idx][nEY], NegocioInfo[idx][nEZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NegocioInfo[idx][nVW], NegocioInfo[idx][nIntExt]);
			UpdateTextoNeg(idx);
		}
	}

    printf("Negocios cargados: %d (MAX: %d)",TotalNegocios, MAX_NEGOCIOS);
	return 1;
}

GuardarNegocio(idx)
{
    new sql[3000];
    format(sql, sizeof(sql), "UPDATE `negocios` SET `EX`='%f',`EY`='%f',`EZ`='%f',`IX`='%f',`IY`='%f',`IZ`='%f',`Interior`='%d',`IntExt`='%d',`VW`='%d',`Comprada`='%d',`Comprador`='%s',`Precio`='%d',`Cerrada`='%d',`Dinero`='%d',`Nombre`='%s',`PSolidos`='%d',`PLiquidos`='%d',`Tipo`='%d',`Cerradura`='%d',`Alarma`='%d',`Camara`='%d' WHERE `id`='%d'",
	NegocioInfo[idx][nEX],
	NegocioInfo[idx][nEY],
	NegocioInfo[idx][nEZ],
	NegocioInfo[idx][nIX],
	NegocioInfo[idx][nIY],
	NegocioInfo[idx][nIZ],
	NegocioInfo[idx][nInterior],
	NegocioInfo[idx][nIntExt],
	NegocioInfo[idx][nVW],
	NegocioInfo[idx][nComprada],
	NegocioInfo[idx][nComprador],
	NegocioInfo[idx][nPrecio],
	NegocioInfo[idx][nCerrada],
	NegocioInfo[idx][nDinero],
	NegocioInfo[idx][nNombre],
	NegocioInfo[idx][nProdSolidos],
	NegocioInfo[idx][nProdLiquidos],
	NegocioInfo[idx][nTipo],
	NegocioInfo[idx][nCerradura],
	NegocioInfo[idx][nAlarma],
	NegocioInfo[idx][nCamara],
	NegocioInfo[idx][nID]);
	UpdateTextoNeg(idx);
	mysql_query(database, sql, false);
	return 1;
}

stock UpdateTextoNeg(idx)
{
	new string[256];
	if(NegocioInfo[idx][nComprada] == 0)
	{
    	format(string, sizeof(string), "{00FFFF}%s{FFFFFF}\nEstado: {00FFFF}En venta{FFFFFF} por {00FFFF}$%d{FFFFFF}\nUsa {00FFFF}/comprar negocio{FFFFFF}", NegocioInfo[idx][nNombre], NegocioInfo[idx][nPrecio]);
	}
	else if(NegocioInfo[idx][nComprada] == 1)
	{
	    if(NegocioInfo[idx][nCerrada] == 1)
	    {
	    	format(string, sizeof(string), "{00FFFF}%s{FFFFFF}\nEstado: {00FFFF}Cerrado{FFFFFF}", NegocioInfo[idx][nNombre], NegocioInfo[idx][nPrecio]);
		}
		else if(NegocioInfo[idx][nCerrada] == 0)
	    {
	    	format(string, sizeof(string), "{00FFFF}%s{FFFFFF}\nEstado: {00FFFF}Abierto{FFFFFF}\nAprieta {00FFFF}INTRO{FFFFFF} para entrar.", NegocioInfo[idx][nNombre], NegocioInfo[idx][nPrecio]);
		}
	}
	UpdateDynamic3DTextLabelText(NegocioInfo[idx][nTexto], VERDE, string);
}

stock UpdateTextoMenu(idx)
{
	new string[256];
    format(string, sizeof(string), "{00FFFF}Menu de compra{FFFFFF}\nUsa {00FFFF}/comprar{FFFFFF} para ver los artículos.");
	UpdateDynamic3DTextLabelText(MenuInfo[idx][mTexto], VERDE, string);
}

stock ComenzarMusica(i, id)
{
	switch(id)
	{
	    case 0: StopAudioStreamForPlayer(i);
        case 1: PlayAudioStreamForPlayer(i, "http://69.4.238.127/listen.pls");
        case 2: PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8066/listen.pls");
        case 3: PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8000/listen.pls");
        case 4: PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8012/listen.pls");
        case 5: PlayAudioStreamForPlayer(i, "http://bluelayershoutcast.com:8036/listen.pls");
        case 6: PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8034/listen.pls");
        case 7: PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/eurodance.pls");
        case 8: PlayAudioStreamForPlayer(i, "http://91.121.18.185:5200/listen.pls");
        case 9: PlayAudioStreamForPlayer(i, "http://s5.voscast.com:7938/listen.pls");
        case 10: PlayAudioStreamForPlayer(i, "http://funky01.funkyexpress.com.br:8024/listen.pls");
        case 11: PlayAudioStreamForPlayer(i, "http://shoutcast4.hardcoreradio.nl/listen.pls");
        case 12: PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/hardstyle.pls");
        case 13: PlayAudioStreamForPlayer(i, "http://listen.di.fm/public3/house.pls");
        case 14: PlayAudioStreamForPlayer(i, "http://sc1.abacast.com:8240/listen.pls");
        case 15: PlayAudioStreamForPlayer(i, "http://88.191.73.231:5010/listen.pls");
        case 16: PlayAudioStreamForPlayer(i, "http://50.7.242.114:7582/listen.pls");
        case 17: PlayAudioStreamForPlayer(i, "http://stream2.blackbeats.fm/listen.pls");
        case 18: PlayAudioStreamForPlayer(i, "http://80.94.69.106:6694/listen.pls");
        case 19: PlayAudioStreamForPlayer(i, "http://69.175.94.98:8138/listen.pls");
        case 20: PlayAudioStreamForPlayer(i, "http://bluedog.wavestreamer.com:2260/listen.pls");
        case 21: PlayAudioStreamForPlayer(i, "http://stream01.noisefm.pl:8000/listen.pls");
        case 22: PlayAudioStreamForPlayer(i, "http://radiolatina.info:7218/listen.pls");
        case 23: PlayAudioStreamForPlayer(i, "http://uplink.duplexfx.com:8058/listen.pls");
        case 24: PlayAudioStreamForPlayer(i, "http://88.191.229.8:8050/listen.pls");
        case 25: PlayAudioStreamForPlayer(i, "http://uk1.internet-radio.com:15862/listen.pls");
	}
}

stock GuardarMenu(i)
{
	new sql[600];
	format(sql, sizeof(sql), "UPDATE menus SET `x` = '%f', `y` = '%f', `z` = '%f', `int` = '%d', `vw` = '%d', `Tipo` = '%d', `Negocio` = '%d' WHERE `id` = '%d'", MenuInfo[i][mx], MenuInfo[i][my], MenuInfo[i][mz], MenuInfo[i][mint], MenuInfo[i][mvw], MenuInfo[i][mTipo], MenuInfo[i][mNegocio], MenuInfo[i][mID]);
	mysql_query(database, sql, false);
	return 1;
}

stock MostrarMenu(playerid, id)
{
	switch(id)
	{
	    case 1: // Pizzería
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaDeportes, playerid);
	        return 1;
	    }
	    case 2: // Clukin
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaBinco, playerid);
	        return 1;
	    }
	    case 3: // Burguer
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaDS, playerid);
	        return 1;
	    }
	    case 4: // Donuts
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaZIP, playerid);
	        return 1;
	    }
	    case 5: // Restaurante
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaSubUrban, playerid);
	        return 1;
	    }
	    case 6: // Bar
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaVictim, playerid);
	        return 1;
	    }
	    case 7: // Discoteca
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaFerreteria, playerid);
	        return 1;
	    }
	    case 8: // Binco
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(Tienda247, playerid);
	        return 1;
	    }
	    case 9: // ZIP
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaPizzeria, playerid);
	        return 1;
	    }
	    case 10: // ProLaps
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaClukin, playerid);
	        return 1;
	    }
	    case 11: // SubUrban
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaBurger, playerid);
	        return 1;
	    }
	    case 12: // Electrónica
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaBar, playerid);
	        return 1;
	    }
	    case 13: // Ferretería
	    {
	        if(JugadorInfo[playerid][jLicencias][5] == 0 && JugadorInfo[playerid][jFLicencia][5] == 0) return ProxDetector(10, playerid, "Empleado: Aquí sin licencia no compras, lo siento.", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			else if(JugadorInfo[playerid][jLicencias][5] == 1 || JugadorInfo[playerid][jFLicencia][5] == 1) {
				TogglePlayerControllable(playerid, false);
		        ShowMenuForPlayer(TiendaArmeriaB, playerid);
			}
			else if(JugadorInfo[playerid][jLicencias][5] == 2) {
			    TogglePlayerControllable(playerid, false);
		        ShowMenuForPlayer(TiendaArmeriaC, playerid);
			}
			else if(JugadorInfo[playerid][jLicencias][5] == 3) {
			    TogglePlayerControllable(playerid, false);
		        ShowMenuForPlayer(TiendaArmeriaD, playerid);
			}
			else if(JugadorInfo[playerid][jLicencias][5] == 4) {
			    TogglePlayerControllable(playerid, false);
		        ShowMenuForPlayer(TiendaArmeriaAE, playerid);
			}
	        return 1;
	    }
	    case 14: // 24/7
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaEstanco, playerid);
	        return 1;
	    }
	    case 15: // Armería
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaGasolinera, playerid);
	        return 1;
	    }
	    case 16: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaFarmacia, playerid);
	        return 1;
	    }
	    case 17: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaItaliano, playerid);
	        return 1;
	    }
	    case 18: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaChino, playerid);
	        return 1;
	    }
	    case 19: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaJapones, playerid);
	        return 1;
	    }
	    case 20: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaMexicano, playerid);
	        return 1;
	    }
	    case 21: // DS
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaSexShop, playerid);
	        return 1;
	    }
	    case 22:
	    {
	        TogglePlayerControllable(playerid, false);
	        ShowMenuForPlayer(TiendaElectronica, playerid);
	        return 1;
		}
	}
	return 1;
}

forward RellenarLiquidos(i, cantidad);
public RellenarLiquidos(i, cantidad)
{
	NegocioInfo[i][nDinero]  -= (cantidad*2);
	NegocioInfo[i][nProdLiquidos] += cantidad;
	GuardarNegocio(i);
	return 1;
}

forward RellenarSolidos(i, cantidad);
public RellenarSolidos(i, cantidad)
{
	NegocioInfo[i][nDinero] -= (cantidad*3);
	NegocioInfo[i][nProdSolidos] += cantidad;
	GuardarNegocio(i);
	return 1;
}

forward CercaJugador(Float:radi, playerid, targetid); public CercaJugador(Float:radi, playerid, targetid){
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)){
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))){
			return 1;
		}
	}
	return 0;
}

stock ObtenerRango(faccion, rango)
{
	new fstring[50];
	if(rango == 1) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango1]);
	else if(rango == 2) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango2]);
	else if(rango == 3) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango3]);
	else if(rango == 4) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango4]);
	else if(rango == 5) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango5]);
	else if(rango == 6) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango6]);
	else if(rango == 7) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango7]);
	else if(rango == 8) format(fstring, sizeof(fstring), "%s", FaccionInfo[faccion][fRango8]);
	return fstring;
}

stock CargarObjetos(playerid){
	TogglePlayerControllable(playerid, 0);
	//Congelado[playerid] = 1;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid,x,y,z+1.5);
	SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
	AntiSobeit(playerid);
	return 1;
}

public TimerDeUnMinuto()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
//	    FuncPos(i);
	    if(JugadorInfo[i][jTiempoEncarcelado] > 0)
	    {
	        JugadorInfo[i][jTiempoEncarcelado] --;
	        if(JugadorInfo[i][jTiempoEncarcelado] == 0)
	        {
	            if(JugadorInfo[i][jEncarcelado] > 0 && JugadorInfo[i][jEncarcelado] < 9)
	            {
	                JugadorInfo[i][jEncarcelado] = 0;
	                SetPlayerPos(i, 231.3332,148.0346,1003.0234);
	                SetPlayerInterior(i, 3);
	                SetPlayerVirtualWorld(i, 1);
				}
				else if(JugadorInfo[i][jEncarcelado] == 9)
				{
				    JugadorInfo[i][jEncarcelado] = 0;
				    SetPlayerPos(i, 225.5269,-1070.1876,-94.0300);
	                SetPlayerInterior(i, 18);
	                SetPlayerVirtualWorld(i, 0);
				}
				else if(JugadorInfo[i][jEncarcelado] == 25)
		        {
		            JugadorInfo[i][jEncarcelado] = 0;
		            SendClientMessage(i, CELESTE, "* Tu jail administrativo ha finalizado, esperemos que no se repita.");
		            SetPlayerVirtualWorld(i, 0);
		        	SetPlayerInterior(i, 0);
					SetPlayerPos(i, 1411.8982,-1667.9940,13.5600);
		    	}
	        }
		}

		if(TiempoPesca[i] > 0)
		{
		    TiempoPesca[i]--;
		}

		if(Basurero[i] > 0)
		{
		    TemporizadorBasura[i] ++;
		}

		JugadorInfo[i][jPayDay] ++;
		if(JugadorInfo[i][jPayDay] == 40)
		{
			PayDay(i);
		}

		if(JugadorInfo[i][jUltimoTrabajo] > 0)
		{
		    JugadorInfo[i][jUltimoTrabajo] --;
		}
	}

	if(CiervosYaEstanCreados == 1)
	{
		for(new i=0; i<MAX_CIERVOS;i++)
		{
			if(NumeroCiervosInfo[i][Ciervos_Minuto_Respawn] > 0)
			{
				NumeroCiervosInfo[i][Ciervos_Minuto_Respawn] --;
			}
			else if(NumeroCiervosInfo[i][Ciervos_Minuto_Respawn] == 0)
			{
				RespawnCiervo(i);
			}
		}
	}
}

public MensajeDeFaccion(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(JugadorInfo[i][jMiembro] == faccion)
		    {
		        if(JugadorInfo[i][jServicio] == 1)
		        {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public MensajeDeFaccionOOC(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(JugadorInfo[i][jMiembro] == faccion)
		    {
		        SendClientMessage(i, color, string);
			}
		}
	}
}

stock IsNumeric(stringer[])
{
	for(new i = 0, j = strlen(stringer); i < j; i++)
	if(stringer[i] > '9' || stringer[i] < '0') return 0;
	return 1;
}

stock GuardarDelito(i)
{
    new sql[600];
	format(sql, sizeof(sql), "UPDATE delitos SET `Nombre` = '%s', `Informacion` = '%s', `Fecha` = '%s', `Resuelto` = '%d', `Reportador` = '%s' WHERE `id` = '%d'",
		DelitoInfo[i][dNombre], DelitoInfo[i][dInformacion], DelitoInfo[i][dFecha], DelitoInfo[i][dResuelto], DelitoInfo[i][dReportador], DelitoInfo[i][dID]);
	mysql_query(database, sql, false);
	return 1;
}

stock CargarTDs()
{
	//ENTRADA SERVER
    Textdraw9 = TextDrawCreate(919.500000, -1.416664, "usebox");
	TextDrawLetterSize(Textdraw9, 0.000000, 11.868518);
	TextDrawTextSize(Textdraw9, -5.125000, 0.000000);
	TextDrawAlignment(Textdraw9, 1);
	TextDrawColor(Textdraw9, 0);
	TextDrawUseBox(Textdraw9, true);
	TextDrawBoxColor(Textdraw9, 255);
	TextDrawSetShadow(Textdraw9, 0);
	TextDrawSetOutline(Textdraw9, 0);
	TextDrawBackgroundColor(Textdraw9, 0x000000FF);
	TextDrawFont(Textdraw9, 0);

	Textdraw10 = TextDrawCreate(135.375000, 31.499998, "WATTS CITY ROLEPLAY");
	TextDrawLetterSize(Textdraw10, 0.981874, 2.340833);
	TextDrawAlignment(Textdraw10, 1);
	TextDrawColor(Textdraw10, -1);
	TextDrawSetShadow(Textdraw10, 0);
	TextDrawSetOutline(Textdraw10, 1);
	TextDrawBackgroundColor(Textdraw10, 255);
	TextDrawFont(Textdraw10, 3);
	TextDrawSetProportional(Textdraw10, 1);

	Textdraw12 = TextDrawCreate(797.625000, 323.500000, "usebox");
	TextDrawLetterSize(Textdraw12, 0.000000, 16.431020);
	TextDrawTextSize(Textdraw12, -8.250000, 0.000000);
	TextDrawAlignment(Textdraw12, 1);
	TextDrawColor(Textdraw12, 0);
	TextDrawUseBox(Textdraw12, true);
	TextDrawBoxColor(Textdraw12, 255);
	TextDrawSetShadow(Textdraw12, 0);
	TextDrawSetOutline(Textdraw12, 0);
	TextDrawBackgroundColor(Textdraw12, 0x000000FF);
	TextDrawFont(Textdraw12, 0);
	//////////////////////////////////////////////////////

    pcpd0 = TextDrawCreate(650.000000, -4.000000, "                                                        ");
	TextDrawBackgroundColor(pcpd0, 255);
	TextDrawFont(pcpd0, 1);
	TextDrawLetterSize(pcpd0, 0.500000, 1.000000);
	TextDrawColor(pcpd0, -1);
	TextDrawSetOutline(pcpd0, 0);
	TextDrawSetProportional(pcpd0, 1);
	TextDrawSetShadow(pcpd0, 1);
	TextDrawUseBox(pcpd0, 1);
	TextDrawBoxColor(pcpd0, 151039);
	TextDrawTextSize(pcpd0, -10.000000, 0.000000);

	pcpd1 = TextDrawCreate(650.000000, 100.000000, "  ");
	TextDrawBackgroundColor(pcpd1, 255);
	TextDrawFont(pcpd1, 1);
	TextDrawLetterSize(pcpd1, 0.500000, 1.000000);
	TextDrawColor(pcpd1, -186768385);
	TextDrawSetOutline(pcpd1, 0);
	TextDrawSetProportional(pcpd1, 1);
	TextDrawSetShadow(pcpd1, 1);
	TextDrawUseBox(pcpd1, 1);
	TextDrawBoxColor(pcpd1, -186768385);
	TextDrawTextSize(pcpd1, -10.000000, 0.000000);

	pcpd2 = TextDrawCreate(56.000000, 13.000000, "Los Santos Police Department");
	TextDrawBackgroundColor(pcpd2, 255);
	TextDrawFont(pcpd2, 1);
	TextDrawLetterSize(pcpd2, 1.000000, 4.900000);
	TextDrawColor(pcpd2, -1);
	TextDrawSetOutline(pcpd2, 1);
	TextDrawSetProportional(pcpd2, 1);

	pcpd3 = TextDrawCreate(220.000000, 67.000000, "To protect and serve");
	TextDrawBackgroundColor(pcpd3, 255);
	TextDrawFont(pcpd3, 1);
	TextDrawLetterSize(pcpd3, 0.499999, 1.900000);
	TextDrawColor(pcpd3, -1);
	TextDrawSetOutline(pcpd3, 1);
	TextDrawSetProportional(pcpd3, 1);

	pcpd4 = TextDrawCreate(90.000000, 220.000000, "# Ver buscados");
	TextDrawBackgroundColor(pcpd4, 255);
	TextDrawFont(pcpd4, 1);
	TextDrawLetterSize(pcpd4, 0.500000, 2.000000);
	TextDrawColor(pcpd4, -1);
	TextDrawSetOutline(pcpd4, 1);
	TextDrawSetProportional(pcpd4, 1);
	TextDrawSetSelectable(pcpd4, 1);

	pcpd5 = TextDrawCreate(90.000000, 270.000000, "# Solicitar refuerzos");
	TextDrawBackgroundColor(pcpd5, 255);
	TextDrawFont(pcpd5, 1);
	TextDrawLetterSize(pcpd5, 0.500000, 2.000000);
	TextDrawColor(pcpd5, -1);
	TextDrawSetOutline(pcpd5, 1);
	TextDrawSetProportional(pcpd5, 1);
	TextDrawSetSelectable(pcpd5, 1);

	pcpd6 = TextDrawCreate(90.000000, 320.000000, "# Revisar historial");
	TextDrawBackgroundColor(pcpd6, 255);
	TextDrawFont(pcpd6, 1);
	TextDrawLetterSize(pcpd6, 0.500000, 2.000000);
	TextDrawColor(pcpd6, -1);
	TextDrawSetOutline(pcpd6, 1);
	TextDrawSetProportional(pcpd6, 1);
	TextDrawSetSelectable(pcpd6, 1);

	pcpd7 = TextDrawCreate(90.000000, 150.000000, "Menu principal");
	TextDrawBackgroundColor(pcpd7, 255);
	TextDrawFont(pcpd7, 2);
	TextDrawLetterSize(pcpd7, 0.700000, 3.000000);
	TextDrawColor(pcpd7, -65281);
	TextDrawSetOutline(pcpd7, 0);
	TextDrawSetProportional(pcpd7, 1);
	TextDrawSetShadow(pcpd7, 1);

	pcpd8 = TextDrawCreate(110.000000, 179.000000, "Selecciona una opcion...");
	TextDrawBackgroundColor(pcpd8, 255);
	TextDrawFont(pcpd8, 2);
	TextDrawLetterSize(pcpd8, 0.320000, 0.799999);
	TextDrawColor(pcpd8, -1);
	TextDrawSetOutline(pcpd8, 0);
	TextDrawSetProportional(pcpd8, 1);
	TextDrawSetShadow(pcpd8, 1);

	pcpd9 = TextDrawCreate(352.000000, 220.000000, "# Rastrear telefono");
	TextDrawBackgroundColor(pcpd9, 255);
	TextDrawFont(pcpd9, 1);
	TextDrawLetterSize(pcpd9, 0.500000, 2.000000);
	TextDrawColor(pcpd9, -1);
	TextDrawSetOutline(pcpd9, 1);
	TextDrawSetProportional(pcpd9, 1);
	TextDrawSetSelectable(pcpd9, 1);

	/*pcpd10[playerid] = TextDrawCreate(352.000000, 270.000000, "# Localizar radar");
	TextDrawBackgroundColor(pcpd10[playerid], 255);
	TextDrawFont(pcpd10[playerid], 1);
	TextDrawLetterSize(pcpd10[playerid], 0.500000, 2.000000);
	TextDrawColor(pcpd10[playerid], -1);
	TextDrawSetOutline(pcpd10[playerid], 1);
	TextDrawSetProportional(pcpd10[playerid], 1);
	TextDrawSetSelectable(pcpd10[playerid], 1);*/

	pcpd11 = TextDrawCreate(570.000000, 413.000000, "Salir");
	TextDrawBackgroundColor(pcpd11, 255);
	TextDrawFont(pcpd11, 1);
	TextDrawLetterSize(pcpd11, 0.500000, 2.000000);
	TextDrawColor(pcpd11, -1);
	TextDrawSetOutline(pcpd11, 1);
	TextDrawSetProportional(pcpd11, 1);
	TextDrawSetSelectable(pcpd11, 1);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == pcpd4)
	{
	    new dialog[2048], string[256], resultado = 0;
		for(new i = 0; i < TotalDelitos; i ++)
		{
		    if(DelitoInfo[i][dResuelto] == 0)
		    {
			    if(resultado == 0)
			    {
			        format(dialog,sizeof(dialog),"{FFFFFF}Listado de personas buscadas actualmente.\n\n\t{00FFFF}Nombre:{FFFFFF} %s - {00FFFF}Información:{FFFFFF} %s - {00FFFF}Fecha:{FFFFFF} %s", DelitoInfo[i][dNombre], DelitoInfo[i][dInformacion], DelitoInfo[i][dFecha]);
			        resultado ++;
					continue;
				}

			    format(string,sizeof(string),"\n\t{00FFFF}Nombre:{FFFFFF} %s - {00FFFF}Información:{FFFFFF} %s - {00FFFF}Fecha:{FFFFFF} %s", DelitoInfo[i][dNombre], DelitoInfo[i][dInformacion], DelitoInfo[i][dFecha]);
				strcat(dialog, string);
				resultado ++;
			}
		}
		ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Personas en busca", dialog, "Cerrar", "");
		return 1;
	}
	else if(clickedid == pcpd5)
	{
	    new string[128];
	    format(string, sizeof(string), "[Central]:{FFFFFF} Atención, el agente %s ha solicitado sus refuerzos.", NombreJugador(playerid));
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(JugadorInfo[i][jMiembro] == 1 && JugadorInfo[playerid][jServicio] == 1)
				{
					SetPlayerMarkerForPlayer(i, playerid, 0x1B37D2FF);
					SendClientMessage(i, AZUL, string);
				}
			}
		}
	}
	else if(clickedid == pcpd6)
	{
	    ShowPlayerDialog(playerid, HistorialPD, DIALOG_STYLE_INPUT, "{00FFFF}Historial policial", "{FFFFFF}A continuación, introduzca el nombre completo del sujeto que desea revisar el historial.\n\n{FF0000}Importante usar formato Nombre_Apellido.", "Buscar", "Cancelar");
	}
	else if(clickedid == pcpd9)
	{
	    ShowPlayerDialog(playerid, RastrearPD, DIALOG_STYLE_INPUT, "{00FFFF}Rastrear teléfono", "{FFFFFF}A continuación, introduzca el número de teléfono que desea rastrear.", "Rastrear", "Cancelar");
	}
	/*else if(clickedid == pcpd10[playerid])
	{
	    SendClientMessage(playerid, BLANCO, "- Radar");
	}*/
	else if(clickedid == pcpd11)
	{
	    MostrandoPCPD[playerid] = 0;
		TextDrawHideForPlayer(playerid, pcpd0);
		TextDrawHideForPlayer(playerid, pcpd1);
		TextDrawHideForPlayer(playerid, pcpd2);
		TextDrawHideForPlayer(playerid, pcpd3);
		TextDrawHideForPlayer(playerid, pcpd4);
		TextDrawHideForPlayer(playerid, pcpd5);
		TextDrawHideForPlayer(playerid, pcpd6);
		TextDrawHideForPlayer(playerid, pcpd7);
		TextDrawHideForPlayer(playerid, pcpd8);
		TextDrawHideForPlayer(playerid, pcpd9);
		//TextDrawHideForPlayer(playerid, pcpd10[playerid]);
		TextDrawHideForPlayer(playerid, pcpd11);
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

forward CamillasMD(playerid);
public CamillasMD(playerid)
{
	if(PlayerToPoint(playerid, 3.0, 1154.7104,-1344.2810,-7.4613) || PlayerToPoint(playerid, 3.0, 1154.7302,-1329.8289,-7.4613) ||
	PlayerToPoint(playerid, 3.0, 1179.4412,-1321.5503,-7.4613) || PlayerToPoint(playerid, 3.0, 1189.0627,-1320.6732,-7.4613)) return 1;
	return 0;
}

forward OficinasMD(playerid);
public OficinasMD(playerid)
{
	if(PlayerToPoint(playerid, 15.0, 1179.1747,-1347.6418,-7.0200)) return 1; // Recepción
	return 0;
}

forward OficinasPD(playerid);
public OficinasPD(playerid)
{
	if(PlayerToPoint(playerid, 10.0, 195.2923,179.9389,995.0179) || PlayerToPoint(playerid, 10.0, 223.9265,160.6826,1002.9359) || PlayerToPoint(playerid, 10.0, 233.0270,164.7735,1003.0234)) return 1;
	return 0;
}

stock CrearObjetoPolicia(tipo, Float:x,Float:y,Float:z,Float:Angle, departament)
{
	switch(tipo)
	{
		case 1:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.7;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1238, x, y, z-0.5, 0, 0, Angle-90);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.3;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1423, x, y, z-0.3, 0, 0, Angle);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 4:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1422, x, y, z-0.5, 0, 0, Angle);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 5:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.60;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1425, x, y, z-0.60, 0, 0, Angle);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 6:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-1;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(3265, x, y, z-1, 0, 0, Angle);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
		case 7:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.38;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(3091, x, y, z-0.38, 0, 0, Angle);
					ObjectsInfo[i][cpDepartament]=departament;
					return 1;
				}
			}
		}
	}
  	return 0;
}

stock DeleteAllObjects(playerid)
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(ObjectsInfo[i][cpCreated] == 1 && ObjectsInfo[i][cpDepartament] == JugadorInfo[playerid][jMiembro])
  	    {
			ObjectsInfo[i][cpType]=0;
  	        ObjectsInfo[i][cpCreated]=0;
            ObjectsInfo[i][cpX]=0.0;
            ObjectsInfo[i][cpY]=0.0;
            ObjectsInfo[i][cpZ]=0.0;
            DestroyDynamicObject(ObjectsInfo[i][cpObject]);
			ObjectsInfo[i][cpDepartament]=0;
  	    }
	}
    return 0;
}

stock DeleteClosestObject(playerid)
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]) && ObjectsInfo[i][cpDepartament] == JugadorInfo[playerid][jMiembro])
        {
  	        if(ObjectsInfo[i][cpCreated] == 1)
            {
				ObjectsInfo[i][cpType]=0;
                ObjectsInfo[i][cpCreated]=0;
                ObjectsInfo[i][cpX]=0.0;
                ObjectsInfo[i][cpY]=0.0;
                ObjectsInfo[i][cpZ]=0.0;
                DestroyDynamicObject(ObjectsInfo[i][cpObject]);
				ObjectsInfo[i][cpDepartament]=0;
                return 1;
  	        }
  	    }
  	}
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4)
{
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

stock ComprobarAbrirPuertas(playerid)
{
    new coche = GetPlayerVehicleID(playerid);
	/* Interior ayuntamiento */
	if(IsPlayerInRangeOfPoint(playerid, 4, 365.6800, 168.8500, 1007.3900)){
	    if(JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(intGob[0], 0.00, 0.00, -80.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 4, 371.2500, 166.6200, 1007.3900)){
	    if(JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(intGob[1], 0.00, 0.00, -80.00, 45, 25);
	}
	/* Camionero */
	if(IsPlayerInRangeOfPoint(playerid, 5, 918.8986,-1226.4083,16.9766)){
	    if(AutoInfo[coche][aFaccionID] != 114) return SendClientMessage(playerid, ROJO_OSCURO, "* Solo camiones autorizados.");
		RotateObject(rejacam1, 0.00000, 0.00000, -90.08000,10, 10);
		SendClientMessage(playerid, AMARILLO, "Abriste las barrera de la central de camioneros.");
        SetTimerEx("LevantarRejasCam1", 8000, 0, "d", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5, 926.1478,-1215.7080,16.9671)){
	    if(AutoInfo[coche][aFaccionID] != 114) return SendClientMessage(playerid, ROJO_OSCURO, "* Solo camiones autorizados.");
		RotateObject(rejacam2, 0.00000, 0.00000, 90.08000,10, 10);
		SendClientMessage(playerid, AMARILLO, "Abriste las barrera de la central de camioneros.");
        SetTimerEx("LevantarRejasCam2", 8000, 0, "d", playerid);
	}


	/* Zona militar */
	if(IsPlayerInRangeOfPoint(playerid, 15, 1761.3000000,-1700.5000000,13.7000000)){ // Reclutamiento GN
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(recluitGN[0], 1761.3000000,-1700.5000000,9.7000000, 2);
		MoveDynamicObject(recluitGN[1], 1761.3000000,-1691.8000000,9.7000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2814.2000000,-2386.7000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[0], 2809.2000000,-2386.7000000,14.94, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2720.6000000,-2405.4000000,13.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[1], 2720.6010000,-2412.3990000,13.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2720.6000000,-2504.0000000,13.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[2], 2720.6010000,-2497.0000000,13.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.3000000,-2494.0000000,14.9000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[3], 2774.3000000,-2494.0000000,0.9000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.4000000,-2455.9000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[4], 2774.4000000,-2455.9000000,9.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.4000000,-2417.8000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[5], 2774.4000000,-2417.8000000,9.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2484.9000000,-2282.4000000,24.7000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[6], 0.0000000,345.0000000,44.9950000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2382.5000000,-2397.5000000,13.2000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[7], 0.0000000,345.0000000,224.9890000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2324.9000000,-2663.5000000,13.3000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[8], 0.0000000,345.0000000,91.7450000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2322.7000000,-2662.8000000,13.3000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[9], 0.0000000,345.0000000,269.4910000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2384.0000000,-2399.8000000,13.2000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[10], 0.0000000,345.0000000,44.9950000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2483.6000000,-2280.2000000,24.7000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[11], 0.0000000,345.0000000,224.9890000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 2831.40552, -2350.08203, 15.20700)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveObject(rejaGN[12], 2831.40552, -2350.08203, 8.1621, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 2846.49976, -2392.32495, 14.95150)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveObject(rejaGN[13], 2846.49976, -2392.32495, 7.9010, 2);
	}

	/* Comisaría y celdas de la comisaría */
	if(IsPlayerInRangeOfPoint(playerid, 15, 1327.5699, -1665.8199, 6.9186)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(nuevoLSPD[0], 1327.5699, -1665.8199, 11.2000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1381.3000, -1623.9900, 9.6542)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(nuevoLSPD[1], 1381.3000, -1623.9900, 13.2300, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7,  1419.4600, -1644.9601, 12.9600)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(nuevoLSPD[2], 0.0000, 0.0000, 90.0000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1375.5800, -1721.4900, 13.1600)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(nuevoLSPD[3], 0.0000, 0.0000, 0.0000, 45, 25);
	}
    if(IsPlayerInRangeOfPoint(playerid, 7, 942.26, -1385.74, 13.22)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaDeposito[0], 0.00, 0.00, 0.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 934.51, -1386.03, 13.22)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaDeposito[1], 0.00, 0.00, 0.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 945.60, -1326.31, 5.01)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaDeposito[2], 945.60, -1326.31, 0.68, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 931.09, -1326.27, 4.88)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaDeposito[3], 931.09, -1326.27, 0.68, 2);
	}

	if(IsPlayerInRangeOfPoint(playerid, 2, 1588.89941406,-1638.19921875,14.50000000)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(rejaSAPD, 1596.8994140625,-1638.19921875,14.50000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 1544.69921875,-1630.79980469,13.10000038)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    RotateObject(barreraSAPD, 0.00000000,337.24975585938,270.99969482, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.23, 150.50, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[0], 228.24, 149.23, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.29, 160.47, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[1], 228.28, 159.22, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 230.70, 169.80, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[2], 229.44, 169.80, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 237.96, 183.32, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[3], 236.67, 183.31, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 274.83, 189.33, 1006.14)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[4], 273.57, 189.34, 1006.14, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 295.87, 189.28, 1006.14)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[5], 294.64, 189.32, 1006.14, 2);
	}

	if(IsPlayerInRangeOfPoint(playerid, 2, 209.04, 159.11, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[0], 209.04, 157.61, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 208.77, 178.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[1], 208.77, 179.76, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 197.20, 177.04, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[2], 198.70, 177.04, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 192.96, 177.04, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[3], 194.46, 177.04, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 188.73, 177.07, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[4], 190.23, 177.07, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 190.44, 160.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[5], 188.94, 160.26, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 194.69, 160.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[6], 193.19, 160.26, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 198.96, 160.27, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[7], 197.46, 160.27, 1003.25, 2);
	}

	/* Aeropuerto */
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1964.19995117,-2189.80004883,14.39999962)) // Puerta derecha
	{
	    if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(rejaaero[0], 1974.19995117,-2189.80004883,14.39999962, 3);
		MoveDynamicObject(rejaaero[1], 1944.19995117,-2189.80004883,14.39999962, 3);
        return 1;
    }

	/* Asuntos internos */
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1252.3525, -1693.3054, -18.7675)) // Puerta derecha
	{
	    if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[0], 1252.3435, -1694.7865, -18.7675, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1252.4016, -1685.9569, -18.7585)) // Puerta medio
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[1], 1252.4015, -1687.4380, -18.7585, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1252.3931, -1677.6332, -18.7585)) // Puerta izquierda
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[2], 1252.3925, -1679.1339, -18.7585, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1268.9409, -1690.1349, -17.0871)) // Puerta vice-presidente
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[3], 1268.9224, -1691.6190, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1268.8901, -1680.3573, -17.0871)) // Puerta presidente
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[4], 1268.9167, -1681.8585, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1265.4742, -1674.6713, -17.0871)) // Puerta reunión
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[5], 1266.9546, -1674.6893, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1252.3202, -1669.5604, -18.7155)) // Puerta interrogatorio
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[6], 1252.3101, -1668.0797, -18.7155, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1255.3097, -1664.9620, -18.7240)) // Puerta carcel
    {
        if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[7], 1253.8295, -1664.9373, -18.7240, 1.5);
        return 1;
	}

	/* Juzgados */
	if(IsPlayerInRangeOfPoint(playerid, 3, -717.16528, 2341.62134, 90.77750)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    RotateObject(rejaJuzgado, 0.00000, 0.00000, 180.00000, 45, 25);
	    return 1;
	}

	/* Hospital */
	if(IsPlayerInRangeOfPoint(playerid, 15, 1144.5999800,-1292.4000200,13.9000000)){
	    if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaLSMD, 1144.5999800,-1292.4000200,13.9000000, 2);
	}

	/* LSFD */
	if(IsPlayerInRangeOfPoint(playerid, 7, 1541.0642, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[10], 1541.0642, -1509.9301, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1530.9006, -1509.9221, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[11], 1530.9006, -1509.9221, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1520.5536, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[12], 1520.5536, -1509.9301, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1510.2494, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[13], 1510.2494, -1509.9301, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0879, -1563.6947, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[14], 1523.0879, -1563.6947, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0659, -1553.3491, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[15], 1523.0659, -1553.3491, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0540, -1542.9813, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[16], 1523.0540, -1542.9813, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0459, -1532.6880, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[17], 1523.0459, -1532.6880, 9.6397, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1511.01000000,-1582.29000000,14.38000000)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[18], 1507.01000000,-1582.29000000,14.38000000, 2);
		MoveDynamicObject(LSFD[19], 1520.52000000,-1582.24000000,14.38000000, 2);
	}

	/* Celdas y puertas de la prisión */
	for(new c = 0; c < MAX_CELDAS; c++)
	{
		if(PlayerToPoint(playerid, 2.5, Celda[c][celPosX], Celda[c][celPosY], Celda[c][celPosZ]))
		{
            if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
			AbrirCelda(c);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 231.62, -1074.88, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel1, 231.62, -1073.52, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 231.65, -1082.79, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel2, 231.65, -1084.15, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 224.04, -1088.50, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel3, 222.68, -1088.50, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.22, -1093.38, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel4, 226.86, -1093.38, -95.06, 4.0);
	}
	return 1;
}

stock ComprobarCerrarPuertas(playerid)
{
    /* Interior ayuntamiento */
	if(IsPlayerInRangeOfPoint(playerid, 4, 365.6800, 168.8500, 1007.3900)){
	    if(JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(intGob[0], 0.00, 0.00, 0.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 4, 371.2500, 166.6200, 1007.3900)){
	    if(JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(intGob[1], 0.00, 0.00, 0.00, 45, 25);
	}

    /* Zona militar */
    if(IsPlayerInRangeOfPoint(playerid, 15, 1761.3000000,-1700.5000000,13.7000000)){ // Reclutamiento GN
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(recluitGN[0], 1761.3000000,-1700.5000000,13.7000000, 2);
		MoveDynamicObject(recluitGN[1], 1761.3000000,-1691.8000000,13.7000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2814.2000000,-2386.7000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[0], 2814.2000000,-2386.7000000,14.94, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2720.6000000,-2405.4000000,13.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[1], 2720.6000000,-2405.4000000,13.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2720.6000000,-2504.0000000,13.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[2], 2720.6000000,-2504.0000000,13.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.3000000,-2494.0000000,14.9000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[3], 2774.3000000,-2494.0000000,14.9000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.4000000,-2455.9000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[4], 2774.4000000,-2455.9000000,14.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2774.4000000,-2417.8000000,14.8000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaGN[5], 2774.4000000,-2417.8000000,14.8000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2484.9000000,-2282.4000000,24.7000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[6], 0.0000000,270.0000000,44.9950000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2382.5000000,-2397.5000000,13.2000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[7], 0.0000000,270.0000000,224.9890000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2324.9000000,-2663.5000000,13.3000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[8], 0.0000000,270.0000000,91.7450000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2322.7000000,-2662.8000000,13.3000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[9], 0.0000000,270.0000000,269.4910000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2384.0000000,-2399.8000000,13.2000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[10], 0.0000000,270.0000000,44.9950000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 2483.6000000,-2280.2000000,24.7000000)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaGN[11], 0.0000000,270.0000000,224.9890000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 2831.40552, -2350.08203, 8.1621)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveObject(rejaGN[12], 2831.40552, -2350.08203, 15.20700, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 2846.49976, -2392.32495, 7.9010)){
	    if(JugadorInfo[playerid][jMiembro] != 6) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveObject(rejaGN[13], 2846.49976, -2392.32495, 14.95150, 2);
	}

	/* Comisaría y celdas */
	if(IsPlayerInRangeOfPoint(playerid, 15, 1327.5699, -1665.8199, 6.9186)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(nuevoLSPD[0], 1327.5699, -1665.8199, 6.9186, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1381.3000, -1623.9900, 9.6542)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(nuevoLSPD[1], 1381.3000, -1623.9900, 9.6542, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7,  1419.4600, -1644.9601, 12.9600)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(nuevoLSPD[2], 0.0000, -90.0000, 90.0000, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1375.5800, -1721.4900, 13.1600)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(nuevoLSPD[3], 0.0000, -90.0000, 0.0000, 45, 25);
	}
    if(IsPlayerInRangeOfPoint(playerid, 7, 942.26, -1385.74, 13.22)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaDeposito[0], 0.00, 90.00, 0.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 934.51, -1386.03, 13.22)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		RotateObject(rejaDeposito[1], 0.00, -90.00, 0.00, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 945.60, -1326.31, 5.01)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaDeposito[2], 945.60, -1326.31, 5.01, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 931.09, -1326.27, 4.88)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(rejaDeposito[3], 931.09, -1326.27, 4.88, 2);
	}

	if(IsPlayerInRangeOfPoint(playerid, 15, 1588.89941406,-1638.19921875,14.50000000)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(rejaSAPD, 1588.89941406,-1638.19921875,14.50000000, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1544.69921875,-1630.79980469,13.10000038)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    RotateObject(barreraSAPD, 0.00000000,269.49993896484,270.99969482, 45, 25);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.23, 150.50, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[0], 228.23, 150.50, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.29, 160.47, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[1], 228.29, 160.47, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 230.70, 169.80, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[2], 230.70, 169.80, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 237.96, 183.32, 1001.84)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[3], 237.96, 183.32, 1001.84, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 274.83, 189.33, 1006.14)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[4], 274.83, 189.33, 1006.14, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 295.87, 189.28, 1006.14)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(intLSPD[5], 295.87, 189.28, 1006.14, 2);
	}

	if(IsPlayerInRangeOfPoint(playerid, 2, 209.04, 159.11, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[0], 209.04, 159.11, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 208.77, 178.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[1], 208.77, 178.26, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 197.20, 177.04, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[2], 197.20, 177.04, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 192.96, 177.04, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[3], 192.96, 177.04, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 188.73, 177.07, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[4], 188.73, 177.07, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 190.44, 160.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[5], 190.44, 160.26, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 194.69, 160.26, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[6], 194.69, 160.26, 1003.25, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 198.96, 160.27, 1003.25)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    MoveDynamicObject(celdaLSPD[7], 198.96, 160.27, 1003.25, 2);
	}

	/* Aeropuerto */
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1964.19995117,-2189.80004883,14.39999962)) // Puerta derecha
	{
	    if(JugadorInfo[playerid][jMiembro] != 4 && JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(rejaaero[0], 1964.19995117,-2189.80004883,14.39999962, 3);
    	MoveDynamicObject(rejaaero[1], 1958.69995117,-2189.80004883,14.39999962, 3);
        return 1;
    }

	/* Asuntos internos */
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1252.3525, -1693.3054, -18.7675)) // Puerta derecha
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[0], 1252.3525, -1693.3054, -18.7675, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.5, 1252.4016, -1685.9569, -18.7585)) // Puerta medio
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[1], 1252.4016, -1685.9569, -18.7585, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.5, 1252.3931, -1677.6332, -18.7585)) // Puerta izquierda
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[2], 1252.3931, -1677.6332, -18.7585, 1.5);
        return 1;
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.5, 1268.9409, -1690.1349, -17.0871)) // Puerta vice-presidente
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[3], 1268.9409, -1690.1349, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1268.8901, -1680.3573, -17.0871)) // Puerta presidente
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[4], 1268.8901, -1680.3573, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1265.4742, -1674.6713, -17.0871)) // Puerta reunión
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[5], 1265.4742, -1674.6713, -17.0871, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1252.3202, -1669.5604, -18.7155)) // Puerta interrogatorio
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[6], 1252.3202, -1669.5604, -18.7155, 1.5);
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.5, 1255.3097, -1664.9620, -18.7240)) // Puerta carcel
    {
        if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
        MoveDynamicObject(puertaAI[7], 1255.3097, -1664.9620, -18.7240, 1.5);
        return 1;
	}

	/* LSMD */
	if(IsPlayerInRangeOfPoint(playerid, 15, 1144.5999800,-1292.4000200,13.9000000)){
	    if(JugadorInfo[playerid][jMiembro] != 2) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaLSMD, 1136.5999800,-1292.4000200,13.9000000, 2);
	}

	/* Juzgados */
	if(IsPlayerInRangeOfPoint(playerid, 3, -717.16528, 2341.62134, 90.77750)){
	    if(JugadorInfo[playerid][jMiembro] != 1 && JugadorInfo[playerid][jMiembro] != 4) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
	    RotateObject(rejaJuzgado, 0.00000, 0.00000, 90.00000, 45, 25);
	    return 1;
	}

	/* LSFD */
	if(IsPlayerInRangeOfPoint(playerid, 7, 1541.0642, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[10], 1541.0642, -1509.9301, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1530.9006, -1509.9221, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[11], 1530.9006, -1509.9221, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1520.5536, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[12], 1520.5536, -1509.9301, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1510.2494, -1509.9301, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[13], 1510.2494, -1509.9301, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0879, -1563.6947, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[14], 1523.0879, -1563.6947, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0659, -1553.3491, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[15], 1523.0659, -1553.3491, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0540, -1542.9813, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[16], 1523.0540, -1542.9813, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 7, 1523.0459, -1532.6880, 13.8786)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[17], 1523.0459, -1532.6880, 13.8786, 2);
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1511.01000000,-1582.29000000,14.38000000)){
	    if(JugadorInfo[playerid][jMiembro] != 3) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(LSFD[18], 1511.01000000,-1582.29000000,14.38000000, 2);
 		MoveDynamicObject(LSFD[19], 1516.52000000,-1582.24000000,14.38000000, 2);
	}

	/* Celdas y puertas de la prisión */
	for(new c = 0; c < MAX_CELDAS; c++)
	{
		if(PlayerToPoint(playerid, 2.5, Celda[c][celPosX], Celda[c][celPosY], Celda[c][celPosZ]))
		{
		    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
			CerrarCelda(c);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 231.62, -1074.88, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel1, 231.62, -1074.88, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 231.65, -1082.79, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel2, 231.65, -1082.79, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 224.04, -1088.50, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel3, 224.04, -1088.50, -95.06, 4.0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 228.22, -1093.38, -95.06)){
	    if(JugadorInfo[playerid][jMiembro] != 1) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes las llaves de esta puerta.");
		MoveDynamicObject(puertaCarcel4, 228.22, -1093.38, -95.06, 4.0);
	}
	return 1;
}

forward BloqueandoVeh(playerid, coche);
public BloqueandoVeh(playerid, coche)
{
    AutoInfo[coche][aBloqueado] = 1;
    AutoInfo[coche][aMotor] = 0;
    new Float:Pos[4];
    GetVehiclePos(coche, Pos[0], Pos[1], Pos[2]);
    GetVehicleZAngle(coche, Pos[3]);
    AutoInfo[coche][ax] = Pos[0]; AutoInfo[coche][ay] = Pos[1]; AutoInfo[coche][az] = Pos[2]; AutoInfo[coche][aa] = Pos[3];
    UpdateVehFloat(AutoInfo[coche][aID], "X", Pos[0]); UpdateVehFloat(AutoInfo[coche][aID], "Y", Pos[1]); UpdateVehFloat(AutoInfo[coche][aID], "Z", Pos[2]); UpdateVehFloat(AutoInfo[coche][aID], "A", Pos[3]);
    TogglePlayerControllable(playerid, 1);
    new motor, luces, alarma, puertas, capo, maletero, objetivo;
	GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
	SetVehicleParamsEx(coche, false, luces, alarma, puertas, capo, maletero, objetivo);
	ClearAnimations(playerid);
}

forward Quimioterapia(playerid, i);
public Quimioterapia(playerid, i)
{
	new string[128];
	format(string, sizeof(string), "* El proceso de quimioterapia a %s finalizó. Hazle un nuevo examen médico para ver su estado actual.", NombreJugador(i));
	SendClientMessage(playerid, CELESTE, string);
	new suerte = random(100);
	printf("%d", suerte);
	EnQuimioterapia[i] = 0;
	if(suerte == 10 || suerte == 20 || suerte == 30 || suerte == 40 || suerte == 50 || suerte == 60 || suerte == 70 || suerte == 80 || suerte == 90 || suerte == 100)
	{
		JugadorInfo[i][jEnfermedad] = 0;
		SaveValue(i, "Enfermedad", 0);
	}
	return 1;
}

forward ExaminarEnfermedad(playerid, i);
public ExaminarEnfermedad(playerid, i)
{
	new string[400];
	if(JugadorInfo[i][jEnfermedad] == 0){
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado son todos negativos, lo cual\n\tinforma que el estado del paciente es perfecto.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 1){ // Gripe
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en gripe, lo cual\n\tdeberá añadirlo a su historial médico y seguidamenterecetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 2){ // Fiebre
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en fiebre, lo cual\n\tdeberá añadirlo a su historial médico y seguidamente recetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 3){ // Alergia
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en alergia, lo cual\n\tdeberá añadirlo a su historial médico y seguidamente recetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 4){ // Sida
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en sida, lo cual\n\tdeberá añadirlo a su historial médico y seguidamente recetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 5){ // Asma
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en asma, lo cual\n\tdeberá añadirlo a su historial médico y seguidamente recetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	else if(JugadorInfo[i][jEnfermedad] == 6){ // Cáncer
	    format(string, sizeof(string), "{FFFFFF}Informe médico del paciente {00FFFF}%s{FFFFFF}.\n\n\tLos resultados médicos del examen realizado dan positivo en cancer, lo cual\n\tdeberá añadirlo a su historial médico y seguidamente recetarle un \n\ttratamiento médico para que se recupere.", NombreJugador(i));
	}
	ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{00FFFF}Informe médico", string, "Cerrar", "");
	return 1;
}

//-------------------------------------------------

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
    animation[playerid]++;
}

//-------------------------------------------------

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0, 1);
}

forward TrasladarHospital(playerid);
public TrasladarHospital(playerid)
{
	SetPlayerHealthEx(playerid, 75);
	SetPlayerPos(playerid, 1156.7585,-1339.4015,-1.6512);
	SetPlayerInterior(playerid, 6);
	SetPlayerVirtualWorld(playerid, 6);
	SetCameraBehindPlayer(playerid);
	JugadorInfo[playerid][jHerido] = 0;
	SendClientMessage(playerid, BLANCO, "Doctor: Señor, ya le hacemos entrega del alta médica. Usted fue trasladado al hospital tras...");
	SendClientMessage(playerid, BLANCO, "... quedarse insconciente. Tenga buen día y mantenga reposo durante unas horas.");
	JugadorInfo[playerid][jDinero] -= 100;
	SetTimerEx("Desfrizear", 3000, 0, "d", playerid);
	AntiSobeit(playerid);
	return 1;
}

public TimerDeUnSegundo()
{
	if(TiempoAnuncio > 0) TiempoAnuncio --;
	for(new i=0; i < MAX_PLAYERS; i++)
	{
	    if(DebilitoIncendio[i] > 0) DebilitoIncendio[i] --;

		if(RobandoDinero[i] > 0)
		{
		    new string[128];
		    if(PlayerToPoint(i, 2, PosRobo[i][0], PosRobo[i][1], PosRobo[i][2]))
		    {
			    new sumar = random(30)+1;
			    RobandoDinero[i] += sumar;
			    format(string, sizeof(string), "~w~Dinero robado: ~g~$%d", RobandoDinero[i]);
				GameTextForPlayer(i, string, 1000, 6);
			    if(RobandoDinero[i] >= NegocioInfo[RobandoNegocio[i]][nDinero])
			    {
			        JugadorInfo[i][jDinero] += RobandoDinero[i];
			        RobandoDinero[i] = 0;
			        RobandoNegocio[i] = 0;
			    }
			}
			else
			{
			    format(string, sizeof(string), "~w~Dinero robado: ~r~$%d", RobandoDinero[i]);
				GameTextForPlayer(i, string, 1000, 6);
			    JugadorInfo[i][jDinero] += RobandoDinero[i];
       			RobandoDinero[i] = 0;
		        RobandoNegocio[i] = 0;
			}
		}
	}
	return 1;
}

public OnObjectRotated(objectid)
{
   return 1;
}
public OnObjectStopRotate(objectid)
{
   return 1;
}
public OnObjectStopBucle(objectid)
{
   return 1;
}

public encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

public AlternarLuces()
{
    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(LucesAlternes[i] == 1)
	    {
	        new Panels, Doors1, Lights, Tires;
	        GetVehicleDamageStatus(i, Panels, Doors1, Lights, Tires);
	        if(AlternandoLuces2[i] == 0)
	        {
				UpdateVehicleDamageStatus(i, Panels, Doors1, encode_lights(1,1,0,0), Tires);
		    	AlternandoLuces2[i] = 1;
			}
			else
			{
			    AlternandoLuces2[i] = 0;
				UpdateVehicleDamageStatus(i, Panels, Doors1, encode_lights(0,0,1,1), Tires);
			}
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	SendClientMessage(playerid, CELESTE, "* Recuerda que podrás editarte o quitarte este objeto con el comando '/accesorio'.");
    return 1;
}

public CrearMenu()
{
    // Armería policía (Menu general)
	ArmeriaSAPD = CreateMenu("Armeria policia", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(ArmeriaSAPD,0,"Armas");
	AddMenuItem(ArmeriaSAPD,0,"Municion");

	// Armería policía (Armas)
	ArmasSAPD = CreateMenu("Armeria policia", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(ArmasSAPD,0,"Desert Eagle");
	AddMenuItem(ArmasSAPD,0,"MP5");
	AddMenuItem(ArmasSAPD,0,"M4");
	AddMenuItem(ArmasSAPD,0,"Sniper");
	AddMenuItem(ArmasSAPD,0,"Escopeta");

	// Armería policía (Munición)
	MunicionSAPD = CreateMenu("Armeria policia", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(MunicionSAPD,0,"Cargador Desert Eagle");
	AddMenuItem(MunicionSAPD,0,"Cargador MP5");
	AddMenuItem(MunicionSAPD,0,"Cargador M4");
	AddMenuItem(MunicionSAPD,0,"Cargador Sniper");
	AddMenuItem(MunicionSAPD,0,"Cargador Escopeta");

	// Tienda de deportes
	TiendaDeportes = CreateMenu("ProLaps", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaDeportes,0,"Bate de beisbol");
	AddMenuItem(TiendaDeportes,1,"$45");
	AddMenuItem(TiendaDeportes,0,"Palo de golf");
	AddMenuItem(TiendaDeportes,1,"$70");
	AddMenuItem(TiendaDeportes,0,"Katana");
	AddMenuItem(TiendaDeportes,1,"$350");
	AddMenuItem(TiendaDeportes,0,"Equipo de pesca");
	AddMenuItem(TiendaDeportes,1,"$70");
	AddMenuItem(TiendaDeportes,0,"Ropa");
	AddMenuItem(TiendaDeportes,1,"$40");
	AddMenuItem(TiendaDeportes,0,"Salir");

	// Tienda binco
	TiendaBinco = CreateMenu("Binco", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaBinco,0,"Ropa");
	AddMenuItem(TiendaBinco,1,"$40");
	AddMenuItem(TiendaBinco,0,"Salir");

	// Tienda DS
	TiendaDS = CreateMenu("DS", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaDS,0,"Ropa");
	AddMenuItem(TiendaDS,1,"$40");
	AddMenuItem(TiendaDS,0,"Salir");

	// Tienda Victim
	TiendaVictim = CreateMenu("Victim", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaVictim,0,"Ropa");
	AddMenuItem(TiendaVictim,1,"$40");
	AddMenuItem(TiendaVictim,0,"Salir");

	// Tienda zip
	TiendaZIP = CreateMenu("Zip", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaZIP,0,"Ropa");
	AddMenuItem(TiendaZIP,1,"$40");
	AddMenuItem(TiendaZIP,0,"Salir");

	// Tienda SubUrban
	TiendaSubUrban = CreateMenu("SubUrban", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaSubUrban,0,"Ropa");
	AddMenuItem(TiendaSubUrban,1,"$40");
	AddMenuItem(TiendaSubUrban,0,"Salir");

	// Tienda Ferretería
	TiendaFerreteria = CreateMenu("Ferreteria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaFerreteria,0,"Pala");
	AddMenuItem(TiendaFerreteria,1,"$25");
	AddMenuItem(TiendaFerreteria,0,"Ganzuas (10 uds)");
	AddMenuItem(TiendaFerreteria,1,"$50");
	AddMenuItem(TiendaFerreteria,0,"Extintor");
	AddMenuItem(TiendaFerreteria,1,"$150");
	AddMenuItem(TiendaFerreteria,0,"Palanca");
	AddMenuItem(TiendaFerreteria,1,"$50");
	AddMenuItem(TiendaFerreteria,0,"Motosierra");
	AddMenuItem(TiendaFerreteria,1,"$350");
	AddMenuItem(TiendaFerreteria,0,"Salir");

	// Tienda electrónica
	TiendaElectronica = CreateMenu("Electronica", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaElectronica,0,"Movil");
	AddMenuItem(TiendaElectronica,1,"$250");
	AddMenuItem(TiendaElectronica,0,"GPS");
	AddMenuItem(TiendaElectronica,1,"$200");
	AddMenuItem(TiendaElectronica,0,"Radio");
	AddMenuItem(TiendaElectronica,1,"$90");
	AddMenuItem(TiendaElectronica,0,"Walkie Talkie");
	AddMenuItem(TiendaElectronica,1,"$110");
	AddMenuItem(TiendaElectronica,0,"Camara de fotos");
	AddMenuItem(TiendaElectronica,1,"$400");
	AddMenuItem(TiendaElectronica,0,"Salir");

	// Tienda 24/7
	Tienda247 = CreateMenu("24/7", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(Tienda247,0,"Mechero");
	AddMenuItem(Tienda247,1,"$5");
	AddMenuItem(Tienda247,0,"Cigarros");
	AddMenuItem(Tienda247,1,"$20");
	AddMenuItem(Tienda247,0,"Sprunk");
	AddMenuItem(Tienda247,1,"$3");
	AddMenuItem(Tienda247,0,"Cerveza");
	AddMenuItem(Tienda247,1,"$5");
	AddMenuItem(Tienda247,0,"Trapos");
	AddMenuItem(Tienda247,1,"$25");
	AddMenuItem(Tienda247,0,"Papelillo");
	AddMenuItem(Tienda247,1,"$10");
	AddMenuItem(Tienda247,0,"Salir");

	// Pizzería
	TiendaPizzeria = CreateMenu("Pizzeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaPizzeria,0,"Agua");
	AddMenuItem(TiendaPizzeria,1,"$2");
	AddMenuItem(TiendaPizzeria,0,"Zumo");
	AddMenuItem(TiendaPizzeria,1,"$3");
	AddMenuItem(TiendaPizzeria,0,"Refresco");
	AddMenuItem(TiendaPizzeria,1,"$3");
	AddMenuItem(TiendaPizzeria,0,"Cerveza");
	AddMenuItem(TiendaPizzeria,1,"$5");
	AddMenuItem(TiendaPizzeria,0,"Trozo de pizza");
	AddMenuItem(TiendaPizzeria,1,"$6");
	AddMenuItem(TiendaPizzeria,0,"Margarita");
	AddMenuItem(TiendaPizzeria,1,"$8");
	AddMenuItem(TiendaPizzeria,0,"Cuatro estaciones");
	AddMenuItem(TiendaPizzeria,1,"$10");
	AddMenuItem(TiendaPizzeria,0,"Barbacoa");
	AddMenuItem(TiendaPizzeria,1,"$12");
	AddMenuItem(TiendaPizzeria,0,"Salir");

	// Cluking Bell
	TiendaClukin = CreateMenu("Cluking Bell", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaClukin,0,"Agua");
	AddMenuItem(TiendaClukin,1,"$2");
	AddMenuItem(TiendaClukin,0,"Zumo");
	AddMenuItem(TiendaClukin,1,"$3");
	AddMenuItem(TiendaClukin,0,"Refresco");
	AddMenuItem(TiendaClukin,1,"$3");
	AddMenuItem(TiendaClukin,0,"Cerveza");
	AddMenuItem(TiendaClukin,1,"$5");
	AddMenuItem(TiendaClukin,0,"Nuggets de pollo");
	AddMenuItem(TiendaClukin,1,"$6");
	AddMenuItem(TiendaClukin,0,"Alitas de pollo");
	AddMenuItem(TiendaClukin,1,"$8");
	AddMenuItem(TiendaClukin,0,"Ensalada césar");
	AddMenuItem(TiendaClukin,1,"$10");
	AddMenuItem(TiendaClukin,0,"Patatas fritas con nuggets");
	AddMenuItem(TiendaClukin,1,"$12");
	AddMenuItem(TiendaClukin,0,"Salir");

	// Burguer Shot
	TiendaBurger = CreateMenu("Burguer Shot", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaBurger,0,"Agua");
	AddMenuItem(TiendaBurger,1,"$2");
	AddMenuItem(TiendaBurger,0,"Zumo");
	AddMenuItem(TiendaBurger,1,"$3");
	AddMenuItem(TiendaBurger,0,"Refresco");
	AddMenuItem(TiendaBurger,1,"$3");
	AddMenuItem(TiendaBurger,0,"Cerveza");
	AddMenuItem(TiendaBurger,1,"$5");
	AddMenuItem(TiendaBurger,0,"Hamburguesa de pollo");
	AddMenuItem(TiendaBurger,1,"$6");
	AddMenuItem(TiendaBurger,0,"Cheeseburger");
	AddMenuItem(TiendaBurger,1,"$8");
	AddMenuItem(TiendaBurger,0,"Long Chicken");
	AddMenuItem(TiendaBurger,1,"$10");
	AddMenuItem(TiendaBurger,0,"Steakhouse");
	AddMenuItem(TiendaBurger,1,"$12");
	AddMenuItem(TiendaBurger,0,"Salir");

	// Bar
	TiendaBar = CreateMenu("Bar", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaBar,0,"Agua");
	AddMenuItem(TiendaBar,1,"$2");
	AddMenuItem(TiendaBar,0,"Zumo");
	AddMenuItem(TiendaBar,1,"$3");
	AddMenuItem(TiendaBar,0,"Refresco");
	AddMenuItem(TiendaBar,1,"$3");
	AddMenuItem(TiendaBar,0,"Redbull");
	AddMenuItem(TiendaBar,1,"$5");
	AddMenuItem(TiendaBar,0,"Cerveza");
	AddMenuItem(TiendaBar,1,"$5");
	AddMenuItem(TiendaBar,0,"Vino");
	AddMenuItem(TiendaBar,1,"$7");
	AddMenuItem(TiendaBar,0,"Ron y refresco");
	AddMenuItem(TiendaBar,1,"$8");
	AddMenuItem(TiendaBar,0,"Whisky + Agua");
	AddMenuItem(TiendaBar,1,"$9");
	AddMenuItem(TiendaBar,0,"Salir");

	// Armería B
	TiendaArmeriaB = CreateMenu("Armeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaArmeriaB,0,"Colt 45");
	AddMenuItem(TiendaArmeriaB,1,"$1500");
	AddMenuItem(TiendaArmeriaB,0,"Desert Eagle");
	AddMenuItem(TiendaArmeriaB,1,"$2500");
	AddMenuItem(TiendaArmeriaB,0,"Cargador Colt 45");
	AddMenuItem(TiendaArmeriaB,1,"$200");
	AddMenuItem(TiendaArmeriaB,0,"Cargador Desert Eagle");
	AddMenuItem(TiendaArmeriaB,1,"$200");
	AddMenuItem(TiendaArmeriaB,0,"Salir");

	// Armería C
	TiendaArmeriaC = CreateMenu("Armeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaArmeriaC,0,"UZI");
	AddMenuItem(TiendaArmeriaC,1,"$3000");
	AddMenuItem(TiendaArmeriaC,0,"Tec 9");
	AddMenuItem(TiendaArmeriaC,1,"$3500");
	AddMenuItem(TiendaArmeriaC,0,"Escopeta");
	AddMenuItem(TiendaArmeriaC,1,"$5000");
	AddMenuItem(TiendaArmeriaC,0,"MP5");
	AddMenuItem(TiendaArmeriaC,1,"$7000");
	AddMenuItem(TiendaArmeriaC,0,"Cargador UZI");
	AddMenuItem(TiendaArmeriaC,1,"$400");
	AddMenuItem(TiendaArmeriaC,0,"Cargador Tec 9");
	AddMenuItem(TiendaArmeriaC,1,"$400");
	AddMenuItem(TiendaArmeriaC,0,"Cargador Escopeta");
	AddMenuItem(TiendaArmeriaC,1,"$400");
	AddMenuItem(TiendaArmeriaC,0,"Cargador MP5");
	AddMenuItem(TiendaArmeriaC,1,"$600");
	AddMenuItem(TiendaArmeriaC,0,"Salir");

	// Armería D (Caza)
	TiendaArmeriaD = CreateMenu("Armeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaArmeriaD,0,"Rifle de caza");
	AddMenuItem(TiendaArmeriaD,1,"$4000");
	AddMenuItem(TiendaArmeriaD,0,"Cargador rifle");
	AddMenuItem(TiendaArmeriaD,1,"$300");
	AddMenuItem(TiendaArmeriaD,0,"Salir");

	// Armería AE
	TiendaArmeriaAE = CreateMenu("Armeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaArmeriaAE,0,"Carabina M4");
	AddMenuItem(TiendaArmeriaAE,1,"$12000");
	AddMenuItem(TiendaArmeriaAE,0,"AK-47");
	AddMenuItem(TiendaArmeriaAE,1,"$10000");
	AddMenuItem(TiendaArmeriaAE,0,"Sniper");
	AddMenuItem(TiendaArmeriaAE,1,"$16000");
	AddMenuItem(TiendaArmeriaAE,0,"Cargador Carabina M4");
	AddMenuItem(TiendaArmeriaAE,1,"$800");
	AddMenuItem(TiendaArmeriaAE,0,"Cargador AK-47");
	AddMenuItem(TiendaArmeriaAE,1,"$700");
	AddMenuItem(TiendaArmeriaAE,0,"Cargador Sniper");
	AddMenuItem(TiendaArmeriaAE,1,"$800");
	AddMenuItem(TiendaArmeriaAE,0,"Salir");

	// Estanco
	TiendaEstanco = CreateMenu("Estanco", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaEstanco,0,"Mechero");
	AddMenuItem(TiendaEstanco,1,"$4");
	AddMenuItem(TiendaEstanco,0,"Cigarrillos");
	AddMenuItem(TiendaEstanco,1,"$10");
	AddMenuItem(TiendaEstanco,0,"Papelillo");
	AddMenuItem(TiendaEstanco,1,"$5");
	AddMenuItem(TiendaEstanco,0,"Salir");

	// Gasolinera
	TiendaGasolinera = CreateMenu("Gasolinera", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaGasolinera,0,"Mechero");
	AddMenuItem(TiendaGasolinera,1,"$4");
	AddMenuItem(TiendaGasolinera,0,"Cigarrillos");
	AddMenuItem(TiendaGasolinera,1,"$10");
	AddMenuItem(TiendaGasolinera,0,"Papelillo");
	AddMenuItem(TiendaGasolinera,1,"$5");
	AddMenuItem(TiendaGasolinera,0,"Lata de gasolina");
	AddMenuItem(TiendaGasolinera,1,"$40");
	AddMenuItem(TiendaGasolinera,0,"Salir");

	// Farmacia
	TiendaFarmacia = CreateMenu("Farmacia", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaFarmacia,0,"Tiritas");
	AddMenuItem(TiendaFarmacia,1,"$5");
	AddMenuItem(TiendaFarmacia,0,"Gelocatil");
	AddMenuItem(TiendaFarmacia,1,"$40");
	AddMenuItem(TiendaFarmacia,0,"Parazetamol");
	AddMenuItem(TiendaFarmacia,1,"$40");
	AddMenuItem(TiendaFarmacia,0,"Ventolín");
	AddMenuItem(TiendaFarmacia,1,"$40");
	AddMenuItem(TiendaFarmacia,0,"Salir");

	// Italiano
	TiendaItaliano = CreateMenu("Italiano", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaItaliano,0,"Agua");
	AddMenuItem(TiendaItaliano,1,"$2");
	AddMenuItem(TiendaItaliano,0,"Zumo");
	AddMenuItem(TiendaItaliano,1,"$3");
	AddMenuItem(TiendaItaliano,0,"Refresco");
	AddMenuItem(TiendaItaliano,1,"$3");
	AddMenuItem(TiendaItaliano,0,"Cerveza");
	AddMenuItem(TiendaItaliano,1,"$5");
	AddMenuItem(TiendaItaliano,0,"Pizza");
	AddMenuItem(TiendaItaliano,1,"$6");
	AddMenuItem(TiendaItaliano,0,"Macarrones a la bolognesa");
	AddMenuItem(TiendaItaliano,1,"$8");
	AddMenuItem(TiendaItaliano,0,"Espaguetis a la carbonara");
	AddMenuItem(TiendaItaliano,1,"$10");
	AddMenuItem(TiendaItaliano,0,"Lasagna");
	AddMenuItem(TiendaItaliano,1,"$12");
	AddMenuItem(TiendaItaliano,0,"Salir");

	// Chino
	TiendaChino = CreateMenu("Chino", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaChino,0,"Agua");
	AddMenuItem(TiendaChino,1,"$2");
	AddMenuItem(TiendaChino,0,"Zumo");
	AddMenuItem(TiendaChino,1,"$3");
	AddMenuItem(TiendaChino,0,"Refresco");
	AddMenuItem(TiendaChino,1,"$3");
	AddMenuItem(TiendaChino,0,"Cerveza");
	AddMenuItem(TiendaChino,1,"$5");
	AddMenuItem(TiendaChino,0,"Tallarines");
	AddMenuItem(TiendaChino,1,"$6");
	AddMenuItem(TiendaChino,0,"Rollitos de primavera");
	AddMenuItem(TiendaChino,1,"$8");
	AddMenuItem(TiendaChino,0,"Arroz tres delicias");
	AddMenuItem(TiendaChino,1,"$10");
	AddMenuItem(TiendaChino,0,"Pollo a la naranja");
	AddMenuItem(TiendaChino,1,"$12");
	AddMenuItem(TiendaChino,0,"Salir");

	// Japonés
	TiendaJapones = CreateMenu("Japones", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaJapones,0,"Agua");
	AddMenuItem(TiendaJapones,1,"$2");
	AddMenuItem(TiendaJapones,0,"Zumo");
	AddMenuItem(TiendaJapones,1,"$3");
	AddMenuItem(TiendaJapones,0,"Refresco");
	AddMenuItem(TiendaJapones,1,"$3");
	AddMenuItem(TiendaJapones,0,"Cerveza");
	AddMenuItem(TiendaJapones,1,"$5");
	AddMenuItem(TiendaJapones,0,"Sushi");
	AddMenuItem(TiendaJapones,1,"$6");
	AddMenuItem(TiendaJapones,0,"Tofu");
	AddMenuItem(TiendaJapones,1,"$8");
	AddMenuItem(TiendaJapones,0,"Tallarines");
	AddMenuItem(TiendaJapones,1,"$10");
	AddMenuItem(TiendaJapones,0,"Sashimi");
	AddMenuItem(TiendaJapones,1,"$12");
	AddMenuItem(TiendaJapones,0,"Salir");

	// Mexicano
	TiendaMexicano = CreateMenu("Mexicano", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaMexicano,0,"Agua");
	AddMenuItem(TiendaMexicano,1,"$2");
	AddMenuItem(TiendaMexicano,0,"Zumo");
	AddMenuItem(TiendaMexicano,1,"$3");
	AddMenuItem(TiendaMexicano,0,"Refresco");
	AddMenuItem(TiendaMexicano,1,"$3");
	AddMenuItem(TiendaMexicano,0,"Cerveza");
	AddMenuItem(TiendaMexicano,1,"$5");
	AddMenuItem(TiendaMexicano,0,"Frijoles");
	AddMenuItem(TiendaMexicano,1,"$6");
	AddMenuItem(TiendaMexicano,0,"Fajitas");
	AddMenuItem(TiendaMexicano,1,"$8");
	AddMenuItem(TiendaMexicano,0,"Chiles rellenos");
	AddMenuItem(TiendaMexicano,1,"$10");
	AddMenuItem(TiendaMexicano,0,"Tacos");
	AddMenuItem(TiendaMexicano,1,"$12");
	AddMenuItem(TiendaMexicano,0,"Salir");

	// SexShop
	TiendaSexShop = CreateMenu("Sexshop", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(TiendaSexShop,0,"Preservativos");
	AddMenuItem(TiendaSexShop,1,"$12");
	AddMenuItem(TiendaSexShop,0,"Dildo");
	AddMenuItem(TiendaSexShop,1,"$60");
	AddMenuItem(TiendaSexShop,0,"Salir");
}

stock ArmaLegal(Identificacion, Objeto[], Proovedor[], Comprador[])
{
	new sql[256];
	format(sql, sizeof(sql), "INSERT INTO armaslegales SET `Identificacion`='%d', `Proovedor`='%s', `Comprador`='%s', `Objeto`='%s'", Identificacion, Proovedor, Comprador, Objeto);
	mysql_query(database, sql, false);
}

static TextDraws(playerid)
{
	BarraEjercicios[playerid] = CreateProgressBar(274.00, 311.00, 83.50, 11.19, -859480065, 100.0);

    TDGYM0[playerid] = CreatePlayerTextDraw(playerid, 270.117767, 289.916656, "Press Banca");
	PlayerTextDrawLetterSize(playerid, TDGYM0[playerid], 0.344588, 1.605833);
	PlayerTextDrawAlignment(playerid, TDGYM0[playerid], 1);
	PlayerTextDrawColor(playerid, TDGYM0[playerid], -65281);
	PlayerTextDrawSetShadow(playerid, TDGYM0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDGYM0[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TDGYM0[playerid], 51);
	PlayerTextDrawFont(playerid, TDGYM0[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TDGYM0[playerid], 1);

 	TDGYM1[playerid] = CreatePlayerTextDraw(playerid, 270.117767, 289.916656, "Serie Bicicleta");
	PlayerTextDrawLetterSize(playerid, TDGYM1[playerid], 0.344588, 1.605833);
	PlayerTextDrawAlignment(playerid, TDGYM1[playerid], 1);
	PlayerTextDrawColor(playerid, TDGYM1[playerid], -65281);
	PlayerTextDrawSetShadow(playerid, TDGYM1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDGYM1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TDGYM0[playerid], 51);
	PlayerTextDrawFont(playerid, TDGYM1[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TDGYM1[playerid], 1);

    TDGYM2[playerid] = CreatePlayerTextDraw(playerid, 270.117767, 289.916656, "S.Mancuernas");
    PlayerTextDrawLetterSize(playerid, TDGYM2[playerid], 0.344588, 1.605833);
    PlayerTextDrawAlignment(playerid, TDGYM2[playerid], 1);
    PlayerTextDrawColor(playerid, TDGYM2[playerid], -65281);
    PlayerTextDrawSetShadow(playerid, TDGYM2[playerid], 0);
    PlayerTextDrawSetOutline(playerid, TDGYM2[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, TDGYM2[playerid], 51);
    PlayerTextDrawFont(playerid, TDGYM2[playerid], 2);
    PlayerTextDrawSetProportional(playerid, TDGYM2[playerid], 1);

    TDGYM3[playerid] = CreatePlayerTextDraw(playerid, 270.117767, 289.916656, "Eliptica");
    PlayerTextDrawLetterSize(playerid, TDGYM3[playerid], 0.344588, 1.605833);
    PlayerTextDrawAlignment(playerid, TDGYM3[playerid], 1);
    PlayerTextDrawColor(playerid, TDGYM3[playerid], -65281);
    PlayerTextDrawSetShadow(playerid, TDGYM3[playerid], 0);
    PlayerTextDrawSetOutline(playerid, TDGYM3[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, TDGYM3[playerid], 51);
    PlayerTextDrawFont(playerid, TDGYM3[playerid], 2);
    PlayerTextDrawSetProportional(playerid, TDGYM3[playerid], 1);

    Velocimetro0[playerid] = CreatePlayerTextDraw(playerid, 512.000000, 393.000000, "~w~60 KM/H");
	PlayerTextDrawBackgroundColor(playerid, Velocimetro0[playerid], 255);
	PlayerTextDrawFont(playerid, Velocimetro0[playerid], 2);
	PlayerTextDrawLetterSize(playerid, Velocimetro0[playerid], 0.480000, 1.000000);
	PlayerTextDrawColor(playerid, Velocimetro0[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Velocimetro0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Velocimetro0[playerid], 1);

	Velocimetro1[playerid] = CreatePlayerTextDraw(playerid, 515.000000, 403.000000, "Gasolina: ~r~100~w~L");
	PlayerTextDrawBackgroundColor(playerid, Velocimetro1[playerid], 255);
	PlayerTextDrawFont(playerid, Velocimetro1[playerid], 2);
	PlayerTextDrawLetterSize(playerid, Velocimetro1[playerid], 0.240000, 1.200000);
	PlayerTextDrawColor(playerid, Velocimetro1[playerid], -1);
	PlayerTextDrawSetOutline(playerid, Velocimetro1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Velocimetro1[playerid], 1);
}

stock BanRetrasado(playerid)
{
	SetTimerEx("BanRetra", 1000, false, "i", playerid);
}

forward BanRetra(playerid);
public BanRetra(playerid)
{
    JugadorInfo[playerid][jBaneado] = 1;
    SaveValue(playerid, "Baneado", 1);
	Ban(playerid);
	GuardarCuenta(playerid);
}

stock DarArma(playerid, arma, cantidad)
{
    new str[10];
    format(str,sizeof(str),"arma%d",arma);
    SetPVarInt(playerid,str,1);
    format(str,sizeof(str),"armaslot%d",GetWeaponSlot(arma));
    SetPVarInt(playerid,str,cantidad);
    GivePlayerWeapon(playerid,arma,cantidad);
}

stock QuitarArma(playerid, arma)
{
	new str[10];
	format(str,sizeof(str),"arma%d",arma);
	SetPVarInt(playerid,str,0);
	format(str,sizeof(str),"armaslot%d",GetWeaponSlot(arma));
	RemovePlayerWeapon(playerid, arma);
}

stock RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12];
	new plyAmmo[12];

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
}

stock RemoverArmas(playerid)
{
	ResetPlayerWeapons(playerid);
	DeletePVar(playerid, "arma0");
	DeletePVar(playerid, "arma1");
	DeletePVar(playerid, "arma2");
	DeletePVar(playerid, "arma3");
	DeletePVar(playerid, "arma4");
	DeletePVar(playerid, "arma5");
	DeletePVar(playerid, "arma6");
	DeletePVar(playerid, "arma7");
	DeletePVar(playerid, "arma8");
	DeletePVar(playerid, "arma9");
	DeletePVar(playerid, "arma10");
	DeletePVar(playerid, "arma11");
	DeletePVar(playerid, "arma12");
	DeletePVar(playerid, "arma13");
	DeletePVar(playerid, "arma14");
	DeletePVar(playerid, "arma15");
	DeletePVar(playerid, "arma16");
	DeletePVar(playerid, "arma17");
	DeletePVar(playerid, "arma18");
	DeletePVar(playerid, "arma22");
	DeletePVar(playerid, "arma23");
	DeletePVar(playerid, "arma24");
	DeletePVar(playerid, "arma25");
	DeletePVar(playerid, "arma26");
	DeletePVar(playerid, "arma27");
	DeletePVar(playerid, "arma28");
	DeletePVar(playerid, "arma29");
	DeletePVar(playerid, "arma30");
	DeletePVar(playerid, "arma31");
	DeletePVar(playerid, "arma32");
	DeletePVar(playerid, "arma33");
	DeletePVar(playerid, "arma34");
	DeletePVar(playerid, "arma35");
	DeletePVar(playerid, "arma36");
	DeletePVar(playerid, "arma37");
	DeletePVar(playerid, "arma38");
	DeletePVar(playerid, "arma39");
	DeletePVar(playerid, "arma40");
	DeletePVar(playerid, "arma41");
	DeletePVar(playerid, "arma42");
	DeletePVar(playerid, "arma43");
	DeletePVar(playerid, "arma44");
	DeletePVar(playerid, "arma45");
	DeletePVar(playerid, "arma46");
}

//Sistema de banco
CMD:selprincipal(playerid, params[])
{
	new string[256];
    if(sscanf(params, "i", params[0]))
	{
		SendClientMessage(playerid, GRIS, "Uso: /selprincipal [1-5]");
		if(JugadorInfo[playerid][jCuentaPrincipal] != 0) format(string, sizeof(string), "* Cuenta principal actual: %d.", JugadorInfo[playerid][jCuentaPrincipal]);
		else format(string, sizeof(string), "* Cuenta principal actual: Ninguna.");
		SendClientMessage(playerid, BLANCO, string);
		for(new i = 0; i < MAX_CBANCARIAS; i++)
		{
		    if(JugadorInfo[playerid][jCuentasBancarias][i] != NOEXISTE)
		    {
		        format(string, sizeof(string), "%d) Número de cuenta: %d", i+1, JugadorInfo[playerid][jCuentasBancarias][i]);
				SendClientMessage(playerid, AMARILLO, string);
		    }
		}
		return 1;
	}
	if(JugadorInfo[playerid][jCuentasBancarias][params[0]-1] == NOEXISTE) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna cuenta bancaria en dicho espacio.");
	JugadorInfo[playerid][jCuentaPrincipal] = JugadorInfo[playerid][jCuentasBancarias][params[0]-1];
	format(string, sizeof(string), "* Has seleccionado la cuenta %d como principal.", JugadorInfo[playerid][jCuentasBancarias][params[0]-1]);
	SendClientMessage(playerid, CELESTE, string);
	return 1;
}

CMD:cajero(playerid, params[])
{
    if(EstaEnCajero(playerid)) {
        if(JugadorInfo[playerid][jCuentasBancarias][0] == -1 && JugadorInfo[playerid][jCuentasBancarias][0] == -1 && JugadorInfo[playerid][jCuentasBancarias][1] == -1 && JugadorInfo[playerid][jCuentasBancarias][2] == -1 && JugadorInfo[playerid][jCuentasBancarias][3] == -1 && JugadorInfo[playerid][jCuentasBancarias][4] == -1)
            return SendClientMessage(playerid, NARANJA, "Aún no tienes abierta una cuenta bancaria. Vé al banco y crea una.");
		new bigstring[1024], stringdialogo[1024], temp_data[128];
		strmid(bigstring,"", 0, strlen(""), 255);
		strmid(stringdialogo,"", 0, strlen(""), 255);
		for(new i = 0; i < MAX_CBANCARIAS; i++)
		{
		    if(JugadorInfo[playerid][jCuentasBancarias][i] != NOEXISTE)
		    {
		        new sql[256], row[256], datos[7][64];
		        format(sql, sizeof(sql), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", JugadorInfo[playerid][jCuentasBancarias][i]);
				mysql_query(database, sql, true);

			    if(cache_get_row_count(database) > 0)
			    {
			    	for(new j = 0, k = cache_get_field_count(database); j < k; j ++)
					{
						cache_get_row(0, j, temp_data);

						if(j != 0)
						{
							strcat(row, "|");
							strcat(row, temp_data);
						}
						else
						{
							strcat(row, temp_data);
						}
					}

					split(row, datos, '|');
					format(stringdialogo,sizeof(stringdialogo),"Número: %d | Descripción: %s\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
				}
				else
				{
				    format(stringdialogo,sizeof(stringdialogo),"Número: %d | {FF0000}Cuenta inexistente{FFFFFF}\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
				}
				strcat(bigstring,stringdialogo);
			}
		}
		ShowPlayerDialog(playerid, Cajero_Cuentas, DIALOG_STYLE_LIST, "{FFFFFF}Cuentas bancarias", bigstring, "Siguiente", "Salir");
    } else SendClientMessage(playerid, ROJO_OSCURO, "* No estás en un cajero.");
	return 1;
}

CMD:banco(playerid, params[])
{
    if(PlayerToPoint(playerid, 2, -2776.3823,376.4218,-17.6441) || PlayerToPoint(playerid, 2, -2776.7131,383.4497,-17.6441) || PlayerToPoint(playerid, 2, -2776.5684,380.0213,-17.6441)){
        if(JugadorInfo[playerid][jCuentasBancarias][0] == -1 && JugadorInfo[playerid][jCuentasBancarias][0] == -1 && JugadorInfo[playerid][jCuentasBancarias][1] == -1 && JugadorInfo[playerid][jCuentasBancarias][2] == -1 && JugadorInfo[playerid][jCuentasBancarias][3] == -1 && JugadorInfo[playerid][jCuentasBancarias][4] == -1)
            return SendClientMessage(playerid, NARANJA, "Aún no tienes abierta una cuenta bancaria, abre una ahora mismo si lo deseas. (( /crearcuenta ))");
		new bigstring[1024], stringdialogo[1024];
		strmid(bigstring,"", 0, strlen(""), 255);
		strmid(stringdialogo,"", 0, strlen(""), 255);
		for(new i = 0; i < MAX_CBANCARIAS; i++)
		{
		    if(JugadorInfo[playerid][jCuentasBancarias][i] != NOEXISTE)
		    {
		        new sql[256], row[256], datos[7][64], temp_data[128];
		        format(sql, sizeof(sql), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", JugadorInfo[playerid][jCuentasBancarias][i]);
				mysql_query(database, sql, true);

			    if(cache_get_row_count(database) > 0)
			    {
			    	for(new j = 0, k = cache_get_field_count(database); j < k; j ++)
					{
						cache_get_row(0, j, temp_data);

						if(j != 0)
						{
							strcat(row, "|");
							strcat(row, temp_data);
						}
						else
						{
							strcat(row, temp_data);
						}
					}

					split(row, datos, '|');
					format(stringdialogo,sizeof(stringdialogo),"Número: %d | Descripción: %s\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
				}
				else
				{
				    format(stringdialogo,sizeof(stringdialogo),"Número: %d | {FF0000}Cuenta inexistente{FFFFFF}\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
				}
				strcat(bigstring,stringdialogo);
			}
		}
		ShowPlayerDialog(playerid, DCCB_Cuentas, DIALOG_STYLE_LIST, "{FFFFFF}Cuentas bancarias", bigstring, "Siguiente", "Salir");
    }else SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el banco");
	return 1;
}

CMD:cuentasbancarias(playerid, params[])
{
	if(ComprobarCuentasBancarias(playerid) == 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ninguna cuenta bancaria.");
	new bigstring[1024], stringdialogo[1024];
	strmid(bigstring,"", 0, strlen(""), 255);
	strmid(stringdialogo,"", 0, strlen(""), 255);
	for(new i = 0; i < MAX_CBANCARIAS; i++)
	{
	    if(JugadorInfo[playerid][jCuentasBancarias][i] != NOEXISTE)
	    {
	        new sql[256], row[256], datos[7][64], temp_data[128];
	        format(sql, sizeof(sql), "SELECT * FROM cuentasbancarias WHERE numerocuenta = %d ", JugadorInfo[playerid][jCuentasBancarias][i]);
			mysql_query(database, sql, true);

		    if(cache_get_row_count(database) > 0)
		    {
		    	for(new j = 0, k = cache_get_field_count(database); j < k; j ++)
				{
					cache_get_row(0, j, temp_data);

					if(j != 0)
					{
						strcat(row, "|");
						strcat(row, temp_data);
					}
					else
					{
						strcat(row, temp_data);
					}
				}

				split(row, datos, '|');
				format(stringdialogo,sizeof(stringdialogo),"Número: %d | Descripción: %s\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
			}
			else
			{
   				format(stringdialogo,sizeof(stringdialogo),"Número: %d | {FF0000}Cuenta inexistente{FFFFFF}\n",JugadorInfo[playerid][jCuentasBancarias][i], datos[1]);
			}
			strcat(bigstring,stringdialogo);
		}
	}
	ShowPlayerDialog(playerid, DCCB_VerInfo, DIALOG_STYLE_LIST, "{FFFFFF}Cuentas bancarias", bigstring, "Siguiente", "Salir");
	return 1;
}

CMD:crearcuenta(playerid, params[])
{
    if(PlayerToPoint(playerid, 2, -2776.3823,376.4218,-17.6441) || PlayerToPoint(playerid, 2, -2776.7131,383.4497,-17.6441) || PlayerToPoint(playerid, 2, -2776.5684,380.0213,-17.6441))
	{
		if(JugadorInfo[playerid][jCuentasBancarias][0] != -1 && JugadorInfo[playerid][jCuentasBancarias][1] != -1 && JugadorInfo[playerid][jCuentasBancarias][2] != -1 && JugadorInfo[playerid][jCuentasBancarias][3] != -1 && JugadorInfo[playerid][jCuentasBancarias][4] != -1)
		    return SendClientMessage(playerid, ROJO_OSCURO, "* Ya dispones de 5 cuentas bancarias, no puedes abrir más.");
	 	if(JugadorInfo[playerid][jDinero] < 50) return SendClientMessage(playerid, ROJO_OSCURO, "* No tienes suficiente dinero. El precio para abrir una nueva cuenta es de 50 dólares.");
	    ShowPlayerDialog(playerid,DCCB_Descripcion, DIALOG_STYLE_INPUT, "{FFFFFF}Banco de Los Ángeles", "{FFFFFF}·Introduce la descripción de la cuenta bancaria (Puede ser por ejemplo para que estara destinada):", "Continuar", "Salir");
	}
	else SendClientMessage(playerid, ROJO_OSCURO, "* No estás en el banco.");
	return 1;
}

CMD:agenda(playerid, params[])
{
	new bigstring[1024], stringdialogo[1024], query[516], rows;
	strmid(bigstring,"", 0, strlen(""), 255);
	strmid(stringdialogo,"", 0, strlen(""), 255);

	format(query, sizeof(query), "SELECT NULL FROM agenda WHERE id_usuario = %d", JugadorInfo[playerid][jSQLID]);
	mysql_query(database, query, true);
	rows = cache_get_row_count(database);
	if(rows >= 1)
	{
	    new sql[256], row[256], datos[4][64];
 		format(sql, sizeof(sql), "SELECT * FROM agenda WHERE id_usuario = %d ", JugadorInfo[playerid][jSQLID]);
		mysql_query(database, sql, true);
	    printf("Entra");
		for(new i = 0; i < rows; i++)
		{
			cache_get_row(i, 0, row, database);
			split(row, datos, '|');
			format(stringdialogo,sizeof(stringdialogo),"Número: %d | %s\n",strval(datos[2]), datos[3]);
			strcat(bigstring,stringdialogo);
			printf("- %d %s",strval(datos[2]), datos[3]);
		}
		ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{FFFFFF}Agenda teléfonica", bigstring, "Siguiente", "Salir");
    }else SendClientMessage(playerid, ROJO_OSCURO, "* No tienes ningun contacto añadido a la agenda.");
	return 1;
}

CMD:detenerejercicio(playerid, params[])
{
    if(HaciendoBicicleta[playerid] == 1 || HaciendoEliptica[playerid] == 1 || HaciendoPress[playerid] == 1 || HaciendoMancuerna[playerid] == 1)
    {
        HaciendoBicicleta[playerid] = 0;
        HaciendoPress[playerid] = 0;
        HaciendoMancuerna[playerid] = 0;
        HaciendoEliptica[playerid] = 0;
        xejercicio[playerid] = 0;
        PlayerTextDrawHide(playerid, TDGYM1[playerid]);
        PlayerTextDrawHide(playerid, TDGYM0[playerid]);
        PlayerTextDrawHide(playerid, TDGYM2[playerid]);
        HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
        stop Pressbanca[playerid];
        stop Bicicleta[playerid];
        stop BajarBarra[playerid];
        stop Mancuernas[playerid];
        stop Eliptica[playerid];
        ClearAnimations(playerid);
        RemovePlayerAttachedObject(playerid, 0);
        RemovePlayerAttachedObject(playerid, 1);
        HaciendoEjercicio[playerid] = 0;
    }
    return 1;
}

CMD:bicicleta(playerid, params[])
{
	if(HaciendoEjercicio[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No te puedes dividir en dos, para hacer otro ejercicio primero acaba esto.");
    if(!PlayerToPoint(playerid, 3, 772.3802,8.4965,1000.7075)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar delante de la máquina para poder hacer este ejercicio.");
	if(JugadorInfo[playerid][jEntrenado] >= 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Estas un poco cansando, vete y descansa.");
	SetPlayerPos(playerid, 772.7026,8.8912,1000.7065);
	SetPlayerFacingAngle(playerid, 89.1437);
    ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_geton", 1, 0, 0, 0, 1, 0, 1 );
    HaciendoBicicleta[playerid] = 1;
	Bicicleta[playerid] = repeat BICICLETA(playerid);
	SendClientMessage(playerid, CELESTE, "* Empezaste una serie en la bicicleta. Usa tecla SALTAR para incrementar el progreso.");
	SendClientMessage(playerid, NARANJA, "* Para parar de hacer ejercicio, usa '/detenerejercicio'.");
	PlayerTextDrawShow(playerid, TDGYM1[playerid]);
	SetProgressBarValue(BarraEjercicios[playerid], 0);
	ShowProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
	HaciendoEjercicio[playerid] = 1;
	JugadorInfo[playerid][jEntrenado]++;
	return 1;
}

timer BICICLETA[3000](playerid)
{
	ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
	SetProgressBarValue(BarraEjercicios[playerid], xejercicio[playerid]);
	UpdateProgressBar(BarraEjercicios[playerid], playerid);
	if(xejercicio[playerid] >= 100)
	{
	    stop Bicicleta[playerid];
	    xejercicio[playerid] = 0;
	    ClearAnimations(playerid);
	    PlayerTextDrawHide(playerid, TDGYM1[playerid]);
	    HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
	    HaciendoBicicleta[playerid] = 0;
	    JugadorInfo[playerid][jResistencia] ++;
	    SendClientMessage(playerid, CELESTE, "* Has terminado 1 serie en la bicicleta, tu resistencia ha incrementado en 1.");
	    HaciendoEjercicio[playerid] = 0;
	}
}

CMD:caminadora(playerid, params[])
{
    if(HaciendoEjercicio[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No te puedes dividir en dos, para hacer otro ejercicio primero acaba esto.");
    if(!PlayerToPoint(playerid, 3, 773.3597,-1.1801,1000.7257)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar delante de la máquina para poder hacer este ejercicio.");
    if(JugadorInfo[playerid][jEntrenado] >= 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Estas un poco cansando, vete y descansa.");
    SetPlayerPos(playerid, 773.4928,-1.2053,1000.7257);
    SetPlayerFacingAngle(playerid, 178.0452);
    ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_geton", 1, 0, 0, 0, 1, 0, 1 );
    HaciendoEliptica[playerid] = 1;
    SendClientMessage(playerid, CELESTE, "* Empezaste ha usar la máquina elíptica. Usa tecla SALTAR para incrementar el progreso.");
    SendClientMessage(playerid, NARANJA, "* Para parar de hacer ejercicio, usa '/detenerejercicio'.");
    Eliptica[playerid] = repeat ELIPTICA(playerid);
    HaciendoEjercicio[playerid] = 1;
    JugadorInfo[playerid][jEntrenado]++;
    return 1;
}

CMD:mancuernas(playerid, params[])
{
    if(HaciendoEjercicio[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No te puedes dividir en dos, para hacer otro ejercicio primero acaba esto.");
	if(!PlayerToPoint(playerid, 3, 770.4246,5.4466,1000.7150)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar delante de la máquina para poder hacer este ejercicio.");
	if(JugadorInfo[playerid][jEntrenado] >= 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Estas un poco cansando, vete y descansa.");
    SetPlayerAttachedObject(playerid, 0, 3072, 5);
    SetPlayerAttachedObject(playerid, 1, 3071, 6);
    HaciendoMancuerna[playerid] = 1;
    Mancuernas[playerid] = repeat MANCUERNA(playerid);
    SendClientMessage(playerid, CELESTE, "* Empezaste una serie de mancuernas. Usa tecla SALTAR para incrementar el progreso.");
    SendClientMessage(playerid, NARANJA, "* Para parar de hacer ejercicio, usa '/detenerejercicio'.");
    PlayerTextDrawShow(playerid, TDGYM2[playerid]);
    SetPlayerPos(playerid, 771.4560,5.5006,1000.7802);
    SetPlayerFacingAngle(playerid, 269.7275);
    ApplyAnimation(playerid, "freeweights", "gym_barbell", 1, 0, 0, 0, 1, 0, 1 );
    HaciendoEjercicio[playerid] = 1;
    JugadorInfo[playerid][jEntrenado]++;
    return 1;
}

CMD:pressbanca(playerid, params[])
{
    if(HaciendoEjercicio[playerid] != 0) return SendClientMessage(playerid, ROJO_OSCURO, "* No te puedes dividir en dos, para hacer otro ejercicio primero acaba esto.");
	if(!PlayerToPoint(playerid, 3, 772.2989,1.4119,1000.7214)) return SendClientMessage(playerid, ROJO_OSCURO, "* Debes estar delante de la máquina para poder hacer este ejercicio.");
	if(JugadorInfo[playerid][jEntrenado] >= 3) return SendClientMessage(playerid, ROJO_OSCURO, "* Estas un poco cansando, vete y descansa.");
	SetPlayerPos(playerid, 772.7646,1.4191,1000.7211);
	SetPlayerFacingAngle(playerid, 271.6284);
	SetPlayerAttachedObject(playerid, 1, 2913, 6);
	HaciendoPress[playerid] = 1;
	ApplyAnimation( playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1 );
	Pressbanca[playerid] = repeat BENCHPRESS(playerid);

	SetProgressBarValue(BarraEjercicios[playerid], 0);
	ShowProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
	PlayerTextDrawShow(playerid, TDGYM0[playerid]);
	SendClientMessage(playerid, CELESTE, "* Has empezado a trabajar una serie de press banca, utiliza la tecla SALTAR para incrementar el progreso.");
	HaciendoEjercicio[playerid] = 1;
	JugadorInfo[playerid][jEntrenado]++;
	return 1;
}

timer BENCHPRESS[3000](playerid)
{
    ApplyAnimation( playerid, "benchpress", "gym_bp_up_A", 1, 0, 0, 0, 1, 0, 1 );
    BajarBarra[playerid] = defer BajoBarra(playerid);
    SetProgressBarValue(BarraEjercicios[playerid], xejercicio[playerid]);
    UpdateProgressBar(BarraEjercicios[playerid], playerid);
   	if(xejercicio[playerid] >= 100)
	{
		stop Pressbanca[playerid];
		stop BajarBarra[playerid];
		ClearAnimations(playerid);
		HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
		PlayerTextDrawHide(playerid, TDGYM0[playerid]);
		xejercicio[playerid] = 0;
		SendClientMessage(playerid, CELESTE, "* Has terminado 1 serie de Press banca, tu fuerza ha incrementado en 1");
		HaciendoPress[playerid] = 0;
		JugadorInfo[playerid][jFuerza] ++;
		RemovePlayerAttachedObject(playerid, 1);
		HaciendoEjercicio[playerid] = 0;
	}
}

timer BajoBarra[1000](playerid)
{
    ApplyAnimation( playerid, "benchpress", "gym_bp_down", 1, 0, 0, 0, 1, 0, 1 );
}

timer ELIPTICA[3000](playerid)
{
    ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
    SetProgressBarValue(BarraEjercicios[playerid], xejercicio[playerid]);
    UpdateProgressBar(BarraEjercicios[playerid], playerid);
    if(xejercicio[playerid] >= 100)
    {
        stop Eliptica[playerid];
        xejercicio[playerid] = 0;
        ClearAnimations(playerid);
        PlayerTextDrawShow(playerid, TDGYM3[playerid]);
        HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
        HaciendoEliptica[playerid] = 0;
        JugadorInfo[playerid][jResistencia] ++;
        SendClientMessage(playerid, CELESTE, "* Has terminado el uso de la máquina elíptica, tu resistencia ha incrementado en 1");
        HaciendoEjercicio[playerid] = 0;
    }
}

timer MANCUERNA[3000](playerid)
{
	switch(random(2))
    {
    	case 0: ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
        case 1: ApplyAnimation( playerid, "freeweights", "gym_free_B", 1, 0, 0, 0, 1, 0, 1 );
    }
    SetProgressBarValue(BarraEjercicios[playerid], xejercicio[playerid]);
    UpdateProgressBar(BarraEjercicios[playerid], playerid);
    if(xejercicio[playerid] >= 100)
    {
        if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
        {
            RemovePlayerAttachedObject(playerid, 0);
            if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
            {
                RemovePlayerAttachedObject(playerid, 1);
            }
        }
        stop Mancuernas[playerid];
        xejercicio[playerid] = 0;
        ClearAnimations(playerid);
        PlayerTextDrawHide(playerid, TDGYM2[playerid]);
        HideProgressBarForPlayer(playerid, BarraEjercicios[playerid]);
        HaciendoMancuerna[playerid] = 0;
        JugadorInfo[playerid][jFuerza] ++;
        SendClientMessage(playerid, CELESTE, "* Has terminado 1 serie de mancuernas, tu fuerza ha incrementado en 1");
        HaciendoEjercicio[playerid] = 0;
    }
}

stock CrearIncendio(idcasa, idincendio)
{
	if(idincendio != NOEXISTE)
	{
	    Incendios[idincendio][inCasaID] = idcasa;

		Incendios[idincendio][inObjetosExt][14] = CreateDynamicObject(18690, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy], CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][13] = CreateDynamicObject(18690, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy], CasaInfo[idcasa][cz] + 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][12] = CreateDynamicObject(18727, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy] + 2, CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][11] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] + 2, CasaInfo[idcasa][cy], CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][10] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] + 2, CasaInfo[idcasa][cy] + 2, CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][9] = CreateDynamicObject(18727, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy] + 2, CasaInfo[idcasa][cz] + 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][8] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] + 2, CasaInfo[idcasa][cy], CasaInfo[idcasa][cz] + 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][7] = CreateDynamicObject(18690, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy], CasaInfo[idcasa][cz] - 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][6] = CreateDynamicObject(18727, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy] - 2, CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][5] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] - 2, CasaInfo[idcasa][cy], CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][4] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] - 2, CasaInfo[idcasa][cy] - 2, CasaInfo[idcasa][cz], 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][3] = CreateDynamicObject(18727, CasaInfo[idcasa][cx], CasaInfo[idcasa][cy] - 2, CasaInfo[idcasa][cz] - 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][2] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] - 2, CasaInfo[idcasa][cy], CasaInfo[idcasa][cz] - 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][1] = CreateDynamicObject(18690, CasaInfo[idcasa][cx] + 2, CasaInfo[idcasa][cy] + 2, CasaInfo[idcasa][cz] + 2, 0.0, 0.0, 0.0, -1, -1);
		Incendios[idincendio][inObjetosExt][0] = CreateDynamicObject(18727, CasaInfo[idcasa][cx] - 2, CasaInfo[idcasa][cy] - 2, CasaInfo[idcasa][cz] - 2, 0.0, 0.0, 0.0, -1, -1);

		Incendios[idincendio][inObjetosInt][14] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][13] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz] + 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][12] = CreateDynamicObject(18727, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy] + 2, CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][11] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] + 2, CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][10] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] + 2, CasaInfo[idcasa][cyy] + 2, CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][9] = CreateDynamicObject(18727, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy] + 2, CasaInfo[idcasa][czz] + 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][8] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] + 2, CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz] + 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][7] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz] - 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][6] = CreateDynamicObject(18727, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy] - 2, CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][5] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] - 2, CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][4] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] - 2, CasaInfo[idcasa][cyy] - 2, CasaInfo[idcasa][czz], 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][3] = CreateDynamicObject(18727, CasaInfo[idcasa][cxx], CasaInfo[idcasa][cyy] - 2, CasaInfo[idcasa][czz] - 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][2] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] - 2, CasaInfo[idcasa][cyy], CasaInfo[idcasa][czz] - 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][1] = CreateDynamicObject(18690, CasaInfo[idcasa][cxx] + 2, CasaInfo[idcasa][cyy] + 2, CasaInfo[idcasa][czz] + 2, 0.0, 0.0, 0.0, idcasa, -1);
		Incendios[idincendio][inObjetosInt][0] = CreateDynamicObject(18727, CasaInfo[idcasa][cxx] - 2, CasaInfo[idcasa][cyy] - 2, CasaInfo[idcasa][czz] -2, 0.0, 0.0, 0.0, idcasa, -1);
	}
	else
	{
	    return false;
	}
	return 1;
}

public ObtenerSiguienteIncendio()
{
	for (new i; i < MAX_INCENDIOS; i++)
	{
		if ( !Incendios[i][inCasaID] )
		{
		    return i;
		}
	}
	return -1;
}

forward ComprobarIncendio(playerid);
public ComprobarIncendio(playerid)
{
	if(JugadorInfo[playerid][jHerido] == 1) return 1;
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if ( Incendios[i][inCasaID] )
	    {
			if ( GetPlayerVirtualWorld(playerid) == Incendios[i][inCasaID] && PlayerToPoint(playerid, 3, CasaInfo[Incendios[i][inCasaID]][cxx], CasaInfo[Incendios[i][inCasaID]][cyy], CasaInfo[Incendios[i][inCasaID]][czz]) ||
			     PlayerToPoint(playerid, 3, CasaInfo[Incendios[i][inCasaID]][cx], CasaInfo[Incendios[i][inCasaID]][cy], CasaInfo[Incendios[i][inCasaID]][cz]) )
			{
			    if(GetPlayerSkin(playerid) != 277 || GetPlayerSkin(playerid) != 278 || GetPlayerSkin(playerid) != 279)
			    {
			        new Float:vida;
    				GetPlayerHealth(playerid,vida);
			        SetPlayerHealthEx(playerid, vida-5);
			    }
			}
	    }
    }
    return 1;
}

forward IncendioAleatorio();
public IncendioAleatorio()
{
	new casa = random(TotalCasas) + 1;
    if(CrearIncendio(casa, ObtenerSiguienteIncendio()) )
	{
		printf("[Incendios]: La casa ID[%i] se incendió.", casa);
	}
}

forward QuitarLlamaFuego(fuego);
public QuitarLlamaFuego(fuego)
{
	for (new i = 0; i < 15; i++)
	{
	    if ( Incendios[fuego][inObjetosInt][i] )
	    {
		    if ( Incendios[fuego][inObjetosInt][i] )
		    {
			    DestroyDynamicObject(Incendios[fuego][inObjetosInt][i]);
			    Incendios[fuego][inObjetosInt][i] = false;
			}
			if ( Incendios[fuego][inObjetosExt][i] )
			{
			    DestroyDynamicObject(Incendios[fuego][inObjetosExt][i]);
			    Incendios[fuego][inObjetosExt][i] = false;
			}
			break;
		}

	}
	if ( !Incendios[fuego][inObjetosExt][14] )
	{
		QuitarIncendio(fuego);
	}
}

forward QuitarIncendio(fuego);
public QuitarIncendio(fuego)
{
	if ( Incendios[fuego][inCasaID] )
	{
		Incendios[fuego][inCasaID] = false;
		for (new i = 0; i < 15; i++)
		{
		    if ( Incendios[fuego][inObjetosInt][i] )
		    {
			    DestroyDynamicObject(Incendios[fuego][inObjetosInt][i]);
			    Incendios[fuego][inObjetosInt][i] = false;
			}
			if ( Incendios[fuego][inObjetosExt][i] )
			{
			    DestroyDynamicObject(Incendios[fuego][inObjetosExt][i]);
			    Incendios[fuego][inObjetosExt][i] = false;
			}
		}
		return true;
	}
	{
		return false;
	}
}

forward EstaCercaIncendio(playerid);
public EstaCercaIncendio(playerid)
{
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
		if ( Incendios[i][inCasaID] )
		{
		    new Float:PosFire[3];
		    if(EstaEnCasa[i] == Incendios[i][inCasaID])
		    {
		        PosFire[0] = CasaInfo[Incendios[i][inCasaID]][cxx];
				PosFire[1] = CasaInfo[Incendios[i][inCasaID]][cyy];
				PosFire[2] = CasaInfo[Incendios[i][inCasaID]][czz];
			}
			else
			{
		        PosFire[0] = CasaInfo[Incendios[i][inCasaID]][cx];
				PosFire[1] = CasaInfo[Incendios[i][inCasaID]][cy];
				PosFire[2] = CasaInfo[Incendios[i][inCasaID]][cz];
			}
			if (PlayerToPoint(playerid, 15.0, PosFire[0], PosFire[1], PosFire[2]) )
			{
			    return i;
			}
		}
	}
	SendClientMessage(playerid, ROJO_OSCURO, "* No te encuentras cerca de ningún incendio.");
	return -1;
}

forward WaterTick(playerid);
public WaterTick(playerid)
{
	new EstaCercaDeUno = -1;
    for (new i = 0; i < MAX_INCENDIOS; i++)
	{
		if ( Incendios[i][inCasaID] )
		{
		    new Float:PosFire[3];
		    if(EstaEnCasa[i] == Incendios[i][inCasaID])
		    {
		        PosFire[0] = CasaInfo[Incendios[i][inCasaID]][cxx];
				PosFire[1] = CasaInfo[Incendios[i][inCasaID]][cyy];
				PosFire[2] = CasaInfo[Incendios[i][inCasaID]][czz];
			}
			else
			{
		        PosFire[0] = CasaInfo[Incendios[i][inCasaID]][cx];
				PosFire[1] = CasaInfo[Incendios[i][inCasaID]][cy];
				PosFire[2] = CasaInfo[Incendios[i][inCasaID]][cz];
			}
			if (PlayerToPoint(playerid, 15.0, PosFire[0], PosFire[1], PosFire[2]) )
			{
			    EstaCercaDeUno = i;
			    break;
			}
		}
	}
	QuitarLlamaFuego(EstaCercaDeUno);
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(EditandoTipoObjeto[playerid] == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    for(new i = 0; i < sizeof(EscaleraInfo); i++)
			{
			    if(PlayerToPoint(playerid, 7.0, EscaleraInfo[i][escaX], EscaleraInfo[i][escaY], EscaleraInfo[i][escaZ]))
			    {
					EditandoTipoObjeto[playerid] = 0;
					new mensaje[128];
					format(mensaje, sizeof(mensaje), "* Has editado la escalera.");
					SendClientMessage(playerid, CELESTE, mensaje);
					MoveDynamicObject(EscaleraInfo[i][escaObjeto], x, y, z, 10.0, rx, ry, rz);
					EscaleraInfo[i][escaX] = x; EscaleraInfo[i][escaY] = y; EscaleraInfo[i][escaZ] = z;
					EscaleraInfo[i][escaXX] = rx; EscaleraInfo[i][escaYY] = ry; EscaleraInfo[i][escaZZ] = rz;
					return 1;
				}
			}
		}
	}
	return 1;
}

forward ComprobarAccidentes();
public ComprobarAccidentes()
{
	for(new i=0; i < sizeof(AutoInfo); i++)
	{
	    for(new j=0; j < MAX_PLAYERS; j++)
		{
		    if(IsPlayerConnected(j) && IsPlayerInAnyVehicle(j) && GetPlayerVehicleID(j) == i)
			{
				new Float:vida, Float:danio, string[256];
				GetVehicleHealth(i, vida);
				danio = AutoInfo[i][aDano] - vida;
			    AutoInfo[i][aDano] = vida;
			    new ZoneName[128], Float:jPos[3];
			    GetPlayerPos(j, jPos[0], jPos[1], jPos[2]);
				GetPlayer2DZone(ZoneName, 128, jPos[0], jPos[1]);
			    if(danio > 60 && danio < 90)
			    {
			        ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
					if(GetPlayerVehicleSeat(j) == 0)
					{
					    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
					    format(string, sizeof(string), "[ID: %d] Se escucha un golpe a causa de un impacto con el vehículo.", j);
					    ProxDetector(20.0, j, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
					}
					else
					{
					    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
					}
					return 1;
	   		 	}
			    else if(danio > 90 && danio < 250)
			    {
			        new suerte = random(3);
			        if(suerte == 1)
			        {
				        if(BomberosOnline > 0)
				        {
					        ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
							if(GetPlayerVehicleSeat(j) == 0)
							{
							    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
							    TogglePlayerControllable(j, false);
							    TogglePlayerControllable(j, false);
							    for(new j2 = 0; j2 < MAX_PLAYERS; j2++)
							    {
									new Float:Pos[3];
									GetPlayerPos(j, Pos[0], Pos[1], Pos[2]);
									if((JugadorInfo[j2][jMiembro] == 1 || JugadorInfo[j2][jMiembro] == 2 || JugadorInfo[j2][jMiembro] == 5 || JugadorInfo[j2][jMiembro] == 7) && JugadorInfo[j2][jServicio] == 1)
									{
									    SetPlayerCheckpoint(j2, Pos[0], Pos[1], Pos[2], 5.0);
									}
							    }
								SendClientMessage(j, ROJO, "* Has quedado atrapado a causa de un accidente grave, deberás esperar hasta que vengan los bomberos.");
								SendClientMessage(j, ROJO, "* No desconectes, ya que en estos momentos hay bomberos disponibles, si lo haces, serás sancionado.");
							    format(string, sizeof(string), "[ID: %d] Se escucha un golpe fuerte a causa de un impacto con el vehículo.", j);
							    ProxDetector(20.0, j, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
							    format(string, sizeof(string), "[Central SAED] {FFFFFF}Se necesitan unidades médicas, policiales y de bomberos en %s, han avisado de un accidente.", ZoneName);
							    MensajeDeFaccion(1, AZUL, string);
							    MensajeDeFaccion(2, AZUL, string);
							    MensajeDeFaccion(7, AZUL, string);
								MensajeDeFaccion(5, AZUL, string);
								format(string, sizeof(string), "* El aturdido del accidente es %s, si al llegar no está en la zona, avisa a un administrador.", NombreJugador(j));
								MensajeDeFaccion(1, CELESTE, string);
							    MensajeDeFaccion(2, CELESTE, string);
								MensajeDeFaccion(5, CELESTE, string);
								for(new i2; i2 < MAX_INFORMESFD; i2++)
								{
								    new Float:Pos[3];
									GetPlayerPos(j, Pos[0], Pos[1], Pos[2]);
									if(InformesFD[i2][ifdEstado] == 0)
									{
										InformesFD[i2][ifdPaciente] = j;
										InformesFD[i2][ifdX] = Pos[0];
										InformesFD[i2][ifdY] = Pos[1];
										InformesFD[i2][ifdZ] = Pos[2];
										InformesFD[i2][ifdEstado] = 1;
										break;
									}
								}
							}
							else
							{
							    TogglePlayerControllable(j, false);
								SendClientMessage(j, ROJO, "* Has quedado atrapado a causa de un accidente grave, deberás esperar hasta que vengan los bomberos.");
								SendClientMessage(j, ROJO, "* No desconectes, ya que en estos momentos hay bomberos disponibles, si lo haces, serás sancionado.");
							    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
							}
						}
						else
						{
						    format(string, sizeof(string), "[ID: %d] Se escucha un golpe fuerte a causa de un impacto con el vehículo.", j);
							ProxDetector(20.0, j, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
						    ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
						    SendClientMessage(j, VERDE, "* Has tenido suerte y no te has quedado atrapado, vé con cuidado...");
						    if(GetPlayerVehicleSeat(j) == 0)
							{
							    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
							}
							else
							{
							    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
							}
						}
					}
					else
					{
					    ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
						if(GetPlayerVehicleSeat(j) == 0)
						{
						    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
						    format(string, sizeof(string), "[ID: %d] Se escucha un golpe a causa de un impacto con el vehículo.", j);
						    ProxDetector(20.0, j, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
						}
						else
						{
						    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
						}
						return 1;
					}
					return 1;
			    }
			    else if(danio > 250)
			    {
			        if(BomberosOnline > 0)
			        {
				        ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
						if(GetPlayerVehicleSeat(j) == 0)
						{
						    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
						    TogglePlayerControllable(j, false);
						    TogglePlayerControllable(j, false);
						    for(new j2 = 0; j2 < MAX_PLAYERS; j2++)
						    {
								new Float:Pos[3];
								GetPlayerPos(j, Pos[0], Pos[1], Pos[2]);
								if((JugadorInfo[j2][jMiembro] == 1 || JugadorInfo[j2][jMiembro] == 2 || JugadorInfo[j2][jMiembro] == 3 || JugadorInfo[j2][jMiembro] == 5) && JugadorInfo[j2][jServicio] == 1)
								{
								    SetPlayerCheckpoint(j2, Pos[0], Pos[1], Pos[2], 5.0);
								}
						    }
							SendClientMessage(j, ROJO, "* Has quedado atrapado a causa de un accidente grave, deberás esperar hasta que vengan los bomberos.");
							SendClientMessage(j, ROJO, "* No desconectes, ya que en estos momentos hay bomberos disponibles, si lo haces, serás sancionado.");
						    format(string, sizeof(string), "[ID: %d] Se escucha un golpe fuerte a causa de un impacto con el vehículo.", j);
						    ProxDetector(20.0, j, string, AMARILLO, AMARILLO, AMARILLO, AMARILLO, AMARILLO);
						    format(string, sizeof(string), "[Central LSED] {FFFFFF}Se necesitan unidades médicas, policiales y de bomberos en %s, han avisado de un accidente.", ZoneName);
						    MensajeDeFaccion(1, AZUL, string);
						    MensajeDeFaccion(2, AZUL, string);
						    MensajeDeFaccion(3, AZUL, string);
							MensajeDeFaccion(5, AZUL, string);
							format(string, sizeof(string), "* El aturdido del accidente es %s, si al llegar no está en la zona, avisa a un administrador.", NombreJugador(j));
							MensajeDeFaccion(1, CELESTE, string);
						    MensajeDeFaccion(2, CELESTE, string);
							MensajeDeFaccion(3, CELESTE, string);
							for(new i2; i2 < MAX_INFORMESFD; i2++)
							{
								new Float:Pos[3];
								GetPlayerPos(j, Pos[0], Pos[1], Pos[2]);
								if(InformesFD[i2][ifdEstado] == 0)
								{
									InformesFD[i2][ifdPaciente] = j;
									InformesFD[i2][ifdX] = Pos[0];
									InformesFD[i2][ifdY] = Pos[1];
									InformesFD[i2][ifdZ] = Pos[2];
									InformesFD[i2][ifdEstado] = 1;
									break;
								}
							}
						}
						else
						{
						    TogglePlayerControllable(j, false);
							SendClientMessage(j, ROJO, "* Has quedado atrapado a causa de un accidente grave, deberás esperar hasta que vengan los bomberos.");
							SendClientMessage(j, ROJO, "* No desconectes, ya que en estos momentos hay bomberos disponibles, si lo haces, serás sancionado.");
						    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
						}
					}
					else
					{
					    ApplyAnimation(j,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
					    SendClientMessage(j, CELESTE, "* No te has quedado atrapado dado que no hay bomberos disponibles.");
					    if(GetPlayerVehicleSeat(j) == 0)
						{
						    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",j);
						}
						else
						{
						    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",j);
						}
					}
			    }
			}
		}
	}
	return 1;
}

forward Float:GetDistanceBetweenPlayers(p1,p2);
public Float:GetDistanceBetweenPlayers(p1,p2)
{
        new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
        if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
        {
                return -1.00;
        }
        GetPlayerPos(p1,x1,y1,z1);
        GetPlayerPos(p2,x2,y2,z2);
        return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock SetVehicleHealthEx(vehicleid, Float:vida)
{
	AutoInfo[vehicleid][aDano] = vida;
    SetVehicleHealth(vehicleid, vida);
}

public Comprobaciones()
{
	new string[256];
	for(new i=0; i < MAX_PLAYERS; i++)
	{
	    ComprobarIncendio(i);
	    if(IsPlayerInAnyVehicle(i))
		{
		    /* Anticheat de velocidad */
		    new velocidad = floatround(GetVehicleSpeed(GetPlayerVehicleID(i)));
		    if(velocidad > 300)
		    {
		        format(string, sizeof(string), "[ANTICHEAT] Es probable que %s esté usando cheats de velocidad. Usa '/spect %d'", NombreJugador(i), i);
				ABroadCast(ROJO, string, 1);
		    }

		    new coche = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(AutoInfo[coche][aGasolina] == 0 && AutoInfo[coche][aMotor] == 1)
				{
				    new suerte = random(10);
				    new Float:vida;
				    GetVehicleHealth(coche, vida);
				    if(vida < 600)
				    {
				        if(suerte == 1 || suerte == 3 || suerte == 8 || suerte == 9)
				        {
				            format(string, sizeof(string), "[ID: %d] El motor del vehículo se apaga.", i);
							ProxDetector(20.0, i, string, AMARILLO,AMARILLO,AMARILLO,AMARILLO,AMARILLO);
							new motor, luces, alarma, puertas, capo, maletero, objetivo;
							GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
							SetVehicleParamsEx(coche, 0, luces, alarma, puertas, capo, maletero, objetivo);
						    AutoInfo[coche][aMotor] = 0;
						    SendClientMessage(i, CELESTE, "* Tu vehículo se ha apagado, será mejor que pases por un mecánico.");
						}
				    }

					format(string, sizeof(string), "[ID: %d] El vehículo se queda sin gasolina y se apaga.", NombreJugador(i));
					ProxDetector(20.0, i, string, AMARILLO,AMARILLO,AMARILLO,AMARILLO,AMARILLO);
					new motor, luces, alarma, puertas, capo, maletero, objetivo;
					AutoInfo[coche][aMotor] = 0;
				    GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
					SetVehicleParamsEx(coche, 0, luces, alarma, puertas, capo, maletero, objetivo);
				}
		 		new Float:health2;
		  		GetVehicleHealth(GetPlayerVehicleID(i),health2);
		  		if(health2 <= 400)
		  		{
					if(AutoInfo[coche][aRoto] == 0)
					{
					    SetVehicleHealthEx(coche, 350);
						format(string, sizeof(string), "[ID: %d] El motor se descompone y se apaga.", i);
						ProxDetector(20.0, i, string, AMARILLO,AMARILLO,AMARILLO,AMARILLO,AMARILLO);
						new motor, luces, alarma, puertas, capo, maletero, objetivo;
						GetVehicleParamsEx(coche, motor, luces, alarma, puertas, capo, maletero, objetivo);
						SetVehicleParamsEx(coche, 0, luces, alarma, puertas, capo, maletero, objetivo);
					    AutoInfo[coche][aRoto] = 1;
					    AutoInfo[coche][aMotor] = 0;
					    SendClientMessage(i, CELESTE, "* Tu vehículo se ha roto, llame a un mecánico para repararlo.");
					}
		  		}
    		}
		}
	}
}

forward LevantarseParalizado(playerid); public LevantarseParalizado(playerid){
	new string[128];
	ClearAnimations(playerid);
 	TogglePlayerControllable(playerid, 1);
  	ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
   	format(string, sizeof(string), "* %s apoya ambas manos en el suelo y se sostiene con éstas, acto seguido se levanta.", NombreJugador(playerid));
    ProxDetector(15.0,playerid, string, ROSA,ROSA,ROSA,ROSA,ROSA);
    Paralizado[playerid] = 0;
    return 1;
}

forward SetPlayerHealthEx(playerid, Float: vida); public SetPlayerHealthEx(playerid, Float: vida){
    JugadorInfo[playerid][jVida] = vida;
    SetPlayerHealth(playerid, vida);
    return 1;
}

forward SetPlayerArmourEx(playerid, Float: chaleco); public SetPlayerArmourEx(playerid, Float: chaleco){
    JugadorInfo[playerid][jChaleco] = chaleco;
    Chaleco[playerid] = 1;
    SetPlayerArmour(playerid, chaleco);
	if(JugadorInfo[playerid][jMiembro] == 1){
	SetPlayerAttachedObject(playerid, 9, 19142, 1, 0.099258,0.031748,-0.015871,360.000000,358.979064,357.476074,1.072590,1.239796,-1.046599);
	return 1;
	}
    return 1;
}

stock MostrarCacheo(playerid, targetid){
    new dialog[1024], string[128];
	for(new i = 1; i < 13; i++){
		if(i == 1){
		    if(BolsilloID[targetid][i] != 0) format(dialog, sizeof(dialog), "{FFFFFF}1) - {00FFFF}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[targetid][1]), BolsilloCantidad[targetid][1]);
		    else format(dialog, sizeof(dialog), "{FFFFFF}1) - Bolsillo vacío.");
		    continue;
		}
		if(i == 11){
			strcat(dialog, "\n|--------------------------------------------------------------|");
			if(BolsilloID[targetid][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano derecha - {FFFF00}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[targetid][i]), BolsilloCantidad[targetid][i]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano derecha desocupada.");
  			strcat(dialog, string);
  			continue;
		}
		if(i == 12){
			if(BolsilloID[targetid][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano izquierda - {FFFF00}%s {FFFFFF}({00FFFF}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[targetid][i]), BolsilloCantidad[targetid][i]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano izquierda desocupada.");
  			strcat(dialog, string);
  			break;
		}
		if(BolsilloID[targetid][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%d) - {FFFF00}%s {FFFFFF}({00FFFF}%d{FFFFFF})", i, ObtenerNombreObjeto(BolsilloID[targetid][i]), BolsilloCantidad[targetid][i]);
  		else format(string, sizeof(string), "\n{FFFFFF}%d) - Bolsillo vacío.", i);
  		strcat(dialog, string);
	}
	strcat(dialog, "\n|--------------------------------------------------------------|");
	format(string, sizeof(string), "\n{FFFFFF}Dinero: {00FF00}$%d{FFFFFF}.", JugadorInfo[targetid][jDinero]);
	strcat(dialog, string);
	format(string, sizeof(string), "{FFFFFF}Bolsillos de %s", NombreJugador(targetid));
	ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_LIST, string, dialog, "Cerrar", "");
	return 1;
}

stock CrearRadar(Float:x,Float:y,Float:z,Float:rot,range,limit,fine,vehid)
{
	new newid;
	if (newid == RadaresCargados || newid > RadaresCargados)
	{
	    RadaresCargados++;
	}
	Radar[newid][rRadarX] = x;
	Radar[newid][rRadarY] = y;
	Radar[newid][rRadarZ] = z;
	Radar[newid][rRadarA] = rot;
	Radar[newid][rRango] = range;
	Radar[newid][rLimite] = limit;
	Radar[newid][rPrecio] = fine;
	Radar[newid][rVehID] = vehid;
	Radar[newid][rActivo] = true;
	return newid;
}

stock DestruirRadar(cameraid)
{
    Radar[cameraid][rActivo] = false;
	DestroyObject(Radar[cameraid][rObjetoID]);
	return 1;
}

stock QuitarRadares()
{
	for(new i = 0;i<RadaresCargados +1;i++)
	{
	    if(Radar[i][rActivo] == true)
	    {
    		DestroyObject(Radar[i][rObjetoID]);
	    }
	}
	return 1;
}

forward ActualizarRadar();
public ActualizarRadar()
{
	new string[256];
	for(new a = 0;a<MAX_PLAYERS;a++)
	{
	    if(!IsPlayerConnected(a)) continue;
	    if(GetPVarInt(a,"Flasheado") == 1)
		{
			continue;
		} else if (GetPVarInt(a,"Flasheado") == 2)
		{
			DeletePVar(a,"Flasheado");
			continue;
		}
	    for(new b = 0;b<RadaresCargados +1;b++)
	    {
	        if(Radar[b][rActivo] == true)
	    	{
		        if(IsPlayerInRangeOfPoint(a,Radar[b][rRango],Radar[b][rRadarX],Radar[b][rRadarY],Radar[b][rRadarZ]))
		        {
		            new velocidad = floatround(GetVehicleSpeed(GetPlayerVehicleID(a)));
		            new limite = Radar[b][rLimite];
		            if(velocidad > limite)
		            {
	                 	SetPVarInt(a,"Flasheado",1);
		                SetTimerEx("RadarEspera",1200,false,"i",a);
						if(GetPlayerState(a) == PLAYER_STATE_DRIVER)
						{
							FlashPlayerScreen(a, 0xffffff66, 100, 1);
						}
						format(string, sizeof(string), "* El radar disparó un flash.");
						ProxDetector(15.0, a, string, 0x32CD32FF, 0x32CD32FF, 0x32CD32FF, 0x32CD32FF, 0x32CD32FF);
						for(new p = 0;p<MAX_PLAYERS;p++)
						{
							if(IsPlayerInVehicle(p, Radar[b][rVehID]))
		     				{
		         				FlashPlayerScreen(p, 0xffffff66, 100, 1);
		         				PlayerPlaySound(p, 1132, 0.0, 0.0, 0.0);
		         				format(string, 128, "[INFO RADAR] Vehículo con la matricula LS-%d ha pasado a una velocidad de %d KM/h", AutoInfo[GetPlayerVehicleID(a)][aID], velocidad);
								SendClientMessage(p, ROJO, string);
						    }
						}
		            }
		        }
		        for(new j = 0;j<MAX_PLAYERS;j++)
				{
				    if(Radar[b][rActivo] == true)
				    {
				        if(IsPlayerInVehicle(j, Radar[b][rVehID]))
    					{
						    new velocidad = floatround(GetVehicleSpeed(Radar[b][rVehID]));
						    if(velocidad >= 10)
						    {
						        SendClientMessage(j, CELESTE, "* Radar desactivado automáticamente.");
						        Radar[b][rActivo] = false;
						        DestruirRadar(b);
						    }
						}
					}
				}
			}
	    }
	}
}

forward RadarEspera(playerid);
public RadarEspera(playerid)
{
	SetPVarInt(playerid,"Flasheado",2);
}

stock GetVehicleSpeed(vehicleid)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float:Pos[3],Float:VS ;
		GetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[2]);
		VS = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*200;
		return floatround(VS,floatround_round);
	}
	return INVALID_VEHICLE_ID;
}

stock CrearGasolinera(Float:x, Float:y, Float:z, preciodiesel, preciogasolina)
{
    new string[256];
	format(string, sizeof(string), "{00FFFF}Gasolinera{FFFFFF}\nGasolina: {00FFFF}$%d{FFFFFF}\nDiesel: {00FFFF}$%d{FFFFFF}\nUsa {00FFFF}/repostar{FFFFFF} para repostar.", preciogasolina, preciodiesel);
	CreateDynamic3DTextLabel(string, 0xFFFFFFFF, x, y, z, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
    gasolineras += 1;
    diesel[0 + gasolineras] = preciodiesel;
    gasolina[0 + gasolineras] = preciogasolina;
    EstacionGasX[0 + gasolineras] = x;
    EstacionGasY[0 + gasolineras] = y;
    EstacionGasZ[0 + gasolineras] = z;
}

stock EstaEnGasolinera(playerid)
{
	for(new i = 0; i <= gasolineras; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, EstacionGasX[i], EstacionGasY[i], EstacionGasZ[i]))
	    {
	        CualGas[playerid] = i;
	        return 1;
	    }
	}
    return 0;
}

stock IsDiesel(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case
        400,403,406,407,408,413,414,416,422,423,427,428,431,433,437,440,443,455,456,459,
        470,478,482,483,486,489,490,495,498,499,505,508,514,515,524,525,528,531,532,543,
        544,552,554,572,573,578,579,582,588,599,601,605,609:return 1;
    }
    return 0;
}

forward AtualizarVelocimetro(playerid);
public AtualizarVelocimetro(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new string[256];

		new veh = GetPlayerVehicleID(playerid);
		new Vel = floatround(GetVehicleSpeed(veh));
		new Gas = AutoInfo[veh][aGasolina];

	    format(string, sizeof(string), "~w~%d KM/H", Vel);
		PlayerTextDrawSetString(playerid, Velocimetro0[playerid], string);
	    PlayerTextDrawShow(playerid, Velocimetro0[playerid]);
	    format(string, sizeof(string), "~w~Gasolina: ~r~%d~w~L", Gas);
		PlayerTextDrawSetString(playerid, Velocimetro1[playerid], string);
		PlayerTextDrawShow(playerid, Velocimetro1[playerid]);
    }
    else
    {
        KillTimer(TimerVelocimetro[playerid]);
		PlayerTextDrawHide(playerid, Velocimetro0[playerid]);
		PlayerTextDrawHide(playerid, Velocimetro1[playerid]);
    }
    return 1;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
	gPlayerUsingLoopingAnim[playerid] = 0;
	animation[playerid]++;
}

stock MostrarAlmacen(id, playerid)
{
	new dialog[2048], string[128];
	format(string, sizeof(string), "{FFFFFF}El contenido actual del almacén {00FFFF}%d{FFFFFF} es:\n\n", AlmacenInfo[id][alID]);
	strcat(dialog, string);
	for(new i = 0; i < 30; i++)
    {
        if(AlmacenInfo[id][alOID][i] != 0)
        {
        	format(string, sizeof(string), "{FFFFFF}[Espacio {00FFFF}%d{FFFFFF}] - {00FFFF}%s{FFFFFF}. (Cantidad: {00FFFF}%d{FFFFFF}).\n", i, ObtenerNombreObjeto(AlmacenInfo[id][alOID][i]), AlmacenInfo[id][alOCA][i]);
            strcat(dialog, string);
		}
		else
		{
			format(string, sizeof(string), "{FFFFFF}[Espacio {00FFFF}%d{FFFFFF}] - Vacío.\n", i);
			strcat(dialog, string);
		}
    }
    ShowPlayerDialog(playerid, 998899, DIALOG_STYLE_MSGBOX, "{FFFFFF}Información del almacén", dialog, "Cerrar", "");
    return 1;
}

stock MostrarArmario(casa, playerid)
{
    new dialog[1024], string[128];
	for(new i = 0; i < 7; i++)
	{
	    if(i == 0)
		{
		    if(CasaInfo[casa][cArmID][0] != 0) format(dialog, sizeof(dialog), "{FFFFFF}1) - {FFFF00}%s {FFFFFF}({00FF00}%d{FFFFFF})", ObtenerNombreObjeto(CasaInfo[casa][cArmID][i]), CasaInfo[casa][cArmCantidad][i]);
		    else format(dialog, sizeof(dialog), "{FFFFFF}1) - Armario vacío.");
		    continue;
		}
		if(i == 5)
		{
			strcat(dialog, "\n|--------------------------------------------------------------|");
			if(BolsilloID[playerid][11] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano derecha - {FFFF00}%s {FFFFFF}({00FF00}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[playerid][11]), BolsilloCantidad[playerid][11]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano derecha - desocupada.");
  			strcat(dialog, string);
  			continue;
		}
		if(i == 6)
		{
			if(BolsilloID[playerid][12] != 0) format(string, sizeof(string), "\n{FFFFFF}%Mano izquierda - {FFFF00}%s {FFFFFF}({00FF00}%d{FFFFFF})", ObtenerNombreObjeto(BolsilloID[playerid][12]), BolsilloCantidad[playerid][12]);
  			else format(string, sizeof(string), "\n{FFFFFF}Mano izquierda - desocupada.");
  			strcat(dialog, string);
  			break;
		}
		if(CasaInfo[casa][cArmID][i] != 0) format(string, sizeof(string), "\n{FFFFFF}%d) - {FFFF00}%s {FFFFFF}({00FF00}%d{FFFFFF})", i+1, ObtenerNombreObjeto(CasaInfo[casa][cArmID][i]), CasaInfo[casa][cArmCantidad][i]);
  		else format(string, sizeof(string), "\n{FFFFFF}%d) - Armario vacío.", i+1);
  		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, ARMARIO, DIALOG_STYLE_LIST, "{FFFFFF}Armario", dialog, "Seleccionar", "Salir");
}

stock ActualizarArmario(idx)
{
    new sql[1200];
    format(CasaInfo[idx][cArmIDs], 128, "%d,%d,%d,%d,%d",
	    CasaInfo[idx][cArmID][0], CasaInfo[idx][cArmID][1], CasaInfo[idx][cArmID][2], CasaInfo[idx][cArmID][3], CasaInfo[idx][cArmID][4]
	);
	format(CasaInfo[idx][cArmTipos], 128, "%d,%d,%d,%d,%d",
	    CasaInfo[idx][cArmTipo][0], CasaInfo[idx][cArmTipo][1], CasaInfo[idx][cArmTipo][2], CasaInfo[idx][cArmTipo][3], CasaInfo[idx][cArmTipo][4]
	);
	format(CasaInfo[idx][cArmCantidads], 128, "%d,%d,%d,%d,%d",
	    CasaInfo[idx][cArmCantidad][0], CasaInfo[idx][cArmCantidad][1], CasaInfo[idx][cArmCantidad][2], CasaInfo[idx][cArmCantidad][3], CasaInfo[idx][cArmCantidad][4]
	);

	format(sql, sizeof(sql), "UPDATE casas SET `Armario`='%d', `Armas`='%s', `Municiones`='%s' WHERE `ID`='%d'",
	    CasaInfo[idx][cArm],
	    CasaInfo[idx][cArmIDs],
	    CasaInfo[idx][cArmCantidads],
	    CasaInfo[idx][cID]
	);
	mysql_query(database, sql, false);
}

forward CobrarPeaje(playerid); public CobrarPeaje(playerid){
	new vehicleid = GetPlayerVehicleID(playerid);
	if(AutoInfo[vehicleid][aFaccionID] == 1 || AutoInfo[vehicleid][aFaccionID] == 2 || AutoInfo[vehicleid][aFaccionID] == 3 || AutoInfo[vehicleid][aFaccionID] == 5) return ProxDetector(15.0, playerid, "Empleado del peaje dice: Pase, los vehículos del estado no pagan nada.", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	else
	{
	    CajasFuerte[0] += 10;
		JugadorInfo[playerid][jDinero] -= 10;
		SendClientMessage(playerid, CELESTE, "* Se han cobrado diez dólares por el peaje.");
		ProxDetector(15.0, playerid, "Empleado del peaje dice: Ya puede pasar, buen día.", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}
}

stock EstaEnTaller(playerid)
{
	for(new i = 0; i < TotalTalleres; i++)
	{
	    if(PlayerToPoint(playerid, 50, TallerInfo[i][txx], TallerInfo[i][tyy], TallerInfo[i][tzz]))
	    {
	        return TallerInfo[i][tNegocio];
	    }
	}
	return 0;
}

stock EsTaller(n)
{
	if(n == 25) return 1;
	else if(n == 26) return 1;
	return 0;
}

forward RepararVeh(playerid, tipo);
public RepararVeh(playerid, tipo)
{
    TogglePlayerControllable(playerid, true);
	if(tipo == 1)
	{
        SendClientMessage(playerid, CELESTE, "* Has reparado la chapa del vehículo.");
        NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] --;
		RepairVehicle(JugadorCercaVehiculo(playerid));
		return 1;
	}
	else if(tipo == 2)
	{
	    SetPVarInt(playerid, "VehicleRepair", 1);
		SetVehicleHealth(JugadorCercaVehiculo(playerid), 500);
		AutoInfo[JugadorCercaVehiculo(playerid)][aDano] = 500;
		AutoInfo[JugadorCercaVehiculo(playerid)][aRoto] = 0;
		SendClientMessage(playerid, CELESTE, "* Has hecho una reparación muy justa, tendrá que ir al taller para terminar la reparación.");
		return 1;
	}
	else
	{
	    SetPVarInt(playerid, "VehicleRepair", 1);
		SetVehicleHealth(JugadorCercaVehiculo(playerid), 999);
		AutoInfo[JugadorCercaVehiculo(playerid)][aDano] = 999;
		AutoInfo[JugadorCercaVehiculo(playerid)][aRoto] = 999;
		NegocioInfo[NegocioTaller(EstaEnTaller(playerid))][nProdSolidos] --;
		SendClientMessage(playerid, CELESTE, "* Has reparado el motor del vehículo.");
	}
	return 1;
}

stock NegocioTaller(id)
{
	for(new i = 0; i < TotalNegocios; i++)
	{
	    if(NegocioInfo[i][nID] == id) return i;
	}
	return 0;
}

forward CerrarPeaje0(); public CerrarPeaje0(){
	RotateObject(peaje[0], 0.00000, 90.24200, 269.24200, 45, 25);
}

forward CerrarPeaje1(); public CerrarPeaje1(){
	RotateObject(peaje[1], 0.00000, 90.24200, 87.74200, 45, 25);
}

forward CerrarPeaje2(); public CerrarPeaje2(){
	RotateObject(peaje[2], 0.00000, 90.00000, 345.00000, 45, 25);
}

forward CerrarPeaje3(); public CerrarPeaje3(){
	RotateObject(peaje[3], 0.00000, 270.50000, 35.24700, 45, 25);
}

forward CerrarPeaje4(); public CerrarPeaje4(){
	RotateObject(peaje[4], 0.00000, 89.49400, 36.00000, 45, 25);
}

forward CerrarPeaje5(); public CerrarPeaje5(){
	RotateObject(peaje[5], 0.00000, 90.00000, 163.99600, 45, 25);
}

forward CerrarPeaje6(); public CerrarPeaje6(){
	RotateObject(peaje[6], 0.00000, 89.75000, 308.24701, 45, 25);
}

forward CerrarPeaje7(); public CerrarPeaje7(){
	RotateObject(peaje[7], 0.00000, 89.74700, 29.24000, 45, 25);
}

forward CerrarPeaje8(); public CerrarPeaje8(){
	RotateObject(peaje[8], 0.00000, 90.24700, 22.48600, 45, 25);
}

forward CerrarPeaje9(); public CerrarPeaje9(){
	RotateObject(peaje[9], 359.98901, 89.24200, 200.49001, 45, 25);
}

forward CerrarPeaje10(); public CerrarPeaje10(){
	RotateObject(peaje[10], 359.99500, 89.74200, 178.98900, 45, 25);
}

forward CerrarPeaje11(); public CerrarPeaje11(){
	RotateObject(peaje[11], 0.02100, 269.50000, 179.37199, 45, 25);
}

forward CerrarPeaje12(); public CerrarPeaje12(){
	RotateObject(peaje[12], 0.01600, 269.50000, 179.86800, 45, 25);
}

forward CerrarPeaje13(); public CerrarPeaje13(){
	RotateObject(peaje[13], 359.99600, 89.74200, 178.48900, 45, 25);
}

TunningCar(playerid)
{
	if(pvehicle[playerid] != NOEXISTE)
	{
		ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Menu de tunning", "Inhibidor de radar (30 usos) $1200\nÓxido nitroso (15 productos)\nTintado de lunas (10 productos)", "Seleccionar", "Salir");
		SendClientMessage(playerid, NARANJA, "* Seleciona un componente.");
		return 1;
	}
	return 0;
}

ModCar(playerid)
{
	if(pvehicle[playerid] != NOEXISTE)
	{
		ShowPlayerDialog(playerid, DIALOG_COMP, DIALOG_STYLE_LIST, "Menu de componentes", "Vinilos\nTubos de escape\nParachoques delanteros\nParachoques traseros\nTechos\nAlerones\nFaldones laterales\nParrillas\nLlantas\nFocos antiniebla\nTomas de aire\nCapós\nEquipos de sonido\nAlarmas\nHidráulica (10000 C/U)", "Seleccionar", "Salir");
		SendClientMessage(playerid, NARANJA, "* Seleciona un componente.");
		return 1;
	}
	return 0;
}

IsValidComponent(modelid, component)
{
	for(new i = 0; i < 48; i++)
	{
		if(modelid == ComponentesLegales[i][0])
		{
			for(new j = 1; j < 22; j++)
			{
				if(ComponentesLegales[i][j] == component) return 1;
			}
			return 0;
		}
	}
	return 0;
}

stock IsVehicleOccupied(vehid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInVehicle(i, vehid)) return 1;
	}
	return 0;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(FrenodeMano[vehicleid] == 1)
    {
        GetVehiclePos(playerid, VehComprobar[vehicleid][0], VehComprobar[vehicleid][1], VehComprobar[vehicleid][2]);
        GetVehicleZAngle(playerid, VehComprobar[playerid][3]);
        if(VehComprobar[vehicleid][0] == VehFrenoPOS[vehicleid][0] || VehComprobar[vehicleid][1] == VehFrenoPOS[vehicleid][1] || VehComprobar[vehicleid][2] == VehFrenoPOS[vehicleid][2] || VehComprobar[vehicleid][3] == VehFrenoPOS[vehicleid][3]) return 1;
        SetVehiclePos(vehicleid, VehFrenoPOS[vehicleid][0], VehFrenoPOS[vehicleid][1], VehFrenoPOS[vehicleid][2]);
        SetVehicleZAngle(vehicleid, VehFrenoPOS[playerid][3]);
    }
	return 1;
}

stock GetVehicleFromId(id)
{
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
		if(id == AutoInfo[c][aID]) return c;
	}
	return -1;
}

stock GetPlayerVehicleByKey(tmpllave)
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(AutoInfo[i][aID] == tmpllave) return i;
	}
	return NOEXISTE;
}

stock PointToPoint3D(Float:radi, Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2)
{
    new Float:distance;
    distance= floatsqroot( floatadd ( floatadd ( floatpower( floatsub ( x2 , x) , 2) , floatpower( floatsub ( y2 , y), 2) ), floatpower( floatsub ( z2 , z), 2) ) );

    if (distance < radi)
    {
        return 1;
    }
	return 0;
}

stock strtokex(const stringe[], &index)
{
	new length = strlen(stringe);
	while ((index < length) && (stringe[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (stringe[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = stringe[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

CrearPuertasCeldas()
{
	puertaCelda[0] = CreateDynamicObject(19302, 240.07, -1094.79, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[1] = CreateDynamicObject(19302, 240.07, -1101.49, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[2] = CreateDynamicObject(19302, 240.07, -1108.17, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[3] = CreateDynamicObject(19302, 240.07, -1114.85, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[4] = CreateDynamicObject(19302, 232.93, -1119.11, -90.30, 0.00, 0.00, 180.00);
	puertaCelda[5] = CreateDynamicObject(19302, 226.27, -1119.11, -90.30, 0.00, 0.00, 180.00);
	puertaCelda[6] = CreateDynamicObject(19302, 219.82, -1119.11, -90.30, 0.00, 0.00, 180.00);
	puertaCelda[7] = CreateDynamicObject(19302, 211.07, -1114.84, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[8] = CreateDynamicObject(19302, 211.07, -1108.16, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[9] = CreateDynamicObject(19302, 211.07, -1101.46, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[10] = CreateDynamicObject(19302, 211.07, -1094.78, -90.30, 0.00, 0.00, 270.00);
	puertaCelda[11] = CreateDynamicObject(19302, 211.07, -1094.78, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[12] = CreateDynamicObject(19302, 211.07, -1101.46, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[13] = CreateDynamicObject(19302, 211.07, -1108.16, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[14] = CreateDynamicObject(19302, 211.07, -1114.84, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[15] = CreateDynamicObject(19302, 240.07, -1114.85, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[16] = CreateDynamicObject(19302, 240.07, -1108.17, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[17] = CreateDynamicObject(19302, 240.07, -1101.49, -93.79, 0.00, 0.00, 270.00);
	puertaCelda[18] = CreateDynamicObject(19302, 240.07, -1094.79, -93.79, 0.00, 0.00, 270.00);
	return 1;
}

CargarPosicionesCeldas()
{
	Celda[0][celPosX] = 241.5909; Celda[0][celPosY] = -1096.0725; Celda[0][celPosZ] = -90.5441;
	Celda[1][celPosX] = 241.8459; Celda[1][celPosY] = -1102.9620; Celda[1][celPosZ] = -90.5441;
	Celda[2][celPosX] = 241.6966; Celda[2][celPosY] = -1109.6736; Celda[2][celPosZ] = -90.5441;
	Celda[3][celPosX] = 241.6371; Celda[3][celPosY] = -1116.3171; Celda[3][celPosZ] = -90.5441;
	Celda[4][celPosX] = 231.0256; Celda[4][celPosY] = -1120.2865; Celda[4][celPosZ] = -90.5441;
	Celda[5][celPosX] = 224.6272; Celda[5][celPosY] = -1120.3402; Celda[5][celPosZ] = -90.5441;
	Celda[6][celPosX] = 217.5990; Celda[6][celPosY] = -1120.4467; Celda[6][celPosZ] = -90.5441;
	Celda[7][celPosX] = 209.6652; Celda[7][celPosY] = -1116.7241; Celda[7][celPosZ] = -90.5441;
	Celda[8][celPosX] = 209.9417; Celda[8][celPosY] = -1109.7944; Celda[8][celPosZ] = -90.5441;
	Celda[9][celPosX] = 209.6374; Celda[9][celPosY] = -1103.2290; Celda[9][celPosZ] = -90.5441;
	Celda[10][celPosX] = 209.9017; Celda[10][celPosY] = -1096.4949; Celda[10][celPosZ] = -90.5441;
	Celda[11][celPosX] = 209.8077; Celda[11][celPosY] = -1095.5358; Celda[11][celPosZ] = -94.0300;
	Celda[12][celPosX] = 209.6395; Celda[12][celPosY] = -1102.6687; Celda[12][celPosZ] = -94.0300;
	Celda[13][celPosX] = 209.4039; Celda[13][celPosY] = -1109.8069; Celda[13][celPosZ] = -94.0300;
	Celda[14][celPosX] = 210.2050; Celda[14][celPosY] = -1116.5846; Celda[14][celPosZ] = -94.0300;
	Celda[15][celPosX] = 241.7404; Celda[15][celPosY] = -1116.7198; Celda[15][celPosZ] = -94.0300;
	Celda[16][celPosX] = 241.7055; Celda[16][celPosY] = -1109.6984; Celda[16][celPosZ] = -94.0300;
	Celda[17][celPosX] = 241.6418; Celda[17][celPosY] = -1103.1935; Celda[17][celPosZ] = -94.0300;
	Celda[18][celPosX] = 242.1288; Celda[18][celPosY] = -1096.1626; Celda[18][celPosZ] = -94.0300;
	return 1;
}

AbrirCelda(celda)
{
	switch(celda)
	{
		case 0: MoveDynamicObject(puertaCelda[0], 240.07, -1093.47, -90.30, 4.0);
		case 1: MoveDynamicObject(puertaCelda[1], 240.07, -1100.17, -90.30, 4.0);
		case 2: MoveDynamicObject(puertaCelda[2], 240.07, -1106.85, -90.30, 4.0);
		case 3: MoveDynamicObject(puertaCelda[3], 240.07, -1113.55, -90.30, 4.0);
		case 4: MoveDynamicObject(puertaCelda[4], 234.23, -1119.11, -90.30, 4.0);
		case 5: MoveDynamicObject(puertaCelda[5], 227.56, -1119.11, -90.30, 4.0);
		case 6: MoveDynamicObject(puertaCelda[6], 221.11, -1119.11, -90.30, 4.0);
		case 7: MoveDynamicObject(puertaCelda[7], 211.07, -1113.56, -90.30, 4.0);
		case 8: MoveDynamicObject(puertaCelda[8], 211.07, -1106.86, -90.30, 4.0);
		case 9: MoveDynamicObject(puertaCelda[9], 211.07, -1100.18, -90.30, 4.0);
		case 10: MoveDynamicObject(puertaCelda[10], 211.07, -1093.46, -90.30, 4.0);
		case 11: MoveDynamicObject(puertaCelda[11], 211.07, -1093.46, -93.79, 4.0);
		case 12: MoveDynamicObject(puertaCelda[12], 211.07, -1100.18, -93.79, 4.0);
		case 13: MoveDynamicObject(puertaCelda[13], 211.07, -1106.86, -93.79, 4.0);
		case 14: MoveDynamicObject(puertaCelda[14], 211.07, -1113.56, -93.79, 4.0);
		case 15: MoveDynamicObject(puertaCelda[15], 240.07, -1113.55, -93.79, 4.0);
		case 16: MoveDynamicObject(puertaCelda[16], 240.07, -1106.85, -93.79, 4.0);
		case 17: MoveDynamicObject(puertaCelda[17], 240.07, -1100.17, -93.79, 4.0);
		case 18: MoveDynamicObject(puertaCelda[18], 240.07, -1093.47, -93.79, 4.0);
	}
	Celda[celda][celEstado] = 1;
	return 1;
}

CerrarCelda(celda)
{
	switch(celda)
	{
		case 0: MoveDynamicObject(puertaCelda[0], 240.07, -1094.79, -90.30, 4.0);
		case 1: MoveDynamicObject(puertaCelda[1], 240.07, -1101.49, -90.30, 4.0);
		case 2: MoveDynamicObject(puertaCelda[2], 240.07, -1108.17, -90.30, 4.0);
		case 3: MoveDynamicObject(puertaCelda[3], 240.07, -1114.85, -90.30, 4.0);
		case 4: MoveDynamicObject(puertaCelda[4], 232.93, -1119.11, -90.30, 4.0);
		case 5: MoveDynamicObject(puertaCelda[5], 226.27, -1119.11, -90.30, 4.0);
		case 6: MoveDynamicObject(puertaCelda[6], 219.82, -1119.11, -90.30, 4.0);
		case 7: MoveDynamicObject(puertaCelda[7], 211.07, -1114.84, -90.30, 4.0);
		case 8: MoveDynamicObject(puertaCelda[8], 211.07, -1108.16, -90.30, 4.0);
		case 9: MoveDynamicObject(puertaCelda[9], 211.07, -1101.46, -90.30, 4.0);
		case 10: MoveDynamicObject(puertaCelda[10], 211.07, -1094.78, -90.30, 4.0);
		case 11: MoveDynamicObject(puertaCelda[11], 211.07, -1094.78, -93.79, 4.0);
		case 12: MoveDynamicObject(puertaCelda[12], 211.07, -1101.46, -93.79, 4.0);
		case 13: MoveDynamicObject(puertaCelda[13], 211.07, -1108.16, -93.79, 4.0);
		case 14: MoveDynamicObject(puertaCelda[14], 211.07, -1114.84, -93.79, 4.0);
		case 15: MoveDynamicObject(puertaCelda[15], 240.07, -1114.85, -93.79, 4.0);
		case 16: MoveDynamicObject(puertaCelda[16], 240.07, -1108.17, -93.79, 4.0);
		case 17: MoveDynamicObject(puertaCelda[17], 240.07, -1101.49, -93.79, 4.0);
		case 18: MoveDynamicObject(puertaCelda[18], 240.07, -1094.79, -93.79, 4.0);
	}
	Celda[celda][celEstado] = 0;
	return 1;
}

EncarcelarJugador(playerid)
{
	for(new c = 0; c < MAX_CELDAS; c++)
	{
		if(Celda[c][celLlena] == 0)
		{
			SetPlayerPos(playerid, Celda[c][celPosX], Celda[c][celPosY], Celda[c][celPosZ]);
			SetPlayerInterior(playerid, 18);
			SetPlayerVirtualWorld(playerid, 0);
			Celda[c][celLlena] = 1;
			return 1;
		}
	}
	SetPlayerPos(playerid, Celda[0][celPosX], Celda[0][celPosY], Celda[0][celPosZ]);
	SetPlayerInterior(playerid, 18);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

stock MostrarPersonaje(playerid, id)
{
    new string[500], st[500];
	new sexo[50];
	new N[50],N1[50],N2[50];

	switch(JugadorInfo[id][jMiembro])
	{
	case 0: N = "Ninguna";
	case 1: N = "LSPD";
	case 2: N = "LSMD";
	case 3: N = "LSFD";
	case 4: N = "Gobierno";
	case 5: N = "LSRTV";
	case 6: N = "LSEM";
	}

	switch(JugadorInfo[playerid][jLider])
	{
	case 0: N1 = "No";
	default: N1 = "Sí";
	}

	switch(JugadorInfo[id][jTrabajo])
	{
	case 0: N2 = "Ninguno";
	case 1: N2 = "Chofer de bus";
	case 2: N2 = "Mecánico";
	case 3: N2 = "Abogado";
	case 4: N2 = "Traficante de armas";
	case 5: N2 = "Cultivador";
	case 6: N2 = "Vendedor ilegal";
	case 7: N2 = "Taxista";
	case 8: N2 = "Ladrón";
	case 9: N2 = "Ladrón de coches";
	case 10: N2 = "Basurero";
	case 11: N2 = "Barrendero";
	case 12: N2 = "Vendedor de teléfonos";
	case 13: N2 = "Camionero";
	}

	if(JugadorInfo[id][jSexo] == 0) { sexo = "Masculino"; }
	else if(JugadorInfo[id][jSexo] == 1) { sexo = "Femenino"; }
	format(st,sizeof(st),"{FFFFFF}Nombre Completo: {0078F6}%s{FFFFFF} | Edad: {0078F6}%d{FFFFFF} | Líder: {0078F6}%s{FFFFFF} | Facción: {0078F6}%s{FFFFFF} | Rango: {0078F6}%d{FFFFFF} | Sexo: {0078F6}%s\n", NombreJugador(playerid), JugadorInfo[playerid][jEdad], N1, N, JugadorInfo[id][jRango], sexo);
	strcat(string,st,sizeof(string));
	format(st,sizeof(st),"{FFFFFF}Trabajo: {0078F6}%s{FFFFFF} | Respeto: {0078F6}%d{FFFFFF} | Dinero en mano: {0078F6}%d{FFFFFF} | Ropa usual: {0078F6}%d{FFFFFF} | Uniforme: {0078F6}%d\n", N2, JugadorInfo[id][jRespeto], JugadorInfo[id][jDinero], JugadorInfo[id][jRopa], JugadorInfo[id][jUniforme]);
	strcat(string,st,sizeof(string));
	ShowPlayerDialog(playerid,DIALOG_TUCUENTA,DIALOG_STYLE_MSGBOX,"Tu Cuenta",string,"Aceptar","");
	return 1;
}

stock MostrarDatos(playerid, id)
{
    new string[500], st[500];
    new restante_segundos = JugadorInfo[id][jTiempoPremium] - gettime();
	new restante_dias = ((restante_segundos /60) /60) /24;
 	format(st,sizeof(st),"{FFFFFF}ID Personaje: {0078F6}%d{FFFFFF} | Premium: {0078F6}%d{FFFFFF} / Días: {0078F6}%d{FFFFFF} | Nivel: {0078F6}%d{FFFFFF} | Interior: {0078F6}%d{FFFFFF} | VW: {0078F6}%d\n {FFFFFF}Horas Jugadas: {0078F6}%d{FFFFFF} | Coins: {0078F6}%d{FFFFFF} | Restante payday: {0078F6}%d\n", JugadorInfo[id][jSQLID], JugadorInfo[id][jPremium], restante_dias, JugadorInfo[id][jNivel], GetPlayerInterior(id),
  	GetPlayerVirtualWorld(id), JugadorInfo[id][jHorasJugadas], JugadorInfo[id][jPuntosRol][0], (40-JugadorInfo[id][jPayDay]));
	strcat(string,st,sizeof(string));
	ShowPlayerDialog(playerid,DIALOG_DATOSGENERAL,DIALOG_STYLE_MSGBOX,"Tu Cuenta",string,"Aceptar","");
	return 1;
}

stock MostrarPropiedades(playerid, id)
{
    new string[500], st[500];
    format(st,sizeof(st),"{FFFFFF}Casa: {0078F6}%d{FFFFFF} | Casa prestada: {0078F6}%d{FFFFFF} | Casa alquilada: {0078F6}%d{FFFFFF} | Negocio: {0078F6}%d\n {FFFFFF}Coches: {0078F6}%d{FFFFFF}, {0078F6}%d{FFFFFF}, {0078F6}%d{FFFFFF} | Coches prestados: {0078F6}%d{FFFFFF}, {0078F6}%d{FFFFFF}, {0078F6}%d{FFFFFF}",
	JugadorInfo[id][jCasa], JugadorInfo[id][jCasaPrestada], JugadorInfo[id][jCasaAlq], JugadorInfo[id][jNegocio], JugadorInfo[id][jCoches][0], JugadorInfo[id][jCoches][1], JugadorInfo[id][jCoches][2],
	JugadorInfo[id][jCochesPrestado][0], JugadorInfo[id][jCochesPrestado][1], JugadorInfo[id][jCochesPrestado][2]);
	strcat(string,st,sizeof(string));
	ShowPlayerDialog(playerid,DIALOG_PROPIEDADES,DIALOG_STYLE_MSGBOX,"Tu Cuenta",string,"Aceptar","");
	return 1;
}

stock MostrarCuenta(playerid, id)
{
	new string[256];
	new sexo[50];
	new restante_segundos = JugadorInfo[id][jTiempoPremium] - gettime();
	new restante_dias = ((restante_segundos /60) /60) /24;
	if(JugadorInfo[id][jSexo] == 0) { sexo = "Masculino"; }
	else if(JugadorInfo[id][jSexo] == 1) { sexo = "Femenino"; }
	SendClientMessage(playerid, 0x0068FFC8, "|________________________________ ESTADÍSTICAS IC ____________________________________|");
	format(string, sizeof(string), "Nombre Completo: %s | Edad: %d | Líder: %d | Facción: %d | Rango: %d | Sexo: %s", NombreJugador(id), JugadorInfo[id][jEdad], JugadorInfo[id][jLider], JugadorInfo[id][jMiembro], JugadorInfo[id][jRango], sexo);
	SendClientMessage(playerid, 0xF5E7AD96, string);
	format(string, sizeof(string), "Trabajo: %d | Respeto: %d | Dinero en cartera: %d | Ropa usual: %d | Uniforme: %d", JugadorInfo[id][jTrabajo], JugadorInfo[id][jRespeto], JugadorInfo[id][jDinero], JugadorInfo[id][jRopa], JugadorInfo[id][jUniforme]);
	SendClientMessage(playerid, 0xF5E7AD96, string);
	SendClientMessage(playerid, 0x0068FFC8, "|________________________________ ESTADÍSTICAS OOC ___________________________________|");
	format(string, sizeof(string), "ID Personaje: %d | Premium: %d / Días: %d | Nivel: %d | INT: %d | VW: %d | Horas Jugadas: %d | Coins: %d / %d | Restante payday: %d", JugadorInfo[playerid][jSQLID], JugadorInfo[id][jPremium], restante_dias, JugadorInfo[id][jNivel], GetPlayerInterior(id), GetPlayerVirtualWorld(id), JugadorInfo[id][jHorasJugadas], JugadorInfo[id][jPuntosRol][0], JugadorInfo[id][jPuntosRol][1], (40-JugadorInfo[id][jPayDay]));
	SendClientMessage(playerid, 0xF5E7AD96, string);
	SendClientMessage(playerid, 0x0068FFC8, "|_______________________________ PROPIEDADES DEL PJ __________________________________|");
	format(string, sizeof(string), "Casa: %d | Casa prestada: %d | Casa alquilada: %d | Negocio: %d | Coches: %d, %d, %d | Coches prestados: %d, %d, %d",
	JugadorInfo[id][jCasa], JugadorInfo[id][jCasaPrestada], JugadorInfo[id][jCasaAlq], JugadorInfo[id][jNegocio], JugadorInfo[id][jCoches][0], JugadorInfo[id][jCoches][1], JugadorInfo[id][jCoches][2],
	JugadorInfo[id][jCochesPrestado][0], JugadorInfo[id][jCochesPrestado][1], JugadorInfo[id][jCochesPrestado][2]);
	SendClientMessage(playerid, 0xF5E7AD96, string);
	return 1;
}

public QuitarGasolina()
{
	for(new i=0 ; i < MAX_VEHICLES; i++)
	{
	    if(IsDiesel(i)) continue;
	    if(AutoInfo[i][aGasolina] > 0 && AutoInfo[i][aMotor] == 1)
		{
		    new index = AutoInfo[i][aID];
		    if(AutoInfo[i][aFaccionID] >= 100 && AutoInfo[i][aFaccionID] <= 200 || AutoInfo[i][aFaccionID] == 998 || AutoInfo[i][aFaccionID] == 997 || AutoInfo[i][aFaccionID] == 996)
		    {
		        AutoInfo[i][aGasolina] = 100;
				UpdateVehInteger(index, "Gasolina", AutoInfo[i][aGasolina]);
		    }
		    else
		    {
				AutoInfo[i][aGasolina] --;
				UpdateVehInteger(index, "Gasolina", AutoInfo[i][aGasolina]);
			}
		}
	}
	return 1;
}

public QuitarDiesel()
{
	for(new i=0 ; i < MAX_VEHICLES; i++)
	{
	    if(IsDiesel(i))
		{
		    if(AutoInfo[i][aGasolina] > 0 && AutoInfo[i][aMotor] == 1)
			{
				new index = AutoInfo[i][aID];
			    if(AutoInfo[i][aFaccionID] >= 100 && AutoInfo[i][aFaccionID] <= 200 || AutoInfo[i][aFaccionID] == 998 || AutoInfo[i][aFaccionID] == 997)
			    {
			        AutoInfo[i][aGasolina] = 100;
					UpdateVehInteger(index, "Gasolina", AutoInfo[i][aGasolina]);
			    }
			    else
			    {
					AutoInfo[i][aGasolina] --;
					UpdateVehInteger(index, "Gasolina", AutoInfo[i][aGasolina]);
				}
			}
		}
	}
	return 1;
}

public LlegarTraficandoArmas(playerid)
{
	TraficandoArmas[playerid] = 0;
	SendClientMessage(playerid, AMARILLO, "[SMS | Teléfono: Privado] ... no te has presentado en tu cita, vé con cuidado...");
	return 1;
}

forward RecogerTraficandoArmas(playerid);
public RecogerTraficandoArmas(playerid)
{
    TraficandoArmas[playerid] = 0;
	SendClientMessage(playerid, AMARILLO, "[SMS | Teléfono: Privado] ¿Qué pasa?... no has venido a buscar las armas, vé con cuidado...");
	return 1;
}

stock CrearAgujero(playerid, Float:X, Float:Y, Float:Z)
{
	AgujeroInfo[TotalAgujeros][aguID] = TotalAgujeros;
	AgujeroInfo[TotalAgujeros][aguX] = X;
	AgujeroInfo[TotalAgujeros][aguY] = Y;
	AgujeroInfo[TotalAgujeros][aguZ] = Z;
	AgujeroInfo[TotalAgujeros][aguTexto] = Create3DTextLabel("Agujero", VERDE, X, Y, Z, 4.0, GetPlayerVirtualWorld(playerid), 0);

	TotalAgujeros ++;

	SendClientMessage(playerid, CELESTE, "* Has creado un agujero en esta posición.");
	return 1;
}

stock CrearPlanta(playerid, Float:X, Float:Y, Float:Z)
{
    new query[512];
	format(query, 512, "INSERT INTO plantaciones (id, X, Y, Z, Tiempo) VALUES (%d, %f, %f, %f, 1)", TotalPlantaciones, X, Y, Z);
	mysql_query(database, query, false);

	PlantaInfo[TotalPlantaciones][plantID] = TotalPlantaciones;
	PlantaInfo[TotalPlantaciones][plantX] = X;
	PlantaInfo[TotalPlantaciones][plantY] = Y;
	PlantaInfo[TotalPlantaciones][plantZ] = Z;
	PlantaInfo[TotalPlantaciones][plantTiempo] = 1;
	format(PlantaInfo[TotalPlantaciones][plantNombre], MAX_PLAYER_NAME, "%s", NombreJugador(playerid));

	PlantaInfo[TotalPlantaciones][plantObjeto] = CreateDynamicObject(19473, X, Y, Z-2.1, 0, 0, 0);
    PlantaInfo[TotalPlantaciones][plantTexto] = Create3DTextLabel("10%", VERDE, X, Y, Z, 4.0, GetPlayerVirtualWorld(playerid), 0);

    TotalPlantaciones ++;
}

/*public ActualizarPlantacion()
{
	for(new i = 0; i < sizeof(PlantaInfo); i++)
	{
		if(PlantaInfo[i][plantTiempo] <= 9)
		{
		    PlantaInfo[i][plantTiempo] ++;
		    if(PlantaInfo[i][plantTiempo] == 1)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "1%");
			}
		    if(PlantaInfo[i][plantTiempo] == 10)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "10%");
			}
			else if(PlantaInfo[i][plantTiempo] == 20)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "20%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-2, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 30)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "30%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.9, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 40)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "40%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.8, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 50)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "50%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.7, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 60)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "60%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.6, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 70)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "70%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.5, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 80)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "80%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.4, 100.0);
			}
			else if(PlantaInfo[i][plantTiempo] == 90)
		    {
				Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "90%");
				MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.3, 100.0);
			}
		}
		else if(PlantaInfo[i][plantTiempo] == 100)
		{
		    Update3DTextLabelText(PlantaInfo[i][plantTexto], VERDE, "100%");
		    MoveDynamicObject(PlantaInfo[i][plantObjeto], PlantaInfo[i][plantX], PlantaInfo[i][plantY], PlantaInfo[i][plantZ]-1.2, 100.0);
		}
		//ActualizarPlantacionDB(i);
	}
	return 1;
}*/

/*stock ActualizarPlantacionDB(i)
{
    new query[512];
	format(query, 512, "UPDATE plantaciones SET Tiempo=%d WHERE id=%d", PlantaInfo[i][plantTiempo], PlantaInfo[i][plantID]);
	mysql_query(query);
}*/

/*CargarPlantaciones()
{
    new sql[80], row[512], arrCoords[6][64];
	format(sql, sizeof(sql), "SELECT COUNT(*) FROM plantaciones");
	mysql_query(sql);
	mysql_store_result();
	mysql_fetch_row(row);
	new hcount = strval(row);
    TotalPlantaciones=0;

    format(sql, sizeof(sql), "SELECT * FROM plantaciones");
	mysql_query(sql);
    mysql_store_result();

	for (new idx=0; idx<hcount; idx++)
	{
        mysql_fetch_row(row);
		split(row, arrCoords, '|');
		PlantaInfo[idx][plantID] = strval(arrCoords[0]);
		PlantaInfo[idx][plantX] = floatstr(arrCoords[1]);
		PlantaInfo[idx][plantY] = floatstr(arrCoords[2]);
		PlantaInfo[idx][plantZ] = floatstr(arrCoords[3]);
		PlantaInfo[idx][plantTiempo] = strval(arrCoords[4]);
		format(PlantaInfo[idx][plantNombre], MAX_PLAYER_NAME, "%s", arrCoords[5]);

		PlantaInfo[idx][plantObjeto] = CreateDynamicObject(19473, PlantaInfo[idx][plantX], PlantaInfo[idx][plantY], PlantaInfo[idx][plantZ]-2.1, 0, 0, 0);
    	PlantaInfo[idx][plantTexto] = Create3DTextLabel("10%", VERDE, PlantaInfo[idx][plantX], PlantaInfo[idx][plantY], PlantaInfo[idx][plantZ], 4.0, 0, 0);

        TotalPlantaciones++;
	}
	ActualizarPlantacion();

	mysql_free_result();
    printf("Plantaciones totales: %d (MAX: %d)",TotalPlantaciones, MAX_PLANTACIONES);
	return 1;
}*/

/*public PlantacionIncautada(playerid)
{
	new id;
	id = PlantacionIncautadaID[playerid];
    DestroyDynamicObject(PlantaInfo[id][plantObjeto]);
    DestroyDynamicObject(PlantaInfo[id][plantObjeto2]);
	Delete3DTextLabel(PlantaInfo[id][plantTexto]);
	PlantaInfo[id][plantX] = -1;
	PlantaInfo[id][plantY] = -1;
	PlantaInfo[id][plantZ] = -1;
	new query[1024];
	format(query, 1024, "DELETE FROM plantaciones WHERE id=%d", PlantaInfo[id][plantID]);
	mysql_query(query);
	PlantacionIncautadaID[playerid] = -1;
	return 1;
}
*/
public PreparandoHachis(playerid)
{
	new gramos = random(6)+2;
	new string[128];
	format(string, sizeof(string), "* Has obtenido %d gramos de hachís.", gramos);
	SendClientMessage(playerid, CELESTE, string);
	DarObjeto(playerid, 106, 1, gramos);
	TogglePlayerControllable(playerid, true);
	if(BolsilloCantidad[playerid][11] > 3)
	{
	    BolsilloCantidad[playerid][11] -= 3;
	}
	else if(BolsilloCantidad[playerid][11] <= 3)
	{
	    QuitarObjeto(playerid, 11);
	}
	if(BolsilloCantidad[playerid][12] > 3)
	{
	    BolsilloCantidad[playerid][12] -= 3;
	}
	else if(BolsilloCantidad[playerid][12] <= 3)
	{
	    QuitarObjeto(playerid, 12);
	}
	return 1;
}

forward LaLlamadaTrafis(playerid);
public LaLlamadaTrafis(playerid)
{
	new string[128];
	if(LlamandoTraficantes[playerid] == 1)
	{
	    SendClientMessage(playerid, GRIS, "Han descolgado el teléfono.");
	    SendClientMessage(playerid, AMARILLO, "[Voz grave] ¿Que es lo que necesita usted?");
	    SendClientMessage(playerid, CELESTE, "* Escribe 'cocaína' o 'semillas'. (Las semillas son de marihuana)");
		LlamandoTraficantes[playerid] = 2;
		return 1;
	}
	else if(LlamandoTraficantes[playerid] == 2)
	{
	    SendClientMessage(playerid, AMARILLO, "[Voz grave] Bien, te llevaremos tu pedido de cocaína en 20 minutos, ya te enviaré un sms con la información.");
	    SendClientMessage(playerid, GRIS, "Han colgado.");
		SetTimerEx("PedidoMateriales", (60000*1), 0, "d", playerid);
		format(string, sizeof(string), "* %s cuelga el teléfono móvil.", NombreJugador(playerid));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	else if(LlamandoTraficantes[playerid] == 3)
	{
	    SendClientMessage(playerid, AMARILLO, "[Voz grave] Bien, te llevaremos tu pedido de semillas en 20 minutos, ya te enviaré un sms con la información.");
	    SendClientMessage(playerid, GRIS, "Han colgado.");
		SetTimerEx("PedidoMateriales", (60000*1), 0, "d", playerid);
		format(string, sizeof(string), "* %s cuelga el teléfono móvil.", NombreJugador(playerid));
		ProxDetector(10.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		return 1;
	}
	return 1;
}

forward PedidoMateriales(playerid);
public PedidoMateriales(playerid)
{
	new string[128];
	new suerte = random(6);
	if(LlamandoTraficantes[playerid] == 3)
	{
	    format(string, sizeof(string), "* %s coge su teléfono móvil y mira un sms.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    LlamandoTraficantes[playerid] = 0;
		if(suerte == 0)
		{
		    PuntoDeEntregaTraficantes = 1;
		    SendClientMessage(playerid, AMARILLO, "[SMS] Vé a la playa de Whetstone y allí te dejé la mercancía, 100 materiales en total.");
			CajasTrafis[0] = CreateDynamicObject(1271,-2678.39990234,-2220.39990234,1.20000005,0.00000000,0.00000000,0.00000000); //object(gunbox) (1)
			SetPlayerCheckpoint(playerid, -2679.30004883,-2220.19995117,1.20000005, 5.0);
	        return 1;
		}
		else if(suerte == 1)
		{
	        PuntoDeEntregaTraficantes = 2;
		    SendClientMessage(playerid, AMARILLO, "[SMS] Vé a la entrada del río de Whetstone y allí te dejé la mercancía, 100 materiales en total.");
			CajasTrafis[0] = CreateDynamicObject(1271,-1495.69995117,-2143.89990234,2.09999990,0.00000000,0.00000000,0.00000000); //object(gunbox) (1)
			SetPlayerCheckpoint(playerid, -1493.19995117,-2143.69995117,2.00000000, 5.0);
	        return 1;
		}
		else if(suerte == 2)
		{
		    PuntoDeEntregaTraficantes = 3;
			SendClientMessage(playerid, AMARILLO, "[SMS] Vé tras la vieja fábrica de Flint Country y allí te dejé la mercancía, 100 materiales en total.");
			CajasTrafis[0] = CreateDynamicObject(1271,20.00000000,-1121.30004883,0.89999998,0.00000000,0.00000000,0.00000000); //object(gunbox) (1)
			SetPlayerCheckpoint(playerid, 19.20000076,-1122.09997559,1.29999995, 5.0);
	        return 1;
		}
	}
	else if(LlamandoTraficantes[playerid] == 2)
	{
	    LlamandoTraficantes[playerid] = 0;
	    format(string, sizeof(string), "* %s coge su teléfono móvil y mira un sms.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	    LlamandoTraficantes[playerid] = 0;
		if(suerte == 0)
		{
		    PuntoDeEntregaTraficantes = 1;
		    SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a la East Beach y allí te dejé la mercancía, 100 materiales en total.");
			CajasTrafis[0] = CreateDynamicObject(1575, 2787.6999500,-1425.3000500,15.3000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (2)
			SetPlayerCheckpoint(playerid, 2787.6999500,-1425.3000500,15.3000000, 5.0);
	        return 1;
		}
		else if(suerte == 1)
		{
	        PuntoDeEntregaTraficantes = 2;
		    SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a la Playa de Seville y allí te dejé la mercancía, 100 materiales en total.");
			CajasTrafis[0] = CreateDynamicObject(1575,2875.2998000,-2126.8994100,3.2000000,0.0000000,11.9970000,29.9980000); //object(drug_white) (4)
			SetPlayerCheckpoint(playerid, 2875.2998000,-2126.8994100,3.2000000, 5.0);
	        return 1;
		}
		else if(suerte == 2)
		{
		    PuntoDeEntregaTraficantes = 3;
			SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a Ocean Docks y allí te dejé la mercancía, 10 gramos de cocaína estarán allí.");
			CajasTrafis[0] = CreateDynamicObject(1575,2395.1999500,-2495.0000000,12.7000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (5)
			SetPlayerCheckpoint(playerid, 2395.1999500,-2495.0000000,12.7000000, 5.0);
	        return 1;
		}
		else if(suerte == 3)
		{
		    PuntoDeEntregaTraficantes = 4;
			SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a Verdant Bluffs y allí te dejé la mercancía, 10 gramos de cocaína estarán allí.");
			CajasTrafis[0] = CreateDynamicObject(1575,1397.1999500,-1892.6999500,12.5000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (6)
			SetPlayerCheckpoint(playerid, 1397.1999500,-1892.6999500,12.5000000, 5.0);
	        return 1;
		}
		else if(suerte == 4)
		{
		    PuntoDeEntregaTraficantes = 5;
			SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a Market y allí te dejé la mercancía, 10 gramos de cocaína estarán allí.");
			CajasTrafis[0] = CreateDynamicObject(1575,873.0000000,-1347.0000000,12.7000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (7)
			SetPlayerCheckpoint(playerid, 873.0000000,-1347.0000000,12.7000000, 5.0);
	        return 1;
		}
		else if(suerte == 5)
		{
		    PuntoDeEntregaTraficantes = 6;
			SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé detrás del Ammu-Nation y allí te dejé la mercancía, 10 gramos de cocaína estarán allí.");
			CajasTrafis[0] = CreateDynamicObject(1575,1292.5000000,-995.2999900,31.7000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (8)
			SetPlayerCheckpoint(playerid, 1292.5000000,-995.2999900,31.7000000, 5.0);
	        return 1;
		}
		else if(suerte == 6)
		{
		    PuntoDeEntregaTraficantes = 7;
			SendClientMessage(playerid, AMARILLO, "[SMS | Número: Privado] Vé a Jefferson y allí te dejé la mercancía, 10 gramos de cocaína estarán allí.");
			CajasTrafis[0] = CreateDynamicObject(1575,1413.9000200,-1298.5000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(drug_white) (9)
			SetPlayerCheckpoint(playerid, 1413.9000200,-1298.5000000,12.5000000, 5.0);
	        return 1;
		}
	}
	return 1;
}

public EstaEbrio(playerid)
{
    if(JugadorInfo[playerid][jAlcohol] == 0)
	{
		SetPlayerDrunkLevel(playerid, 0);
	}
	else if(JugadorInfo[playerid][jAlcohol] > 6 && JugadorInfo[playerid][jAlcohol] < 10)
	{
		SetPlayerDrunkLevel(playerid, 2000);
	}
	else if(JugadorInfo[playerid][jAlcohol] > 10 && JugadorInfo[playerid][jAlcohol] < 20)
	{
		SetPlayerDrunkLevel(playerid, 6000);
	}
	else if(JugadorInfo[playerid][jAlcohol] > 20 && JugadorInfo[playerid][jAlcohol] < 30)
	{
		SetPlayerDrunkLevel(playerid, 8000);
	}
	else if(JugadorInfo[playerid][jAlcohol] > 30)
	{
		SetPlayerDrunkLevel(playerid, 160000);
	}
	return 1;
}

forward EfectoCocaina(playerid);
public EfectoCocaina(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    ExitCamera(playerid);
    return 1;
}

forward CargarNombreFalso(playerid);
public CargarNombreFalso(playerid)
{
	new tmp[128];
	new row[128];
	new arrCoords[1][64];
	format(tmp, 128, "SELECT NombreFalso FROM usuarios WHERE id = %d LIMIT 1", JugadorInfo[playerid][jSQLID]);
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);

	split(row, arrCoords, '|');
	format(JugadorInfo[playerid][jNombreFalso],35,"%s", arrCoords[0]);
	return 1;
}

forward CargarApodo(playerid);
public CargarApodo(playerid)
{
	new tmp[128];
	new row[128];
	new arrCoords[1][64];
	format(tmp, 128, "SELECT Apodo FROM usuarios WHERE id = %d LIMIT 1", JugadorInfo[playerid][jSQLID]);
	mysql_query(database, tmp, true);
	cache_get_row(0, 0, row, database);

	split(row, arrCoords, '|');
	format(JugadorInfo[playerid][jApodo], 128, "%s", arrCoords[0]);
	return 1;
}

forward EstaEnCajero(playerid);
public EstaEnCajero(playerid)
{
	if(PlayerToPoint(playerid, 3, 1787.3000488,-1867.3000488,13.1999998) ||
	PlayerToPoint(playerid, 3, 2139.3999023,-1186.0999756,23.6000004) || PlayerToPoint(playerid, 3, 1154.6999512,-1461.9000244,15.3999996) ||
	PlayerToPoint(playerid, 3, 1593.1999512,-2335.5000000,13.1999998) || PlayerToPoint(playerid, 3, 599.5999756,-1244.8000488,17.8999996) ||
	PlayerToPoint(playerid, 3, 2177.8994141,-1767.8994141,13.1999998) || PlayerToPoint(playerid, 3, 590.2999878,-1248.5000000,17.7000008) ||
	PlayerToPoint(playerid, 3, 2303.6000977,2.4000001,26.1000004) ||
	PlayerToPoint(playerid, 3, 661.2999878,-553.2000122,16.0000000) || PlayerToPoint(playerid, 3, 1389.0000000,256.0996094,19.2000008) ||
	PlayerToPoint(playerid, 3, 1118.6279,-1525.7467,15.7969) || PlayerToPoint(playerid, 3, 1109.9320,-1522.6152,15.7969) ||
	PlayerToPoint(playerid, 3, 1118.1466,-1527.4922,15.7969) || PlayerToPoint(playerid, 3, 1109.3107,-1524.2908,15.7969) ||
	PlayerToPoint(playerid, 3, 1117.5450,-1529.2114,15.7969) || PlayerToPoint(playerid, 3, 1108.6771,-1526.0399,15.7969))
	{
	    return 1;
	}
	return 0;
}

forward EstaEnBiblio(playerid);
public EstaEnBiblio(playerid)
{
    if(PlayerToPoint(playerid, 5, 1311.9247,-892.9830,39.6559) || PlayerToPoint(playerid, 5, 1310.5763,-882.8118,39.6559) || PlayerToPoint(playerid, 5, 1323.8638,-893.9576,44.0309))
	{
	    return 1;
	}
	return 0;
}

forward Estudiando(playerid, idioma);
public Estudiando(playerid, idioma)
{
    EstaEstudiando[playerid] = 0;
	new string[128], lengua[50];
	JugadorInfo[playerid][jEIdiomas][idioma] ++;
	if(idioma == 0) { lengua = "Japonés"; }
	else if(idioma == 1) { lengua = "Italiano"; }
	else if(idioma == 2) { lengua = "Ruso"; }
	else if(idioma == 3) { lengua = "Alemán"; }
	else if(idioma == 4) { lengua = "Francés"; }
	else if(idioma == 5) { lengua = "Chino"; }
	format(string, sizeof(string), "* Has mejorado tu habilidad de %s, ahora es de %d.", lengua, JugadorInfo[playerid][jEIdiomas][idioma]);
	SendClientMessage(playerid, CELESTE, string);
	TogglePlayerControllable(playerid, true);
	if(JugadorInfo[playerid][jEIdiomas][idioma] == 7)
	{
	    JugadorInfo[playerid][jIdiomas][idioma] = 1;
	    format(string, sizeof(string), "* Ya sabes algo de %s, a partir de ahora podrás comenzar a entender y hablar un poco.", lengua);
	    SendClientMessage(playerid, CELESTE, string);
	    SaveValues(playerid, "Lenguajes");
	}
	else if(JugadorInfo[playerid][jEIdiomas][idioma] == 20)
	{
	    JugadorInfo[playerid][jIdiomas][idioma] = 2;
	    format(string, sizeof(string), "* Ya eres un experto en %s, ahora podrás entenderlo y hablarlo sin problema.", lengua);
	    SendClientMessage(playerid, CELESTE, string);
		SaveValues(playerid, "Lenguajes");
	}
	return 1;
}

forward MensajeCanalAdmin(color,const string[],level);
public MensajeCanalAdmin(color,const string[],level)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(JugadorInfo[i][jAdmin] >= level && OcultarChatAdmin[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

forward SinColoresJugadores(playerid);
public SinColoresJugadores(playerid)
{
	new t = GetMaxPlayers();
    for (new i; i < t; i++)
    {
        SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	}
	SetPlayerColor(playerid,0xFFFFFF00);
	return 1;
}

forward MensajeCanalEquipo(color,const string[],level);
public MensajeCanalEquipo(color,const string[],level)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(JugadorInfo[i][jAdmin] >= level && OcultarChatEquipo[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock PayDay(playerid)
{
	if(EstaAFK[playerid] == 1) return SendClientMessage(playerid, GRIS, "No recibiste el PayDay porque estabas AFK.");
	new miembro = JugadorInfo[playerid][jMiembro];
	new rango = JugadorInfo[playerid][jRango];
	new trabajo = JugadorInfo[playerid][jTrabajo];
	new sueldo = 0, string[128];
	switch(trabajo)
	{
	    case 1:
	    {
	        sueldo += 65;
	    }
	    case 10:
	    {
	        sueldo += 90;
	    }
	}
	switch(miembro)
	{
	    case 0:
	    {
	        if(trabajo != 0)
	        {
	        	sueldo += 100;
			}
	    }
	    case 1:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 200; }
	            case 2: { sueldo += 300; }
	            case 3: { sueldo += 500; }
	            case 4: { sueldo += 750; }
	            case 5: { sueldo += 1000; }
	            case 6: { sueldo += 900; }
	            case 7: { sueldo += 1400; }
	            case 8: { sueldo += 1700; }
	        }
	    }
	    case 2:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 100; }
	            case 2: { sueldo += 300; }
	            case 3: { sueldo += 500; }
	            case 4: { sueldo += 700; }
	            case 5: { sueldo += 900; }
	            case 6: { sueldo += 1000; }
	            case 7: { sueldo += 1200; }
	            case 8: { sueldo += 1700; }
	        }
	    }
	    case 3:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 100; }
	            case 2: { sueldo += 250; }
	            case 3: { sueldo += 400; }
	            case 4: { sueldo += 600; }
	            case 5: { sueldo += 800; }
	            case 6: { sueldo += 1100; }
	            case 7: { sueldo += 1400; }
	            case 8: { sueldo += 1700; }
	        }
	    }
	    case 4:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 300; }
	            case 2: { sueldo += 500; }
	            case 3: { sueldo += 600; }
	            case 4: { sueldo += 700; }
	            case 5: { sueldo += 900; }
	            case 6: { sueldo += 700; }
	            case 7: { sueldo += 1200; }
	            case 8: { sueldo += 2000; }
	        }
	    }
	    case 5:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 100; }
	            case 2: { sueldo += 250; }
	            case 3: { sueldo += 400; }
	            case 4: { sueldo += 600; }
	            case 5: { sueldo += 800; }
	            case 6: { sueldo += 1100; }
	            case 7: { sueldo += 1400; }
	            case 8: { sueldo += 1600; }
	        }
	    }
	    case 6:
	    {
	        switch (rango)
	        {
	            case 1: { sueldo += 300; }
	            case 2: { sueldo += 400; }
	            case 3: { sueldo += 600; }
	            case 4: { sueldo += 800; }
	            case 5: { sueldo += 900; }
	            case 6: { sueldo += 1000; }
	            case 7: { sueldo += 1200; }
	            case 8: { sueldo += 1700; }
	        }
	    }
	}
	SendClientMessage(playerid, AMARILLO, "_____| Paga semanal |_____");
	if(miembro == 0 && trabajo == 0)
	{
	    format(string, sizeof(string), "[+] Ayuda del gobierno: {258D25}$100");
	    sueldo = 100;
	}
	else
	{
	    format(string, sizeof(string), "[+] Sueldo: {258D25}$%d", sueldo);
	}
	SendClientMessage(playerid, BLANCO, string);

	if(JugadorInfo[playerid][jCasa] != NOEXISTE)
	{
	    format(string, sizeof(string), "[+] Impuestos de la casa: {EA1919}$%d", Impuestos[0]);
	    SendClientMessage(playerid, BLANCO, string);
	    sueldo -= Impuestos[0];
	}
	if(JugadorInfo[playerid][jNegocio] != NOEXISTE)
	{
	    format(string, sizeof(string), "[+] Impuestos del negocio: {EA1919}$%d", Impuestos[1]);
	    SendClientMessage(playerid, BLANCO, string);
	    sueldo -= Impuestos[1];
	}
	for(new i = 0; i < 3; i++)
	{
		if(JugadorInfo[playerid][jCoches][i] != NOEXISTE)
		{
		    format(string, sizeof(string), "[+] Impuestos del coche %d: {EA1919}$%d", JugadorInfo[playerid][jCoches][i], Impuestos[2]);
		    SendClientMessage(playerid, BLANCO, string);
		    sueldo -= Impuestos[2];
		}
	}

	if(JugadorInfo[playerid][jCuentaPrincipal] == 0)
	{
	    //No tiene cuenta principal establecida
		JugadorInfo[playerid][jDinero] += sueldo;
	}
	else
	{
	    //Tiene cuenta principal establecida
	    new tmp[128], row[60], sql_in[256], mensaje[256];
		format(tmp, 128, "SELECT saldo FROM cuentasbancarias WHERE numerocuenta = %d LIMIT 1", JugadorInfo[playerid][jCuentaPrincipal]);
		mysql_query(database, tmp, true);
		cache_get_row(0, 0, row, database);
		new saldo_actual = strval(row);

		format(sql_in, sizeof(sql_in), "UPDATE cuentasbancarias SET saldo = %d WHERE numerocuenta = %d", saldo_actual+sueldo, JugadorInfo[playerid][jCuentaPrincipal]);
		mysql_query(database, sql_in, false);

		format(mensaje, sizeof(mensaje), "Ingreso de paga %d", sueldo);
//		InsertarMovimiento(JugadorInfo[playerid][jCuentaPrincipal], mensaje);

	    SendClientMessage(playerid, AMARILLO, "___________________________");
		if(sueldo > 0){
		format(string, sizeof(string), "[+] Balance total de la paga: {258D25}$%d", sueldo);
		SendClientMessage(playerid, BLANCO, string);
		}
		else
		{
		format(string, sizeof(string), "[+] Balance total de la paga: {FF0000}$%d", sueldo);
		SendClientMessage(playerid, BLANCO, string);
		}
		format(string, sizeof(string), "[+] Balance anterior en el banco: {258D25}$%d", saldo_actual);
		SendClientMessage(playerid, BLANCO, string);
		format(string, sizeof(string), "[+] Balance actual en el banco: {258D25}$%d", saldo_actual+sueldo);
		SendClientMessage(playerid, BLANCO, string);
		SendClientMessage(playerid, AMARILLO, "__________________________");
	}

	// SUBIR NIVELES
	if(JugadorInfo[playerid][jTrabajo] != 0)
	{
	    JugadorInfo[playerid][jTiempoTrabajo]++;
	}
	JugadorInfo[playerid][jHorasJugadas] ++;
	JugadorInfo[playerid][jRespeto] ++;
	JugadorInfo[playerid][jPayDay] = 1;
	JugadorInfo[playerid][jEntrenado] = 0;
	ComprobarNivel(playerid);
	return 1;
}

forward ComprobarNivel(playerid);
public ComprobarNivel(playerid){

	new resultado = ((JugadorInfo[playerid][jNivel] * 4) + SUBIR_NIVEL);
	if(JugadorInfo[playerid][jRespeto] >= resultado)
	{
	    JugadorInfo[playerid][jNivel] ++;
	    JugadorInfo[playerid][jRespeto] = 0;
	    SaveValues(playerid, "Datos");
	}
    SetPlayerScore(playerid, JugadorInfo[playerid][jNivel]);
    return 1;
}

forward ForzarCerradura(playerid, casa, suerte, objeto, Float:x, Float:y, Float:z, tipo);
public ForzarCerradura(playerid, casa, suerte, objeto, Float:x, Float:y, Float:z, tipo)
{
	new string[128];
	if(tipo == 1)
	{
		if(PlayerToPoint(playerid, 2, x, y, z))
		{
			if(objeto == 1) // Ganzúa
			{
			    if(suerte < 0) { suerte = random(8); }
			    if(suerte == 0 || suerte == 2 || suerte == 4 || suerte == 8 || suerte == 12 || suerte == 16 || suerte == 24 || suerte == 28)
			    {
			        SendClientMessage(playerid, CELESTE, "¡Vaya!, has tenido suerte y has conseguido abrir la puerta de la casa.");
			        CasaInfo[casa][cAbierta] = 1;
			        GameTextForPlayer(playerid, "~w~¡Casa ~g~abierta~w~!", 3000, 6);
			        GuardarCasa(casa);
			        if(BolsilloCantidad[playerid][11] > 1) { BolsilloCantidad[playerid][11]--; GuardarBolsillos(playerid); }
			        else { QuitarObjeto(playerid, 11); }
			        new habilidad = random(4);
			        if(habilidad == 0)
			        {
		                SendClientMessage(playerid, CELESTE, "* No has conseguido ningún punto de habilidad esta vez.");
			        }
			        else if(habilidad == 1 || habilidad == 2)
			        {
			            SendClientMessage(playerid, CELESTE, "* Has conseguido un punto de habilidad.");
						JugadorInfo[playerid][jHabilidad][0] ++;
			        }
			        else
			        {
			            new r = random(4);
			            format(string, sizeof(string), "* Has conseguido %d puntos de habilidad.", r+1);
			            JugadorInfo[playerid][jHabilidad][0] += (r+1);
			        }
			        return 1;
			    }
			    else
			    {
			        JugadorInfo[playerid][jUltimoTrabajo] = 20;
			        if(BolsilloCantidad[playerid][11] > 1) { BolsilloCantidad[playerid][11]--; GuardarBolsillos(playerid); }
			        else { QuitarObjeto(playerid, 11); }
					SendClientMessage(playerid, CELESTE, "¡Vaya!, se ha roto la ganzúa, deberás probar suerte de nuevo.");
					if(CasaInfo[casa][cAlarma] > 0)
					{
						SonarAlarma(casa, CasaInfo[casa][cAlarma]);
					}
			    }
			}
			else if(objeto == 2) // Palanca
			{
			    if(suerte < 0) { suerte = random(8); }
			    if(suerte == 0 || suerte == 2 || suerte == 4 || suerte == 8 || suerte == 12 || suerte == 16 || suerte == 24 || suerte == 28)
			    {
			        SendClientMessage(playerid, CELESTE, "¡Vaya!, has tenido suerte y has conseguido abrir la puerta de la casa.");
			        CasaInfo[casa][cAbierta] = 1;
			        GameTextForPlayer(playerid, "~w~¡Casa ~g~abierta~w~!", 3000, 6);
			        GuardarCasa(casa);
			        new habilidad = random(4);
			        if(habilidad == 0)
			        {
		                SendClientMessage(playerid, CELESTE, "* No has conseguido ningún punto de habilidad esta vez.");
			        }
			        else if(habilidad == 1 || habilidad == 2)
			        {
			            SendClientMessage(playerid, CELESTE, "* Has conseguido un punto de habilidad.");
						JugadorInfo[playerid][jHabilidad][0] ++;
			        }
			        else
			        {
			            new r = random(4);
			            format(string, sizeof(string), "* Has conseguido %d puntos de habilidad.", r+1);
			            JugadorInfo[playerid][jHabilidad][0] += (r+1);
			        }
			        return 1;
			    }
			    else
			    {
			        JugadorInfo[playerid][jUltimoTrabajo] = 20;
			        QuitarObjeto(playerid, 11);
					SendClientMessage(playerid, CELESTE, "¡Vaya!, se ha roto la palanca, deberás probar suerte de nuevo.");
					if(CasaInfo[casa][cAlarma] > 0)
					{
						SonarAlarma(casa, CasaInfo[casa][cAlarma]);
					}
			    }
			}
		}
		else
		{
		    JugadorInfo[playerid][jUltimoTrabajo] = 20;
		    SendClientMessage(playerid, ROJO_OSCURO, "¡Vaya!, te has movido mientras forzabas la cerradura y has fallado.");
		}
		return 1;
	}
	else
	{
	    if(PlayerToPoint(playerid, 2, x, y, z))
		{
			if(objeto == 1) // Ganzúa
			{
			    if(suerte < 0) { suerte = random(8); }
			    if(suerte == 0 || suerte == 2 || suerte == 4 || suerte == 8 || suerte == 12 || suerte == 16 || suerte == 24 || suerte == 28)
			    {
			        SendClientMessage(playerid, CELESTE, "¡Vaya!, has tenido suerte y has conseguido abrir la puerta del negocio.");
			        NegocioInfo[casa][nCerrada] = 0;
			        GameTextForPlayer(playerid, "~w~¡Negocio ~g~abierto~w~!", 3000, 6);
			        GuardarNegocio(casa);
			        if(BolsilloCantidad[playerid][11] > 1) { BolsilloCantidad[playerid][11]--; GuardarBolsillos(playerid); }
			        else { QuitarObjeto(playerid, 11); }
			        new habilidad = random(4);
			        if(habilidad == 0)
			        {
		                SendClientMessage(playerid, CELESTE, "* No has conseguido ningún punto de habilidad esta vez.");
			        }
			        else if(habilidad == 1 || habilidad == 2)
			        {
			            SendClientMessage(playerid, CELESTE, "* Has conseguido un punto de habilidad.");
						JugadorInfo[playerid][jHabilidad][0] ++;
			        }
			        else
			        {
			            new r = random(4);
			            format(string, sizeof(string), "* Has conseguido %d puntos de habilidad.", r+1);
			            JugadorInfo[playerid][jHabilidad][0] += (r+1);
			        }
			        return 1;
			    }
			    else
			    {
			        JugadorInfo[playerid][jUltimoTrabajo] = 20;
			        if(BolsilloCantidad[playerid][11] > 1) { BolsilloCantidad[playerid][11]--; GuardarBolsillos(playerid); }
			        else { QuitarObjeto(playerid, 11); }
					SendClientMessage(playerid, CELESTE, "¡Vaya!, se ha roto la ganzúa, deberás probar suerte de nuevo.");
					if(CasaInfo[casa][cAlarma] > 0)
					{
						SonarAlarma(casa, CasaInfo[casa][cAlarma]);
					}
			    }
			}
			else if(objeto == 2) // Palanca
			{
			    if(suerte < 0) { suerte = random(8); }
			    if(suerte == 0 || suerte == 2 || suerte == 4 || suerte == 8 || suerte == 12 || suerte == 16 || suerte == 24 || suerte == 28)
			    {
			        SendClientMessage(playerid, CELESTE, "¡Vaya!, has tenido suerte y has conseguido abrir la puerta del negocio.");
			        NegocioInfo[casa][nCerrada] = 0;
			        GameTextForPlayer(playerid, "~w~¡Negocio ~g~abierto~w~!", 3000, 6);
			        GuardarNegocio(casa);
			        new habilidad = random(4);
			        if(habilidad == 0)
			        {
		                SendClientMessage(playerid, CELESTE, "* No has conseguido ningún punto de habilidad esta vez.");
			        }
			        else if(habilidad == 1 || habilidad == 2)
			        {
			            SendClientMessage(playerid, CELESTE, "* Has conseguido un punto de habilidad.");
						JugadorInfo[playerid][jHabilidad][0] ++;
			        }
			        else
			        {
			            new r = random(4);
			            format(string, sizeof(string), "* Has conseguido %d puntos de habilidad.", r+1);
			            JugadorInfo[playerid][jHabilidad][0] += (r+1);
			        }
			        return 1;
			    }
			    else
			    {
			        JugadorInfo[playerid][jUltimoTrabajo] = 20;
			        QuitarObjeto(playerid, 11);
					SendClientMessage(playerid, CELESTE, "¡Vaya!, se ha roto la palanca, deberás probar suerte de nuevo.");
			    }
			}
		}
		else
		{
		    JugadorInfo[playerid][jUltimoTrabajo] = 20;
		    SendClientMessage(playerid, ROJO_OSCURO, "¡Vaya!, te has movido mientras forzabas la cerradura y has fallado.");
		}
	}
    return 1;
}

stock SonarAlarma(casa, tipo)
{
	if(tipo == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(PlayerToPoint(i, 15.0, CasaInfo[casa][cx], CasaInfo[casa][cy], CasaInfo[casa][cz]))
		    {
		        GameTextForPlayer(i, "~<~~<~~y~PIIIIIIIIIIIIIIII    PIIIIIIIIIIIIIIIIII~>~~>~", 15000, 6);
		        SendClientMessage(i, CELESTE, "* Comienzas a escuchar la alarma de una casa cercana....");
		    }
		}
		return 1;
	}
	else
	{
	    new ZoneName[128], string[128];
		GetPlayer2DZone(ZoneName, 128, CasaInfo[casa][cx], CasaInfo[casa][cy]);
		format(string, sizeof(string), "[Central] {FFFFFF}Nos avisan de que la casa LS%d localizada en %s está siendo robada, corto.", CasaInfo[casa][cID], ZoneName);
		MensajeDeFaccion(1, AZUL, string);
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(PlayerToPoint(i, 15.0, CasaInfo[casa][cx], CasaInfo[casa][cy], CasaInfo[casa][cz]))
		    {
		        GameTextForPlayer(i, "~y~PIIIIIIIIIIIIIIII PIIIIIIIIIIIIIIIIII", 20000, 3);
		        SendClientMessage(i, CELESTE, "* Comienzas a escuchar una alarma de una casa cercana....");
		    }
		}
		return 1;
	}
}

forward RobarCasa(playerid, casa, Float:x, Float:y, Float:z);
public RobarCasa(playerid, casa, Float:x, Float:y, Float:z)
{
	new string[128];
	EstaRobando[playerid] = 0;
	QuitarObjeto(playerid, 11);
	QuitarObjeto(playerid, 12);
	if(PlayerToPoint(playerid, 3.0, x, y, z))
	{
		new suerte = random(3);
		if(suerte == 0)
		{
		    for(new i = 0; i < 4; i++)
		    {
		        if(Robos[playerid][i] == NOEXISTE)
		        {
		        	Robos[playerid][i] = 1;
		        	break;
				}
		    }
		    new habilidad = random(4);
	        if(habilidad == 0)
	        {
                SendClientMessage(playerid, CELESTE, "* No has conseguido ningún punto de habilidad esta vez.");
	        }
	        else if(habilidad == 1 || habilidad == 2)
	        {
	            SendClientMessage(playerid, CELESTE, "* Has conseguido un punto de habilidad.");
				JugadorInfo[playerid][jHabilidad][0] ++;
	        }
	        else
	        {
	            new r = random(4);
	            format(string, sizeof(string), "* Has conseguido %d puntos de habilidad.", r+1);
	            JugadorInfo[playerid][jHabilidad][0] += (r+1);
	        }
			new objeto = random(8);
			if(objeto == 0) { DarObjeto(playerid, 108, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado una PlayStation."); }
			else if(objeto == 1) { DarObjeto(playerid, 109, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado una PlayStation, pero está estropeada."); }
			else if(objeto == 2) { DarObjeto(playerid, 110, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado un video."); }
			else if(objeto == 3) { DarObjeto(playerid, 111, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado un video, pero está estropeado."); }
			else if(objeto == 4) { DarObjeto(playerid, 112, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado un ordenador."); }
			else if(objeto == 5) { DarObjeto(playerid, 113, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado una caja."); }
			else if(objeto == 6) { DarObjeto(playerid, 114, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado una televisión."); }
			else if(objeto == 7) { DarObjeto(playerid, 115, 1, 1); SendClientMessage(playerid, CELESTE, "* Has encontrado una televisión, pero está rota."); }
		}
		else
		{
			SendClientMessage(playerid, ROJO_OSCURO, "¡Vaya!, no has encontrado ningún objeto, sigue buscando...");
			return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid, ROJO_OSCURO, "¡Vaya!, te has movido de donde estabas buscando y por eso no encontraste nada.");
	}
	return 1;
}

stock ObtenerVehiculoPorID(matricula)
{
	for(new i = 0; i < sizeof(AutoInfo); i++)
	{
	    if(AutoInfo[i][aID] == matricula)
	    {
	        return i;
	    }
	}
	return -1;
}

stock GuardarCuenta(playerid)
{
	new query[1800], Float:x, Float:y, Float:z, Float:angle, interior_id, virtual_world;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	interior_id = GetPlayerInterior(playerid);
	virtual_world = GetPlayerVirtualWorld(playerid);

	strcat(query, "UPDATE `usuarios` SET ");
	strcat_format(query, sizeof(query), "`Posiciones` = '%f,%f,%f,%f,%d,%d',", x, y, z, angle, interior_id, virtual_world);
	strcat_format(query, sizeof(query), "`Admin` = '%d',", JugadorInfo[playerid][jAdmin]);
	strcat_format(query, sizeof(query), "`Negocio` = '%d',", JugadorInfo[playerid][jNegocio]);
	strcat_format(query, sizeof(query), "`Baneado` = '%d',", JugadorInfo[playerid][jBaneado]);
	strcat_format(query, sizeof(query), "`TBan` = '%d',", JugadorInfo[playerid][jTBan]);
	strcat_format(query, sizeof(query), "`Skin` = '%d',", JugadorInfo[playerid][jRopa]);
	strcat_format(query, sizeof(query), "`PlacaPolicia` = '%d',", JugadorInfo[playerid][jPlaca]);
	strcat_format(query, sizeof(query), "`Advertencias` = '%d',", JugadorInfo[playerid][jAdvertencias]);
	strcat_format(query, sizeof(query), "`Almacen` = '%d',", JugadorInfo[playerid][jAlmacen]);
	strcat_format(query, sizeof(query), "`Taller` = '%d',", JugadorInfo[playerid][jTaller]);
	strcat_format(query, sizeof(query), "`HorasJugadas` = '%d',", JugadorInfo[playerid][jHorasJugadas]);
	strcat_format(query, sizeof(query), "`Vida` = '%f',", JugadorInfo[playerid][jVida]);
	strcat_format(query, sizeof(query), "`Chaleco` = '%f',", JugadorInfo[playerid][jChaleco]);
	strcat_format(query, sizeof(query), "`CuentaPrincipal` = '%d',", JugadorInfo[playerid][jCuentaPrincipal]);
	strcat_format(query, sizeof(query), "`Dinero` = '%d',", JugadorInfo[playerid][jDinero]);
	strcat_format(query, sizeof(query), "`Datos` = '%d,%d,%d,%d,%d',", JugadorInfo[playerid][jEdad], JugadorInfo[playerid][jSexo], JugadorInfo[playerid][jNivel], JugadorInfo[playerid][jRespeto], JugadorInfo[playerid][jPayDay]);
	strcat_format(query, sizeof(query), "`Casas` = '%d,%d,%d',", JugadorInfo[playerid][jCasa], JugadorInfo[playerid][jCasaPrestada], JugadorInfo[playerid][jCasaAlq]);
	strcat_format(query, sizeof(query), "`Coches` = '%d,%d,%d,%d,%d,%d',", JugadorInfo[playerid][jCoches][0], JugadorInfo[playerid][jCoches][1], JugadorInfo[playerid][jCoches][2], JugadorInfo[playerid][jCochesPrestado][0], JugadorInfo[playerid][jCochesPrestado][1], JugadorInfo[playerid][jCochesPrestado][2]);
	strcat_format(query, sizeof(query), "`Faccion` = '%d,%d,%d',", JugadorInfo[playerid][jLider], JugadorInfo[playerid][jMiembro], JugadorInfo[playerid][jRango]);
	strcat_format(query, sizeof(query), "`Carcel` = '%d,%d',", JugadorInfo[playerid][jEncarcelado], JugadorInfo[playerid][jTiempoEncarcelado]);
	strcat_format(query, sizeof(query), "`Medicos` = '%d,%d,%d',", JugadorInfo[playerid][jHerido], JugadorInfo[playerid][jEnfermedad], JugadorInfo[playerid][jReceta]);
	strcat_format(query, sizeof(query), "`Necesidades` = '%d,%d,%d',", JugadorInfo[playerid][jHambre], JugadorInfo[playerid][jEnergia], JugadorInfo[playerid][jAlcohol]);
	strcat_format(query, sizeof(query), "`Documentacion` = '%d,%d',", JugadorInfo[playerid][jDNI], JugadorInfo[playerid][jTiempoDNI]);
	strcat_format(query, sizeof(query), "`Trabajo` = '%d,%d,%d',", JugadorInfo[playerid][jTrabajo], JugadorInfo[playerid][jTiempoTrabajo], JugadorInfo[playerid][jUltimoTrabajo]);
	strcat_format(query, sizeof(query), "`Servicio` = '%d,%d',", JugadorInfo[playerid][jServicio], JugadorInfo[playerid][jUniforme]);
	strcat_format(query, sizeof(query), "`Licencias` = '%d,%d,%d,%d,%d,%d,%d,%d',", JugadorInfo[playerid][jLicencias][0], JugadorInfo[playerid][jLicencias][1], JugadorInfo[playerid][jLicencias][2], JugadorInfo[playerid][jLicencias][3], JugadorInfo[playerid][jLicencias][4], JugadorInfo[playerid][jLicencias][5], JugadorInfo[playerid][jLicencias][6], JugadorInfo[playerid][jLicencias][7]);
	strcat_format(query, sizeof(query), "`DocFalsa` = '%s,%d',", JugadorInfo[playerid][jNombreFalso], JugadorInfo[playerid][jDNIFalso]);
	strcat_format(query, sizeof(query), "`LicenciasFalsas` = '%d,%d,%d,%d,%d,%d,%d,%d',", JugadorInfo[playerid][jFLicencia][0], JugadorInfo[playerid][jFLicencia][1], JugadorInfo[playerid][jFLicencia][2], JugadorInfo[playerid][jFLicencia][3], JugadorInfo[playerid][jFLicencia][4], JugadorInfo[playerid][jFLicencia][5], JugadorInfo[playerid][jFLicencia][6], JugadorInfo[playerid][jFLicencia][7]);
	strcat_format(query, sizeof(query), "`Lenguajes` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", JugadorInfo[playerid][jBiblio], JugadorInfo[playerid][jIdiomas][0], JugadorInfo[playerid][jIdiomas][1], JugadorInfo[playerid][jIdiomas][2], JugadorInfo[playerid][jIdiomas][3], JugadorInfo[playerid][jIdiomas][4], JugadorInfo[playerid][jIdiomas][5], JugadorInfo[playerid][jIdiomas][6], JugadorInfo[playerid][jEIdiomas][0], JugadorInfo[playerid][jEIdiomas][1], JugadorInfo[playerid][jEIdiomas][2], JugadorInfo[playerid][jEIdiomas][3], JugadorInfo[playerid][jEIdiomas][4], JugadorInfo[playerid][jEIdiomas][5], JugadorInfo[playerid][jEIdiomas][6]);
	strcat_format(query, sizeof(query), "`Premium` = '%d,%d',", JugadorInfo[playerid][jPremium], JugadorInfo[playerid][jTiempoPremium]);
	strcat_format(query, sizeof(query), "`PuntosRol` = '%d,%d',", JugadorInfo[playerid][jPuntosRol][0], JugadorInfo[playerid][jPuntosRol][1]);
	strcat_format(query, sizeof(query), "`Habilidad` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", JugadorInfo[playerid][jHabilidad][0], JugadorInfo[playerid][jHabilidad][1], JugadorInfo[playerid][jHabilidad][2], JugadorInfo[playerid][jHabilidad][3], JugadorInfo[playerid][jHabilidad][4], JugadorInfo[playerid][jHabilidad][5], JugadorInfo[playerid][jHabilidad][6], JugadorInfo[playerid][jHabilidad][7], JugadorInfo[playerid][jHabilidad][8], JugadorInfo[playerid][jHabilidad][9]);
	strcat_format(query, sizeof(query), "`Fisico` = '%d,%d',", JugadorInfo[playerid][jFuerza], JugadorInfo[playerid][jResistencia]);
	strcat_format(query, sizeof(query), "`Jugando` = '%d',", JugadorInfo[playerid][jJugando]);
	strcat_format(query, sizeof(query), "`BolsilloID` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", BolsilloID[playerid][0], BolsilloID[playerid][1], BolsilloID[playerid][2], BolsilloID[playerid][3], BolsilloID[playerid][4], BolsilloID[playerid][5], BolsilloID[playerid][6], BolsilloID[playerid][7], BolsilloID[playerid][8], BolsilloID[playerid][9], BolsilloID[playerid][10], BolsilloID[playerid][11], BolsilloID[playerid][12]);
	strcat_format(query, sizeof(query), "`BolsilloTipo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d',", BolsilloTipo[playerid][0], BolsilloTipo[playerid][1], BolsilloTipo[playerid][2], BolsilloTipo[playerid][3], BolsilloTipo[playerid][4], BolsilloTipo[playerid][5], BolsilloTipo[playerid][6], BolsilloTipo[playerid][7], BolsilloTipo[playerid][8], BolsilloTipo[playerid][9], BolsilloTipo[playerid][10], BolsilloTipo[playerid][11], BolsilloTipo[playerid][12]);
	strcat_format(query, sizeof(query), "`BolsilloCantidad` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d'", BolsilloCantidad[playerid][0], BolsilloCantidad[playerid][1], BolsilloCantidad[playerid][2], BolsilloCantidad[playerid][3], BolsilloCantidad[playerid][4], BolsilloCantidad[playerid][5], BolsilloCantidad[playerid][6], BolsilloCantidad[playerid][7], BolsilloCantidad[playerid][8], BolsilloCantidad[playerid][9], BolsilloCantidad[playerid][10], BolsilloCantidad[playerid][11], BolsilloCantidad[playerid][12]);
	strcat_format(query, sizeof(query), " WHERE `id` = '%d'", JugadorInfo[playerid][jSQLID]);
	mysql_query(database, query, false);

	//printf("%s", query);
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

forward Basura(playerid);
public Basura(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new pt = Basurero[playerid];
	    if(pt >= 1 && pt <= 15)
	    {
		    SendClientMessage(playerid, CELESTE, "* Has recogido la basura, continua con la recolección.");
		    TogglePlayerControllable(playerid,true);
		}
  		if(pt == 16)
	    {
		    SendClientMessage(playerid, CELESTE, "* Basura cargada. El camión esta lleno, regresa a el basurero para recibir la paga.");
		    TogglePlayerControllable(playerid,true);
		}
	}
}

forward AntiSobeit(playerid);
public AntiSobeit(playerid)
{
	#pragma unused playerid
	return 1;
}

stock EspaciosMaletero(i)
{
    new espacios;
    switch(i)
    {
        case 400: { espacios = 7; }
        case 401: { espacios = 5; }
        case 402: { espacios = 5; }
        case 403: { espacios = 10; }
        case 404: { espacios = 5; }
        case 405: { espacios = 5; }
        case 406: { espacios = 10; }
        case 407: { espacios = 10; }
        case 408: { espacios = 10; }
        case 409: { espacios = 5; }
        case 410: { espacios = 4; }
        case 411: { espacios = 3; }
        case 412: { espacios = 5; }
        case 413: { espacios = 9; }
        case 414: { espacios = 10; }
        case 415: { espacios = 3; }
        case 416: { espacios = 10; }
        case 417: { espacios = 10; }
        case 418: { espacios = 6; }
        case 419: { espacios = 5; }
        case 420: { espacios = 5; }
        case 421: { espacios = 5; }
        case 422: { espacios = 6; }
        case 423: { espacios = 10; }
        case 424: { espacios = 2; }
        case 425: { espacios = 2; }
        case 426: { espacios = 5; }
        case 427: { espacios = 10; }
        case 428: { espacios = 10; }
        case 429: { espacios = 4; }
        case 430: { espacios = 8; }
        case 431: { espacios = 10; }
        case 432: { espacios = 2; }
        case 433: { espacios = 10; }
        case 434: { espacios = 2; }
        case 435: { espacios = 10; }
        case 436: { espacios = 4; }
        case 437: { espacios = 10; }
        case 438: { espacios = 5; }
        case 439: { espacios = 4; }
        case 440: { espacios = 9; }
        case 442: { espacios = 1; }
        case 443: { espacios = 2; }
        case 444: { espacios = 2; }
        case 445: { espacios = 5; }
        case 446: { espacios = 1; }
        case 447: { espacios = 2; }
        case 448: { espacios = 2; }
        case 449: { espacios = 10; }
        case 450: { espacios = 10; }
        case 451: { espacios = 3; }
        case 452: { espacios = 4; }
        case 453: { espacios = 8; }
        case 454: { espacios = 10; }
        case 455: { espacios = 10; }
        case 456: { espacios = 10; }
        case 457: { espacios = 2; }
        case 458: { espacios = 5; }
        case 459: { espacios = 8; }
        case 460: { espacios = 2; }
        case 461: { espacios = 2; }
        case 462: { espacios = 1; }
        case 463: { espacios = 2; }
        case 466: { espacios = 4; }
        case 467: { espacios = 5; }
        case 468: { espacios = 2; }
        case 469: { espacios = 4; }
        case 470: { espacios = 8; }
        case 471: { espacios = 2; }
        case 472: { espacios = 4; }
        case 473: { espacios = 3; }
        case 474: { espacios = 4; }
        case 475: { espacios = 4; }
        case 476: { espacios = 4; }
        case 477: { espacios = 4; }
        case 478: { espacios = 7; }
        case 479: { espacios = 6; }
        case 480: { espacios = 4; }
        case 482: { espacios = 10; }
        case 483: { espacios = 6; }
        case 484: { espacios = 10; }
        case 485: { espacios = 2; }
        case 486: { espacios = 2; }
        case 487: { espacios = 10; }
        case 488: { espacios = 10; }
        case 489: { espacios = 8; }
        case 490: { espacios = 8; }
        case 491: { espacios = 4; }
        case 492: { espacios = 6; }
        case 493: { espacios = 8; }
        case 494: { espacios = 3; }
        case 495: { espacios = 2; }
        case 496: { espacios = 3; }
        case 497: { espacios = 10; }
        case 498: { espacios = 10; }
        case 499: { espacios = 10; }
        case 500: { espacios = 2; }
        case 502: { espacios = 2; }
        case 503: { espacios = 2; }
        case 504: { espacios = 2; }
        case 505: { espacios = 8; }
        case 506: { espacios = 3; }
        case 507: { espacios = 5; }
        case 508: { espacios = 10; }
        case 511: { espacios = 4; }
        case 512: { espacios = 4; }
        case 513: { espacios = 4; }
        case 514: { espacios = 2; }
        case 515: { espacios = 2; }
        case 516: { espacios = 5; }
        case 517: { espacios = 5; }
        case 518: { espacios = 4; }
        case 519: { espacios = 10; }
        case 520: { espacios = 2; }
        case 521: { espacios = 2; }
        case 522: { espacios = 2; }
        case 523: { espacios = 4; }
        case 524: { espacios = 2; }
        case 525: { espacios = 4; }
        case 526: { espacios = 5; }
        case 527: { espacios = 5; }
        case 528: { espacios = 10; }
        case 529: { espacios = 4; }
        case 530: { espacios = 1; }
        case 531: { espacios = 1; }
        case 532: { espacios = 1; }
        case 533: { espacios = 4; }
        case 534: { espacios = 6; }
        case 535: { espacios = 6; }
        case 536: { espacios = 5; }
        case 537: { espacios = 10; }
        case 538: { espacios = 10; }
        case 540: { espacios = 4; }
        case 541: { espacios = 4; }
        case 542: { espacios = 4; }
        case 543: { espacios = 6; }
        case 544: { espacios = 10; }
        case 545: { espacios = 3; }
        case 546: { espacios = 4; }
        case 547: { espacios = 5; }
        case 548: { espacios = 10; }
        case 549: { espacios = 6; }
        case 550: { espacios = 5; }
        case 551: { espacios = 5; }
        case 552: { espacios = 10; }
        case 553: { espacios = 10; }
        case 554: { espacios = 8; }
        case 555: { espacios = 4; }
        case 556: { espacios = 2; }
        case 557: { espacios = 2; }
        case 558: { espacios = 4; }
        case 559: { espacios = 3; }
        case 560: { espacios = 5; }
        case 561: { espacios = 8; }
        case 562: { espacios = 4; }
        case 563: { espacios = 10; }
        case 565: { espacios = 3; }
        case 566: { espacios = 4; }
        case 567: { espacios = 4; }
        case 568: { espacios = 1; }
        case 569: { espacios = 10; }
        case 570: { espacios = 10; }
        case 571: { espacios = 1; }
        case 572: { espacios = 1; }
        case 573: { espacios = 2; }
        case 574: { espacios = 2; }
        case 575: { espacios = 3; }
        case 576: { espacios = 6; }
        case 577: { espacios = 10; }
        case 578: { espacios = 2; }
        case 579: { espacios = 8; }
        case 580: { espacios = 5; }
        case 581: { espacios = 2; }
        case 582: { espacios = 10; }
        case 583: { espacios = 1; }
        case 585: { espacios = 4; }
        case 586: { espacios = 4; }
        case 587: { espacios = 3; }
        case 588: { espacios = 8; }
        case 589: { espacios = 3; }
        case 592: { espacios = 10; }
        case 593: { espacios = 4; }
        case 595: { espacios = 8; }
        case 596: { espacios = 6; }
        case 597: { espacios = 6; }
        case 598: { espacios = 6; }
        case 599: { espacios = 6; }
        case 600: { espacios = 7; }
        case 601: { espacios = 4; }
        case 602: { espacios = 4; }
        case 603: { espacios = 4; }
        case 609: { espacios = 10; }
	}
	return espacios;
}

stock ActualizarMaletero(i)
{
	new sql[1024], string[512];
	format(string, sizeof(string), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", AutoInfo[i][aMalID][0], AutoInfo[i][aMalID][1], AutoInfo[i][aMalID][2], AutoInfo[i][aMalID][3], AutoInfo[i][aMalID][4], AutoInfo[i][aMalID][5],
 	AutoInfo[i][aMalID][6], AutoInfo[i][aMalID][7], AutoInfo[i][aMalID][8], AutoInfo[i][aMalID][9]);
 	format(sql, sizeof(sql), "UPDATE vehiculos SET MalID = '%s' WHERE id = '%d'", string, AutoInfo[i][aID]);
 	mysql_query(database, sql, false);
 	format(string, sizeof(string), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", AutoInfo[i][aMalTipo][0], AutoInfo[i][aMalTipo][1], AutoInfo[i][aMalTipo][2], AutoInfo[i][aMalTipo][3], AutoInfo[i][aMalTipo][4], AutoInfo[i][aMalTipo][5],
 	AutoInfo[i][aMalTipo][6], AutoInfo[i][aMalTipo][7], AutoInfo[i][aMalTipo][8], AutoInfo[i][aMalTipo][9]);
 	format(sql, sizeof(sql), "UPDATE vehiculos SET MalTipo = '%s' WHERE id = '%d'", string, AutoInfo[i][aID]);
 	mysql_query(database, sql, false);
 	format(string, sizeof(string), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", AutoInfo[i][aMalCantidad][0], AutoInfo[i][aMalCantidad][1], AutoInfo[i][aMalCantidad][2], AutoInfo[i][aMalCantidad][3], AutoInfo[i][aMalCantidad][4], AutoInfo[i][aMalCantidad][5],
 	AutoInfo[i][aMalCantidad][6], AutoInfo[i][aMalCantidad][7], AutoInfo[i][aMalCantidad][8], AutoInfo[i][aMalCantidad][9]);
 	format(sql, sizeof(sql), "UPDATE vehiculos SET MalCantidad = '%s' WHERE id = '%d'", string, AutoInfo[i][aID]);
 	mysql_query(database, sql, false);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    new Float:danio, Float:vida, Float:chaleco, string[256];
	new fuerza = JugadorInfo[playerid][jFuerza];
	new parte[50], calibre[50];
	if(bodypart == 3) parte = "torso";
	else if(bodypart == 4) parte = "ingle";
	else if(bodypart == 5) parte = "mano izquierda";
	else if(bodypart == 6) parte = "mano derecha";
	else if(bodypart == 7) parte = "pierna izquierda";
	else if(bodypart == 8) parte = "pierna derecha";
	else if(bodypart == 9) parte = "cabeza";

	if(weaponid == 22) calibre = ".45 ACP";
	else if(weaponid == 23) calibre = ".45 ACP";
	else if(weaponid == 24) calibre = ".44 Magnum";
	else if(weaponid == 25) calibre = ".375 AD";
	else if(weaponid == 26) calibre = ".338 AD";
	else if(weaponid == 27) calibre = ".277 AD";
	else if(weaponid == 28) calibre = "5,5mm";
	else if(weaponid == 29) calibre = "10mm";
	else if(weaponid == 30) calibre = "7,62mm";
	else if(weaponid == 31) calibre = "5,56mm";
	else if(weaponid == 32) calibre = "9mm";
	else if(weaponid == 33) calibre = "10,8mm";
	else if(weaponid == 34) calibre = ".223 AD";
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(amount == 2.64)
		{
			if(GetPlayerWeapon(issuerid) > 21 && GetPlayerWeapon(issuerid) < 34)
			{
				switch(fuerza)
				{
					case 0..10: danio = 11.5;
					case 11..20: danio = 12.0;
					case 21..30: danio = 12.5;
					case 31..40: danio = 13.0;
					case 41..50: danio = 13.5;
					case 51..60: danio = 14.0;
					case 61..70: danio = 14.5;
					case 71..80: danio = 15.0;
					case 81..90: danio = 15.5;
					case 91..100: danio = 16.0;
				}
			}
		}
		else
		{
			if(weaponid >= 0 && weaponid < 16)
			{
				switch(weaponid)
				{
					case 0:
					{
						switch(bodypart)
						{
							case 3:
							{
								switch(fuerza)
								{
									case 0..10: danio = 3.0;
									case 11..20: danio = 3.5;
									case 21..30: danio = 4.0;
									case 31..40: danio = 4.5;
									case 41..50: danio = 5.0;
									case 51..60: danio = 5.5;
									case 61..70: danio = 6.0;
									case 71..80: danio = 6.5;
									case 81..90: danio = 7.0;
									case 91..100: danio = 7.5;
								}
							}
							case 4:
							{
								switch(fuerza)
								{
									case 0..10: danio = 4.5;
									case 11..20: danio = 5.0;
									case 21..30: danio = 5.5;
									case 31..40: danio = 6.0;
									case 41..50: danio = 6.5;
									case 51..60: danio = 7.0;
									case 61..70: danio = 7.5;
									case 71..80: danio = 8.0;
									case 81..90: danio = 8.5;
									case 91..100: danio = 9.0;
								}
							}
							case 5..8:
							{
								switch(fuerza)
								{
									case 0..10: danio = 2.0;
									case 11..20: danio = 2.5;
									case 21..30: danio = 3.0;
									case 31..40: danio = 3.5;
									case 41..50: danio = 4.0;
									case 51..60: danio = 4.5;
									case 61..70: danio = 5.0;
									case 71..80: danio = 5.5;
									case 81..90: danio = 6.0;
									case 91..100: danio = 6.5;
								}
							}
							case 9:
							{
								switch(fuerza)
								{
									case 0..10: danio = 4.0;
									case 11..20: danio = 4.5;
									case 21..30: danio = 5.0;
									case 31..40: danio = 5.5;
									case 41..50: danio = 6.0;
									case 51..60: danio = 6.5;
									case 61..70: danio = 7.0;
									case 71..80: danio = 7.5;
									case 81..90: danio = 8.0;
									case 91..100: danio = 8.5;
								}
							}
						}
					}
					case 1:
					{
						switch(bodypart)
						{
							case 3:
							{
								switch(fuerza)
								{
									case 0..10: danio = 4.0;
									case 11..20: danio = 4.5;
									case 21..30: danio = 5.0;
									case 31..40: danio = 5.5;
									case 41..50: danio = 6.0;
									case 51..60: danio = 6.5;
									case 61..70: danio = 7.0;
									case 71..80: danio = 7.5;
									case 81..90: danio = 8.0;
									case 91..100: danio = 8.5;
								}
							}
							case 4:
							{
								switch(fuerza)
								{
									case 0..10: danio = 5.5;
									case 11..20: danio = 6.0;
									case 21..30: danio = 6.5;
									case 31..40: danio = 7.0;
									case 41..50: danio = 7.5;
									case 51..60: danio = 8.0;
									case 61..70: danio = 8.5;
									case 71..80: danio = 9.0;
									case 81..90: danio = 9.5;
									case 91..100: danio = 10.0;
								}
							}
							case 5..8:
							{
								switch(fuerza)
								{
									case 0..10: danio = 3.0;
									case 11..20: danio = 3.5;
									case 21..30: danio = 4.0;
									case 31..40: danio = 4.5;
									case 41..50: danio = 5.0;
									case 51..60: danio = 5.5;
									case 61..70: danio = 6.0;
									case 71..80: danio = 6.5;
									case 81..90: danio = 7.0;
									case 91..100: danio = 7.5;
								}
							}
							case 9:
							{
								switch(fuerza)
								{
									case 0..10: danio = 5.0;
									case 11..20: danio = 5.5;
									case 21..30: danio = 6.0;
									case 31..40: danio = 6.5;
									case 41..50: danio = 7.0;
									case 51..60: danio = 7.5;
									case 61..70: danio = 8.0;
									case 71..80: danio = 8.5;
									case 81..90: danio = 9.0;
									case 91..100: danio = 9.5;
								}
							}
						}
					}
					case 2,3,5,6,7,15:
					{
						switch(bodypart)
						{
							case 3:
							{
								switch(fuerza)
								{
								case 0..10: danio = 6.0;
								case 11..20: danio = 6.5;
								case 21..30: danio = 7.0;
								case 31..40: danio = 7.5;
								case 41..50: danio = 8.0;
								case 51..60: danio = 8.5;
								case 61..70: danio = 9.0;
								case 71..80: danio = 9.5;
								case 81..90: danio = 10.0;
								case 91..100: danio = 10.5;
								}
							}
							case 4:
							{
								switch(fuerza)
								{
									case 0..10: danio = 10.5;
									case 11..20: danio = 11.0;
									case 21..30: danio = 11.5;
									case 31..40: danio = 12.0;
									case 41..50: danio = 12.5;
									case 51..60: danio = 13.0;
									case 61..70: danio = 13.5;
									case 71..80: danio = 14.0;
									case 81..90: danio = 14.5;
									case 91..100: danio = 15.0;
								}
							}
							case 5..8:
							{
								switch(fuerza)
								{
								case 0..10: danio = 5.0;
								case 11..20: danio = 5.5;
								case 21..30: danio = 6.0;
								case 31..40: danio = 6.5;
								case 41..50: danio = 7.0;
								case 51..60: danio = 7.5;
								case 61..70: danio = 8.0;
								case 71..80: danio = 8.5;
								case 81..90: danio = 9.0;
								case 91..100: danio = 9.5;
								}
							}
							case 9:
							{
								switch(fuerza)
								{
									case 0..10: danio = 10.0;
									case 11..20: danio = 10.5;
									case 21..30: danio = 11.0;
									case 31..40: danio = 11.5;
									case 41..50: danio = 12.0;
									case 51..60: danio = 12.5;
									case 61..70: danio = 13.0;
									case 71..80: danio = 13.5;
									case 81..90: danio = 14.0;
									case 91..100: danio = 14.5;
								}
							}
						}
					}
					case 4:
					{
						switch(bodypart)
						{
							case 3:
							{
								switch(fuerza)
								{
									case 0..10: danio = 10.0;
									case 11..20: danio = 10.5;
									case 21..30: danio = 11.0;
									case 31..40: danio = 11.5;
									case 41..50: danio = 12.0;
									case 51..60: danio = 12.5;
									case 61..70: danio = 13.0;
									case 71..80: danio = 13.5;
									case 81..90: danio = 14.0;
									case 91..100: danio = 14.5;
								}
							}
							case 4:
							{
								switch(fuerza)
								{
									case 0..10: danio = 12.5;
									case 11..20: danio = 13.0;
									case 21..30: danio = 13.5;
									case 31..40: danio = 14.0;
									case 41..50: danio = 14.5;
									case 51..60: danio = 15.0;
									case 61..70: danio = 15.5;
									case 71..80: danio = 16.0;
									case 81..90: danio = 16.5;
									case 91..100: danio = 17.0;
								}
							}
							case 5..8:
							{
								switch(fuerza)
								{
									case 0..10: danio = 6.0;
									case 11..20: danio = 6.5;
									case 21..30: danio = 7.0;
									case 31..40: danio = 7.5;
									case 41..50: danio = 8.0;
									case 51..60: danio = 8.5;
									case 61..70: danio = 9.0;
									case 71..80: danio = 9.5;
									case 81..90: danio = 10.0;
									case 91..100: danio = 10.5;
								}
							}
							case 9:
							{
								switch(fuerza)
								{
									case 0..10: danio = 12.0;
									case 11..20: danio = 12.5;
									case 21..30: danio = 13.0;
									case 31..40: danio = 13.5;
									case 41..50: danio = 14.0;
									case 51..60: danio = 14.5;
									case 61..70: danio = 15.0;
									case 71..80: danio = 15.5;
									case 81..90: danio = 16.0;
									case 91..100: danio = 16.5;
								}
							}
						}
					}
					case 8:
					{
						switch(bodypart)
						{
							case 3,4:
							{
								switch(fuerza)
								{
									case 0..10: danio = 15.0;
									case 11..20: danio = 15.5;
									case 21..30: danio = 16.0;
									case 31..40: danio = 16.5;
									case 41..50: danio = 17.0;
									case 51..60: danio = 17.5;
									case 61..70: danio = 18.0;
									case 71..80: danio = 18.5;
									case 81..90: danio = 19.0;
									case 91..100: danio = 19.5;
								}
							}
							case 5..8:
							{
								switch(fuerza)
								{
									case 0..10: danio = 12.0;
									case 11..20: danio = 12.5;
									case 21..30: danio = 13.0;
									case 31..40: danio = 13.5;
									case 41..50: danio = 14.0;
									case 51..60: danio = 14.5;
									case 61..70: danio = 15.0;
									case 71..80: danio = 15.5;
									case 81..90: danio = 16.0;
									case 91..100: danio = 16.5;
								}
							}
							case 9: danio = 200;
						}
					}
					default: danio = amount;
				}
			}
			if(weaponid > 21 && weaponid < 52)
			{
				switch(weaponid)
				{
					case 22:
					{
						switch(bodypart)
						{
							case 3,4: danio = 45.0;
							case 5..8: danio = 20.0;
							case 9: danio = 200.0;
						}
					}
					case 23:{
						if(JugadorInfo[issuerid][jMiembro] == 1){
							if(Paralizado[playerid] == 0){
								danio = 0.0;
								format(string, sizeof(string), "* %s le efectuó un disparo con un táser disparador de cables a %s, paralizándolo.", NombreJugador(issuerid), NombreJugador(playerid));
								ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
								SendClientMessage(issuerid, CELESTE, "* Ha logrado paralizarlo con su táser, para quitarle el parálisis, utilice el comando '/qcables' [ID Jugador].");
								SendClientMessage(playerid, CELESTE, "* Usted ha sido paralizado, para que se le quite el parálisis, debe esperar a que le quiten los cables.");
								GameTextForPlayer(playerid, "Paralizado", 3000, 3);
								TogglePlayerControllable(playerid, 0);
								ApplyAnimation(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
								ApplyAnimation(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
								Paralizado[playerid] = 1;
							}
						}
						else{
							danio = 40.0;
						}
					}
					case 24:
					{
						switch(bodypart)
						{
							case 3,4: danio = 70.0;
							case 5..8: danio = 35.0;
							case 9: danio = 200.0;
						}
					}
					case 25:{
						if(JugadorInfo[issuerid][jMiembro] == 1 && BolasDeGoma[issuerid] == 1){
							if(Paralizado[playerid] == 0){
								danio = 0.0;
								format(string, sizeof(string), "* %s le efectuó un disparo con una escopeta de balas de goma a %s, paralizándolo.", NombreJugador(issuerid), NombreJugador(playerid));
								ProxDetector(15.0, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
								SendClientMessage(issuerid, CELESTE, "* Ha logrado paralizarlo con su escopeta de balas de goma, se le quitará su parálisis en 15 segundos.");
								SendClientMessage(playerid, CELESTE, "* Usted ha sido paralizado, se le quitará la parálisis en 15 segundos.");
								GameTextForPlayer(playerid, "~w~Paralizado", 3000, 3);
								TogglePlayerControllable(playerid, 0);
								ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
								ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
								Paralizado[playerid] = 1;
								SetTimerEx("LevantarseParalizado", 15000, false, "i", playerid);
							}
						}
						else{
							switch(bodypart)
							{
								case 3,4: danio = 90.0;
								case 5..8: danio = 50.0;
								case 9: danio = 200.0;
							}
						}
					}
					case 26..27:
					{
						switch(bodypart)
						{
							case 3,4: danio = 90.0;
							case 5..8: danio = 50.0;
							case 9: danio = 200.0;
						}
					}
					case 28,32:
					{
						switch(bodypart)
						{
							case 3,4: danio = 45.0;
							case 5..8: danio = 20.0;
							case 9: danio = 200.0;
						}
					}
					case 29:
					{
						switch(bodypart)
						{
							case 3,4: danio = 55.0;
							case 5..8: danio = 30.0;
							case 9: danio = 200.0;
						}
					}
					case 30:
					{
						switch(bodypart)
						{
							case 3,4: danio = 65.0;
							case 5..8: danio = 40.0;
							case 9: danio = 200.0;
						}
					}
					case 31:
					{
						switch(bodypart)
						{
							case 3,4: danio = 60.0;
							case 5..8: danio = 35.0;
							case 9: danio = 200.0;
						}
					}
					case 33:
					{
						switch(bodypart)
						{
							case 3,4: danio = 80.0;
							case 5..8: danio = 40.0;
							case 9: danio = 200.0;
						}
					}
					case 34:
					{
						switch(bodypart)
						{
							case 3,4: danio = 100.0;
							case 5..8: danio = 60.0;
							case 9: danio = 200.0;
						}
					}
					default: danio = amount;
				}
				FadePlayerScreen(playerid, 0xE20000FF, 25);
			}
		}
		GetPlayerHealth(playerid, vida);
		GetPlayerArmour(playerid, chaleco);
		if(chaleco)
		{
			if(chaleco > danio) SetPlayerArmourEx(playerid, chaleco-danio);
			else
			{
				SetPlayerArmourEx(playerid, 0.0);
				chaleco = danio-chaleco;
				if(chaleco >= vida) SetPlayerHealthEx(playerid, 0.0);
				else SetPlayerHealthEx(playerid, vida-chaleco);
			}
		}
		else
		{
			if(vida > danio) SetPlayerHealthEx(playerid, vida-danio);
			else SetPlayerHealthEx(playerid, 0.0);
		}
		if(weaponid >= 22 && weaponid <= 34)
		{
		    new texto[128];
			SetPlayerChatBubble(playerid, "Está herido", ROJO, 10.0, 99999);
			if(bodypart == 3) JugadorInfo[playerid][jHeridas][3] ++;
			else if(bodypart == 4) JugadorInfo[playerid][jHeridas][2] ++;
			else if(bodypart == 5) JugadorInfo[playerid][jHeridas][4] ++;
			else if(bodypart == 6) JugadorInfo[playerid][jHeridas][5] ++;
			else if(bodypart == 7) JugadorInfo[playerid][jHeridas][1] ++;
			else if(bodypart == 8) JugadorInfo[playerid][jHeridas][0] ++;
			else if(bodypart == 9) JugadorInfo[playerid][jHeridas][6] ++;
			format(texto, sizeof(texto), "* Has recibido un impacto en %s con una bala de calibre %s.", parte, calibre);
			SendClientMessage(playerid, NARANJA, texto);
		}
	}
	return 1;
}

forward ConectarBots(i);
public ConectarBots(i)
{
    /*SetTimerEx("ConectarBots", 600, 0, "d", (i+1));
	if(i == 1)
	{
	    ConnectNPC("Bot_1","abogados_1");
	}
	else if(i == 2)
	{
		ConnectNPC("Bot_2","abogados_2");
	}
	else if(i == 3)
	{
		ConnectNPC("Bot_3","aeropuerto");
    }
	else if(i == 4)
	{
		ConnectNPC("Bot_4","armeria");
    }
	else if(i == 5)
	{
		ConnectNPC("Bot_5","autoescuela_1");
    }
	else if(i == 6)
	{
		ConnectNPC("Bot_6","autoescuela_2");
    }
	else if(i == 7)
	{
		ConnectNPC("Bot_7","ayunta_1");
    }
	else if(i == 8)
	{
		ConnectNPC("Bot_8","ayunta_2");
    }
	else if(i == 9)
	{
		ConnectNPC("Bot_9","camioneros");
    }
	else if(i == 3)
	{
		ConnectNPC("Bot_10","casa_gob1");
    }
	else if(i == 10)
	{
		ConnectNPC("Bot_11","casa_gob2");
    }
	else if(i == 11)
	{
		ConnectNPC("Bot_12","casa_gob3");
    }
	else if(i == 12)
	{
		ConnectNPC("Bot_13","casa_gob4");
    }
	else if(i == 13)
	{
		ConnectNPC("Bot_14","cc");
    }
	else if(i == 14)
	{
		ConnectNPC("Bot_15","deposito_pd");
    }
	else if(i == 15)
	{
		ConnectNPC("Bot_16","entrada_garaje");
    }
	else if(i == 16)
	{
		ConnectNPC("Bot_17","garaje_md");
    }
	else if(i == 26)
	{
		ConnectNPC("Bot_27","lsrtv");
    }
	else if(i == 27)
	{
		ConnectNPC("Bot_28","peaje_1");
    }
	else if(i == 28)
	{
		ConnectNPC("Bot_29","peaje_2");
    }
	else if(i == 29)
	{
		ConnectNPC("Bot_30","peaje_3");
    }
	else if(i == 30)
	{
		ConnectNPC("Bot_31","peaje_4");
    }
	else if(i == 31)
	{
		ConnectNPC("Bot_32","prision_1");
    }
	else if(i == 32)
	{
		ConnectNPC("Bot_33","prision_2");
    }
	else if(i == 33)
	{
		ConnectNPC("Bot_34","prision_3");
    }
	else if(i == 34)
	{
		ConnectNPC("Bot_35","puerta_principal");
    }
	else if(i == 35)
	{
		ConnectNPC("Bot_36","puerta_secundaria");
    }
	else if(i == 36)
	{
		ConnectNPC("Bot_37","taxis");
	}
	return 1;*/
}

stock Float: CalculadorDistancia(playerid, id)
{
	new Float: distanciacalculada, Float: px2, Float: py2, Float: pz2;
	new Float: px1, Float: py1, Float: pz1;
	GetPlayerPos(playerid, px1,py1,pz1);
	px2=NumeroCiervosInfo[id][Ciervos_PosX];
	py2=NumeroCiervosInfo[id][Ciervos_PosY];
	pz2=NumeroCiervosInfo[id][Ciervos_PosZ];
	distanciacalculada = floatsqroot(floatpower(floatabs(floatsub(px2,px1)),2)+floatpower(floatabs(floatsub(py2,py1)),2)+floatpower(floatabs(floatsub(pz2,pz1)),2));
	return distanciacalculada;

}
stock Float: CalculadorDistanciaEntrePuntos(Float:x1,Float:y1,Float:z1 ,Float:x2,Float:y2,Float:z2)
{

	new Float: distancalculada = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return distancalculada;

}

ActivarParadoCiervo_Cazadores(objetoID) //OnObjectMoved(objectid)
{
	//new prueba[100];
	for(new i=0;i<MAX_CIERVOS;i++)
	{
		if(objetoID == NumeroCiervosInfo[i][Id_Ciervos])
		{
			NumeroCiervosInfo[i][Ciervos_Moviendose] = 0;
			return 1;
		}
	}
	return 1;
}

stock RecogerCarneCiervo(playerid, i) //terminar esta funcion!
{
	//TogglePlayerControllable(playerid, 0);

	HidePlayerProgressBar(playerid, barrita);
	ShowPlayerProgressBar(playerid, barrita);
	SetPlayerProgressBarMaxValue(playerid, barrita,  100);
	SetPlayerProgressBarValue(playerid,barrita, 0);
	UpdatePlayerProgressBar(playerid,barrita);

	new rand = random(15) + 30;
	CarneObtenida[playerid] += rand;
	JugadorInfo[playerid][jHabilidad][4]++;  //añadido

	if(CarneObtenida[playerid] > 75)
	{
	    SendClientMessage(playerid, CELESTE, "* Has cogido suficiente carne por ahora, vé a venderla.");
	    EstaCazando[playerid] = 0;
	}

	NumeroCiervosInfo[i][Ciervos_RecogiendoCarne] = 1;


	if(JugadorInfo[playerid][jHabilidad][4] < 20)
	{
		Contador_Caza[playerid] = SetTimerEx("ProgresoBarritaCazadores", 1000, 1, "i", playerid); //poner un killtimer al desconectarse
		Contador2_Caza[i] = SetTimerEx("DesapareciendoCiervo", 60000, false, "i",i);  //1minuto
	}
	else if(JugadorInfo[playerid][jHabilidad][4] >=20 && JugadorInfo[playerid][jHabilidad][4] < 60)
	{
		Contador_Caza[playerid] = SetTimerEx("ProgresoBarritaCazadores", 1000, 1, "i", playerid); //poner un killtimer al desconectarse
		Contador2_Caza[i] = SetTimerEx("DesapareciendoCiervo", 30000, false, "i",i);  //30 sgundos
	}
	else if(JugadorInfo[playerid][jHabilidad][4] >=60 && JugadorInfo[playerid][jHabilidad][4] < 999999)
	{
		Contador_Caza[playerid] = SetTimerEx("ProgresoBarritaCazadores", 1000, 1, "i", playerid); //poner un killtimer al desconectarse
		Contador2_Caza[i] = SetTimerEx("DesapareciendoCiervo", 10000, false, "i",i); //10 segundos
	}
}

forward ProgresoBarritaCazadores(playerid);
public ProgresoBarritaCazadores(playerid)
{
	if(JugadorInfo[playerid][jHabilidad][4] >=60 && JugadorInfo[playerid][jHabilidad][4] < 999999) //10 segundos
	{
		if(seg_Caza[playerid]<=9)
		{
			if(GetPlayerAnimationIndex(playerid))
			{
				new animlib[32];
				new animname[32];
				new msg[128];
				GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
				format(msg, 128, "Animacion actual: %s %s", animlib, animname);

				if(!strcmp(animlib, "BOMBER") && !strcmp(animname, "BOM_Plant_Loop", true))
				{
					//SendClientMessage(playerid, 0xFFFFFFFF, "Es la animacion de bomba!");
					//no es necesario hacer nadaa aqui no importa y dejar el if conforme está es para asegurarse de que está haciendo la animacion

				}
				else
				{
					SetPlayerPos(playerid, POSICIONPLAYER_X[playerid], POSICIONPLAYER_Y[playerid], POSICIONPLAYER_Z[playerid]);
					SetPlayerFacingAngle(playerid, POSICIONPLAYERANGULO[playerid]);
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.1, 1, 0, 0, 1, 0, 1);
				}
			}
			BarValue_Caza[playerid]+=10;
			SetPlayerProgressBarValue(playerid,barrita, BarValue_Caza[playerid]);
			UpdatePlayerProgressBar(playerid,barrita);
			seg_Caza[playerid]+=1;
		}
		else
		{
			TogglePlayerControllable(playerid, 1);
			KillTimer(Contador_Caza[playerid]);
			seg_Caza[playerid]=0;
			BarValue_Caza[playerid]=0;
			Contador_Caza[playerid]=-1;
			HidePlayerProgressBar(playerid, barrita);
		}
	}
	else if(JugadorInfo[playerid][jHabilidad][4] >=20 && JugadorInfo[playerid][jHabilidad][4] < 60) //30 segundos
	{
		if(seg_Caza[playerid]<=29)
		{
			if(GetPlayerAnimationIndex(playerid))
			{
				new animlib[32];
				new animname[32];
				new msg[128];
				GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
				format(msg, 128, "Animacion actual: %s %s", animlib, animname);

				if(!strcmp(animlib, "BOMBER") && !strcmp(animname, "BOM_Plant_Loop", true))
				{
					//SendClientMessage(playerid, 0xFFFFFFFF, "Es la animacion de bomba!");
					//no es necesario hacer nadaa aqui no importa y dejar el if conforme está es para asegurarse de que está haciendo la animacion

				}
				else
				{
					SetPlayerPos(playerid, POSICIONPLAYER_X[playerid], POSICIONPLAYER_Y[playerid], POSICIONPLAYER_Z[playerid]);
					SetPlayerFacingAngle(playerid, POSICIONPLAYERANGULO[playerid]);
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.1, 1, 0, 0, 1, 0, 1);
				}
			}

			BarValue_Caza[playerid]+=5;
			SetPlayerProgressBarMaxValue(playerid, barrita,  150);

			SetPlayerProgressBarValue(playerid,barrita, BarValue_Caza[playerid]);
			UpdatePlayerProgressBar(playerid,barrita);
			seg_Caza[playerid]+=1;
		}
		else
		{
			TogglePlayerControllable(playerid, 1);
			KillTimer(Contador_Caza[playerid]);
			seg_Caza[playerid]=0;
			BarValue_Caza[playerid]=0;
			Contador_Caza[playerid]=-1;
			HidePlayerProgressBar(playerid, barrita);
		}
	}
	else if(JugadorInfo[playerid][jHabilidad][4] < 20)
	{
		if(seg_Caza[playerid]<=59)
		{
			if(GetPlayerAnimationIndex(playerid))
			{
				new animlib[32];
				new animname[32];
				new msg[128];
				GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
				format(msg, 128, "Animacion actual: %s %s", animlib, animname);

				if(!strcmp(animlib, "BOMBER") && !strcmp(animname, "BOM_Plant_Loop", true))
				{
					//SendClientMessage(playerid, 0xFFFFFFFF, "Es la animacion de bomba!");
					//no es necesario hacer nadaa aqui no importa y dejar el if conforme está es para asegurarse de que está haciendo la animacion

				}
				else
				{
					SetPlayerPos(playerid, POSICIONPLAYER_X[playerid], POSICIONPLAYER_Y[playerid], POSICIONPLAYER_Z[playerid]);
					SetPlayerFacingAngle(playerid, POSICIONPLAYERANGULO[playerid]);
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.1, 1, 0, 0, 1, 0, 1);
				}
			}
			BarValue_Caza[playerid]+=5;
			SetPlayerProgressBarMaxValue(playerid, barrita,  300);

			SetPlayerProgressBarValue(playerid,barrita, BarValue_Caza[playerid]);
			UpdatePlayerProgressBar(playerid,barrita);
			seg_Caza[playerid]+=1;
		}
		else
		{
			TogglePlayerControllable(playerid, 1);
			KillTimer(Contador_Caza[playerid]);
			seg_Caza[playerid]=0;
			BarValue_Caza[playerid]=0;
			Contador_Caza[playerid]=-1;
			HidePlayerProgressBar(playerid, barrita);
		}

	}

	return 1;
}

forward DesapareciendoCiervo(i);
public DesapareciendoCiervo(i)
{
	GetObjectPos(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]);
	MoveObject(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]-3, 0.1 ,NumeroCiervosInfo[i][Ciervos_RotX],0,0);

	NumeroCiervosInfo[i][Ciervos_RecogiendoCarne] = 1;
	NumeroCiervosInfo[i][Ciervos_Minuto_Respawn] = 1;
	NumeroCiervosInfo[i][Ciervos_Empieza_Respawn] = 1;

}

forward RespawnCiervo(i);
public RespawnCiervo(i) //vuelve el ciervo a la posicion inicial
{
	NumeroCiervosInfo[i][Ciervos_Muertos] = 0;
	NumeroCiervosInfo[i][Ciervos_RecogiendoCarne] = 0;
	NumeroCiervosInfo[i][Ciervos_Minuto_Respawn] = -1;
	NumeroCiervosInfo[i][Ciervos_RecogiendoCarne] = 0;
	DestruirCiervo(i);
	CrearCiervo(i);

}

forward MoverCiervo(i);
public MoverCiervo(i)
{
	if((NumeroCiervosInfo[i][Ciervos_Muertos] != 1) && (NumeroCiervosInfo[i][Ciervos_Moviendose] != 1))
	{
		new Float:X,Float:Y,Float:Z;
		new Float:azarX,Float:azarY,Float:azarZ;
		new Float:azarVelocidad,Float:angulo;
		new Float:PosicionX,Float:PosicionY;//,Float:PosicionZ; //posiciones para el ciervo
		new Float:AnguloResultado;
		new Float:dX, Float:dY;
		new Float: X2, Float: Y2;


		GetObjectPos(NumeroCiervosInfo[i][Id_Ciervos],X,Y,Z);

		new rand1=random(2),rand2=random(2);

		if(rand1==0) azarX=X+10+float(random(10));
		else azarX=X-10-float(random(10));

		if(rand2==0) azarY=Y+10+float(random(10));
		else azarY=Y-10-float(random(10));

		azarZ=GetPointZPos(azarX,azarY,azarZ);
		azarVelocidad=4+float(random(6));
		//******************************************




		//********************************************

		if(floatabs(azarZ-Z)<3.0)
		{

			if(SiCiervoEstaAreaCaza(azarX,azarY))
			{

				PosicionX = X; //NumeroCiervosInfo[i][Ciervos_PosX];
				PosicionY = Y; //NumeroCiervosInfo[i][Ciervos_PosY];

				X2 = azarX;
				Y2 = azarY;

				dX = X2 - PosicionX;
				dY = Y2 - PosicionY;

				new Float: DiviXY = floatdiv(dX,dY);
				new Float: DiviYX = floatdiv(dY,dX);
				new Float: AnguloFinal;

				if((dY > 0) && (dX > 0)) //primer cuadrante
				{
					new Float: NuevaDiviYX = floatabs(DiviYX);
					AnguloResultado = atan(NuevaDiviYX);
					AnguloFinal = 270 + AnguloResultado;
				}
				else if((dY > 0) && (dX < 0)) //segundo cuadrante
				{
					new Float: NuevaDiviXY = floatabs(DiviXY);
					AnguloResultado = atan(NuevaDiviXY);
					AnguloFinal = AnguloResultado;
				}
				else if((dY < 0) && (dX < 0)) //tercer cuadrante
				{
					new Float: NuevaDiviYX = floatabs(DiviYX);
					AnguloResultado = atan(NuevaDiviYX);
					AnguloFinal = 90 + AnguloResultado;
				}
				else if((dY < 0) && (dX > 0)) //cuarto cuadrante
				{
					new Float: NuevaDiviXY = floatabs(DiviXY);
					AnguloResultado = atan(NuevaDiviXY);
					AnguloFinal = 180 + AnguloResultado;
				}

				angulo =  AnguloFinal+90;

			//***********************************************
				/*new art[200];
				format(art, sizeof(art),"Ciervo %d : POsX-ini:%f, POsY-ini:%f, NewPosX:%f, NewPosY:%f, ---Angulo:%f",i,X,Y,azarX,azarY, angulo);
				SendClientMessageToAll(Rojo, art);
				*/
				GetPointZPos(azarX,azarY,azarZ);
				SetObjectRot(NumeroCiervosInfo[i][Id_Ciervos],0,0,angulo);
				MoveObject(NumeroCiervosInfo[i][Id_Ciervos],azarX,azarY,azarZ+0.25,azarVelocidad ,0,0,angulo);

				NumeroCiervosInfo[i][Ciervos_Moviendose] = 1;

				//SetTimerEx("MoverCiervo",10000+random(40000),false,"i",i);
				return 1;
			}
			else
			{
				MoverCiervo(i);
				return 1;
			}
		}
		else
		{
			MoverCiervo(i);
			return 1;
		}
	}
	else return 1;
}

stock MatandoCiervos(playerid)
{
	new Float:px ,Float:py, Float:pz;
	GetPlayerPos(playerid, px,py,pz);

	for(new i=0;i<MAX_CIERVOS;i++)
	{
		GetObjectPos(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]);

		if(IsPlayerInRangeOfPoint(playerid, MAX_DISTANCIA , NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]))
		{
			GetObjectPos(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]);
			if(IsPlayerAimingAt(playerid, NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ], RANGO_PUNTERIA))
			{
				if(NumeroCiervosInfo[i][Ciervos_Muertos]!= 1)
				{
					if(Contador_Caza[playerid]== -1)
					{
						if(GetPlayerWeapon(playerid) == 33)
						{
							NumeroCiervosInfo[i][Ciervos_RotX]=90;
							NumeroCiervosInfo[i][Ciervos_Muertos]=1;
							StopObject(NumeroCiervosInfo[i][Id_Ciervos]);
							NumeroCiervosInfo[i][Ciervos_PosZ] = GetPointZPos(NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY]);  //Coge la z para que no se quede en el aire
							MoveObject(NumeroCiervosInfo[i][Id_Ciervos],NumeroCiervosInfo[i][Ciervos_PosX] ,NumeroCiervosInfo[i][Ciervos_PosY],NumeroCiervosInfo[i][Ciervos_PosZ]+0.05, 0.2 ,NumeroCiervosInfo[i][Ciervos_RotX],0,0);
							SendClientMessage(playerid, CELESTE,"* Has matado un ciervo. Dirígete hacia el y usa '/coger carne' para coger su carne.");
							GameTextForPlayer(playerid, " ~g~Has matado a un ciervo",2000, 4);
						}
						else SendClientMessage(playerid, ROJO_OSCURO,"* Con esta arma no conseguirás matar nada. Necesitas un rifle.");
					}
					else SendClientMessage(playerid, ROJO_OSCURO, "* No puedes cazar si estas recogiendo carne.");
				}
			}
		}
	}
	return 1;
}

stock DestruirCiervo(m)
{
	DestroyObject(NumeroCiervosInfo[m][Id_Ciervos]); //destruye el objeto
	return 1;
}

stock CrearCiervo(m)
{
	new Float: PosCiervoZ;
	new ayudaX = MaxX_Caza-MinX_Caza;
	new ayudaY = MaxY_Caza-MinY_Caza;
	ayudaX= (ayudaX)*-1;

	//new infor[100];
	new ayudanteX = random(ayudaX);
	new ayudanteY = random(ayudaY);

	//format(infor, sizeof(infor), " Diferencia X:%d Diferencia Y:%d, RandomX: %d RandomY:%d ", ayudaX, ayudaY, ayudanteX, ayudanteY);
	//SendClientMessageToAll(Rojo, infor);


	new Float: posciervosX = MinX_Caza-ayudanteX;
	new Float: posciervosY = MinY_Caza+ayudanteY;

	NumeroCiervosInfo[m][Ciervos_PosX] = posciervosX;
	NumeroCiervosInfo[m][Ciervos_PosY] = posciervosY;

	//MapAndreas_FindZ_For2DCoord(posciervosX, posciervosY, PosCiervoZ);
	GetPointZPos(posciervosX, posciervosY, PosCiervoZ);
	PosCiervoZ+=0.25;
	NumeroCiervosInfo[m][Ciervos_PosZ] = PosCiervoZ;

	NumeroCiervosInfo[m][Id_Ciervos] = CreateObject(19315, posciervosX, posciervosY, PosCiervoZ, 0.0, 0.0,0.0); //ciervo- 19315

	NumeroCiervosInfo[m][Ciervos_RotX]=0.0;
	NumeroCiervosInfo[m][Ciervos_Moviendose] = 0;
	NumeroCiervosInfo[m][Ciervos_Muertos]=0;
	NumeroCiervosInfo[m][Ciervos_Minuto_Respawn] = -1;

	return 1;
}

stock PunteriaMatarCiervo(Float:Distancia, Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{

	new Float: dis;

	dis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));

	if(dis < Distancia)
	return true;
	else
	return false;
}

stock IsPlayerInGangZoneCazadores(playerid)
{
	new Float:PosX, Float:PosY, Float:PosZ;

    GetPlayerPos(playerid, PosX, PosY, PosZ);

	//		 <				  >
	if((MinX_Caza > PosX) && (MaxX_Caza < PosX))    //OJO esto solo funciona si detecta que esta en el 2º cuadrante del eje de coordenadas
	{
		if((MinY_Caza < PosY) && (MaxY_Caza > PosY))  //esta bien
		return true;
		else
		return false;
	}
	else
	return false;

}

stock SiCiervoEstaAreaCaza(Float:X,Float:Y) //Ojo esto está asi porque es el 2ºcuadrante
{
	if(X > MaxX_Caza && X < MinX_Caza && Y < MaxY_Caza && Y > MinY_Caza) return true;
       /* else if(X>-689.845947&&X<197.757766&&Y<138.800338&&Y>-258.169403) return 1;
        else if(X>567.683715&&X<1504.512084&&Y<376.543304&&Y>-37.922641) return 1;
        else if(X>1787.830322&&X<2753.750976&&Y<-310.041870&&Y>-954.100341) return 1;
        else if(X>-2527.260498&&X<-1637.774780&&Y<-1732.938232&&Y>-2647.622802) return 1;
        */
	else return false;
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}


Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

	new Float:DX, Float:DY;
	new Float:angle;

	DX = floatabs(floatsub(x2,X));
	DY = floatabs(floatsub(y2,Y));

	if (DY == 0.0 || DX == 0.0) {
		if(DY == 0 && DX > 0) angle = 0.0;
		else if(DY == 0 && DX < 0) angle = 180.0;
		else if(DY > 0 && DX == 0) angle = 90.0;
		else if(DY < 0 && DX == 0) angle = 270.0;
		else if(DY == 0 && DX == 0) angle = 0.0;
	}
	else {
		angle = atan(DX/DY);

		if(X > x2 && Y <= y2) angle += 90.0;
		else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
		else if(X < x2 && Y >= y2) angle -= 90.0;
		else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
	}

	return floatadd(angle, 90.0);
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

	new Float:vertical, Float:horizontal;

	switch (GetPlayerWeapon(playerid)) {
		case 34,35,36: {
			if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
			return false;
		}
		case 30,31: {vertical = 4.0; horizontal = -1.6;}
		case 33: {vertical = 2.7; horizontal = -1.0;}
		default: {vertical = 6.0; horizontal = -2.2;}
	}

	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
	return false;
}


forward Float: GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0);

stock Float: GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0) {
        if(!((-3000.0 < fX < 3000.0) && (-3000.0 < fY < 3000.0))) {
                return 0.0;
        }
        static
                File: s_hMap
        ;
        if(!s_hMap) {
                s_hMap = fopen("SAfull.hmap", io_read);

                if(!s_hMap) {
                        return 0.0;
                }
        }
        new
                afZ[1]
        ;
        fseek(s_hMap, ((6000 * (-floatround(fY, floatround_tozero) + 3000) + (floatround(fX, floatround_tozero) + 3000)) << 1));
        fblockread(s_hMap, afZ);

        return (fZ = ((afZ[0] >>> 16) * 0.01));
}

stock CrearCarniceria(id, Float:x, Float:y, Float:z)
{
	CarniceriaInfo[id][carneid] = id; CarniceriaInfo[id][carnex] = x; CarniceriaInfo[id][carney] = y; CarniceriaInfo[id][carnez] = z;
    CreateDynamicPickup(1239, 1, x, y, z, 0, 0);
	CreateDynamic3DTextLabel("{00FFFF}Carnicería{FFFFFF}\nUsa {00FFFF}/vender carne{FFFFFF} para venderla.", VERDE, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
}

stock CosasPesca(i)
{
	new texto[30];
	if(i == 0) texto = "una caballa";
	else if(i == 1) texto = "una lubina";
	else if(i == 2) texto = "una dorada";
	else if(i == 3) texto = "un pez gallo";
	else if(i == 4) texto = "un lenguado";
	else if(i == 5) texto = "una sardina";
	else if(i == 6) texto = "una trucha";
	else if(i == 7) texto = "un rodaballo";
	else if(i == 8) texto = "un mero";
	else if(i == 9) texto = "un atún";
	else if(i == 10) texto = "un bacalao";
	else if(i == 11) texto = "una cartera";
	else if(i == 12) texto = "un saco vacío";
	else if(i == 13) texto = "una breca";
	return texto;
}

stock ComprobarPeces(i)
{
	for(new p=0; p < 5; p++)
	{
	    if(HaPescado[i][p] == 0) return p;
	}
	return 0;
}

forward EstaPescando(playerid, lugar);
public EstaPescando(playerid, lugar)
{
	new pesco = random(1), string[128];
	if(pesco == 0)
	{
		new pescado = random(13);
		new peso;
		if(pescado == 11)
		{
		    new dinero = random(250) + 1;
		    format(string, sizeof(string), "* Has conseguido %s. En su interior habían %d dólares.", CosasPesca(pescado), dinero);
		    JugadorInfo[playerid][jDinero] += dinero;
		}
		else if(pescado == 12)
		{
		    format(string, sizeof(string), "* Has conseguido %s.", CosasPesca(pescado));
		}
		else
		{
		    if(lugar == 4)
		    {
		        peso = random(100) + JugadorInfo[playerid][jHabilidad][4];
		    }
		    else
		    {
	 			peso = random(30) + JugadorInfo[playerid][jHabilidad][4];
			}
			format(string, sizeof(string), "* Has conseguido %s. Su peso aproximado es de %d kilos.", CosasPesca(pescado), peso);
		}

		if(pescado == 12)
		{
		    JugadorInfo[playerid][jHabilidad][4] --;
		    SendClientMessage(playerid, AMARILLO, "* Has perdido un punto de habilidad.");
		}
		else
		{
			new suerte = random(3);
			if(suerte == 1) { JugadorInfo[playerid][jHabilidad][4] ++; SendClientMessage(playerid, AMARILLO, "* Has ganado un punto de habilidad."); }
			else if(suerte == 2) { JugadorInfo[playerid][jHabilidad][4] ++; SendClientMessage(playerid, AMARILLO, "* Has ganado dos puntos de habilidad."); }
		}
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
		OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		HaPescado[playerid][ComprobarPeces(playerid)] = pescado;
		CantidadHaPescado[playerid][ComprobarPeces(playerid)] = peso;
		SendClientMessage(playerid, CELESTE, string);
		if(lugar == 4)
		{
   			format(string, sizeof(string), "* %s recogió su caña y sacó %s.", NombreJugador(playerid), CosasPesca(pescado));
		}
		else
		{
		    format(string, sizeof(string), "* %s recogió la red y sacó %s.", NombreJugador(playerid), CosasPesca(pescado));
		}
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
		ClearAnimations(playerid);
		OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	}
	else
	{
	    format(string, sizeof(string), "* %s recogió su caña, pero no había ningún pescado.", NombreJugador(playerid));
		ProxDetector(10, playerid, string, ROSA, ROSA, ROSA, ROSA, ROSA);
	}
	return 1;
}

forward ComprobarActualizacion();
public ComprobarActualizacion()
{
    new sql[128], row[512], arrCoords[7][64], registros;
	format(sql, sizeof(sql), "SELECT NULL FROM actualizaciones");
	mysql_query(database, sql, true);
	registros = cache_get_row_count(database);

	while(registros > 0)
	{
	    format(sql, sizeof(sql), "SELECT * FROM actualizaciones");
		mysql_query(database, sql, true);
 		cache_get_row(registros, 0, row, database);
		split(row, arrCoords, '|');
		switch (strval(arrCoords[1]))
		{
  			case 1: //Editar facción
		   	{
		        CargarFaccion(strval(arrCoords[2]));
		    }
		    case 2: //Agregar nuevo miembro a la faccion
		    {
				ActualizarFaccionJugador(1, strval(arrCoords[2]), arrCoords[3], strval(arrCoords[4]), strval(arrCoords[5]), strval(arrCoords[6]));
		    }
		    case 3: //Editar miembro de la facción
		    {
				ActualizarFaccionJugador(2, strval(arrCoords[2]), arrCoords[3], strval(arrCoords[4]), strval(arrCoords[5]), strval(arrCoords[6]));
		    }
		    case 4: //Expulsar miembro de la facción
		    {
				ActualizarFaccionJugador(3, strval(arrCoords[2]), arrCoords[3], 0, 0, strval(arrCoords[4]));
		    }
		}
		//Eliminamos registro de la tabla actualizaciones
		format(sql, 128, "DELETE FROM actualizaciones WHERE id_actualizar = %d", strval(arrCoords[0]));
		mysql_query(database, sql, false);
		registros--;
	}
	return 1;
}

CargarFaccion(id_faccion)
{
    new sql[80], row[512], arrCoords[19][64], idx = -1, string[512];

 	//Buscamos su idx
 	for(new i = 0; i < TotalFacciones; i++)
 	{
  		if(FaccionInfo[i][fID] == id_faccion) { idx = i; continue; }
 	}
 	//Si el jugador se desconectó
 	if(idx == -1) return 1;

	format(sql, sizeof(sql), "SELECT * FROM facciones WHERE id = %d",id_faccion);
 	mysql_query(database, sql, true);
 	cache_get_row(0, 0, row, database);
	split(row, arrCoords, '|');
	FaccionInfo[idx][fID] = id_faccion;
	format(FaccionInfo[idx][fNombre], 50, "%s", arrCoords[1]);
	format(FaccionInfo[idx][fRango1], 50, "%s", arrCoords[2]);
	format(FaccionInfo[idx][fRango2], 50, "%s", arrCoords[3]);
	format(FaccionInfo[idx][fRango3], 50, "%s", arrCoords[4]);
	format(FaccionInfo[idx][fRango4], 50, "%s", arrCoords[5]);
	format(FaccionInfo[idx][fRango5], 50, "%s", arrCoords[6]);
	format(FaccionInfo[idx][fRango6], 50, "%s", arrCoords[7]);
	format(FaccionInfo[idx][fRango7], 50, "%s", arrCoords[8]);
	format(FaccionInfo[idx][fRango8], 50, "%s", arrCoords[9]);
	FaccionInfo[idx][fSueldo1] = strval(arrCoords[10]);
	FaccionInfo[idx][fSueldo2] = strval(arrCoords[11]);
	FaccionInfo[idx][fSueldo3] = strval(arrCoords[12]);
	FaccionInfo[idx][fSueldo4] = strval(arrCoords[13]);
	FaccionInfo[idx][fSueldo5] = strval(arrCoords[14]);
	FaccionInfo[idx][fSueldo6] = strval(arrCoords[15]);
	FaccionInfo[idx][fSueldo7] = strval(arrCoords[16]);
	FaccionInfo[idx][fSueldo8] = strval(arrCoords[17]);
	format(FaccionInfo[idx][fLider], MAX_PLAYER_NAME, "%s", arrCoords[18]);

 	format(string, sizeof(string), "Administración: Se han actualizado los datos de la facción %s mediante el PCU.", FaccionInfo[idx][fNombre]);
	ABroadCast(ROJO, string, 1);
 	return 1;
}

ActualizarFaccionJugador(tipo, id_jugador, lider[], faccion, rango, admin)
{
	new string[256], idx = -1, fac;
	//Buscamos la id del jugador
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
    	if(JugadorInfo[i][jSQLID] == id_jugador) { idx = i; continue; }
 	}
 	//Si el jugador se desconectó
 	if(idx == -1) return 1;

 	fac = JugadorInfo[idx][jMiembro];
    GetValues(idx, "Faccion");
    switch(tipo)
    {
        case 1: //Agregar nuevo miembro
        {
            if(admin == 1) format(string, sizeof(string), "* El administrador %s te ha introducido en una facción. Ahora trabajas para %s con el rango de %s.", lider, FaccionInfo[faccion][fNombre], ObtenerRango(faccion, rango));
            else format(string, sizeof(string), "* %s te ha dado un contrato laboral. Ahora trabajas para %s con el rango de %s.", lider, FaccionInfo[faccion][fNombre], ObtenerRango(faccion, rango));
			SendClientMessage(idx, CELESTE, string);
        }
        case 2: //Editar miembro
        {
        	if(admin == 1) format(string, sizeof(string), "* El administrador %s ha editado tu rango. Tu nuevo rango es %s.", lider, ObtenerRango(faccion, rango));
            else format(string, sizeof(string), "* %s te ha dado el rango de %s.", lider, ObtenerRango(faccion, rango));
			SendClientMessage(idx, CELESTE, string);
        }
        case 3: //Eliminar miembro
        {
            if(admin == 1) format(string, sizeof(string), "* El administrador %s ha expulsado de la facción %s.", lider, FaccionInfo[fac][fNombre]);
            else format(string, sizeof(string), "* %s te ha expulsado de la facción %s.", lider, FaccionInfo[fac][fNombre]);
			SendClientMessage(idx, CELESTE, string);
        }
    }
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(JugadorInfo[playerid][jAdmin] == 0)
	{
	    new string[256];
		format(string, sizeof(string), "Administración: %s es posible que se intente teleportar en el mapa, usa '/spect %d' para revisarlo.", NombreJugador(playerid), playerid);
		ABroadCast(ROJO, string, 1);
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i = 0; i < TotalRadios; i++)
	{
	    if(areaid == RadioInfo[i][radarea])
	    {
	        ColocarEmisora(playerid, RadioInfo[i][rademisora], RadioInfo[i][radx], RadioInfo[i][rady], RadioInfo[i][radz]);
	        return 1;
	    }
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    for(new i = 0; i < TotalRadios; i++)
	{
	    if(areaid == RadioInfo[i][radarea])
	    {
	        StopAudioStreamForPlayer(playerid);
	        return 1;
	    }
	}
	return 1;
}

stock ComprobarCuentasBancarias(playerid)
{
    for(new i = 0; i < MAX_CBANCARIAS; i++)
    {
        if(JugadorInfo[playerid][jCuentasBancarias][i] != -1) return 1;
    }
	return 0;
}


stock CrearCuentaBancaria(playerid, descripcion[], pin)
{
	new numerocuenta, libre = 0, primera = 0;
	while(libre == 0)
	{
		new query[256];
 		numerocuenta = 1100000000 + random(99999999);
 		format(query, sizeof(query), "SELECT NULL FROM cuentasbancarias WHERE numerocuenta = '%d'", numerocuenta);
 		mysql_query(database, query, true);
		if(cache_get_row_count(database) > 0) { } else { libre = 1; }
	}
	new sql[256], fecha[50], string[256];
	new dia, mes, ano, hora, minuto, segundo;
	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);
	format(fecha, 50, "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);

	format(sql, sizeof(sql), "INSERT INTO cuentasbancarias (numerocuenta,descripcion,PIN,propietario,creacion) VALUES ('%d','%s','%d','%d','%s')", numerocuenta,descripcion,pin,JugadorInfo[playerid][jSQLID],fecha);
	mysql_query(database, sql, false);
	if(JugadorInfo[playerid][jCuentasBancarias][0] == NOEXISTE) primera = 1;
	for(new i = 0; i < MAX_CBANCARIAS; i++)
	{
	    if(JugadorInfo[playerid][jCuentasBancarias][i] == NOEXISTE)
	    {
	        JugadorInfo[playerid][jCuentasBancarias][i] = numerocuenta;
	        break;
	 	}
	}
	format(string, sizeof(string), "* Has abierto una nueva cuenta bancaria por 50 dólares, el numero de cuenta es %d.", numerocuenta);
	SendClientMessage(playerid, NARANJA, string);
	if(primera == 1)
	{
	    SendClientMessage(playerid, BLANCO, "* Se ha establecido la cuenta como cuenta principal. Aquí se ingresará tu nómina y se te pasarán tus recibos.");
	    JugadorInfo[playerid][jCuentaPrincipal] = JugadorInfo[playerid][jCuentasBancarias][0];
	    SaveValue(playerid, "CuentaPrincipal", JugadorInfo[playerid][jCuentaPrincipal]);
	}
	JugadorInfo[playerid][jDinero] -= 50;
	SaveValues(playerid, "CuentasBancarias");
	return 1;
}

/*stock InsertarMovimiento(numerocuenta, mensaje[])
{
    new sql[256], fecha[256], dia, mes, ano, hora, minuto, segundo;
	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);
	format(fecha, 50, "%02d/%02d/%d - %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);

	format(sql, sizeof(sql), "INSERT INTO movimientosbancarios (numerocuenta,fecha,mensaje) VALUES ('%d','%s','%s')", numerocuenta,fecha,mensaje);
	mysql_query(sql);
	return 1;
}
*/
stock ReorganizarCuentasBancarias(playerid)
{
	new i = 0;
	while(i < MAX_CBANCARIAS)
	{
		if (JugadorInfo[playerid][jCuentasBancarias][i] == NOEXISTE)
		{
			JugadorInfo[playerid][jCuentasBancarias][i] = JugadorInfo[playerid][jCuentasBancarias][i+1];
			JugadorInfo[playerid][jCuentasBancarias][i+1] = NOEXISTE;
		}
		i++;
	}
	SaveValues(playerid, "CuentasBancarias");
	return 1;
}

catalogovehiculos(playerid, concesionario)
{
	// Si en el ciclo de elegir vehículo se sobrepasan el valor máximo o mínimo de ID de vehiculo, evitar error de ID
	if (EnCatalogoVeh[playerid] < MenorPosArray(concesionario)) EnCatalogoVeh[playerid] = MayorPosArray(concesionario);
	else if (EnCatalogoVeh[playerid] > MayorPosArray(concesionario)) EnCatalogoVeh[playerid] = MenorPosArray(concesionario);
	if (VehCatalogo[playerid] != NOEXISTE) DestroyVehicle(EnCatalogoVeh[playerid]);
	if(concesionario == 7)
	{
		VehCatalogo[playerid] = CreateVehicle(datacar[EnCatalogoVeh[playerid]][dcIDModel], 733.2559,-1506.8319,-0.0312,0.3772,-1,-1,3600000);
	}
	else if(concesionario == 6)
	{
		VehCatalogo[playerid] = CreateVehicle(datacar[EnCatalogoVeh[playerid]][dcIDModel], -2229.1060,2326.0977,8.2523,359.4237,-1,-1,3600000);
	}
	else
	{
		VehCatalogo[playerid] = CreateVehicle(datacar[EnCatalogoVeh[playerid]][dcIDModel], -1951.1927,264.8029,40.7625,40.3529,-1,-1,3600000);
	}
	SetVehicleVirtualWorld(VehCatalogo[playerid], playerid + 1);
 	TextDrawShowForPlayer(playerid, Nombre[EnCatalogoVeh[playerid]]);
  	TextDrawShowForPlayer(playerid, Costo[EnCatalogoVeh[playerid]]);
   	TextDrawShowForPlayer(playerid, Id[EnCatalogoVeh[playerid]]);
	return 1;
}

MayorPosArray(concesionario)
{
	new mayorpos;
	for(new i = 0; i < MAX_CAR_DATA; i++)
	{
		if(datacar[i][dcConcesionario] == concesionario)
		{
			mayorpos = i;
		}
	}
	return mayorpos;
}

MenorPosArray(concesionario)
{
	new menorpos;
	for(new i = 0; i < MAX_CAR_DATA; i++)
	{
		if(datacar[i][dcConcesionario] == concesionario)
		{
			menorpos = i;
			break;
		}
	}
	return menorpos;
}

GetPlayerConcesionario(playerid)
{
	new Concesionario;
	for(new i = 0; i < 7; i ++)
	{
		if(PlayerToPoint(playerid, 10, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			Concesionario = i+1;
		}
	}
	return Concesionario;
}

GetPlayerConcesionarioEx(playerid)
{
	for(new i = 0; i < 7; i ++)
	{
		if(PlayerToPoint(playerid, 10, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			return i;
		}
	}
	return NOEXISTE;
}

forward ResetearTimerConce();
public ResetearTimerConce()
{
	return TimerConce = 0;
}

stock ColocarEmisora(j, idradio, Float:x, Float:y, Float:z)
{
	switch(idradio)
	{
	    case 0: PlayAudioStreamForPlayer(j, "http://69.4.238.127/listen.pls", x, y, z, 20.0, 1);
	    case 1: PlayAudioStreamForPlayer(j, "http://uplink.duplexfx.com:8000/listen.pls", x, y, z, 20.0, 1);
	    case 2: PlayAudioStreamForPlayer(j, "http://uplink.duplexfx.com:8000/listen.pls", x, y, z, 20.0, 1);
	    case 3: PlayAudioStreamForPlayer(j, "http://uplink.duplexfx.com:8012/listen.pls", x, y, z, 20.0, 1);
	    case 4: PlayAudioStreamForPlayer(j, "http://bluelayershoutcast.com:8036/listen.pls", x, y, z, 20.0, 1);
	    case 5: PlayAudioStreamForPlayer(j, "http://uplink.duplexfx.com:8034/listen.pls", x, y, z, 20.0, 1);
	    case 6: PlayAudioStreamForPlayer(j, "http://listen.di.fm/public3/eurodance.pls", x, y, z, 20.0, 1);
	    case 7: PlayAudioStreamForPlayer(j, "http://91.121.18.185:5200/listen.pls", x, y, z, 20.0, 1);
	    case 8: PlayAudioStreamForPlayer(j, "http://s5.voscast.com:7938/listen.pls", x, y, z, 20.0, 1);
	    case 9: PlayAudioStreamForPlayer(j, "http://funky01.funkyexpress.com.br:8024/listen.pls", x, y, z, 20.0, 1);
	    case 10: PlayAudioStreamForPlayer(j, "http://shoutcast4.hardcoreradio.nl/listen.pls", x, y, z, 20.0, 1);
	    case 11: PlayAudioStreamForPlayer(j, "http://listen.di.fm/public3/hardstyle.pls", x, y, z, 20.0, 1);
	    case 12: PlayAudioStreamForPlayer(j, "http://listen.di.fm/public3/house.pls", x, y, z, 20.0, 1);
	    case 13: PlayAudioStreamForPlayer(j, "http://sc1.abacast.com:8240/listen.pls", x, y, z, 20.0, 1);
	    case 14: PlayAudioStreamForPlayer(j, "http://88.191.73.231:5010/listen.pls", x, y, z, 20.0, 1);
	    case 15: PlayAudioStreamForPlayer(j, "http://50.7.242.114:7582/listen.pls", x, y, z, 20.0, 1);
	    case 16: PlayAudioStreamForPlayer(j, "http://stream2.blackbeats.fm/listen.pls", x, y, z, 20.0, 1);
	    case 17: PlayAudioStreamForPlayer(j, "http://80.94.69.106:6694/listen.pls", x, y, z, 20.0, 1);
	    case 18: PlayAudioStreamForPlayer(j, "http://69.175.94.98:8138/listen.pls", x, y, z, 20.0, 1);
	    case 19: PlayAudioStreamForPlayer(j, "http://bluedog.wavestreamer.com:2260/listen.pls", x, y, z, 20.0, 1);
	    case 20: PlayAudioStreamForPlayer(j, "http://stream01.noisefm.pl:8000/listen.pls", x, y, z, 20.0, 1);
	    case 21: PlayAudioStreamForPlayer(j, "http://radiolatina.info:7218/listen.pls", x, y, z, 20.0, 1);
	    case 22: PlayAudioStreamForPlayer(j, "http://uplink.duplexfx.com:8058/listen.pls", x, y, z, 20.0, 1);
	    case 23: PlayAudioStreamForPlayer(j, "http://88.191.229.8:8050/listen.pls", x, y, z, 20.0, 1);
	    case 24: PlayAudioStreamForPlayer(j, "http://uk1.internet-radio.com:15862/listen.pls", x, y, z, 20.0, 1);
	}
}

stock EstaEnGuia(playerid)
{
	if(PlayerToPoint(playerid, 10, 403.5463,-1786.1631,5.7422) || PlayerToPoint(playerid, 10, 1455.0762,-1743.6786,13.5469) || PlayerToPoint(playerid, 10, 1423.1974,-1670.1842,13.5469) || PlayerToPoint(playerid, 10, 1809.9399,-1866.5894,13.5469) || PlayerToPoint(playerid, 10, 1590.2094,-2334.5635,13.5469) || PlayerToPoint(playerid, 10, 1997.3099,-1450.6107,13.5590)) return 1;
 	else if(PlayerToPoint(playerid, 10, 1185.9281,-1290.4716,13.5541) ||PlayerToPoint(playerid, 10, 1108.6067,-1411.9724,13.5469) ||PlayerToPoint(playerid, 10, 605.5453,-1231.9332,18.2459)) return 1;
  	else return 0;
}

stock CrearGuia(Float:x, Float:y, Float:z)
{
    CreateDynamic3DTextLabel("{00FFFF}Guía{FFFFFF}\nUsa {00FFFF}/guia{FFFFFF} para ver la información.", 0xFFFFFFFF, x, y, z, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0); // Venta de vehículos
    CreateDynamicPickup(1444, 1, x, y, z, -1, -1, -1, 100.0);
    return 1;
}

forward RefreshPos(playerid);
public RefreshPos(playerid)
{
//	if(IsValidNPC(playerid)) return 1;
	GetPlayerPos(playerid, JugadorInfo[playerid][jPos_X], JugadorInfo[playerid][jPos_Y], JugadorInfo[playerid][jPos_Z]);
	GetPlayerFacingAngle(playerid, JugadorInfo[playerid][jPos_A]);
	JugadorInfo[playerid][jInt] = GetPlayerInterior(playerid);
	JugadorInfo[playerid][jVw] = GetPlayerVirtualWorld(playerid);
	GetPlayerArmour(playerid, JugadorInfo[playerid][jChaleco]);
	return 1;
}

forward SavePos(playerid);
public SavePos(playerid)
{
	new sql[1024];
//	if(IsValidNPC(playerid)) return 0;
	if(JugadorInfo[playerid][jJugando] == 1)
	{
		format(sql, 1024, "UPDATE usuarios SET Posiciones = '%f,%f,%f,%f,%d,%d' WHERE id=%d",
			JugadorInfo[playerid][jPos_X],
			JugadorInfo[playerid][jPos_Y],
			JugadorInfo[playerid][jPos_Z],
			JugadorInfo[playerid][jPos_A],
			JugadorInfo[playerid][jInt],
			JugadorInfo[playerid][jVw],
			JugadorInfo[playerid][jSQLID]);
		mysql_query(database, sql, false);
	}
	return 0;
}

forward MuteDudaUpdate();
public MuteDudaUpdate()
{
    for(new i ; i < MAX_PLAYERS ; i++)
    {
        if(Muteduda[i] != 0)
        {
            Muteduda[i]--;
        }
        if(EnvioDuda[i] != 0)
        {
            EnvioDuda[i]--;
        }
    }
}

stock CargarCamion(playerid)
{
	TogglePlayerControllable(playerid, 0);
	Camionero[playerid] = 1;
 	GameTextForPlayer(playerid, "~w~~u~ ~g~Cargando camion ~w~~u~",5000, 3);
	SetTimerEx("Cargar", 5000, false, "i", playerid);
	return 1;
}

forward Descargar(playerid);
public Descargar(playerid)
{
    new coche = GetPlayerVehicleID(playerid);
 	TogglePlayerControllable(playerid,1);
 	SendClientMessage(playerid, BLANCO, "{33CCFF}Bien hecho, {FFFFFF}ahora lleva el camión a su lugar para recibir la paga.");
 	if(AutoInfo[coche][aFaccionID] == 114)
	{
 		SetPlayerCheckpoint(playerid, AutoInfo[coche][ax], AutoInfo[coche][ay], AutoInfo[coche][az], 5);
 		Camionero[playerid] = 2;
	}
	return 1;
}

forward Coma(playerid);
public Coma(playerid)
{
	SetPlayerPos(playerid, 1149.6624,-1330.8489,19.3687);
	SetPlayerCameraPos(playerid, 1201.52, -1294.52, 26.23);
	SetPlayerCameraLookAt(playerid, 1197.50, -1298.69, 24.66);
	SetPlayerInterior(playerid,0);
	TimerComa[playerid] = GameTextForPlayer(playerid, "~g~~h~~h~~h~Ests en coma por 15 segundos.",15000, 3);
	TogglePlayerControllable(playerid, false);
	SetPlayerHealthEx(playerid, 99);
	SetPlayerVirtualWorld(playerid, 2);
	ClearAnimations(playerid);
	LoopingAnim(playerid, "CRACK", "crckdeth1", 4.1, 0, 1, 1, 1, 1);
	return 1;
}

forward Cargar(playerid);
public Cargar(playerid)
{
 	TogglePlayerControllable(playerid,1);
 	Camionero[playerid] = 1;
 	if(CargaCamionero == 1){
		SendClientMessage(playerid, BLANCO, "[Radio de la empresa] Lleva los {33CCFF}metales{FFFFFF} a la zona de {33CCFF}Montgomery{FFFFFF}, allí te esperarán.");
		return 1;
	}
    if(CargaCamionero == 2){
		SendClientMessage(playerid, BLANCO, "[Radio de la empresa] Lleva la {33CCFF}ropa{FFFFFF} a la zona de {33CCFF}Blueberry{FFFFFF}, allí te esperarán.");
		return 1;
	}
	if(CargaCamionero == 3){
		SendClientMessage(playerid, BLANCO, "[Radio de la empresa] Lleva el {33CCFF}pollo{FFFFFF} a la zona de {33CCFF}East Los Santos{FFFFFF}, allí te esperarán.");
		return 1;
	}
	if(CargaCamionero == 4){
		SendClientMessage(playerid, BLANCO, "[Radio de la empresa] Lleva el {33CCFF}periódico{FFFFFF} a la zona de {33CCFF}Palomino Creek{FFFFFF}, allí te esperarán.");
		return 1;
	}
	return 1;
}

forward OnPlayerPause(playerid);
public OnPlayerPause(playerid)
{
    EstaAFK[playerid] = 1;
	return 1;
}

forward OnPlayerUnpause(playerid);
public OnPlayerUnpause(playerid)
{
    EstaAFK[playerid] = 0;
	return 1;
}
